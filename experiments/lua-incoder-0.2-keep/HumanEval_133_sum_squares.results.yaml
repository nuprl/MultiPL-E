language: lua
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2h4o4ja.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv2h4o4ja.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum + 0.5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdvw5eyj.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmppdvw5eyj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bu6yyqh.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmp8bu6yyqh.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + lst[i]*lst[i]\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu68bqjok.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpu68bqjok.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2h4o4ja.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv2h4o4ja.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp784p80et.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp784p80et.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + lst[i]*lst[i]\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2h4o4ja.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpv2h4o4ja.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp784p80et.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp784p80et.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp784p80et.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp784p80et.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        sum = sum + math.pow(lst[i],\
    \ 2)\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtildbnq.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgtildbnq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum + 0.5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sum_squares\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdvw5eyj.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmppdvw5eyj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + math.pow(lst[i],2)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqxjb_49.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpiqxjb_49.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \    local sum = 0\n    for i=1,#lst do\n        sum = sum + lst[i]*lst[i]\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu68bqjok.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpu68bqjok.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800009
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.floor(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m8ashhl.lua:24:\
    \ expected: 29, actual: 19\nstack traceback:\n\t/tmp/tmp7m8ashhl.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp4591d9.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpgp4591d9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return math.ceil(sum)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57ifwndv.lua:24:\
    \ expected: 29, actual: 20\nstack traceback:\n\t/tmp/tmp57ifwndv.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i], 2)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}),\
    \ 14)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl05e7qwm.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpl05e7qwm.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a list of numbers.\n-- You need to return the sum of\
    \ squared numbers in the given list,\n-- round each element in the list to the\
    \ upper int(Ceiling) first.\n-- Examples:\n-- For lst = [1,2,3] the output should\
    \ be 14\n-- For lst = [1,4,9] the output should be 98\n-- For lst = [1,3,5,7]\
    \ the output should be 84\n-- For lst = [1.4,4.2,0] the output should be 29\n\
    -- For lst = [-2.4,1,1] the output should be 6\nlocal function sum_squares(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sum_squares\n    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
    \ 3.0, 5.0, 7.0}), 84)\n    lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n\
    \    lu.assertEquals(candidate({-2.4, 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0,\
    \ 1.0, 15.0, 2.0}), 10230)\n    lu.assertEquals(candidate({10000.0, 10000.0}),\
    \ 200000000)\n    lu.assertEquals(candidate({-1.4, 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4,\
    \ 17.9, 18.9, 19.9}), 1086)\n    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
    \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7gmh5rx.lua:24:\
    \ expected: 29, actual: 19.6\nstack traceback:\n\t/tmp/tmpf7gmh5rx.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
