name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- \"21\"\n-- >>> circular_shift(12,\
  \ 2)\n-- \"12\"\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(x))\n  local result = \"\"\n\
    \  local carry = 0\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    local digit = math.floor(digit + carry)\n \
    \   carry = digit - digit\n    digit = digit + 10\n    result = result .. digit\n\
    \    if digit < 10 then\n      result = result .. \"0\"\n    end\n  end\n  if\
    \ shift > digits then\n    local digit = math.floor((x / 10) * 10)\n    local\
    \ digit = math.floor(digit + carry)\n    carry = digit - digit\n    digit = digit\
    \ + 10\n    result = result .. digit\n    if digit < 10 then\n      result = result\
    \ .. \"0\"\n    end\n  end\n  if shift > 0 then\n    result = result .. carry\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = tostring(shift)\n  local shift_digits_length =\
    \ #shift_digits\n  local shift_digits_reversed = shift_digits:reverse()\n  while\
    \ digits ~= shift_digits_reversed do\n    local digit = digits:sub(1, 1)\n   \
    \ digits = digits:sub(2)\n    result = digit .. result\n  end\n  if shift_digits_length\
    \ == 0 then\n    return result\n  else\n    return circular_shift(result, shift_digits_length\
    \ - 1)\n  end\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local digits = math.floor(math.log10(digit))\n    if digits > shift then\n\
    \      result = result .. digit:reverse()\n    else\n      result = result ..\
    \ digit\n    end\n    x = math.floor(x / 10)\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local i =\
    \ math.max(0, digits - shift)\n  while i > 0 do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^i))\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n    x = math.floor(x * (10^i))\n    i = i - 1\n  end\n  if shift >\
    \ digits then\n    local digits = math.floor(math.log10(math.abs(x)))\n    result\
    \ = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result\
    \ = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local\
    \ digit = math.floor((x / 10^i) * 10^shift)\n    local digit2 = math.floor((x\
    \ / 10^(i + 1)) * 10^shift)\n    local digit3 = math.floor((x / 10^(i + 2)) *\
    \ 10^shift)\n    local digit4 = math.floor((x / 10^(i + 3)) * 10^shift)\n    local\
    \ digit5 = math.floor((x / 10^(i + 4)) * 10^shift)\n    local digit6 = math.floor((x\
    \ / 10^(i + 5)) * 10^shift)\n    local digit7 = math.floor((x / 10^(i + 6)) *\
    \ 10^shift)\n    local digit8 = math.floor((x / 10^(i + 7)) * 10^shift)\n    local\
    \ digit9 = math.floor((x / 10^(i + 8)) * 10^shift)\n    local digit10 = math.floor((x\
    \ / 10^(i + 9)) * 10^shift)\n    local digit11 = math.floor((x / 10^(i + 10))\
    \ * 10^shift)\n    local digit12 = math.floor((x / 10^(i + 11)) * 10^shift)\n\
    \    local digit13 = math.floor((x / 10^(i + 12)) * 10^shift)\n    local digit14\
    \ = math.floor((x / 10^(i + 13)) * 10^shift)\n    local digit15 = math.floor((x\
    \ / 10^(i + 14)) * 10^shift)\n    local digit16 = math.floor((x / 10^(i + 15))\
    \ * 10^shift)\n    local digit17 = math.floor((x / 10^(i + 16)) * 10^shift)\n\
    \    local digit18 = math.floor((x / 10^(i + 17)) * 10^shift)\n    local digit19\
    \ = math.floor((x / 10^(i + 18)) * 10^shift)\n    local digit20 = math.floor((x\
    \ / 10^(i + 19)) * 10^shift)\n    local digit21 = math.floor((x / 10^(i + 20))\
    \ * 10^shift)\n    local digit22 = math.floor((x / 10^(i + 21)) * 10^shift)\n\
    \    local digit23 = math.floor((x / 10^(i + 22)) * 10^shift)\n    local digit24\
    \ = math.floor((x / 10^(i + 23)) * 10^shift)\n    local digit25 = math.floor((x\
    \ / 10^(i + 24)) * 10", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    result = result .. digit\n    x = x - digit\n\
    \  end\n  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x * 100)\
    \ / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\", x,\
    \ result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shift_reversed = math.pow(10, digits_shift)\n  local digits_shift_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed)\n  local digits_shift_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n    result\
    \ = string.format(\"%d%s\", digit, result)\n    x = math.floor((x / 10) / 10)\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%d%s\", x, result)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  return string.format(\"%0*d\", shift,\
    \ digits)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = string.format(\"%s%s\", result, digit)\n  end\n\
    \  if digits > 0 then\n    result = string.format(\"%s%s\", result, string.rep(\"\
    0\", digits - 1))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digit = digit - math.floor(digit / 10) * 10\n    local\
    \ digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - ", "  local digits = math.floor(math.log10(x))\n  local\
    \ digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + digits\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) * 10 / math.pow(10, digit))\n\
    \    result = string.format(\"%s%s\", result, digit)\n  end\n  if digits > 0 then\n\
    \    result = string.format(\"%s%s\", result, circular_shift(math.floor(x), digits\
    \ - 1))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result =\
    \ result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. tostring(x)\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = \"\"\n  for i = 1, #digits do\n    local digit\
    \ = tonumber(digits[i])\n    if digit == 0 then\n      result = result .. \"0\"\
    \n    else\n      local digit = digit - shift + 1\n      if digit < 10 then\n\
    \        result = result .. tostring(digit)\n      else\n        result = result\
    \ .. tostring(digit - 10)\n      end\n    end\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n  \
    \  result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. \"0\"\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = digits[1]\n  for i = 2, #digits do\n    local\
    \ digit = tonumber(digits[i])\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    ", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.pow(10, -shift))\
    \ + digits)\n  local digits_shifted_reversed_string = \"\"\n  for i = digits_shifted_reversed,\
    \ 0, -1 do\n    digits_shifted_reversed_string = string.format(\"%0*d\", digits_shifted_reversed_string,\
    \ digits)\n  end\n  local digits_shifted_reversed_string_length = #digits_shifted_reversed_string\n\
    \  local digits_shifted_reversed_string_length = digits_shifted_reversed_string_length\
    \ - digits_shifted_reversed_string_length % shift\n  local digits_shifted_reversed_string_length\
    \ = digits_shifted_reversed_string_length + shift\n  local digits_shifted_reversed_string_reversed\
    \ = digits_shifted_reversed_string\n  for i = 1, digits_shifted_reversed_string_length\
    \ do\n    digits_shifted_reversed_string_reversed = string.format(\"%0*d\", digits_shifted_reversed_string_reversed,\
    \ digits)\n  end\n  local digits_shifted_reversed_string_reversed_length = #digits_shifted_reversed_string_reversed\n\
    \  local digits_shifted_reversed_string_reversed_length = digits_shifted_reversed_string_reversed_length\
    \ - digits_shifted_reversed_string_reversed_length % shift\n  local digits_shifted_reversed_string_reversed_length\
    \ = digits_shifted_reversed_string_reversed_length + shift\n  local digits_shifted_reversed_string_reversed_reversed\
    \ = digits_shifted_reversed_string_reversed\n  for i = 1, digits_shifted_reversed_string_reversed_length\
    \ do\n    digits_shifted_reversed_string_reversed_reversed = string.format(\"\
    %0*d\", digits_shifted_reversed_string_reversed_reversed, digits)\n  end\n  local\
    \ digits_shifted_reversed_string_reversed_reversed_length = #digits_shifted_reversed_string_reversed_reversed\n\
    \  local digits_shifted_reversed_string_reversed_reversed_length = digits_shifted_reversed_string_reversed_reversed_length\
    \ - digits_shifted_reversed_string_reversed_reversed_length % shift\n  local digits_shifted_reversed_string_reversed_reversed_length\
    \ = digits_shifted_reversed_string_reversed_reversed_length + shift\n  local digits_shif",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local shiftDigits\
    \ = math.floor(math.pow(10, shift)) - 1\n  for i = digits, 1, -1 do\n    local\
    \ digit = math.floor(x * 10 / shiftDigits) % 10\n    result = string.sub(result,\
    \ -i - 1, -i) + digit\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i))) % 10\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** i))\n    result = string.format(\"%s%d\", result, digit)\n  end\n \
    \ if digits > 0 then\n    result = string.format(\"%s%d\", result, x - math.floor(x))\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor(x * 10 / math.pow(10, digit))\n    result = result\
    \ .. digit\n    x = x - digit * math.pow(10, shift)\n  end\n  if x > 0 then\n\
    \    result = result .. math.floor(x / math.pow(10, shift))\n  end\n  return result\n\
    end", "  local digits = math.floor(x/math.pow(10, shift))\n  x = x - digits*math.pow(10,\
    \ shift)\n  local result = \"\"\n  for i = 1, shift do\n    result = result ..\
    \ digits[i]\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x / 10\n    result = result .. digit\n  end\n  if\
    \ digits > 0 then\n    result = result .. circular_shift(x, digits - 1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ - 1) / 3)\n    digits = digits - (digit * 3)\n    result = result .. string.format(\"\
    %c\", ((x % 10) * 3) + (digit == 0 and '0' or digit))\n  end\n  if digits > 0\
    \ then\n    result = result .. string.format(\"%c\", ((x % 10) * 3) + (digits\
    \ == 0 and '0' or digits))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) % 10)\n    result = string.sub(result,\
    \ 1, digit-1) + digit .. result\n    x = math.floor((x / 10) / 10)\n  end\n  if\
    \ x > 0 then\n    result = result .. string.sub(result, digits)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    local remainder = x % 10\n    x = remainder\n    result = result\
    \ .. tostring(digit) .. tostring(remainder)\n  end\n  if digits > 0 then\n   \
    \ result = result .. tostring(math.floor((x / 10) * 10))\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ shifts = math.pow(10, shift)\n  while digits > shift do\n    local digit = math.floor((digits\
    \ - shift) / shifts)\n    result = result .. tostring(digit) .. tostring(math.mod(x,\
    \ shifts)) .. \"0\"\n    x = math.floor(x/shifts)\n    digits = math.floor(math.log10(x))\n\
    \  end\n  if digits > shift then\n    result = result .. tostring(digits) .. tostring(math.mod(x,\
    \ shifts)) .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * math.pow(10, shift + i))\n    x = x / 10\n    result = result .. tostring(digit)\n\
    \  end\n  if shift > digits then\n    local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n    for i = 1, digits do\n      local digit = math.floor((x % 10) * math.pow(10,\
    \ shift + digits - i - 1))\n      x = x / 10\n      result = result .. tostring(digit)\n\
    \    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.pow(10, -shift))\
    \ + digits)\n  local result = \"\"\n  local i = digits\n  while i > 0 do\n   \
    \ local digit = x\n    digit = math.floor(digit / 10)\n    digit = digit - digits_shifted\
    \ + digits_shifted_reversed\n    result = result .. digit\n    i = i - 1\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + 1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10^i) * 10^shift)\n    if digit < 10 then\n      result = result .. digit\n\
    \    else\n      result = result .. \"0\" .. digit\n    end\n  end\n  if shift\
    \ > digits then\n    local digits = math.floor(math.log10(abs(x))) + 1\n    for\
    \ i = 1, digits do\n      local digit = math.floor((x / 10^i) * 10^shift)\n  \
    \    if digit < 10 then\n        result = result .. digit\n      else\n      \
    \  result = result .. \"0\" .. digit\n      end\n    end\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local remainder = x % 10\n    local carry = 0\n    if remainder > 0 then\n\
    \      carry = 1\n      remainder = math.floor(remainder / 10)\n    end\n    result\
    \ = result .. string.format(\"%d%d%d%d%d%d%d%d%d%d%d%d%d%d\",\n      digit, carry,\
    \ remainder, digit + carry + remainder)\n    x = x\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry\
    \ = 0\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    local digit = math.floor(digit + carry)\n    carry = digit\
    \ - digit\n    digit = digit - carry\n    digit = math.floor(digit / 10)\n   \
    \ result = result .. digit\n  end\n  if shift > digits then\n    shift = shift\
    \ - digits\n  end\n  result = result .. tostring(carry)\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result\
    \ = string.format(\"%0*d\", digits, digit) + result\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = string.format(\"%0*d\", digits, x) + result\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit\n  end\n \
    \ if x > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x /\
    \ 10) * 10 + digit)\n    result = result .. digit\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** digit))\n    result = result .. digit\n  end\n  if\
    \ digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x % 10)\
    \ * math.pow(10, digits - i - 1))\n    result = string.format(\"%c%s\", digit,\
    \ result)\n    x = x / 10\n  end\n  if x > 0 then\n    result = string.format(\"\
    %c%s\", x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit\n  end\n \
    \ if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    local digits = math.floor(math.log10(abs(digit))) + shift\n\
    \    if digits > 0 then\n      result = result .. tostring(digit)\n      x = x\
    \ - digit\n    end\n  end\n  if x > 0 then\n    result = result .. tostring(x)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local digits_shift = math.floor(math.log10(math.pow(10, shift + 1)))\n  local\
    \ digits_shift = digits_shift > digits + shift and digits_shift - digits + shift\
    \ or 0\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n  local\
    \ digits_shift = digits_shift + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift + digits + shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits + shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n", " \
    \ local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local i =\
    \ math.floor(digits / shift)\n  local remainder = digits % shift\n  while i ~=\
    \ 0 do\n    local digit = x\n    if i < 10 then\n      digit = digit * 10 + i\n\
    \    end\n    result = result .. digit\n    i = i - 1\n  end\n  if remainder >\
    \ 0 then\n    result = result .. remainder\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/math.pow(10, shift))\n  x = x - math.pow(10, shift) *\
    \ digits\n  local result = \"\"\n  for i = 1, shift do\n    result = result ..\
    \ digits[i]\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = math.floor(digits / 2)\n  while\
    \ i > 0 do\n    local digit = x\n    if i > 1 then\n      digit = digit * 10\n\
    \    end\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n   \
    \ digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ - 1) / 3)\n    digits = digits - (digit * 3)\n    result = result .. string.sub(tostring(x),\
    \ math.floor(digit), math.floor(digit) + 1)\n  end\n  if digits > 0 then\n   \
    \ result = result .. string.sub(tostring(x), math.floor(digits), math.floor(digits))\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10 + math.floor((x / 10 - math.floor((x / 10) * 10))\
    \ * 10 + math.floor((x / 10 - math.floor((x / 10) * 10 - math.floor((x / 10) *\
    \ 10)) * 10)))\n    local digit = math.floor(digit + math.floor((digit - math.floor(digit))\
    \ * 10) + math.floor((digit - math.floor(digit)) * 10 - math.floor((digit - math.floor(digit))\
    \ * 10) * 10) + math.floor((digit - math.floor(digit)) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10) * 10 - math.floor((digit\
    \ - math.floor(digit)) * 10) * 10 - math.floor((digit - math.floor(digit)) * 10)\
    \ * 10 - math.floor((digit - math.floor(digit)) * 10", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    local reversed = math.floor(digit / 10)\n    digit = digit\
    \ % 10\n    result = result .. reversed:tostring() .. digit:tostring()\n  end\n\
    \  if digits > 0 then\n    result = result:reverse()\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n   \
    \ result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10) % 10\n    result = string.format(\"\
    %d%s\", digit, result)\n    x = math.floor(x * 100) / 100\n  end\n  if digits\
    \ > 0 then\n    result = string.format(\"%d%s\", x, result)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x - (digit * 10)\n \
    \ end\n  if x > 0 then\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local digit2 = math.floor((x / 10) * 10)\n    local digit3 = math.floor((x\
    \ / 10) * 10)\n    local digit4 = math.floor((x / 10) * 10)\n    local digit5\
    \ = math.floor((x / 10) * 10)\n    local digit6 = math.floor((x / 10) * 10)\n\
    \    local digit7 = math.floor((x / 10) * 10)\n    local digit8 = math.floor((x\
    \ / 10) * 10)\n    local digit9 = math.floor((x / 10) * 10)\n    local digit10\
    \ = math.floor((x / 10) * 10)\n    local digit11 = math.floor((x / 10) * 10)\n\
    \    local digit12 = math.floor((x / 10) * 10)\n    local digit13 = math.floor((x\
    \ / 10) * 10)\n    local digit14 = math.floor((x / 10) * 10)\n    local digit15\
    \ = math.floor((x / 10) * 10)\n    local digit16 = math.floor((x / 10) * 10)\n\
    \    local digit17 = math.floor((x / 10) * 10)\n    local digit18 = math.floor((x\
    \ / 10) * 10)\n    local digit19 = math.floor((x / 10) * 10)\n    local digit20\
    \ = math.floor((x / 10) * 10)\n    local digit21 = math.floor((x / 10) * 10)\n\
    \    local digit22 = math.floor((x / 10) * 10)\n    local digit23 = math.floor((x\
    \ / 10) * 10)\n    local digit24 = math.floor((x / 10) * 10)\n    local digit25\
    \ = math.floor((x / 10) * 10)\n    local digit26 = math.floor((x / 10) * 10)\n\
    \    local digit27 = math.floor((x / 10) * 10)\n    local digit28 = math.floor((x\
    \ / 10) * 10)\n    local digit29 = math.floor((x / 10) * 10)\n    local digit30\
    \ = math.floor((x / 10) * 10)\n    local digit31 = math.floor((x / 10) * 10)\n\
    \    local digit32 = math.floor((x / 10) * 10)\n    local digit33 = math.floor((x\
    \ / 10) * 10)\n    local digit34 = math.floor((x / 10) * 10)\n    local digit35\
    \ = math.floor((x / 10) * 10)\n    local digit36 = math.floor((x / 10) * 10)\n\
    \    local digit37 = math.floor((x / 10) * 10)\n    local digit38 = math.floor((x\
    \ / 10) * 10)\n    local digit39 = ", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local i = math.floor(digits / shift)\n  local remainder\
    \ = digits % shift\n  if i == 0 then\n    local remainder_str = string.format(\"\
    %0*d\", shift, remainder)\n    result = string.format(\"%0*d\", shift, x)\n  \
    \  result = result .. remainder_str\n  else\n    local remainder_str = string.format(\"\
    %0*d\", shift, remainder)\n    result = string.format(\"%0*d\", shift, x)\n  \
    \  result = result .. remainder_str\n    result = result .. circular_shift(result,\
    \ shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    result = string.format(\"%s%d%s\", result, digit, (i == digits\
    \ and \"-\" or \"\"))\n    x = math.floor((x / 10) / 10)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10,\
    \ i))\n    result = result .. digit\n  end\n  if digits > 0 then\n    result =\
    \ circular_shift(result, digits - 1)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(math.abs(x))) + shift\n  local result = \"\"\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n   \
    \ result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x - math.floor(x)) * (10 ** i)) / (10\
    \ ** i)\n    if digit > 9 then\n      result = result .. \"0\"\n    end\n    result\
    \ = result .. tostring(digit)\n  end\n  if digits > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(math.abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while digits > 0 do\n    local\
    \ digit = math.floor((digits - 1) / 10)\n    local remainder = digits % 10\n \
    \   digits = digits / 10\n    result = string.sub(result, 1, digit-1) + remainder\n\
    \    i = i + 1\n  end\n  if digits > 0 then\n    result = string.sub(result, 1,\
    \ digit-1)\n  end\n  return result\nend", "  local digits = tostring(x).\n   \
    \ split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n  local\
    \ digits_shifted = {}\n  local digits_shifted_len = 0\n  local digits_shifted_reversed\
    \ = {}\n  local digits_shifted_reversed_len = 0\n  for i = 1, digits do\n    local\
    \ digit = tonumber(digits[i])\n    digits_shifted[digits_shifted_len] = digit\n\
    \    digits_shifted_reversed[digits_shifted_reversed_len] = digit\n    digits_shifted_len\
    \ = digits_shifted_len + 1\n    digits_shifted_reversed_len = digits_shifted_reversed_len\
    \ + 1\n  end\n  if shift > digits_len then\n    shift = digits_len\n  end\n  for\
    \ i = 1, shift do\n    digits_reversed[digits_len + i] = digits_shifted[digits_shifted_len\
    \ + i]\n    digits_reversed_len = digits_reversed_len + 1\n  end\n  return table.concat(digits_reversed)\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = string.format(\"%0*d\", i, digit) .. result\n    x = x - digit\n\
    \  end\n  if x > 0 then\n    result = string.format(\"%0*d\", digits, x) .. result\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x // 10\n    result = result .. digit\n  end\n  if\
    \ x > 0 then\n    result = result .. circular_shift(x, shift + 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ % 10)\n    result = string.format(\"%s%0*d\", result, shift, digit)\n    x =\
    \ math.floor((x / 10) / 10)\n  end\n  if x > 0 then\n    result = string.format(\"\
    %s%0*d\", result, shift, x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.sub(result, -shift, -1) + digit\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.sub(result, -shift,\
    \ -digits)\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  for i = 1, #digits do\n    local digit = tonumber(digits:sub(i,\
    \ i))\n    digit = digit + shift % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit\
    \ % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit\
    \ = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit\
    \ % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit\
    \ % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit\
    \ = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit\
    \ % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit\
    \ % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit\
    \ = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit\
    \ % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit\
    \ % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit\
    \ = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit\
    \ % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit\
    \ % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit\
    \ = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit\
    \ % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit\
    \ = digit + digit % 10\n    digit", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local\
    \ i = 1\n  while i <= digits do\n    local digit = math.floor((x / math.pow(10,\
    \ i)) % 10)\n    result = string.sub(result, 1, i - 1) + digit\n    i = i + 1\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\"\
    , x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local power = math.pow(10, shift)\n  local digit\n \
    \ while digits > 0 do\n    digit = math.floor((x / power) % 10)\n    result =\
    \ string.sub(result, 1, digits-1) + digit\n    x = math.floor((x / power) / 10)\n\
    \    digits = digits - 1\n  end\n  if shift > digits then\n    result = string.sub(result,\
    \ 1, digits+1) + string.sub(result, digits)\n  end\n  return result\nend", " \
    \ local digits = tostring(x).\n    split('.')\n  local result = digits[1]\n  for\
    \ i = 2, #digits do\n    result = result .. digits[i] .. digits[i - shift]\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x / 10\n    result = result .. tostring(digit) ..\
    \ tostring(digit)\n  end\n  if digits > 0 then\n    result = result .. tostring(x)\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(digits))\n  shift = shift\
    \ - shift_digits + shift_digits % 2\n  while shift > 0 do\n    local digit = tonumber(digits)\n\
    \    digits = string.format(\"%0*d\", shift_digits, digit)\n    result = string.format(\"\
    %s%s\", result, digits)\n    shift = shift - 1\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, -shift)\n  local digits_reversed = digits_shifted / math.pow(10,\
    \ shift)\n  local digits_shifted_reversed = math.pow(10, -shift) / math.pow(10,\
    \ shift)\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * digits_shifted_reversed + digits_reversed)\n    local remainder = x % digit\n\
    \    x = digit\n    result = result .. tostring(digit) .. tostring(remainder)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    if digit < 10 then\n      result = result .. \"0\" .. digit\n\
    \    else\n      result = result .. digit\n    end\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local i = math.ceil(digits / 2)\n  while i > 0 do\n    local digit\
    \ = math.floor((digits % 2) * 10 + (digits / 2))\n    result = string.format(\"\
    %c%c\", math.floor((digit % 10) * 16 + digit / 10), result)\n    digits = digits\
    \ / 2\n    i = i - 1\n  end\n  if digits > 0 then\n    result = string.format(\"\
    %c%c\", math.floor((digits % 10) * 16 + digits / 10), result)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(math.abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + 1\n  local\
    \ result = \"\"\n  local shifts = math.pow(10, shift)\n  for i = 1, digits do\n\
    \    local digit = math.floor(x * shifts)\n    shift = shift - 1\n    if shift\
    \ < 0 then\n      digit = digit - math.pow(10, shift)\n      shift = shift + 1\n\
    \    end\n    result = result .. digit\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local shiftbits = shift % 8\n\
    \  if shiftbits == 0 then\n    shift = 8 - shift\n  end\n  shift = shift or 0\n\
    \  local pos = 1\n  while pos <= #digits do\n    local digit = tonumber(digits:sub(1,\
    \ pos))\n    local carry = 0\n    local newdigit = digit + carry\n    carry =\
    \ (newdigit < 10) and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0\n    newdigit = (newdigit - carry) % 10\n    carry\
    \ = newdigit < 10 and 1 or 0", "  local digits = tostring(x).\n    split('.')\n\
    \  local result = \"\"\n  for i = 1, shift do\n    local digit = tonumber(digits[i])\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ * 10\n    digits[i] = tostring(digit)\n  end\n  for i = 1, shift do\n    local\
    \ digit = tonumber(digits[i])\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit * 10\n    digits[i] = tostring(digit)\n  end\n\
    \  for i = 1, shift do\n    local digit = tonumber(digits[i])\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit * 10\n    digits[i]\
    \ = tostring(digit)\n  end\n  for i = 1, shift do\n    local digit = tonumber(digits[i])\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ * 10\n    digits[i] = tostring(digit)\n  end\n  for i = 1, shift do\n    local\
    \ digit = tonumber(digits[i])\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit * 10\n    digits[i] = tostring(digit)\n  end\n\
    \  for i = 1, shift do\n    local digit = tonumber(digits[i])\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit * 10\n    digits[i]\
    \ = tostring(digit)\n  end\n  for i = 1, shift do\n    local digit = tonumber(digits[i])\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ * 10\n    digits[i] = tostring(digit)\n  end\n  for i = 1, shift do\n    local\
    \ digit = tonumber(digits[i])\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit * 10\n    digits[i] = tostring(digit)\n  end\n\
    \  for i = 1, shift do\n    local digit = tonumber(digits[i])\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit * 10\n    digits[i]\
    \ = tostring(digit)\n  end\n  for i = 1, shift do\n    local digit = tonumber(digits[i])\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = ",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local i =\
    \ math.floor(digits / shift)\n  local remainder = digits % shift\n  while i ~=\
    \ 0 do\n    local digit = x\n    if i < 10 then\n      digit = digit * 10 + i\n\
    \    end\n    i = i - 1\n    result = result .. digit\n  end\n  if remainder >\
    \ 0 then\n    result = result .. remainder\n  end\n  return result\nend", "  local\
    \ digits = tostring(x).\n    split('.')\n  local digits_length = #digits\n  local\
    \ digits_reversed = {}\n  for i = 1, digits_length do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits[digits_length - i - 1]\n  end\n  return table.concat(digits_reversed,\
    \ shift)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + 1\n  local result = \"\
    \"\n  local shift = shift % digits\n  local digits_shift = digits - shift\n  local\
    \ digits_shift_left = math.floor(digits_shift)\n  local digits_shift_right = digits_shift\
    \ - digits_shift_left\n  local digits_shift_left_reversed = digits_shift_left\
    \ ~= 0 and \"1\" or \"0\"\n  local digits_shift_right_reversed = digits_shift_right\
    \ ~= 0 and \"0\" or \"1\"\n  for i = digits_shift_left_reversed, digits_shift_right_reversed,\
    \ -1 do\n    local digit = math.floor(x * 10 + i)\n    local remainder = x - digit\
    \ * 10\n    if remainder > 0 then\n      result = result .. digits_shift_left_reversed\
    \ .. digit\n      x = remainder\n    end\n  end\n  return result .. digits_shift_right_reversed\
    \ .. digit\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor(math.log10(math.abs(x)))\n  local digits_shifted_reversed = math.floor(math.log10(math.abs(x)))\n\
    \  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted +\
    \ shift\n  local digits_shifted_reversed = math.abs(digits_shifted_reversed)\n\
    \  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted +\
    \ shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shifted_reversed - digits_shifted\
    \ + shift\n  local digits_shifted_reversed = digits_shif", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local i = 1\n  while i <= digits do\n    local digit = math.floor(x\
    \ * 10^i)\n    local remainder = x - digit\n    local digits = math.floor(math.log10(abs(remainder)))\
    \ + shift\n    if digits > 0 then\n      result = result .. string.format(\"%0*d\"\
    , digits, digit)\n    else\n      result = result .. string.format(\"%0*d\", -digits,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return result\nend", "  if shift >\
    \ math.floor(x:len() / 2) then\n    return x:reverse():gsub(\"%d+\", function\
    \ (digit)\n      return digit:sub(1, -shift)\n    end)\n  else\n    return x:gsub(\"\
    %d+\", function (digit)\n      return digit:sub(-shift, 1)\n    end)\n  end\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local i = 1\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ % 10) + 1)\n    digits = digits / 10\n    result = result .. digit\n    i =\
    \ i + 1\n  end\n  if digits > 0 then\n    result = result .. \"0\"\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    result = result .. tostring(digit)\n    x = x - digit\n  end\n  if\
    \ x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result\
    \ = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed\
    \ = digits_shift ~= 0 and digits_shift or 0\n  local digits_shift_reversed_str\
    \ = string.rep(\"0\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift_reversed)\n  local\
    \ digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift_reversed)\n  local\
    \ digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift_reversed)\n  local\
    \ digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift_reversed)\n  local\
    \ digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"1\", digits_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    local\
    \ remainder = math.floor(digit / 10)\n    local digit = digit % 10\n    result\
    \ = result .. digit\n    if remainder > 0 then\n      result = result .. \"0\"\
    \n    end\n  end\n  if digits > 0 then\n    result = result .. \"0\"\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = string.format(\"%0*d\", digits, digit) + result\n\
    \    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\"\
    , digits, x) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. tostring(digit)\n  end\n  if\
    \ digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    local remainder = x % 10\n    x = remainder\n    result = result\
    \ .. digit\n  end\n  if digits > 0 then\n    result = result .. tostring(reverse(string.sub(x,\
    \ 1, digits)))\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n\
    \  for i = 1, digits_len do\n    digits_reversed[#digits_reversed + 1] = tonumber(digits[i])\n\
    \  end\n  local digits_reversed_len = #digits_reversed\n  local digits_shifted\
    \ = {}\n  for i = 1, digits_len + shift - 1 do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[i]\n  end\n  local digits_shifted_len = #digits_shifted\n\
    \  local digits_reversed_shifted = {}\n  for i = 1, digits_reversed_len do\n \
    \   digits_reversed_shifted[#digits_reversed_shifted + 1] = digits_shifted[i]\n\
    \  end\n  return table.concat(digits_reversed_shifted, '.')\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result = string.format(\"\
    %0*d\", digits, digit) + result\n    x = x - digit\n  end\n  if x > 0 then\n \
    \   result = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10,\
    \ i)) % 10)\n    result = string.format(\"%s%0*d\", result, i, digit)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10 +\
    \ 0.5)\n    local digits = math.floor(math.log10(digit))\n    if digits > shift\
    \ then\n      result = result .. digit:reverse()\n    else\n      result = result\
    \ .. digit\n    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = math.floor(digits / 2)\n  while\
    \ i > 0 do\n    local digit = math.floor(x * 10 + 0.5)\n    local carry = digit\
    \ - math.floor(x * 10)\n    local remainder = digits - i - 1\n    if carry > 0\
    \ then\n      result = result .. \"1\" .. tostring(carry)\n    elseif remainder\
    \ > 0 then\n      result = result .. tostring(remainder)\n    else\n      result\
    \ = result .. tostring(remainder)\n    end\n    x = math.floor(x * 10 + 0.5)\n\
    \    i = i - 1\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n\
    \  local digits_shifted = {}\n  local digits_shifted_len = 0\n  for i = 1, shift\
    \ do\n    digits_shifted[digits_shifted_len] = digits[digits_len-i-1]\n    digits_shifted_len\
    \ = digits_shifted_len + 1\n  end\n  for i = 1, digits_len do\n    digits_reversed[digits_len-i-1]\
    \ = digits[i]\n  end\n  return table.concat(digits_shifted, '.')\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n    result =\
    \ string.format(\"%s%0*d\", result, shift, digit)\n    x = math.floor((x / 10)\
    \ / 10)\n  end\n  if x > 0 then\n    result = string.format(\"%s%0*d\", result,\
    \ shift, x)\n  end\n  return result\nend", "  local digits = tostring(x).\n  \
    \  split('.')\n  local digits_len = #digits\n  local digits_reversed = {}\n  for\
    \ i = 1, digits_len do\n    digits_reversed[#digits_reversed + 1] = tonumber(digits[i])\n\
    \  end\n  local digits_shifted = {}\n  for i = 1, shift do\n    digits_shifted[#digits_shifted\
    \ + 1] = digits_reversed[digits_len + i - 1]\n  end\n  return table.concat(digits_shifted,\
    \ '.')\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit =\
    \ math.floor((x / 10) * 10)\n    result = string.format(\"%s%s\", result, digit)\n\
    \    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%s%s\"\
    , result, x)\n  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10,\
    \ shift))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ math.pow(10, shift))\n    local digit = math.floor(digit)\n    result = result\
    \ .. string.sub(tostring(digit), -shift)\n    x = math.floor(x / math.pow(10,\
    \ shift))\n  end\n  if x > 0 then\n    result = result .. string.sub(tostring(x),\
    \ -shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit * 10\n  end\n\
    \  if digits > 0 then\n    result = result .. math.floor(x * 10 + 0.5) / 10\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = result .. tostring(digit)\n    x = math.floor(x * 100)\
    \ / 100\n  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^digit))\n    result = string.format(\"%s%0*d\", result,\
    \ digit, shift)\n  end\n  if shift > digits then\n    result = string.format(\"\
    %s%0*d\", result, digits, shift)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    result = string.format(\"\
    %s%s\", digit, result)\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = string.format(\"%s%s\", x, result)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    local carry\
    \ = digit - math.floor((digit / 10) * 10)\n    local digit = math.floor((digit\
    \ / 10) * 10)\n    result = result .. digit\n    if carry > 0 then\n      result\
    \ = result .. \"0\"\n    end\n    if digit > 0 then\n      result = result ..\
    \ \"0\"\n    end\n  end\n  if digits > 0 then\n    result = result .. \"0\"\n\
    \  end\n  return result\nend", "  if shift > math.floor(x:len()) then\n    return\
    \ x:reverse():reverse():reverse()\n  end\n  local digits = x:reverse():reverse():reverse()\n\
    \  local result = \"\"\n  for i = 1, shift do\n    result = result .. digits[i]\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    local carry = digit > 0 and 1 or 0\n    local result = result\
    \ .. tostring(digit) .. tostring(carry)\n    x = math.floor(x * 10 / 10)\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  return string.format(\"%0*d\", shift,\
    \ x)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    x = x - digit\n    result = result .. digit\n  end\n  if x > 0 then\n\
    \    result = result .. math.floor(x)\n  end\n  return result\nend", "  if shift\
    \ > math.floor(x/10) then\n    return string.reverse(string.sub(x, math.floor(x/10)\
    \ * 10, math.floor(x/10) * 10 + math.floor(shift/10)))\n  else\n    return string.sub(x,\
    \ math.floor(x/10) * 10 + math.floor(shift/10), math.floor(x/10) * 10 + math.floor(shift/10)\
    \ + 1)\n  end\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  local i = 0\n  while i < digits do\n    local digit = x\n    local\
    \ carry = 0\n    for j = 1, shift do\n      digit = digit * 10 + carry\n     \
    \ carry = digit / 10\n      digit = digit % 10\n    end\n    result = result ..\
    \ tostring(digit)\n    i = i + 1\n  end\n  if shift > digits then\n    result\
    \ = result .. tostring(reverse(tostring(x)))\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i)) %\
    \ 10)\n    result = string.sub(result, 1, i - 1) .. digit\n  end\n  if digits\
    \ > 0 then\n    result = string.sub(result, 1, digits)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift)) + 1)\n  local digits_shift_reversed = math.floor(math.log10(math.pow(10,\
    \ shift)) - digits_shift)\n  local digits_shift_reversed_str = string.rep(\"0\"\
    , digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift - digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i)) %\
    \ 10)\n    result = result .. digit\n  end\n  if digits > 0 then\n    result =\
    \ circular_shift(result, digits - shift)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(math.abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / math.pow(10, i)) %\
    \ 10)\n    result = result .. digit\n  end\n  if digits > 0 then\n    result =\
    \ circular_shift(result, digits - shift)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** digit))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n  \
    \  x = x / 10\n    result = result .. digit\n  end\n  if digits > 0 then\n   \
    \ result = result .. circular_shift(x, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor(x * 10\
    \ / math.pow(10, digit))\n    result = string.format(\"%s%0*d\", result, digit,\
    \ shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = result .. digit\n    x = x // 10\n  end\n  if digits\
    \ > 0 then\n    result = result .. circular_shift(x, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local digit\n  local i\n  for i = 1, digits do\n    digit = math.floor((x\
    \ / 10^i) * 10^shift)\n    result = tostring(digit) .. result\n  end\n  if digits\
    \ > shift then\n    result = tostring(x % 10^shift) .. result\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(math.abs(x))) + 1\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((math.modf(x\
    \ * 10^i) - math.modf(x * 10^(i-1))) * 10^shift)\n    result = result .. tostring(digit)\n\
    \  end\n  if shift > digits then\n    local digit = math.floor((math.modf(x *\
    \ 10^digits) - math.modf(x * 10^digits)) * 10^shift)\n    result = result .. tostring(digit)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = math.floor(digits / 2)\n  while\
    \ i > 0 do\n    local digit = x\n    if digits - i > 1 then\n      digit = digit\
    \ * 10\n    end\n    result = result .. digit:sub(1, digit:len() - 1)\n    i =\
    \ i - 1\n  end\n  if digits > 0 then\n    result = result .. digit:sub(1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor((digits + shift) % 10)\n  local digits_reversed = digits_shifted\
    \ - digits_shifted % 10\n  local result = string.rep(\"0\", digits)\n  result\
    \ = result .. string.rep(\"0\", digits_shifted)\n  result = result .. string.rep(\"\
    0\", digits_reversed)\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = \"\"\n  for i = 1, #digits do\n    local digit\
    \ = tonumber(digits[i])\n    digit = digit + shift % 10\n    digit = math.floor(digit)\n\
    \    digit = digit - math.floor(digit)\n    digits[i] = tostring(digit)\n    result\
    \ = result .. digits[i]\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_reversed\
    \ = shift_digits_power / 10\n  local shift_digits_power_reversed_str = tostring(shift_digits_power_reversed)\n\
    \  local shift_digits_power_reversed_len = #shift_digits_power_reversed_str\n\
    \  for i = 1, shift_digits_power_reversed_len do\n    local digit = tonumber(shift_digits_power_reversed_str:sub(i,\
    \ i))\n    digit = digit * 10 + digit\n    digit = digit % 10\n    digit = digit\
    \ + shift_digits\n    digit = digit / 10\n    digit = digit % 10\n    digit =\
    \ digit + digit\n    result = result .. tostring(digit)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(math.abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    local digit2 = math.floor(x * 10 / 10) % 10\n    local digit3 = math.floor(x\
    \ * 10 / 100) % 10\n    local digit4 = math.floor(x * 10 / 1000) % 10\n    local\
    \ digit5 = math.floor(x * 10 / 10000) % 10\n    local digit6 = math.floor(x *\
    \ 10 / 100000) % 10\n    local digit7 = math.floor(x * 10 / 1000000) % 10\n  \
    \  local digit8 = math.floor(x * 10 / 10000000) % 10\n    local digit9 = math.floor(x\
    \ * 10 / 100000000) % 10\n    local digit10 = math.floor(x * 10 / 1000000000)\
    \ % 10\n    local digit11 = math.floor(x * 10 / 10000000000) % 10\n    local digit12\
    \ = math.floor(x * 10 / 100000000000) % 10\n    local digit13 = math.floor(x *\
    \ 10 / 1000000000000) % 10\n    local digit14 = math.floor(x * 10 / 10000000000000)\
    \ % 10\n    local digit15 = math.floor(x * 10 / 100000000000000) % 10\n    local\
    \ digit16 = math.floor(x * 10 / 1000000000000000) % 10\n    local digit17 = math.floor(x\
    \ * 10 / 10000000000000000) % 10\n    local digit18 = math.floor(x * 10 / 100000000000000000)\
    \ % 10\n    local digit19 = math.floor(x * 10 / 1000000000000000000) % 10\n  \
    \  local digit20 = math.floor(x * 10 / 10000000000000000000) % 10\n    local digit21\
    \ = math.floor(x * 10 / 100000000000000000000) % 10\n    local digit22 = math.floor(x\
    \ * 10 / 1000000000000000000000) % 10\n    local digit23 = math.floor(x * 10 /\
    \ 10000000000000000000000) % 10\n    local digit24 = math.floor(x * 10 / 100000000000000000000000)\
    \ % 10\n    local digit25 = math.floor(x * 10 / 1000000000000000000000000) % 10\n\
    \    local digit26 = math.floor(x * 10 / 10000000000000000000000000) % 10\n  \
    \  local digit27 = math.floor(x * 10 / 100000000000000000000000000) % 10\n   \
    \ local digit28 = math.floor(x * 10 / 1000000000000000000000000000) % 10\n   \
    \ local digit29 = math.floor(x * 10 / 10000000000000000000000000000) % 10\n  \
    \  local digit30 = math.floor(x * 10 / 100000000000000000000000000000) % 10\n\
    \    local digit31 = math.", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * math.pow(10, shift + i))\n    x = x / 10\n    result = result .. digit\n\
    \  end\n  if shift > digits then\n    local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n    for i = 1, digits do\n      local digit = math.floor((x % 10) * math.pow(10,\
    \ shift + digits - i - 1))\n      x = x / 10\n      result = result .. digit\n\
    \    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    result = result .. digit\n    x = math.floor((x / 10) / 10)\n\
    \  end\n  if digits > 0 then\n    result = result .. math.floor((x / 10) % 10)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(math.abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.sub(result, -digit, -1) + digit\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.sub(result, -digits)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor(x * 10 + 0.5) / 10\n    local remainder = x - digit * 10\n\
    \    if remainder > 0 then\n      result = result .. \"0\" .. digit\n    else\n\
    \      result = result .. digit\n    end\n    x = remainder\n    i = i + 1\n \
    \ end\n  if shift > digits then\n    result = result .. \"0\"\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5)\n    local digits = math.floor(math.log10(abs(digit))) + shift\n    if\
    \ digits > 0 then\n      result = result .. digit:sub(1, digits - 1)\n    else\n\
    \      result = result .. digit\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n    x =\
    \ x // 10\n    result = result .. tostring(digit)\n  end\n  if digits > 0 then\n\
    \    result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** digit))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x * 100)\
    \ / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\", x,\
    \ result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digit = digit - math.floor(digit / 10) * 10\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    x = x - digit\n    if x > 0 then\n      result\
    \ = result .. digit\n    end\n  end\n  if shift > digits then\n    shift = shift\
    \ - digits\n  end\n  for digit = shift, 0, -1 do\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local result = \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits\
    \ do\n    local digit = math.floor((x - math.floor(x)) / (10^shift))\n    local\
    \ digit = math.floor(digit + carry)\n    carry = digit > 0 and 1 or 0\n    digit\
    \ = digit < 10 and digit or 10\n    result = result .. digit\n  end\n  if shift\
    \ > digits then\n    local digit = math.floor((x - math.floor(x)) / (10^shift))\n\
    \    local digit = digit < 10 and digit or 10\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    if digit > 9 then\n      digit = digit - 10\n    end\n\
    \    result = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - shift)\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_str = string.format(\"%0*d\", shift_digits, digits)\n\
    \  for i = 1, shift_digits do\n    local digit = shift_digits_str:sub(i, i)\n\
    \    result = digit .. result\n  end\n  if shift_digits > 0 then\n    result =\
    \ result:reverse()\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x % 10\n  end\n  if\
    \ x > 0 then\n    result = result .. x\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x/10) % 10\n    x = math.floor(x/10)\n\
    \    result = result .. digit\n  end\n  if digits > 0 then\n    result = result\
    \ .. circular_shift(x, digits-1)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  local digit\n  for digit\
    \ = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * 10 / math.pow(10,\
    \ digit))\n    if digit > 0 then\n      result = result .. digit\n    end\n  end\n\
    \  if shift > digits then\n    shift = shift - digits\n  end\n  result = result\
    \ .. math.floor(x * math.pow(10, shift))\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result = string.format(\"\
    %0*d\", digits, digit) + result\n    x = x - digit * 10\n  end\n  if x > 0 then\n\
    \    result = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/10) % 10\n  \
    \  result = result .. digit\n    x = x - (digit * 10)\n  end\n  if x > 0 then\n\
    \    result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x - math.floor(x)) * (10 ** i))\n \
    \   if digit > 9 then\n      digit = digit - 9\n    end\n    result = result ..\
    \ tostring(digit)\n  end\n  if digits > 0 then\n    result = result .. tostring(math.floor((x\
    \ - math.floor(x)) * (10 ** digits)))\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x/10) % 10\n    result = result\
    \ .. digit\n    x = x - (10^i)\n  end\n  if x > 0 then\n    result = result ..\
    \ digit\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x).\n    split('.')\n  local result\
    \ = digits[1]\n  for i = 2, #digits do\n    local digit = tonumber(digits[i])\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    ", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^i))\n    if digit > 9 then\n      result = result ..\
    \ \"0\"\n    end\n    result = result .. tostring(digit)\n  end\n  if digits >\
    \ 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result =\
    \ result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** i))\n    if digit > 9 then\n      result = result\
    \ .. \"0\"\n    end\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = result .. \"0\"\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local i = math.floor(digits\
    \ / 3)\n  while i > 0 do\n    local digit = math.floor(x * 10 / math.pow(10, 3\
    \ - i))\n    result = result .. digit\n    x = x - digit\n    i = i - 1\n  end\n\
    \  if digits > 0 then\n    result = result .. math.floor(x * 10 / math.pow(10,\
    \ 3 - digits))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = math.floor(x / 10)\n\
    \  end\n  if x > 0 then\n    result = result .. x\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result\
    \ = string.format(\"%s%s\", digit, result)\n    x = x - digit\n  end\n  if x >\
    \ 0 then\n    result = string.format(\"%s%s\", x, result)\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n\
    \  local digits_reversed = {}\n  for i = 1, digits_len do\n    digits_reversed[digits_len\
    \ - i - 1] = digits[i]\n  end\n  local digits_shifted = {}\n  for i = 1, shift\
    \ do\n    digits_shifted[#digits_shifted + 1] = digits_reversed[i]\n  end\n  return\
    \ table.concat(digits_shifted, '.')\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) / (10 ** digit))\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  local shift = shift - digits\n  if shift < 0 then\n\
    \    shift = shift + digits\n  end\n  local i = 1\n  while i <= shift do\n   \
    \ local digit = math.floor(x * 10 + i)\n    result = result .. digit\n    i =\
    \ i + 1\n  end\n  if shift > 0 then\n    result = result .. circular_shift(x,\
    \ shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(math.abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ i = 0\n  while i < digits do\n    local digit = x\n    local carry = 0\n   \
    \ for j = 1, shift do\n      digit = digit * 10 + carry\n      carry = digit /\
    \ 10\n      digit = digit % 10\n    end\n    if carry > 0 then\n      result =\
    \ result .. \"1\" .. tostring(carry)\n    end\n    result = result .. tostring(digit)\n\
    \    i = i + 1\n  end\n  if i < digits then\n    result = result .. tostring(x:sub(1,\
    \ i - 1))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local remainder = x % 10\n    x = remainder\n    result = result .. tostring(digit)\
    \ .. tostring(remainder)\n  end\n  if digits > 0 then\n    result = result ..\
    \ tostring(x % 10)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = string.format(\"%s%c\", result, digit)\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%s%c\", result, string.sub(x,\
    \ digits))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10)\n    x = x - digit\n    result =\
    \ result .. digit\n  end\n  if x > 0 then\n    result = result .. tostring(x)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = string.format(\"%0*d\", i, digit) .. result\n    x\
    \ = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\", digits,\
    \ x) .. result\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = digits[1].\n    ..digits[2]..\n    digits[3].\n\
    \    ..digits[4].\n    ..digits[5].\n    ..digits[6]..\n    digits[7].\n    ..digits[8].\n\
    \    ..digits[9].\n    ..digits[10]..\n    digits[11].\n    ..digits[12]\n  local\
    \ digits_length = #digits\n  local shift_length = #tostring(shift)\n  if shift_length\
    \ > digits_length then\n    return digits[shift_length]\n  else\n    local shift_digits\
    \ = tostring(shift).\n      split('.')\n    local shift_digits_length = #shift_digits\n\
    \    local shift_digits_reversed = shift_digits[shift_digits_length].\n      .string.\n\
    \      reverse()\n    local shift_digits_reversed_length = #shift_digits_reversed\n\
    \    local shift_digits_reversed_reversed = shift_digits_reversed.\n      reverse()\n\
    \    local shift_digits_reversed_reversed_length = #shift_digits_reversed_reversed\n\
    \    local shift_digits_reversed_reversed_reversed_length = #shift_digits_reversed_reversed_reversed\n\
    \    local shift_digits_reversed_reversed_reversed_reversed_length = #shift_digits_reversed_reversed_reversed_reversed\n\
    \    local shift_digits_reversed_reversed_reversed_reversed_reversed_length =\
    \ #shift_digits_reversed_reversed_reversed_reversed_reversed\n    local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #shift_digits_reversed_reversed_reversed_reversed_reversed_reversed\n    local\
    \ shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    \    local shift_digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(math.abs(x))) + shift\n  local result =\
    \ \"\"\n  for i = 1, digits do\n    local digit = math.floor((math.pow(10.0, digits\
    \ - i) - math.pow(10.0, i)) * x / 10.0)\n    result = result .. digit\n  end\n\
    \  if digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n\
    \    result = string.format(\"%s%0*d\", result, math.abs(shift), digit)\n    x\
    \ = math.floor((x / 10) / 10)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(x))\n  local result = \"\"\n  local i = math.max(0, digits\
    \ - shift)\n  while i > 0 do\n    local digit = x\n    digit = math.floor(digit\
    \ / 10)\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit -\
    \ math.floor(digit / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit\
    \ / 10)\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit *\
    \ 10\n    digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n    digit = digit + math.floor(digit / 10)\n\
    \    digit = digit - math.floor(digit / 10) * 10\n    digit = digit * 10\n   \
    \ digit = digit + math.floor(digit / 10)\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit * 10\n", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) * 10) + digit\n    x = x - digit\n    result\
    \ = result .. digit\n  end\n  if x > 0 then\n    result = result .. \"0\"\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit\n  end\n \
    \ if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    result = string.format(\"%0*d\", math.abs(digits), result) .. digit\n   \
    \ x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\",\
    \ math.abs(digits), result)\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\n\
    \  assert(shift_digits >= 0 and shift_digits <= shift)\n  local shift_digits_pow10\
    \ = 10^shift_digits\n  local shift_digits_pow10_m1 = 10^shift_digits - 1\n  local\
    \ shift_digits_pow10_m2 = 10^shift_digits - 2\n  local shift_digits_pow10_m3 =\
    \ 10^shift_digits - 3\n  local shift_digits_pow10_m4 = 10^shift_digits - 4\n \
    \ local shift_digits_pow10_m5 = 10^shift_digits - 5\n  local shift_digits_pow10_m6\
    \ = 10^shift_digits - 6\n  local shift_digits_pow10_m7 = 10^shift_digits - 7\n\
    \  local shift_digits_pow10_m8 = 10^shift_digits - 8\n  local shift_digits_pow10_m9\
    \ = 10^shift_digits - 9\n  local shift_digits_pow10_m10 = 10^shift_digits - 10\n\
    \  local shift_digits_pow10_m11 = 10^shift_digits - 11\n  local shift_digits_pow10_m12\
    \ = 10^shift_digits - 12\n  local shift_digits_pow10_m13 = 10^shift_digits - 13\n\
    \  local shift_digits_pow10_m14 = 10^shift_digits - 14\n  local shift_digits_pow10_m15\
    \ = 10^shift_digits - 15\n  local shift_digits_pow10_m16 = 10^shift_digits - 16\n\
    \  local shift_digits_pow10_m17 = 10^shift_digits - 17\n  local shift_digits_pow10_m18\
    \ = 10^shift_digits - 18\n  local shift_digits_pow10_m19 = 10^shift_digits - 19\n\
    \  local shift_digits_pow10_m20 = 10^shift_digits - 20\n  local shift_digits_pow10_m21\
    \ = 10^shift_digits - 21\n  local shift_digits_pow10_m22 = 10^shift_digits - 22\n\
    \  local shift_digits_pow10_m23 = 10^shift_digits - 23\n  local shift_digits_pow10_m24\
    \ = 10^shift_digits - 24\n  local shift_digits_pow10_m25 = 10^shift_digits - 25\n\
    \  local shift_digits_pow10_m26 = 10^shift_digits - 26\n  local shift_digits_pow10_m27\
    \ = 10^shift_digits - 27\n  local shift_digits_pow10_m28 = 10^shift_digits - 28\n\
    \  local shift_digits_pow10_m29 = 10^shift_digits - ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digit = digit - math.floor(digit / 10) * 10\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local i = 1\n  while i <= digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^i))\n    result = string.format(\"%s%0*d\", result, i,\
    \ digit)\n    x = x - digit * 10^i\n    i = i + 1\n  end\n  if x > 0 then\n  \
    \  result = string.format(\"%s%0*d\", result, i, x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits - 1) / 3)\n\
    \    local remainder = digits % 3\n    digits = digits / 3\n    result = string.sub(tostring(x),\
    \ digit, digit+1) + result\n    if remainder == 0 then\n      break\n    end\n\
    \  end\n  if digits == 0 then\n    result = string.sub(tostring(x), -digits)\n\
    \  end\n  return result\nend", "  if shift > math.floor(x) then\n    shift = math.floor(x)\n\
    \  end\n  local digits = math.floor(x) - math.floor(math.floor(x)) + shift\n \
    \ local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x)\
    \ - math.floor(math.floor(x)) + shift\n    local digit = math.floor(digit)\n \
    \   local remainder = digits % 10\n    digits = digits / 10\n    result = string.sub(result,\
    \ 1, digit-1) + remainder + result\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10) % 10\n    result = result ..\
    \ digit\n    x = x / 10\n  end\n  if digits > 0 then\n    result = result .. circular_shift(x,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** (digits - i)))\n    if digit > 9 then\n      digit\
    \ = digit - 9\n    end\n    result = result .. string.char(digit + shift)\n  end\n\
    \  if shift > digits then\n    return result .. string.char(digits - shift)\n\
    \  else\n    return result\n  end\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local digits_reversed = digits_shifted / math.pow(10, shift)\n \
    \ local result = math.floor(x / digits_shifted)\n  result = result * digits_reversed\
    \ + math.floor(result / digits_shifted)\n  return result\nend", "  if shift >\
    \ math.floor(x:len()) then\n    return x:reverse():reverse()\n  else\n    local\
    \ digits = x:reverse():reverse()\n    local result = \"\"\n    for i = 1, shift\
    \ do\n      result = result .. digits[i]\n    end\n    return result\n  end\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local i = math.ceil(digits / 2)\n  while i > 0 do\n    local digit\
    \ = math.floor((digits - i) / 2) + i\n    result = result .. string.format(\"\
    %d\", math.floor((x % 10) * 10 / digit))\n    x = x / digit\n    i = i - 1\n \
    \ end\n  if digits > 0 then\n    result = result .. string.format(\"%d\", math.floor((x\
    \ % 10) * 10 / digits))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = string.sub(result, -(i-1), -i-1) + digit\n\
    \  end\n  if digits > 0 then\n    result = string.sub(result, -digits)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    if digit > 9 then\n      result = result .. \"0\"\n  \
    \  end\n    result = result .. tostring(digit)\n  end\n  if digits > 0 then\n\
    \    result = result .. tostring(math.floor(x * 10 + 0.5) / 10)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5)\n    result = string.format(\"%0*d\", digits, digit) + result\n    x =\
    \ x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\", digits,\
    \ x) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  local i = 0\n  while i < digits do\n    local\
    \ digit = math.floor((x - math.floor(x)) / (10 ** i))\n    if digit > 0 then\n\
    \      result = result .. digit\n    end\n    i = i + 1\n  end\n  if shift > digits\
    \ then\n    local digits = math.floor(math.log10(abs(x))) + 1\n    local result\
    \ = \"\"\n    local i = 0\n    while i < digits do\n      local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** i))\n      if digit > 0 then\n        result = result\
    \ .. digit\n      end\n      i = i + 1\n    end\n    result = result .. \"0\"\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) * (10 ** digit))\n    result\
    \ = string.format(\"%0*d\", digits, digit) + result\n  end\n  if digits > 0 then\n\
    \    result = string.format(\"%0*d\", digits, result) -- Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local reversed = math.abs(digit - math.floor(digit))\n    if reversed > 0\
    \ then\n      result = result .. \"9\"\n    else\n      result = result .. \"\
    0\"\n    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local\
    \ i = math.ceil(digits / 2)\n  while i > 0 do\n    local digit = x\n    if i >=\
    \ digits then\n      digit = digit % 10\n      digit = 10 - digit\n    end\n \
    \   result = result .. digit\n    i = i - 1\n  end\n  if digits > 0 then\n   \
    \ result = result .. x\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(digits,\
    \ shift))\n  local shift = shifts - math.floor(shifts)\n  local digits_length\
    \ = math.floor(math.log(digits, 10))\n  local digits_length = digits_length +\
    \ shift - 1\n  local digits_length = math.floor(digits_length)\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local digits_length\
    \ = digits_length + shift\n  local digits_length = digits_length + shift\n  local\
    \ digits_length = digits_length + shift\n  local digits_length = digits_length\
    \ + shift\n  local digits_length = digits_length + shift\n  local "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
