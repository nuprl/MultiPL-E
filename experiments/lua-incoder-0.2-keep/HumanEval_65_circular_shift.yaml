name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- \"21\"\n-- >>> circular_shift(12,\
  \ 2)\n-- \"12\"\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(x))\n  local result = \"\"\n\
    \  local carry = 0\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    local digit = math.floor(digit + carry)\n \
    \   carry = digit - digit\n    digit = digit + 10\n    result = result .. digit\n\
    \    if digit < 10 then\n      result = result .. \"0\"\n    end\n  end\n  if\
    \ shift > digits then\n    local digit = math.floor((x / 10) * 10)\n    local\
    \ digit = math.floor(digit + carry)\n    carry = digit - digit\n    digit = digit\
    \ + 10\n    result = result .. digit\n    if digit < 10 then\n      result = result\
    \ .. \"0\"\n    end\n  end\n  if shift > 0 then\n    result = result .. carry\n\
    \  end\n  return result\nend", "  local digits = tostring(x)\n  local result =\
    \ \"\"\n  local shift_digits = tostring(shift)\n  local shift_digits_length =\
    \ #shift_digits\n  local shift_digits_reversed = shift_digits:reverse()\n  while\
    \ digits ~= shift_digits_reversed do\n    local digit = digits:sub(1, 1)\n   \
    \ digits = digits:sub(2)\n    result = digit .. result\n  end\n  if shift_digits_length\
    \ == 0 then\n    return result\n  else\n    return circular_shift(result, shift_digits_length\
    \ - 1)\n  end\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local digits = math.floor(math.log10(digit))\n    if digits > shift then\n\
    \      result = result .. digit:reverse()\n    else\n      result = result ..\
    \ digit\n    end\n    x = math.floor(x / 10)\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local i =\
    \ math.max(0, digits - shift)\n  while i > 0 do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^i))\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n    x = math.floor(x * (10^i))\n    i = i - 1\n  end\n  if shift >\
    \ digits then\n    local digits = math.floor(math.log10(math.abs(x)))\n    result\
    \ = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result\
    \ = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  local carry = 0\n  for i = 1, digits do\n    local\
    \ digit = math.floor((x / 10^i) * 10^shift)\n    local digit2 = math.floor((x\
    \ / 10^(i + 1)) * 10^shift)\n    local digit3 = math.floor((x / 10^(i + 2)) *\
    \ 10^shift)\n    local digit4 = math.floor((x / 10^(i + 3)) * 10^shift)\n    local\
    \ digit5 = math.floor((x / 10^(i + 4)) * 10^shift)\n    local digit6 = math.floor((x\
    \ / 10^(i + 5)) * 10^shift)\n    local digit7 = math.floor((x / 10^(i + 6)) *\
    \ 10^shift)\n    local digit8 = math.floor((x / 10^(i + 7)) * 10^shift)\n    local\
    \ digit9 = math.floor((x / 10^(i + 8)) * 10^shift)\n    local digit10 = math.floor((x\
    \ / 10^(i + 9)) * 10^shift)\n    local digit11 = math.floor((x / 10^(i + 10))\
    \ * 10^shift)\n    local digit12 = math.floor((x / 10^(i + 11)) * 10^shift)\n\
    \    local digit13 = math.floor((x / 10^(i + 12)) * 10^shift)\n    local digit14\
    \ = math.floor((x / 10^(i + 13)) * 10^shift)\n    local digit15 = math.floor((x\
    \ / 10^(i + 14)) * 10^shift)\n    local digit16 = math.floor((x / 10^(i + 15))\
    \ * 10^shift)\n    local digit17 = math.floor((x / 10^(i + 16)) * 10^shift)\n\
    \    local digit18 = math.floor((x / 10^(i + 17)) * 10^shift)\n    local digit19\
    \ = math.floor((x / 10^(i + 18)) * 10^shift)\n    local digit20 = math.floor((x\
    \ / 10^(i + 19)) * 10^shift)\n    local digit21 = math.floor((x / 10^(i + 20))\
    \ * 10^shift)\n    local digit22 = math.floor((x / 10^(i + 21)) * 10^shift)\n\
    \    local digit23 = math.floor((x / 10^(i + 22)) * 10^shift)\n    local digit24\
    \ = math.floor((x / 10^(i + 23)) * 10^shift)\n    local digit25 = math.floor((x\
    \ / 10^(i + 24)) * 10", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    result = result .. digit\n    x = x - digit\n\
    \  end\n  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x * 100)\
    \ / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\", x,\
    \ result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shift_reversed = math.pow(10, digits_shift)\n  local digits_shift_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed)\n  local digits_shift_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n    result\
    \ = string.format(\"%d%s\", digit, result)\n    x = math.floor((x / 10) / 10)\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%d%s\", x, result)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  return string.format(\"%0*d\", shift,\
    \ digits)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = string.format(\"%s%s\", result, digit)\n  end\n\
    \  if digits > 0 then\n    result = string.format(\"%s%s\", result, string.rep(\"\
    0\", digits - 1))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digit = digit - math.floor(digit / 10) * 10\n    local\
    \ digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit\
    \ / 10) * 10\n    digit = digit - math.floor(digit / 10) * 10\n    digit = digit\
    \ + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit / 10) *\
    \ 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit - math.floor(digit\
    \ / 10) * 10\n    digit = digit + math.floor(digit / 10) * 10\n    digit = digit\
    \ - math.floor(digit / 10) * 10\n    digit = digit + math.floor(digit / 10) *\
    \ 10\n    digit = digit - ", "  local digits = math.floor(math.log10(x))\n  local\
    \ digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + digits\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift < 0 and -digits_shift\
    \ or 0\n  local digits_shift = digits_shift < 0 and -digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift < 0 and -digits_shift or 0\n  local ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x - math.floor(x)) * 10 / math.pow(10, digit))\n\
    \    result = string.format(\"%s%s\", result, digit)\n  end\n  if digits > 0 then\n\
    \    result = string.format(\"%s%s\", result, circular_shift(math.floor(x), digits\
    \ - 1))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result =\
    \ result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. tostring(x)\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = \"\"\n  for i = 1, #digits do\n    local digit\
    \ = tonumber(digits[i])\n    if digit == 0 then\n      result = result .. \"0\"\
    \n    else\n      local digit = digit - shift + 1\n      if digit < 10 then\n\
    \        result = result .. tostring(digit)\n      else\n        result = result\
    \ .. tostring(digit - 10)\n      end\n    end\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n  \
    \  result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. \"0\"\n  end\n  return result\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = digits[1]\n  for i = 2, #digits do\n    local\
    \ digit = tonumber(digits[i])\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
