name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for _, char in string.gmatch('([A-Za-z]+)') do\n\
    \    count = count + 1\n  end\n  return count\nend", "  local distinct_characters\
    \ = {}\n  for i = 1, #string do\n    local char = string.sub(i, i)\n    if not\
    \ distinct_characters[char] then\n      distinct_characters[char] = 1\n    else\n\
    \      distinct_characters[char] = distinct_characters[char] + 1\n    end\n  end\n\
    \  return #distinct_characters\nend", "  local count = 0\n  for i = 1, #string\
    \ do\n    count = count + 1\n    if string[i] ~= string[i - 1] then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ _, c in string.gmatch(\"[%a]\") do\n    count = count + 1\n  end\n  return count\n\
    end", "  local count = 0\n  for _, character in ipairs(string) do\n    count =\
    \ count + 1\n  end\n  return count\nend", "  local count = 0\n  for _, c in string.gmatch('([A-Za-z]+)')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, #string do\n    count = count + 1\n    if string[i] ~= string[i\
    \ - 1] then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ local count = 0\n  for i = 1, #string do\n    count = count + 1\n    if string.sub(i,\
    \ i, i) ~= string.sub(i, i, i) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local distinct_characters = 0\n  for i = 1, #string\
    \ do\n    local char = string.sub(i, i)\n    if string.find(string.lower(string),\
    \ char) ~= nil then\n      distinct_characters = distinct_characters + 1\n   \
    \ end\n  end\n  return distinct_characters\nend", "    local count = 0\n    for\
    \ _, char in string.gmatch('([A-Za-z]+)') do\n        count = count + 1\n    end\n\
    \    return count\nend", "    local count = 0\n    for _, c in string.gmatch(\"\
    [%a]+\") do\n        count = count + 1\n    end\n    return count\nend", "  local\
    \ count = 0\n  for _, c in string.gmatch(\"[%a]+\") do\n    count = count + 1\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, #string do\n  \
    \  count = count + 1\n    local char = string.sub(i, i)\n    if string.find(string.lower(string),\
    \ char) ~= nil then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n   \
    \ count = count + (string.sub(string, i, i) == string.sub(string, i, i)) * (#string.sub(string,\
    \ i, i) + 1)\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #string\
    \ do\n    count = count + 1\n    local char = string.sub(i, i)\n    if string.find(string.lower(string),\
    \ char) ~= nil then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 1\n  for i = 1, #string do\n    count = count + 1\n   \
    \ count = count + (string.sub(string,i,i) == string.sub(string,i,i))\n  end\n\
    \  return count\nend", "  local count = 0\n  for _, c in string.gmatch('([A-Za-z]+)')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "  local distinct_characters\
    \ = {}\n  for i = 1, #string do\n    local char = string.sub(i, i)\n    if not\
    \ distinct_characters[char] then\n      distinct_characters[char] = 1\n    else\n\
    \      distinct_characters[char] = distinct_characters[char] + 1\n    end\n  end\n\
    \  return #distinct_characters\nend", "  local count = 0\n  for _, c in string.gmatch('([A-Za-z]+)')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "  local count = 0\n\
    \  for i = 1, #string do\n    count = count + 1\n    local char = string.sub(i,\
    \ i)\n    if string.find(string.lower(string), char) ~= nil then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
