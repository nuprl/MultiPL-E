name: HumanEval_25_factorize
language: lua
prompt: "-- Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
  -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Initialize list of factors\n  local factors = {}\n  -- Initialize\
    \ list of prime factors\n  local primes = {}\n  -- Initialize list of prime factors\
    \ counts\n  local primes_count = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted = {}\n  -- Initialize list of prime\
    \ factors counts sorted by count\n  local primes_count_sorted_reverse = {}\n \
    \ -- Initialize list of prime factors counts sorted by count\n  local primes_count_sorted_reverse2\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse3 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse4 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse5\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse6 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse7 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse8\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse9 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse10 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse11\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse12 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse13 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse14\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse15 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse16 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse17\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse18 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse19 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n", "    local factors = {}\n \
    \   for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n ~= 1 do\n    factor = factor * n\n    factors[#factors\
    \ + 1] = factor\n    n = n / factor\n  end\n  return factors\nend", "    local\
    \ factors = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n \
    \       if n % i == 0 then\n            factor = factor * i\n            i = i\
    \ + 1\n        else\n            i = i + 1\n        end\n    end\n    factors[#factors+1]\
    \ = factor\n    return factors\nend", "  -- Base case\n  if n < 2 then return\
    \ nil end\n  -- Recursive case\n  if n % 2 == 0 then\n    return factorize(n /\
    \ 2)\n  else\n    local factors = {}\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        table.insert(factors, i)\n        n = n / i\n      end\n    end\n\
    \    if n ~= 1 then\n      table.insert(factors, n)\n    end\n    return factors\n\
    \  end\nend", "    local factors = {}\n    local factor = 1\n    while factor\
    \ <= n do\n        local i = 1\n        while i <= n do\n            if n % factor\
    \ == 0 then\n                table.insert(factors, factor)\n                n\
    \ = n / factor\n                break\n            else\n                i = i\
    \ + 1\n            end\n        end\n        factor = factor + 1\n    end\n  \
    \  return factors\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  if n % i == 0 then\n            table.insert(factors, i)\n            n = n\
    \ / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "    local factors = {}\n    local i\
    \ = 1\n    while i <= n do\n        local p = i\n        while i * p <= n do\n\
    \            p = p * i\n        end\n        factors[i] = p\n        i = i + 1\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while factor <= n do\n        local i = 1\n        while i * factor\
    \ <= n do\n            i = i + 1\n        end\n        factors[factor] = i\n \
    \       factor = factor * i\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return [1]\n  end", " \
    \   local factors = {}\n    for i = 2, n do\n        local factor = 1\n      \
    \  for j = 1, i do\n            if n % i == 0 then\n                factor = factor\
    \ * i\n                n = n / i\n                break\n            end\n   \
    \     end\n        if n ~= 1 then\n            table.insert(factors, factor)\n\
    \        end\n    end\n    return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while n ~= 1 do\n    while n % factor == 0 do\n      factors[#factors\
    \ + 1] = factor\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  while factor\
    \ <= n do\n    local i = 1\n    while i * factor <= n do\n      if n % i == 0\
    \ then\n        factor = factor * i\n        break\n      end\n      i = i + 1\n\
    \    end\n    if factor > 1 then\n      table.insert(factors, factor)\n    end\n\
    \    factor = factor + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return [1]\n  end\n  -- Recursive case\n  local factors = factorize(n-1)\n\
    \  local factors_count = #factors\n  local factors_product = 1\n  for i = 1, factors_count\
    \ do\n    factors_product = factors_product * factors[i]\n  end\n  -- Return list\
    \ of factors\n  return factors_product, factors\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  table.insert(factors, i)\n            n = n / i\n        else\n           \
    \ i = i + 1\n        end\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n ~= 1 do\n    while n ~= factor do\n    \
    \  factors[#factors + 1] = factor\n      factor = factor * 2\n    end\n    factor\
    \ = factor / 2\n    n = n / factor\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      factor = factor * i\n      i = i + 1\n      factors[#factors +\
    \ 1] = factor\n    end\n  end\n  return factors\nend", "  -- Base case\n  if n\
    \ == 1 then\n    return [1]\n  end", "    local factors = {}\n    local factor\
    \ = 1\n    while factor <= n do\n        factors[factor] = factors[factor] + 1\
    \ or 1\n        factor = factor + 1\n    end\n    local primes = {}\n    for i\
    \ = 2, n do\n        if factors[i] == 1 then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "  -- Find factors of given\
    \ number\n  local factors = {}\n  local i = 1\n  while i * i <= n do\n    local\
    \ p = n / i\n    if p * p > n then\n      break\n    end\n    factors[#factors+1]\
    \ = p\n    i = i + 1\n  end\n  -- Find prime factors\n  local primes = {}\n  for\
    \ i = 1, #factors do\n    local p = factors[i]\n    for j = 1, p do\n      if\
    \ not primes[j] then\n        primes[j] = true\n      end\n    end\n  end\n  --\
    \ Return list of prime factors\n  return primes\nend", "  local factors = {}\n\
    \  local factor = 1\n  while factor <= n do\n    local i = 1\n    while i * factor\
    \ <= n do\n      if n % i == 0 then\n        factor = factor * i\n      else\n\
    \        i = i + 1\n      end\n    end\n    table.insert(factors, factor)\n  \
    \  factor = factor + 1\n  end\n  return factors\nend", "  local factors = {}\n\
    \  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n\
    \    i = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    local i = 1\n    while\
    \ factor ~= n do\n        if n % factor == 0 then\n            i = i + 1\n   \
    \         factors[#factors + 1] = factor\n            factor = n / factor\n  \
    \      end\n    end\n    if factor ~= n then\n        factors[#factors + 1] =\
    \ factor\n    end\n    return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    local i = 1\n    while i <= n do\n        factor = factor *\
    \ i\n        if n % factor == 0 then\n            i = i + 1\n            factors[#factors\
    \ + 1] = factor\n        end\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while factor <= n do\n    local i = 1\n    while\
    \ i * factor <= n do\n      if n % i == 0 then\n        factors[#factors + 1]\
    \ = i * factor\n        n = n / i\n      else\n        i = i + 1\n      end\n\
    \    end\n    factor = factor + 1\n  end\n  if n ~= 1 then\n    factors[#factors\
    \ + 1] = n\n  end\n  return factors\nend", "    local factors = {}\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n > 1 do\n    while n % factor == 0 do\n      factors[#factors\
    \ + 1] = factor\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            i = i + 1\n           \
    \ factors[i] = n\n        end\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    while n % i\
    \ == 0 do\n      n = n / i\n      factor = factor+1\n    end\n    i = i + 1\n\
    \    factors[#factors+1] = factor\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      factors[#factors+1]\
    \ = i\n      n = n / i\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1]\
    \ = n\n  end\n  return factors\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            table.insert(factors, i)\n   \
    \         n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i <= n do\n    local p = math.floor(n/i)\n    if p*i > n then\n     \
    \ break\n    end\n    factors[p] = factors[p] or 1\n    i = i*p\n  end\n  return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n do\n        local factor\
    \ = 1\n        for j = 1, i do\n            if n % i == 0 then\n             \
    \   factor = factor * i\n                n = n / i\n                break\n  \
    \          end\n        end\n        if n ~= 1 then\n            factors[#factors\
    \ + 1] = factor\n        end\n    end\n    return factors\nend", "  -- Base case\n\
    \  if n == 1 then\n    return [1]\n  end", "    local factors = {}\n    local\
    \ factor = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factor = factor * i\n            i = i + 1\n        else\n      \
    \      i = i + 1\n        end\n    end\n    factors[#factors + 1] = factor\n \
    \   return factors\nend", "  -- Base case\n  if n == 1 then\n    return [1]\n\
    \  end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <=\
    \ n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors + 1] = factor\n\
    \  end\n  return factors\nend", "  -- Initialize list of factors\n  local factors\
    \ = {}\n  -- Initialize list of factorization\n  local factorization = {}\n  --\
    \ Initialize list of prime factors\n  local primes = {}\n  -- Initialize list\
    \ of prime factorization\n  local prime_factorization = {}\n  -- Initialize list\
    \ of prime factorization with counts\n  local prime_factorization_counts = {}\n\
    \  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp2\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp3\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp4\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp5\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp6\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp7\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp8\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp9\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp10\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp11\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp12\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp13\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp14\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp15\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp16\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp17\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp18\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp19\
    \ = {}\n  -- Initialize list of prime factorization with counts\n  local prime_factorization_counts_temp20\
    \ = {}\n  ", "    local factors = {}\n    local i = 1\n    while i <= n do\n \
    \       if n % i == 0 then\n            factors[i] = factors[i] or 1\n       \
    \     factors[i] = factors[i] + 1\n            n = n / i\n        else\n     \
    \       i = i + 1\n        end\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return factors\nend", " \
    \ local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while n % factor\
    \ == 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n    end\n\
    \    factor = factor + 1\n  end\n  return factors\nend", "  local factors = {}\n\
    \  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      factors[#factors+1]\
    \ = i\n      n = n / i\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1]\
    \ = n\n  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n \
    \ while i <= n do\n    local p = math.floor(n/i)\n    factors[p] = factors[p]\
    \ or 1\n    factors[p] = factors[p] + 1\n    i = i + 1\n  end\n  table.sort(factors)\n\
    \  return factors\nend", "  -- Base case\n  if n < 2 then return nil end\n  --\
    \ If n is prime then return its factors\n  if primes[n] then return primes[n]\
    \ end\n  -- If n is divisible by 2 then return its factors\n  if n % 2 == 0 then\
    \ return factorize(n/2) end\n  -- If n is divisible by 3 then return its factors\n\
    \  if n % 3 == 0 then return factorize(n/3) end\n  -- If n is divisible by 5 then\
    \ return its factors\n  if n % 5 == 0 then return factorize(n/5) end\n  -- If\
    \ n is divisible by 7 then return its factors\n  if n % 7 == 0 then return factorize(n/7)\
    \ end\n  -- If n is divisible by 11 then return its factors\n  if n % 11 == 0\
    \ then return factorize(n/11) end\n  -- If n is divisible by 13 then return its\
    \ factors\n  if n % 13 == 0 then return factorize(n/13) end\n  -- If n is divisible\
    \ by 17 then return its factors\n  if n % 17 == 0 then return factorize(n/17)\
    \ end\n  -- If n is divisible by 19 then return its factors\n  if n % 19 == 0\
    \ then return factorize(n/19) end\n  -- If n is divisible by 23 then return its\
    \ factors\n  if n % 23 == 0 then return factorize(n/23) end\n  -- If n is divisible\
    \ by 29 then return its factors\n  if n % 29 == 0 then return factorize(n/29)\
    \ end\n  -- If n is divisible by 31 then return its factors\n  if n % 31 == 0\
    \ then return factorize(n/31) end\n  -- If n is divisible by 37 then return its\
    \ factors\n  if n % 37 == 0 then return factorize(n/37) end\n  -- If n is divisible\
    \ by 41 then return its factors\n  if n % 41 == 0 then return factorize(n/41)\
    \ end\n  -- If n is divisible by 43 then return its factors\n  if n % 43 == 0\
    \ then return factorize(n/43) end\n  -- If n is divisible by 47 then return its\
    \ factors\n  if n % 47 == 0 then return factorize(n/47) end\n  -- If n is divisible\
    \ by 53 then return its factors\n  if n % 53 == 0 then return factorize(n/53) ",
  "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    return factors\nend", "    local factors = {}\n    local i = 1\n    while\
    \ i <= n do\n        local p = i\n        while n % p == 0 do\n            p =\
    \ p * i\n        end\n        factors[i] = p\n        i = i + 1\n    end\n   \
    \ return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        local p = i\n        while n % p == 0 do\n            p = p\
    \ * i\n        end\n        factors[#factors + 1] = i\n        i = p\n    end\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  while\
    \ factor <= n do\n    local i = 1\n    while i * factor <= n do\n      if n %\
    \ i == 0 then\n        factor = factor * i\n      else\n        i = i + 1\n  \
    \    end\n    end\n    table.insert(factors, factor)\n    factor = factor + 1\n\
    \  end\n  return factors\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  -- Base case\n  if n==1 then\n   \
    \ return [1]\n  end\n  -- Recursive case\n  local factors = factorize(n-1)\n \
    \ -- Find factors\n  for i=1,#factors do\n    if factors[i]==n then\n      factors[i]\
    \ = 1\n      break\n    end\n  end\n  return factors\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p ~= i then\n            factors[p] = factors[p] or 1\n          \
    \  factors[p] = factors[p] + 1\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local factor = 1\n    local i =\
    \ 1\n    while i <= n do\n        while n % i == 0 do\n            n = n / i\n\
    \            factor = factor+1\n        end\n        i = i + 1\n    end\n    if\
    \ n ~= 1 then\n        factors[#factors+1] = n\n    end\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    while n > 1 do\n    \
    \    if n % factor == 0 then\n            factors[#factors + 1] = factor\n   \
    \         n = n / factor\n        else\n            factor = factor + 1\n    \
    \    end\n    end\n    factors[#factors + 1] = n\n    return factors\nend", " \
    \ local factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while\
    \ i * p <= n do\n      p = p * i\n    end\n    factors[i] = p\n    i = i + 1\n\
    \  end\n  return factors\nend", "    local factors = {}\n    local factor = 1\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  factor = factor * i\n            i = i + 1\n        else\n            i = i\
    \ + 1\n        end\n    end\n    factors[#factors + 1] = factor\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    while factor <= n do\n\
    \        if n % factor == 0 then\n            table.insert(factors, factor)\n\
    \            n = n / factor\n        else\n            factor = factor + 1\n \
    \       end\n    end\n    return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n      i = i + 1\n    end\n  end\n  return factors\nend",
  "    local factors = {}\n    local factor = 1\n    while n ~= 1 do\n        if n\
    \ % factor == 0 then\n            factors[#factors+1] = factor\n            n\
    \ = n / factor\n        else\n            factor = factor + 1\n        end\n \
    \   end\n    factors[#factors+1] = n\n    return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or 1\n    factors[p]\
    \ = factors[p] + 1\n    i = i + 1\n  end\n  return factors\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         table.insert(factors, i)\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return [1]\n  end\n  -- Recursive case\n  local\
    \ factors = factorize(n-1)\n  -- Return list of factors\n  return factors:map(function(factor)\n\
    \    return factor * math.floor(n/factor)\n  end)\nend", "    local factors =\
    \ {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n   \
    \         table.insert(factors, i)\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i = i +\
    \ 1\n    factors[factor] = factors[factor] + 1 or 1\n  end\n  table.sort(factors)\n\
    \  return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        local factor = 1\n        for j = 1, i do\n            if n\
    \ % i == 0 then\n                factor = factor * j\n            end\n      \
    \  end\n        if factor > 1 then\n            table.insert(factors, factor)\n\
    \        end\n        i = i + 1\n    end\n    return factors\nend", "  -- Base\
    \ case\n  if n < 2 then return nil end\n  -- Recursive case\n  local factors =\
    \ {}\n  for i = 2, n do\n    local f = factorize(n/i)\n    if f ~= nil then table.insert(factors,\
    \ f) end\n  end\n  return factors\nend", "  -- Base case\n  if n < 2 then return\
    \ nil end", "  local factors = {}\n  local factor = 1\n  while n > 1 do\n    while\
    \ n % factor == 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n\
    \    end\n    factor = factor + 1\n  end\n  factors[#factors + 1] = n\n  return\
    \ factors\nend", "  -- Base case\n  if n < 2 then\n    return nil\n  end", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p == 1 then\n            factors[i] = 1\n    \
    \    else\n            factors[i] = p\n        end\n        n = i\n        i =\
    \ i + 1\n    end\n    return factors\nend", "    local factors = {}\n    local\
    \ primes = {}\n    local i = 1\n    while i <= n do\n        local p = primes[i]\n\
    \        if p == nil then\n            primes[i] = 1\n            factors[i] =\
    \ 1\n        else\n            primes[i] = p + 1\n            factors[i] = factors[p]\
    \ * primes[i]\n        end\n        i = i + 1\n    end\n    return factors\nend",
  "    local factors = {}\n    local i = 1\n    while i <= n do\n        local p =\
    \ math.floor(n/i)\n        if p == 1 then\n            factors[#factors+1] = i\n\
    \        else\n            local q = math.floor((n - p*i)/p)\n            factors[#factors+1]\
    \ = i\n            factors[#factors+1] = q\n        end\n        i = p*2\n   \
    \ end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n \
    \ while n > 1 do\n    factor = factor * n\n    factors[factor] = factors[factor]\
    \ + 1 or 1\n    factor = n\n  end\n  table.sort(factors)\n  return factors\nend",
  "    local factors = {}\n    local i = 1\n    while i * i <= n do\n        if n\
    \ % i == 0 then\n            i = i + 1\n            factors[i] = n\n        end\n\
    \        n = n / i\n    end\n    return factors\nend", "    local factors = {}\n\
    \    local factor = 1\n    local i = 1\n    while i <= n do\n        factor =\
    \ factor * i\n        if factor > n then\n            break\n        end\n   \
    \     factors[#factors+1] = factor\n        i = i + 1\n    end\n    return factors\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n    end\n    if n ~= 1 then\n        table.insert(factors, n)\n \
    \   end\n    return factors\nend", "    local factors = {}\n    local factor =\
    \ 1\n    while n > 1 do\n        factor = factor * n\n        factors[factor]\
    \ = factors[factor] + 1 or 1\n        n = n / factor\n    end\n    return factors\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n   \
    \ local p = math.floor(n/i)\n    if p*i > n then\n      break\n    end\n    factors[p]\
    \ = factors[p] or 1\n    i = i*p\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p == 1 then\n      factors[i] = 1\n      n = math.floor(n/i)\n    else\n   \
    \   factors[i] = p\n      n = math.floor(n/p)\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        if n % i == 0 then\n            factors[#factors+1] = i\n \
    \           n = n / i\n        else\n            i = i + 1\n        end\n    end\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n\
    \      factors[i] = 1\n      n = n - i * i\n    else\n      factors[i] = p\n \
    \     n = n - p * i\n    end\n    i = i + 1\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local factor = 1\n    local i = 1\n    while i <=\
    \ n do\n        if n % i == 0 then\n            factor = factor * i\n        \
    \    i = i + 1\n        else\n            i = i + 1\n        end\n    end\n  \
    \  factors[#factors + 1] = factor\n    return factors\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        local f = factorize(p)\n        for _, v in pairs(f) do\n           \
    \ if v ~= i then\n                table.insert(factors, v)\n            end\n\
    \        end\n        i = i + 1\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[i] = 1\n        else\n          \
    \  local factor = 1\n            for j = 1, p do\n                factor = factor\
    \ * i\n            end\n            factors[i] = factor\n        end\n       \
    \ i = i + 1\n    end\n    return factors\nend", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end", "  -- Base case\n  if n == 1 then\n    return [1]\n \
    \ end", "    local factors = {}\n    for i = 2, n do\n        local factor = 1\n\
    \        for j = 2, i do\n            if n % j == 0 then\n                factor\
    \ = factor * j\n            end\n        end\n        if factor ~= 1 then\n  \
    \          table.insert(factors, factor)\n        end\n    end\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    while n ~= 1 do\n   \
    \     while n % factor == 0 do\n            factors[#factors + 1] = factor\n \
    \           n = n / factor\n        end\n        factor = factor + 1\n    end\n\
    \    factors[#factors + 1] = n\n    return factors\nend", "  -- Base case\n  if\
    \ n < 2 then\n    return {}\n  end", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local\
    \ p = i\n    while i * p <= n do\n      p = p * i\n    end\n    i = i + 1\n  \
    \  factors[#factors + 1] = p\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n == 1 then return [1] end\n  -- Find all factors of given number\n  local\
    \ factors = {}\n  for i = 2, n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n    end\n  end\n  -- Return factors in order of their appearance\
    \ in factorization\n  return table.sort(factors)\nend", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n    end\n    i = i + 1\n  end\n  return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    if factor > n then\n      break\n    end\n    i =\
    \ i + 1\n  end\n  local j = 1\n  while j <= n do\n    if n % j == 0 then\n   \
    \   factors[j] = factors[j]\n      factors[j] = factors[j] + 1\n      n = n /\
    \ j\n    end\n    j = j + 1\n  end\n  return factors\nend", "  -- Initialize factorization\
    \ with 1\n  local factors = {}\n  -- Initialize factorization with 1\n  local\
    \ factorization = {}\n  -- Initialize list of prime factors\n  local primes =\
    \ {}\n  -- Initialize list of prime factors\n  local prime_factorization = {}\n\
    \  -- Initialize list of prime factors\n  local prime_factors = {}\n  -- Initialize\
    \ list of prime factors\n  local prime_factors_count = 0\n  -- Initialize list\
    \ of prime factors\n  local prime_factors_count_2 = 0\n  -- Initialize list of\
    \ prime factors\n  local prime_factors_count_3 = 0\n  -- Initialize list of prime\
    \ factors\n  local prime_factors_count_4 = 0\n  -- Initialize list of prime factors\n\
    \  local prime_factors_count_5 = 0\n  -- Initialize list of prime factors\n  local\
    \ prime_factors_count_6 = 0\n  -- Initialize list of prime factors\n  local prime_factors_count_7\
    \ = 0\n  -- Initialize list of prime factors\n  local prime_factors_count_8 =\
    \ 0\n  -- Initialize list of prime factors\n  local prime_factors_count_9 = 0\n\
    \  -- Initialize list of prime factors\n  local prime_factors_count_10 = 0\n \
    \ -- Initialize list of prime factors\n  local prime_factors_count_11 = 0\n  --\
    \ Initialize list of prime factors\n  local prime_factors_count_12 = 0\n  -- Initialize\
    \ list of prime factors\n  local prime_factors_count_13 = 0\n  -- Initialize list\
    \ of prime factors\n  local prime_factors_count_14 = 0\n  -- Initialize list of\
    \ prime factors\n  local prime_factors_count_15 = 0\n  -- Initialize list of prime\
    \ factors\n  local prime_factors_count_16 = 0\n  -- Initialize list of prime factors\n\
    \  local prime_factors_count_17 = 0\n  -- Initialize list of prime factors\n \
    \ local prime_factors_count_18 = 0\n  -- Initialize list of prime factors\n  local\
    \ prime_factors_count_19 = 0\n  -- Initialize list of prime factors\n  local prime_factors_count_20\
    \ = 0\n  -- Initialize list of prime factors\n  local prime_factors_count_21 =\
    \ 0\n  -- Initialize list of prime factors\n  local prime_factors_count_22 = 0\n\
    \  -- Initialize list of prime factors\n  local prime_factors_count_23 = 0\n \
    \ -- Initialize list of prime factors\n  local prime_factors_count_24 = 0\n  --\
    \ Initialize list of prime factors\n  local prime_factors_count_25 = 0\n  -- Initialize\
    \ list of prime factors\n  local prime_factors_count_26 = 0\n  -- Initialize ",
  "    local factors = {}\n    local i = 1\n    while i <= n do\n        if n % i\
    \ == 0 then\n            factors[#factors+1] = i\n            n = n / i\n    \
    \    else\n            i = i + 1\n        end\n    end\n    return factors\nend",
  "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    if p == 1 then\n      factors[#factors+1] = i\n    else\n      local factor\
    \ = 1\n      while p*factor <= n do\n        factors[#factors+1] = factor\n  \
    \      factor *= i\n      end\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= n do\n        local\
    \ p = math.floor(n/i)\n        factors[p] = factors[p] or {}\n        factors[p][#factors[p]+1]\
    \ = p\n        i = p + 1\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while n > 1 do\n        factor = factor * n\n\
    \        factors[factor] = factors[factor] + 1 or 1\n        n = n / factor\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "  -- Base case\n  if n == 1 then\n    return\
    \ [1]\n  end\n  -- Recursive case\n  local factors = factorize(n-1)\n  -- Add\
    \ factors\n  for i = 1, #factors do\n    factors[#factors+1] = n%factors[i]\n\
    \  end\n  return factors\nend", "    local factors = {}\n    local i = 1\n   \
    \ while i <= n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        local factor = 1\n        for j = 2, i do\n            if n % j\
    \ == 0 then\n                factor = factor * j\n            end\n        end\n\
    \        if factor ~= 1 then\n            table.insert(factors, factor)\n    \
    \    end\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n ~= 1 do\n    while n ~= factor do\n      factors[#factors + 1]\
    \ = factor\n      factor = factor * 2\n    end\n    factor = factor / 2\n    n\
    \ = n / factor\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i * i <= n do\n        if n % i == 0 then\n            i =\
    \ i + 1\n            factors[i] = 1\n        end\n    end\n    if i > 1 then\n\
    \        factors[#factors + 1] = i\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    local primes = {}\n    local factorization = {}\n    local\
    \ prime_factorization = {}\n    local prime_divisors = {}\n    local prime_divisors_count\
    \ = 0\n    local prime_divisors_sum = 0\n    local prime_divisors_sum2 = 0\n \
    \   local prime_divisors_sum3 = 0\n    local prime_divisors_sum4 = 0\n    local\
    \ prime_divisors_sum5 = 0\n    local prime_divisors_sum6 = 0\n    local prime_divisors_sum7\
    \ = 0\n    local prime_divisors_sum8 = 0\n    local prime_divisors_sum9 = 0\n\
    \    local prime_divisors_sum10 = 0\n    local prime_divisors_sum11 = 0\n    local\
    \ prime_divisors_sum12 = 0\n    local prime_divisors_sum13 = 0\n    local prime_divisors_sum14\
    \ = 0\n    local prime_divisors_sum15 = 0\n    local prime_divisors_sum16 = 0\n\
    \    local prime_divisors_sum17 = 0\n    local prime_divisors_sum18 = 0\n    local\
    \ prime_divisors_sum19 = 0\n    local prime_divisors_sum20 = 0\n    local prime_divisors_sum21\
    \ = 0\n    local prime_divisors_sum22 = 0\n    local prime_divisors_sum23 = 0\n\
    \    local prime_divisors_sum24 = 0\n    local prime_divisors_sum25 = 0\n    local\
    \ prime_divisors_sum26 = 0\n    local prime_divisors_sum27 = 0\n    local prime_divisors_sum28\
    \ = 0\n    local prime_divisors_sum29 = 0\n    local prime_divisors_sum30 = 0\n\
    \    local prime_divisors_sum31 = 0\n    local prime_divisors_sum32 = 0\n    local\
    \ prime_divisors_sum33 = 0\n    local prime_divisors_sum34 = 0\n    local prime_divisors_sum35\
    \ = 0\n    local prime_divisors_sum36 = 0\n    local prime_divisors_sum37 = 0\n\
    \    local prime_divisors_sum38 = 0\n    local prime_divisors_sum39 = 0\n    local\
    \ prime_divisors_sum40 = 0\n    local prime_divisors_sum41 = 0\n    local prime_divisors_sum42\
    \ = 0\n    local prime_divisors_sum43 = 0\n    local prime_divisors_sum44 = 0\n\
    \    local prime_divisors_sum45 = 0\n    local prime_divisors_sum46 = 0\n    local\
    \ prime_divisors_sum47 = 0\n    local prime_divisor", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  n = n / i\n            table.insert(factors, i)\n        end\n        i = i\
    \ + 1\n    end\n    return factors\nend", "  -- If n is prime then return its\
    \ prime factors\n  if n==1 then\n    return [1]\n  end", "  -- Find prime factors\n\
    \  local factors = {}\n  local primes = {}\n  local prime_factors = {}\n  local\
    \ prime_factors_count = 0\n  for i = 2, n do\n    local p = primes[i]\n    if\
    \ p then\n      prime_factors[p] = prime_factors[p] or 1\n      prime_factors[p]\
    \ = prime_factors[p] + 1\n      prime_factors_count[prime_factors[p]] = prime_factors_count[prime_factors[p]]\
    \ or 1\n    else\n      primes[i] = true\n      prime_factors[#prime_factors +\
    \ 1] = i\n      prime_factors_count[1] = prime_factors_count[1] or 1\n    end\n\
    \  end\n  -- Sort prime factors in descending order\n  table.sort(prime_factors,\
    \ function(a, b) return prime_factors_count[a] >= prime_factors_count[b] end)\n\
    \  -- Find factors\n  for i = 1, #prime_factors do\n    local p = prime_factors[i]\n\
    \    local factor = 1\n    while n % p == 0 do\n      n = n / p\n      factor\
    \ = factor * p\n    end\n    factors[factor] = factors[factor] or 1\n    factors[factor]\
    \ = factors[factor] + 1\n  end\n  return factors\nend", "  local factors = {}\n\
    \  local i = 1\n  while i * i <= n do\n    if n % i == 0 then\n      local factor\
    \ = 1\n      while i * factor <= n do\n        if n % i == 0 then\n          factor\
    \ = factor * i\n        end\n        i = i + 1\n      end\n      if factor > 1\
    \ then\n        table.insert(factors, factor)\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return factors\nend", "  -- Base case\n  if n < 2 then return nil\
    \ end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <=\
    \ n do\n    factor = factor * i\n    i = i + 1\n  end\n  i = 2\n  while i <= n\
    \ do\n    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n   \
    \ end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n\
    \      factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n \
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n   \
    \ local p = math.floor(n/i)\n    if p == 1 then\n      factors[i] = 1\n    else\n\
    \      local factor = 1\n      for j = 1, p-1 do\n        factor *= i\n      end\n\
    \      factors[i] = factor\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n\
    \    while i * p <= n do\n      p = p * i\n    end\n    factors[i] = p\n    i\
    \ = i + 1\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    if n % i == 0 then\n      factor\
    \ = factor * i\n      i = i + 1\n      factors[#factors + 1] = factor\n    end\n\
    \    i = i + 1\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while n > 1 do\n    factor = factor * n\n    factors[factor] =\
    \ factors[factor] + 1 or 1\n    factor = factor / 2\n    n = n / 2\n  end\n  return\
    \ factors\nend", "  -- Initialize list of factors\n  local factors = {}\n  --\
    \ Initialize list of prime factors\n  local primes = {}\n  -- Initialize list\
    \ of prime factors count\n  local primes_count = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max2 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min2 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max3 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min3 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max4 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min4 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max5 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min5 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max6 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min6 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max7 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min7 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max8 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min8 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max9 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min9 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max10 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min10 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max11 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min11 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max12 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min12 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_max13 = {}\n  -- Initialize list of prime\
    \ factors count\n  local primes_count_min13 = {}\n  -- Initialize list of prime\
    \ factor", "    local factors = {}\n    for i = 2, n do\n        local factor\
    \ = 1\n        for j = 2, i do\n            if n % j == 0 then\n             \
    \   factor = factor * j\n            end\n        end\n        if factor ~= 1\
    \ then\n            table.insert(factors, factor)\n        end\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local i = 1\n    while i <= n do\n\
    \        if n % i == 0 then\n            factors[#factors+1] = i\n           \
    \ n = n / i\n        else\n            i = i + 1\n        end\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local factor = 1\n    local i =\
    \ 1\n    while i <= n do\n        if n % i == 0 then\n            factor = factor\
    \ * i\n            i = i + 1\n        else\n            i = i + 1\n        end\n\
    \    end\n    factors[#factors + 1] = factor\n    return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while n > 1 do\n    factor = factor * n\n\
    \    factors[#factors + 1] = factor\n    n = n / factor\n  end\n  return factors\n\
    end", "  -- Base case\n  if n == 1 then\n    return [1]\n  end", "    local factors\
    \ = {}\n    local factor = 1\n    while n ~= 1 do\n        while n % factor ==\
    \ 0 do\n            factors[#factors + 1] = factor\n            n = n / factor\n\
    \        end\n        factor = factor + 1\n    end\n    return factors\nend",
  "    local factors = {}\n    local i = 1\n    while i * i <= n do\n        if n\
    \ % i == 0 then\n            i = i + 1\n            factors[#factors + 1] = i\n\
    \        end\n    end\n    return factors\nend", "    local factors = {}\n   \
    \ local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n      \
    \  if p == 1 then\n            factors[i] = 1\n        else\n            factors[i]\
    \ = factors[p] + 1\n        end\n        i = i + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n\
    \ do\n    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n   \
    \   factors[#factors + 1] = factor\n    end\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local factor = 1\n    while n > 1 do\n        factor\
    \ = factor * n\n        n = math.floor(n/factor)\n        factors[#factors + 1]\
    \ = factor\n    end\n    return factors\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            n = n /\
    \ i\n            table.insert(factors, i)\n        end\n        i = i + 1\n  \
    \  end\n    return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n      n = math.floor(n/i)\n    else\n      factors[i] = p\n      n = math.floor(n/p)\n\
    \    end\n    i = i + 1\n  end\n  return factors\nend", "    local factors = {}\n\
    \    local factor = 1\n    while n ~= 1 do\n        while n % factor == 0 do\n\
    \            factors[#factors + 1] = factor\n            n = n / factor\n    \
    \    end\n        factor = factor + 1\n    end\n    return factors\nend", "  \
    \  local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    factor\
    \ = factor * n\n    factors[#factors + 1] = factor\n    n = math.floor(n/factor)\n\
    \  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p == i then\n      factors[i]\
    \ = 1\n      n = n - i * i\n    else\n      factors[i] = factors[p] + 1\n    end\n\
    \    i = i + 1\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factor = factor * i\n            i = i + 1\n        else\n      \
    \      i = i + 1\n        end\n    end\n    factors[#factors + 1] = factor\n \
    \   return factors\nend", "    local factors = {}\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n            n =\
    \ n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  -- Base case\n  if n == 1 then\n \
    \   return [1]\n  end", "    local factors = {}\n    local factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            factor =\
    \ factor * i\n            i = i + 1\n        else\n            i = i + 1\n   \
    \     end\n    end\n    if factor > 1 then\n        table.insert(factors, factor)\n\
    \    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n      n = n%i\n    else\n      factors[i] = p\n      n = i\n    end\n \
    \   i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return [1]\n  end", "  -- If n is prime then return its prime factors\n \
    \ if n == 1 then\n    return [1]\n  end", "    local factors = {}\n    local i\
    \ = 1\n    while i * i <= n do\n        local p = math.floor((n - i) / i)\n  \
    \      if p * p > n then\n            factors[#factors + 1] = p\n        end\n\
    \        i = i + 1\n    end\n    return factors\nend", "    local factors = {}\n\
    \    local factor = 1\n    local i = 1\n    while n ~= 1 do\n        while n %\
    \ factor == 0 do\n            factors[#factors + 1] = factor\n            n =\
    \ n / factor\n        end\n        factor = factor + 1\n    end\n    factors[#factors\
    \ + 1] = n\n    return factors\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        local factor = 1\n        for j = 1, i do\n            if n %\
    \ i == 0 then\n                factor = factor * j\n            end\n        end\n\
    \        if factor ~= 1 then\n            table.insert(factors, factor)\n    \
    \    end\n    end\n    return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    while n ~= 1 do\n        factor = factor * n\n        factors[#factors\
    \ + 1] = factor\n        n = math.floor(n/factor)\n    end\n    return factors\n\
    end", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    while n % i\
    \ == 0 do\n      factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n\
    \    factors[#factors + 1] = factor\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while factor <= n do\n    local i = 1\n    while\
    \ i * factor <= n do\n      if n % i == 0 then\n        factor = factor * i\n\
    \        break\n      end\n      i = i + 1\n    end\n    if factor > n then\n\
    \      break\n    end\n    table.insert(factors, factor)\n    factor = factor\
    \ + 1\n  end\n  return factors\nend", "  -- Base case\n  if n < 2 then return\
    \ nil end\n  -- Recursive case\n  local factors = {}\n  local i = 1\n  while i\
    \ <= n do\n    local p = math.floor(n/i)\n    factors[p] = factors[p] or 1\n \
    \   factors[p] = factors[p] + 1\n    i = i + 1\n  end\n  return factors\nend",
  "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n     \
    \   if n % i == 0 then\n            factors[#factors+1] = i\n            n = n\
    \ / i\n        else\n            i = i + 1\n        end\n    end\n    if n ~=\
    \ 1 then\n        factors[#factors+1] = n\n    end\n    return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    i = i + 1\n    if factor > n then\n      break\n \
    \   end\n    factors[#factors + 1] = factor\n  end\n  return factors\nend", " \
    \ local factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while\
    \ i * p <= n do\n      p = p * i\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = p\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return [1]\n  end", "    local factors = {}\n    local factor = 1\n    while\
    \ n ~= 1 do\n        if n % factor == 0 then\n            n = n / factor\n   \
    \         table.insert(factors, factor)\n        end\n        factor = factor\
    \ * 2\n    end\n    return factors\nend", "    local factors = {}\n    for i =\
    \ 2, n do\n        local factor = 1\n        for j = 1, i do\n            factor\
    \ = factor * i\n        end\n        factors[#factors + 1] = factor\n    end\n\
    \    return factors\nend", "    local factors = {}\n    local factor = 1\n   \
    \ while n > 1 do\n        if n % factor == 0 then\n            table.insert(factors,\
    \ factor)\n            n = n / factor\n        else\n            factor = factor\
    \ + 1\n        end\n    end\n    table.insert(factors, n)\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n\
    \ do\n    factor = factor * i\n    i = i + 1\n    factors[#factors + 1] = factor\n\
    \  end\n  return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    while n % i == 0 do\n      n = n / i\n      factor\
    \ = factor+1\n    end\n    i = i + 1\n    factors[#factors+1] = factor\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  local i\
    \ = 1\n  while i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i\
    \ = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend",
  "    local factors = {}\n    local factor = 1\n    local i = 1\n    while i <= n\
    \ do\n        if n % i == 0 then\n            factor = factor * i\n          \
    \  i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return [1]\n  end", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        local p = math.floor(n/i)\n        if p == 1 then\n       \
    \     factors[i] = 1\n        else\n            local factor = 1\n           \
    \ for j = 1, p do\n                factor = factor * i\n            end\n    \
    \        factors[i] = factor\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n    end\n    if n ~= 1 then\n        table.insert(factors, n)\n \
    \   end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n\
    \  while n > 1 do\n    factor = factor * n\n    factors[#factors + 1] = factor\n\
    \    n = n / factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    local i = 1\n    while i * factor <=\
    \ n do\n      if n % i == 0 then\n        factor = factor * i\n        break\n\
    \      end\n      i = i + 1\n    end\n    if factor > 1 then\n      table.insert(factors,\
    \ factor)\n    end\n    factor = factor + 1\n  end\n  return factors\nend", " \
    \   local factors = {}\n    for i = 2, n do\n        local factor = 1\n      \
    \  for j = 1, i do\n            if n % i == 0 then\n                factor = factor\
    \ * j\n            end\n        end\n        if factor > 1 then\n            table.insert(factors,\
    \ factor)\n        end\n    end\n    return factors\nend", "  -- If n is prime\
    \ then return its prime factors\n  if n == 1 then\n    return [1]\n  end", " \
    \   local factors = {}\n    local factor = 1\n    local i = 1\n    while i <=\
    \ n do\n        factor = factor * i\n        if factor > n then\n            factors[#factors\
    \ + 1] = factor\n            factor = 1\n        end\n        i = i + 1\n    end\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    factor = factor * i\n    if factor > n then\n\
    \      break\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if\
    \ n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n    i\
    \ = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n      factor\
    \ = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while\
    \ i <= n do\n    if n % i == 0 then\n      factor = factor * i\n      i = i +\
    \ 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n\
    \  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor\
    \ * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n\
    \ do\n    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n   \
    \ end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n\
    \      factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n \
    \ i = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n  \
    \    factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n\
    \      i = i + 1\n", "  local factors = {}\n  local factor = 1\n  while n > 1\
    \ do\n    factor = factor * n\n    factors[factor] = factors[factor] + 1\n   \
    \ n = n / factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      factors[i]\
    \ = factors[i] + 1 or 1\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return factors\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  n = n / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if factor\
    \ > n then\n      break\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <=\
    \ n do\n    if n % i == 0 then\n      table.insert(factors, i)\n      n = n /\
    \ i\n    end\n    i = i + 1\n  end\n  return factors\nend", "  local factors =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or 1\n    i\
    \ = p + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return [1]\n  end\n  -- Recursive case\n  local factors = factorize(n-1)\n\
    \  -- Return factors\n  local factor\n  for _, factor in ipairs(factors) do\n\
    \    table.insert(factors, factor)\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n > 1 do\n    factor = factor * n % factor\n\
    \    factors[factor] = factors[factor] + 1 or 1\n    n = n / factor\n  end\n \
    \ return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        if n % i == 0 then\n            i = i * 2\n            factors[#factors\
    \ + 1] = i\n        end\n        i = i + 1\n    end\n    return factors\nend",
  "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    while n > 1 do\n    \
    \    while n % factor == 0 do\n            table.insert(factors, factor)\n   \
    \         n = n / factor\n        end\n        factor = factor + 1\n    end\n\
    \    table.insert(factors, n)\n    return factors\nend", "    local factors =\
    \ {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if n\
    \ % i == 0 then\n            factor = factor * i\n            i = i + 1\n    \
    \    else\n            i = i + 1\n        end\n    end\n    factors[#factors +\
    \ 1] = factor\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n    \
    \        factor = factor * i\n            i = i + 1\n        else\n          \
    \  i = i + 1\n        end\n    end\n    factors[#factors + 1] = factor\n    return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return [1]\n  end", " \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n\
    \ do\n    factor = factor * i\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      factors[i] = factor\n      n = n / i\n      i =\
    \ i + 1\n    end\n    i = i + 1\n  end\n  return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if\
    \ n % i == 0 then\n            factor = factor * i\n            i = i + 1\n  \
    \      else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend", "  local factors = {}\n  local i =\
    \ 1\n  while i * i <= n do\n    if n % i == 0 then\n      i = i + 1\n      factors[i]\
    \ = n\n    end\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local factor = 1\n    while\
    \ n > 1 do\n        factor = factor * n\n        factors[factor] = factors[factor]\
    \ + 1 or 1\n        n = n / factor\n    end\n    return factors\nend", "  -- Base\
    \ case\n  if n < 2 then\n    return {}\n  end", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if\
    \ factor > n then\n      break\n    end\n    i = i + 1\n  end\n  local j = 1\n\
    \  while j <= n do\n    if n % j == 0 then\n      factors[j] = factors[j] + 1\n\
    \      n = n / j\n    end\n    j = j + 1\n  end\n  return factors\nend", "   \
    \ local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n      \
    \      table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n > 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
