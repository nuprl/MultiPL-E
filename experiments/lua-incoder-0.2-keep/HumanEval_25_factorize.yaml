name: HumanEval_25_factorize
language: lua
prompt: "-- Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- [2, 2, 2]\n-- >>> factorize(25)\n\
  -- [5, 5]\n-- >>> factorize(70)\n-- [2, 5, 7]\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Initialize list of factors\n  local factors = {}\n  -- Initialize\
    \ list of prime factors\n  local primes = {}\n  -- Initialize list of prime factors\
    \ counts\n  local primes_count = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted = {}\n  -- Initialize list of prime\
    \ factors counts sorted by count\n  local primes_count_sorted_reverse = {}\n \
    \ -- Initialize list of prime factors counts sorted by count\n  local primes_count_sorted_reverse2\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse3 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse4 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse5\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse6 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse7 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse8\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse9 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse10 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse11\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse12 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse13 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse14\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse15 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse16 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n  local primes_count_sorted_reverse17\
    \ = {}\n  -- Initialize list of prime factors counts sorted by count\n  local\
    \ primes_count_sorted_reverse18 = {}\n  -- Initialize list of prime factors counts\
    \ sorted by count\n  local primes_count_sorted_reverse19 = {}\n  -- Initialize\
    \ list of prime factors counts sorted by count\n", "    local factors = {}\n \
    \   for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n ~= 1 do\n    factor = factor * n\n    factors[#factors\
    \ + 1] = factor\n    n = n / factor\n  end\n  return factors\nend", "    local\
    \ factors = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n \
    \       if n % i == 0 then\n            factor = factor * i\n            i = i\
    \ + 1\n        else\n            i = i + 1\n        end\n    end\n    factors[#factors+1]\
    \ = factor\n    return factors\nend", "  -- Base case\n  if n < 2 then return\
    \ nil end\n  -- Recursive case\n  if n % 2 == 0 then\n    return factorize(n /\
    \ 2)\n  else\n    local factors = {}\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        table.insert(factors, i)\n        n = n / i\n      end\n    end\n\
    \    if n ~= 1 then\n      table.insert(factors, n)\n    end\n    return factors\n\
    \  end\nend", "    local factors = {}\n    local factor = 1\n    while factor\
    \ <= n do\n        local i = 1\n        while i <= n do\n            if n % factor\
    \ == 0 then\n                table.insert(factors, factor)\n                n\
    \ = n / factor\n                break\n            else\n                i = i\
    \ + 1\n            end\n        end\n        factor = factor + 1\n    end\n  \
    \  return factors\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  if n % i == 0 then\n            table.insert(factors, i)\n            n = n\
    \ / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "    local factors = {}\n    local i\
    \ = 1\n    while i <= n do\n        local p = i\n        while i * p <= n do\n\
    \            p = p * i\n        end\n        factors[i] = p\n        i = i + 1\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while factor <= n do\n        local i = 1\n        while i * factor\
    \ <= n do\n            i = i + 1\n        end\n        factors[factor] = i\n \
    \       factor = factor * i\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n  end\n  i\
    \ = 2\n  while i <= n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return [1]\n  end", " \
    \   local factors = {}\n    for i = 2, n do\n        local factor = 1\n      \
    \  for j = 1, i do\n            if n % i == 0 then\n                factor = factor\
    \ * i\n                n = n / i\n                break\n            end\n   \
    \     end\n        if n ~= 1 then\n            table.insert(factors, factor)\n\
    \        end\n    end\n    return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while n ~= 1 do\n    while n % factor == 0 do\n      factors[#factors\
    \ + 1] = factor\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  while factor\
    \ <= n do\n    local i = 1\n    while i * factor <= n do\n      if n % i == 0\
    \ then\n        factor = factor * i\n        break\n      end\n      i = i + 1\n\
    \    end\n    if factor > 1 then\n      table.insert(factors, factor)\n    end\n\
    \    factor = factor + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return [1]\n  end\n  -- Recursive case\n  local factors = factorize(n-1)\n\
    \  local factors_count = #factors\n  local factors_product = 1\n  for i = 1, factors_count\
    \ do\n    factors_product = factors_product * factors[i]\n  end\n  -- Return list\
    \ of factors\n  return factors_product, factors\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  table.insert(factors, i)\n            n = n / i\n        else\n           \
    \ i = i + 1\n        end\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n ~= 1 do\n    while n ~= factor do\n    \
    \  factors[#factors + 1] = factor\n      factor = factor * 2\n    end\n    factor\
    \ = factor / 2\n    n = n / factor\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      factor = factor * i\n      i = i + 1\n      factors[#factors +\
    \ 1] = factor\n    end\n  end\n  return factors\nend", "  -- Base case\n  if n\
    \ == 1 then\n    return [1]\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
