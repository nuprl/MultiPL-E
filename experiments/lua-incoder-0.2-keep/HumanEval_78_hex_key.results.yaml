language: lua
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal function is_prime(n)\n\t\t-- The prime numbers are 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, \n\t\t-- 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97.\n\t\t-- The first prime number is 2.\n\t\tif n < 2 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\t-- The first prime number is 3.\n\t\tif n < 3 then\n\t\t\
    \treturn false\n\t\tend\n\t\t-- The first prime number is 5.\n\t\tif n < 5 then\n\
    \t\t\treturn false\n\t\tend\n\t\t-- The first prime number is 7.\n\t\tif n < 7\
    \ then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is 11.\n\t\t\
    if n < 11 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is\
    \ 13.\n\t\tif n < 13 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime\
    \ number is 17.\n\t\tif n < 17 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first\
    \ prime number is 19.\n\t\tif n < 19 then\n\t\t\treturn false\n\t\tend\n\t\t--\
    \ The first prime number is 23.\n\t\tif n < 23 then\n\t\t\treturn false\n\t\t\
    end\n\t\t-- The first prime number is 29.\n\t\tif n < 29 then\n\t\t\treturn false\n\
    \t\tend\n\t\t-- The first prime number is 31.\n\t\tif n < 31 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\t-- The first prime number is 37.\n\t\tif n < 37 then\n\t\
    \t\treturn false\n\t\tend\n\t\t-- The first prime number is 41.\n\t\tif n < 41\
    \ then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is 43.\n\t\t\
    if n < 43 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is\
    \ 47.\n\t\tif n < 47 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime\
    \ number is 53.\n\t\tif n < 53 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first\
    \ prime number is 59.\n\t\tif n < 59 then\n\t\t\treturn false\n\t\tend\n\t\t--\
    \ The first prime number is 61.\n\t\tif n < 61 then\n\t\t\treturn false\n\t\t\
    end\n\t\t-- The first prime number is 67.\n\t\tif n < 67 then\n\t\t\treturn false\n\
    \t\tend\n\t\t-- The first prime number is 71.\n\t\tif n < 71 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\t-- The first prime number is 73.\n\t\tif n < 73 then\n\t\
    \t\treturn false\n\t\tend\n\t\t-- The first prime number is 79.\n\t\tif n < 79\
    \ then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is 83.\n\t\t\
    if n < 83 then\n\t\t\treturn false\n\t\tend\n\t\t-- The first prime number is\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoibjyifs.lua:126: ''end'' expected (to close ''function''
    at line 18) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hex = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hex_key = {}\n\tlocal prime_hex_key2 = {}\n\tlocal prime_hex_key3\
    \ = {}\n\tlocal prime_hex_key4 = {}\n\tlocal prime_hex_key5 = {}\n\tlocal prime_hex_key6\
    \ = {}\n\tlocal prime_hex_key7 = {}\n\tlocal prime_hex_key8 = {}\n\tlocal prime_hex_key9\
    \ = {}\n\tlocal prime_hex_key10 = {}\n\tlocal prime_hex_key11 = {}\n\tlocal prime_hex_key12\
    \ = {}\n\tlocal prime_hex_key13 = {}\n\tlocal prime_hex_key14 = {}\n\tlocal prime_hex_key15\
    \ = {}\n\tlocal prime_hex_key16 = {}\n\tlocal prime_hex_key17 = {}\n\tlocal prime_hex_key18\
    \ = {}\n\tlocal prime_hex_key19 = {}\n\tlocal prime_hex_key20 = {}\n\tlocal prime_hex_key21\
    \ = {}\n\tlocal prime_hex_key22 = {}\n\tlocal prime_hex_key23 = {}\n\tlocal prime_hex_key24\
    \ = {}\n\tlocal prime_hex_key25 = {}\n\tlocal prime_hex_key26 = {}\n\tlocal prime_hex_key27\
    \ = {}\n\tlocal prime_hex_key28 = {}\n\tlocal prime_hex_key29 = {}\n\tlocal prime_hex_key30\
    \ = {}\n\tlocal prime_hex_key31 = {}\n\tlocal prime_hex_key32 = {}\n\tlocal prime_hex_key33\
    \ = {}\n\tlocal prime_hex_key34 = {}\n\tlocal prime_hex_key35 = {}\n\tlocal prime_hex_key36\
    \ = {}\n\tlocal prime_hex_key37 = {}\n\tlocal prime_hex_key38 = {}\n\tlocal prime_hex_key39\
    \ = {}\n\tlocal prime_hex_key40 = {}\n\tlocal prime_hex_key41 = {}\n\tlocal prime_hex_key42\
    \ = {}\n\tlocal prime_hex_key43 = {}\n\tlocal prime_hex_key44 = {}\n\tlocal prime_hex_key45\
    \ = {}\n\tlocal prime_hex_key46 = {}\n\tlocal prime_hex_key47 = {}\n\tlocal prime_hex_key48\
    \ = {}\n\tlocal prime_hex_key49 = {}\n\tlocal prime_hex_key50 = {}\n\tlocal prime_hex_key51\
    \ = {}\n\tlocal prime_hex_key52 = {}\n\tlocal prime_hex_key53 = {}\n\tlocal prime_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyfub3hxq.lua:88: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_str = string.lower(num)\n\tlocal num_len = #num_str\n\tlocal num_digits\
    \ = #num_str\n\tlocal num_primes = 0\n\tlocal num_primes_count = 0\n\tlocal num_primes_sum\
    \ = 0\n\tlocal num_primes_sum2 = 0\n\tlocal num_primes_sum3 = 0\n\tlocal num_primes_sum4\
    \ = 0\n\tlocal num_primes_sum5 = 0\n\tlocal num_primes_sum6 = 0\n\tlocal num_primes_sum7\
    \ = 0\n\tlocal num_primes_sum8 = 0\n\tlocal num_primes_sum9 = 0\n\tlocal num_primes_sum10\
    \ = 0\n\tlocal num_primes_sum11 = 0\n\tlocal num_primes_sum12 = 0\n\tlocal num_primes_sum13\
    \ = 0\n\tlocal num_primes_sum14 = 0\n\tlocal num_primes_sum15 = 0\n\tlocal num_primes_sum16\
    \ = 0\n\tlocal num_primes_sum17 = 0\n\tlocal num_primes_sum18 = 0\n\tlocal num_primes_sum19\
    \ = 0\n\tlocal num_primes_sum20 = 0\n\tlocal num_primes_sum21 = 0\n\tlocal num_primes_sum22\
    \ = 0\n\tlocal num_primes_sum23 = 0\n\tlocal num_primes_sum24 = 0\n\tlocal num_primes_sum25\
    \ = 0\n\tlocal num_primes_sum26 = 0\n\tlocal num_primes_sum27 = 0\n\tlocal num_primes_sum28\
    \ = 0\n\tlocal num_primes_sum29 = 0\n\tlocal num_primes_sum30 = 0\n\tlocal num_primes_sum31\
    \ = 0\n\tlocal num_primes_sum32 = 0\n\tlocal num_primes_sum33 = 0\n\tlocal num_primes_sum34\
    \ = 0\n\tlocal num_primes_sum35 = 0\n\tlocal num_primes_sum36 = 0\n\tlocal num_primes_sum37\
    \ = 0\n\tlocal num_primes_sum38 = 0\n\tlocal num_primes_sum39 = 0\n\tlocal num_primes_sum40\
    \ = 0\n\tlocal num_primes_sum41 = 0\n\tlocal num_primes_sum42 = 0\n\tlocal num_primes_sum43\
    \ = 0\n\tlocal num_primes_sum44 = 0\n\tlocal num_primes_sum45 = 0\n\tlocal num_primes_sum46\
    \ = 0\n\tlocal num_primes_sum47 = 0\n\tlocal num_primes_sum48 = 0\n\tlocal num_primes_sum49\
    \ = 0\n\tlocal num_primes_sum50 = 0\n\tlocal num_primes_sum51 = 0\n\tlocal num_primes_sum52\
    \ = 0\n\tlocal num_primes_sum53\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgavthzh9.lua:88: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {}\n  local primes = {}\n  local prime = 1\n  local digit = 1\n\
    \  local hexadecimal = 1\n  local hexadecimal_digit = 1\n  local hexadecimal_digit_count\
    \ = 0\n  local hexadecimal_digit_count_max = 2\n  local hexadecimal_digit_count_min\
    \ = 2\n  local hexadecimal_digit_count_min_increment = 2\n  local hexadecimal_digit_count_max_increment\
    \ = 2\n  local hexadecimal_digit_count_min_increment_max = hexadecimal_digit_count_max_increment\n\
    \  local hexadecimal_digit_count_max_increment_max = hexadecimal_digit_count_max_increment\n\
    \  local hexadecimal_digit_count_min_increment_min = hexadecimal_digit_count_min_increment\n\
    \  local hexadecimal_digit_count_max_increment_min = hexadecimal_digit_count_min_increment\n\
    \  local hexadecimal_digit_count_min_increment_min_increment = hexadecimal_digit_count_min_increment_min\n\
    \  local hexadecimal_digit_count_max_increment_min_increment = hexadecimal_digit_count_min_increment_min\n\
    \  local hexadecimal_digit_count_min_increment_min_increment_max = hexadecimal_digit_count_min_increment_min_increment_max\n\
    \  local hexadecimal_digit_count_max_increment_min_increment_max = hexadecimal_digit_count_min_increment_min_increment_max\n\
    \  local hexadecimal_digit_count_min_increment_min_increment_min_increment = hexadecimal_digit_count_min_increment_min_increment_min_increment\n\
    \  local hexadecimal_digit_count_max_increment_min_increment_min_increment = hexadecimal_digit_count_min_increment_min_increment_min_increment\n\
    \  local hexadecimal_digit_count_min_increment_min_increment_min_increment_max\
    \ = hexadecimal_digit_count_min_increment_min_increment_min_increment_max\n  local\
    \ hexadecimal_digit_count_max_increment_min_increment_min_increment_max = hexadecimal_digit_count_min_increment_min_increment_min_increment_max\n\
    \  local hexadecimal_digit_count_min_increment_min_increment_min_increment_min_increment\
    \ = hexadecimal_digit_count_min_increment_min_increment_min_increment_min_increment\n\
    \  local hexadecimal_digit_count_max_increment_min_increment_min_increment_min_increment\
    \ = hexadecimal_digit_count_min_increment_min_increment_min_increment_min_increment\n\
    \  local hexadecimal_digit_count_min_increment_min_increment_min_increment_min_increment_max\
    \ = hexadecimal_digit_count_min_increment_min_increment_min_increment_min_increment_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluph_16o.lua:56: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = {}\n\tlocal prime_digit_sum = {}\n\tlocal prime_digit_sum2\
    \ = {}\n\tlocal prime_digit_sum3 = {}\n\tlocal prime_digit_sum4 = {}\n\tlocal\
    \ prime_digit_sum5 = {}\n\tlocal prime_digit_sum6 = {}\n\tlocal prime_digit_sum7\
    \ = {}\n\tlocal prime_digit_sum8 = {}\n\tlocal prime_digit_sum9 = {}\n\tlocal\
    \ prime_digit_sum10 = {}\n\tlocal prime_digit_sum11 = {}\n\tlocal prime_digit_sum12\
    \ = {}\n\tlocal prime_digit_sum13 = {}\n\tlocal prime_digit_sum14 = {}\n\tlocal\
    \ prime_digit_sum15 = {}\n\tlocal prime_digit_sum16 = {}\n\tlocal prime_digit_sum17\
    \ = {}\n\tlocal prime_digit_sum18 = {}\n\tlocal prime_digit_sum19 = {}\n\tlocal\
    \ prime_digit_sum20 = {}\n\tlocal prime_digit_sum21 = {}\n\tlocal prime_digit_sum22\
    \ = {}\n\tlocal prime_digit_sum23 = {}\n\tlocal prime_digit_sum24 = {}\n\tlocal\
    \ prime_digit_sum25 = {}\n\tlocal prime_digit_sum26 = {}\n\tlocal prime_digit_sum27\
    \ = {}\n\tlocal prime_digit_sum28 = {}\n\tlocal prime_digit_sum29 = {}\n\tlocal\
    \ prime_digit_sum30 = {}\n\tlocal prime_digit_sum31 = {}\n\tlocal prime_digit_sum32\
    \ = {}\n\tlocal prime_digit_sum33 = {}\n\tlocal prime_digit_sum34 = {}\n\tlocal\
    \ prime_digit_sum35 = {}\n\tlocal prime_digit_sum36 = {}\n\tlocal prime_digit_sum37\
    \ = {}\n\tlocal prime_digit_sum38 = {}\n\tlocal prime_digit_sum39 = {}\n\tlocal\
    \ prime_digit_sum40 = {}\n\tlocal prime_digit_sum41 = {}\n\tlocal prime_digit_sum42\
    \ = {}\n\tlocal prime_digit_sum43 = {}\n\tlocal prime_digit_sum44 = {}\n\tlocal\
    \ prime_digit_sum45 = {}\n\tlocal prime_digit_sum46 = {}\n\tlocal prime_digit_sum47\
    \ = {}\n\tlocal prime_digit_sum48 = {}\n\tlocal prime_digit_sum49 = {}\n\tlocal\
    \ prime_digit_sum50 = {}\n\tlocal prime_digit_sum51 = {}\n\tlocal prime_digit_sum52\
    \ = {}\n\tlocal prime_digit_sum53 = {}\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzdu46szz.lua:88: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local num_str = string.gsub(num, \":\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \"-\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \".\", \"\")\n    local num_str = string.gsub(num_str, \"-\", \"\")\n    local\
    \ num_str = string.gsub(num_str, \".\", \"\")\n    local num_str = string.gsub(num_str,\
    \ \"-\", \"\")\n    local num_str = string.gsub(num_str, \".\", \"\")\n    local\
    \ num_str = string.gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphwzlxvmx.lua:70: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hexadecimal = {}\n\tlocal primes = {}\n\tlocal prime_counter = 0\n\tlocal\
    \ prime_digits = {}\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter\
    \ = 0\n\tlocal prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\n\t\
    local prime_digits_counter = 0\n\tlocal prime_digits_counter = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0i9f2tbl.lua:95: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_hex = {}\n\tlocal prime_hex_len\
    \ = {}\n\tlocal prime_hex_digits = {}\n\tlocal prime_hex_digit_len = {}\n\tlocal\
    \ prime_hex_digit_count = {}\n\tlocal prime_hex_digit_count_len = {}\n\tlocal\
    \ prime_hex_digit_count_count = {}\n\tlocal prime_hex_digit_count_count_len =\
    \ {}\n\tlocal prime_hex_digit_count_count_count = {}\n\tlocal prime_hex_digit_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count = {}\n\tlocal prime_hex_digit_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count = {}\n\tlocal\
    \ prime_hex_digit_count_count_count_count_count_len = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_len\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = {}\n\tlocal prime_hex_digit_count_count_count_count_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphe75alb8.lua:66: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = {}\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvi_umanp.lua:89: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal num_len = #num\n\tlocal prime_digits = {}\n\tlocal prime_digit_count =\
    \ 0\n\tlocal prime_digit_count_2 = 0\n\tlocal prime_digit_count_3 = 0\n\tlocal\
    \ prime_digit_count_5 = 0\n\tlocal prime_digit_count_7 = 0\n\tlocal prime_digit_count_11\
    \ = 0\n\tlocal prime_digit_count_13 = 0\n\tlocal prime_digit_count_17 = 0\n\t\
    local prime_digit_count_19 = 0\n\tlocal prime_digit_count_23 = 0\n\tlocal prime_digit_count_29\
    \ = 0\n\tlocal prime_digit_count_31 = 0\n\tlocal prime_digit_count_37 = 0\n\t\
    local prime_digit_count_41 = 0\n\tlocal prime_digit_count_43 = 0\n\tlocal prime_digit_count_47\
    \ = 0\n\tlocal prime_digit_count_53 = 0\n\tlocal prime_digit_count_59 = 0\n\t\
    local prime_digit_count_61 = 0\n\tlocal prime_digit_count_67 = 0\n\tlocal prime_digit_count_71\
    \ = 0\n\tlocal prime_digit_count_73 = 0\n\tlocal prime_digit_count_79 = 0\n\t\
    local prime_digit_count_83 = 0\n\tlocal prime_digit_count_89 = 0\n\tlocal prime_digit_count_97\
    \ = 0\n\tlocal prime_digit_count_101 = 0\n\tlocal prime_digit_count_107 = 0\n\t\
    local prime_digit_count_113 = 0\n\tlocal prime_digit_count_119 = 0\n\tlocal prime_digit_count_127\
    \ = 0\n\tlocal prime_digit_count_131 = 0\n\tlocal prime_digit_count_137 = 0\n\t\
    local prime_digit_count_139 = 0\n\tlocal prime_digit_count_147 = 0\n\tlocal prime_digit_count_151\
    \ = 0\n\tlocal prime_digit_count_157 = 0\n\tlocal prime_digit_count_163 = 0\n\t\
    local prime_digit_count_167 = 0\n\tlocal prime_digit_count_173 = 0\n\tlocal prime_digit_count_179\
    \ = 0\n\tlocal prime_digit_count_181 = 0\n\tlocal prime_digit_count_191 = 0\n\t\
    local prime_digit_count_197 = 0\n\tlocal prime_digit_count_203 = 0\n\tlocal prime_digit_count_209\
    \ = 0\n\tlocal prime_digit_count_217 = 0\n\tlocal prime_digit_count_223 = 0\n\t\
    local prime_digit_count_229 = 0\n\tlocal prime_digit_count_233 = 0\n\tlocal prime_digit_count_239\
    \ = 0\n\tlocal prime_digit_count_247 = 0\n\tlocal prime_digit_count_251 = 0\n\t\
    local prime_digit_count_257 = 0\n\tlocal prime_digit_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6kzztbys.lua:87: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal num_digits = #num\n\tlocal num_primes = 0\n\tlocal\
    \ num_primes_count = 0\n\tlocal num_primes_sum = 0\n\tlocal num_primes_sum_2 =\
    \ 0\n\tlocal num_primes_sum_3 = 0\n\tlocal num_primes_sum_4 = 0\n\tlocal num_primes_sum_5\
    \ = 0\n\tlocal num_primes_sum_6 = 0\n\tlocal num_primes_sum_7 = 0\n\tlocal num_primes_sum_8\
    \ = 0\n\tlocal num_primes_sum_9 = 0\n\tlocal num_primes_sum_10 = 0\n\tlocal num_primes_sum_11\
    \ = 0\n\tlocal num_primes_sum_12 = 0\n\tlocal num_primes_sum_13 = 0\n\tlocal num_primes_sum_14\
    \ = 0\n\tlocal num_primes_sum_15 = 0\n\tlocal num_primes_sum_16 = 0\n\tlocal num_primes_sum_17\
    \ = 0\n\tlocal num_primes_sum_18 = 0\n\tlocal num_primes_sum_19 = 0\n\tlocal num_primes_sum_20\
    \ = 0\n\tlocal num_primes_sum_21 = 0\n\tlocal num_primes_sum_22 = 0\n\tlocal num_primes_sum_23\
    \ = 0\n\tlocal num_primes_sum_24 = 0\n\tlocal num_primes_sum_25 = 0\n\tlocal num_primes_sum_26\
    \ = 0\n\tlocal num_primes_sum_27 = 0\n\tlocal num_primes_sum_28 = 0\n\tlocal num_primes_sum_29\
    \ = 0\n\tlocal num_primes_sum_30 = 0\n\tlocal num_primes_sum_31 = 0\n\tlocal num_primes_sum_32\
    \ = 0\n\tlocal num_primes_sum_33 = 0\n\tlocal num_primes_sum_34 = 0\n\tlocal num_primes_sum_35\
    \ = 0\n\tlocal num_primes_sum_36 = 0\n\tlocal num_primes_sum_37 = 0\n\tlocal num_primes_sum_38\
    \ = 0\n\tlocal num_primes_sum_39 = 0\n\tlocal num_primes_sum_40 = 0\n\tlocal num_primes_sum_41\
    \ = 0\n\tlocal num_primes_sum_42 = 0\n\tlocal num_primes_sum_43 = 0\n\tlocal num_primes_sum_44\
    \ = 0\n\tlocal num_primes_sum_45 = 0\n\tlocal num_primes_sum_46 = 0\n\tlocal num_primes_sum_47\
    \ = 0\n\tlocal num_primes_sum_48 = 0\n\tlocal num_primes_sum_49 = 0\n\tlocal num_primes_sum_50\
    \ = 0\n\tlocal num_primes_sum_51 = 0\n\tlocal num_primes_sum_52 = 0\n\tlocal num_primes_sum_53\
    \ = 0\n\tlocal num_primes_sum_54 = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzg2tlfie.lua:89: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal prime_count = 0\n\tlocal prime_digits = {}\n\tlocal\
    \ prime_digit_count = 0\n\tlocal prime_digit_sum = 0\n\tlocal prime_digit_sum2\
    \ = 0\n\tlocal prime_digit_sum3 = 0\n\tlocal prime_digit_sum4 = 0\n\tlocal prime_digit_sum5\
    \ = 0\n\tlocal prime_digit_sum6 = 0\n\tlocal prime_digit_sum7 = 0\n\tlocal prime_digit_sum8\
    \ = 0\n\tlocal prime_digit_sum9 = 0\n\tlocal prime_digit_sum10 = 0\n\tlocal prime_digit_sum11\
    \ = 0\n\tlocal prime_digit_sum12 = 0\n\tlocal prime_digit_sum13 = 0\n\tlocal prime_digit_sum14\
    \ = 0\n\tlocal prime_digit_sum15 = 0\n\tlocal prime_digit_sum16 = 0\n\tlocal prime_digit_sum17\
    \ = 0\n\tlocal prime_digit_sum18 = 0\n\tlocal prime_digit_sum19 = 0\n\tlocal prime_digit_sum20\
    \ = 0\n\tlocal prime_digit_sum21 = 0\n\tlocal prime_digit_sum22 = 0\n\tlocal prime_digit_sum23\
    \ = 0\n\tlocal prime_digit_sum24 = 0\n\tlocal prime_digit_sum25 = 0\n\tlocal prime_digit_sum26\
    \ = 0\n\tlocal prime_digit_sum27 = 0\n\tlocal prime_digit_sum28 = 0\n\tlocal prime_digit_sum29\
    \ = 0\n\tlocal prime_digit_sum30 = 0\n\tlocal prime_digit_sum31 = 0\n\tlocal prime_digit_sum32\
    \ = 0\n\tlocal prime_digit_sum33 = 0\n\tlocal prime_digit_sum34 = 0\n\tlocal prime_digit_sum35\
    \ = 0\n\tlocal prime_digit_sum36 = 0\n\tlocal prime_digit_sum37 = 0\n\tlocal prime_digit_sum38\
    \ = 0\n\tlocal prime_digit_sum39 = 0\n\tlocal prime_digit_sum40 = 0\n\tlocal prime_digit_sum41\
    \ = 0\n\tlocal prime_digit_sum42 = 0\n\tlocal prime_digit_sum43 = 0\n\tlocal prime_digit_sum44\
    \ = 0\n\tlocal prime_digit_sum45 = 0\n\tlocal prime_digit_sum46 = 0\n\tlocal prime_digit_sum47\
    \ = 0\n\tlocal prime_digit_sum48 = 0\n\tlocal prime_digit_sum49 = 0\n\tlocal prime_digit_sum50\
    \ = 0\n\tlocal prime_digit_sum51 = 0\n\tlocal prime_digit_sum52 = 0\n\tlocal prime_digit_sum53\
    \ = 0\n\tlocal prime_digit_sum54 = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplakpvsvp.lua:89: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal digits = {}\n\tlocal digits_count\
    \ = 0\n\tlocal primes_count_2 = 0\n\tlocal digits_count_2 = 0\n\tlocal primes_count_3\
    \ = 0\n\tlocal digits_count_3 = 0\n\tlocal primes_count_4 = 0\n\tlocal digits_count_4\
    \ = 0\n\tlocal primes_count_5 = 0\n\tlocal digits_count_5 = 0\n\tlocal primes_count_6\
    \ = 0\n\tlocal digits_count_6 = 0\n\tlocal primes_count_7 = 0\n\tlocal digits_count_7\
    \ = 0\n\tlocal primes_count_8 = 0\n\tlocal digits_count_8 = 0\n\tlocal primes_count_9\
    \ = 0\n\tlocal digits_count_9 = 0\n\tlocal primes_count_10 = 0\n\tlocal digits_count_10\
    \ = 0\n\tlocal primes_count_11 = 0\n\tlocal digits_count_11 = 0\n\tlocal primes_count_12\
    \ = 0\n\tlocal digits_count_12 = 0\n\tlocal primes_count_13 = 0\n\tlocal digits_count_13\
    \ = 0\n\tlocal primes_count_14 = 0\n\tlocal digits_count_14 = 0\n\tlocal primes_count_15\
    \ = 0\n\tlocal digits_count_15 = 0\n\tlocal primes_count_16 = 0\n\tlocal digits_count_16\
    \ = 0\n\tlocal primes_count_17 = 0\n\tlocal digits_count_17 = 0\n\tlocal primes_count_18\
    \ = 0\n\tlocal digits_count_18 = 0\n\tlocal primes_count_19 = 0\n\tlocal digits_count_19\
    \ = 0\n\tlocal primes_count_20 = 0\n\tlocal digits_count_20 = 0\n\tlocal primes_count_21\
    \ = 0\n\tlocal digits_count_21 = 0\n\tlocal primes_count_22 = 0\n\tlocal digits_count_22\
    \ = 0\n\tlocal primes_count_23 = 0\n\tlocal digits_count_23 = 0\n\tlocal primes_count_24\
    \ = 0\n\tlocal digits_count_24 = 0\n\tlocal primes_count_25 = 0\n\tlocal digits_count_25\
    \ = 0\n\tlocal primes_count_26 = 0\n\tlocal digits_count_26 = 0\n\tlocal primes_count_27\
    \ = 0\n\tlocal digits_count_27 = 0\n\tlocal primes_count_28 = 0\n\tlocal digits_count_28\
    \ = 0\n\tlocal primes_count_29 = 0\n\tlocal digits_count_29 = 0\n\tlocal primes_count_30\
    \ = 0\n\tlocal digits_count_30 = 0\n\tlocal primes_count_31 = 0\n\tlocal digits_count_31\
    \ = 0\n\tlocal primes_count_32 = 0\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp26wb2lo7.lua:96: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {}\n\tlocal hexadecimal = {}\n\tlocal prime = {}\n\tlocal prime_hex\
    \ = {}\n\tlocal prime_hexadecimal = {}\n\tlocal prime_hexadecimal_hex = {}\n\t\
    local prime_hexadecimal_hexadecimal = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\t\
    local prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal = {}\n\
    \tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal\
    \ = {}\n\tlocal prime_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexadecimal_hexa\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpujlsyr11.lua:51: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal primes_count_max = 2\n\t\
    local primes_count_min = 2\n\tlocal primes_count_step = 2\n\tlocal primes_count_max\
    \ = math.floor(math.sqrt(math.pow(primes_count_max, 2)))\n\tlocal primes_count_min\
    \ = math.floor(math.sqrt(math.pow(primes_count_min, 2)))\n\tlocal primes_count_step\
    \ = math.floor(math.sqrt(math.pow(primes_count_step, 2)))\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_max\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_min\n\tlocal primes_count_step = primes_count_step * primes_count_step\n\
    \tlocal primes_count_max = primes_count_max * primes_count_max\n\tlocal primes_count_min\
    \ = primes_count_min * primes_count_min\n\tlocal primes_count_step = primes_count_step\
    \ * primes_count_step\n\tlocal primes_count_max = primes_count_max * primes_count_max\n\
    \tlocal primes_count_min = primes_count_min * primes_count_min\n\tlocal primes_count_step\
    \ = primes_count_step * primes_count_step\n\tlocal primes_count_max = primes_count_max\
    \ * primes_count_max\n\tlocal primes_count_min = primes_count_min * primes_count_min\n\
    \tlocal primes_count_step = primes_count_step * primes_count_step\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_max\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_min\n\tlocal primes_count_step = primes_count_step * primes_count_step\n\
    \tlocal primes_count_max = primes_count_max * primes_count_max\n\tlocal primes_count_min\
    \ = primes_count_min * primes_count_min\n\tlocal primes_count_step = primes_count_step\
    \ * primes_count_step\n\tlocal primes_count_max = primes_count_max * primes_count_max\n\
    \tlocal primes_count_min = primes_count_min * primes_count_min\n\tlocal primes_count_step\
    \ = primes_count_step * primes_count_step\n\tlocal primes_count_max = primes_count_max\
    \ * primes_count_max\n\tlocal primes_count_min = primes_count_min * primes_count_min\n\
    \tlocal primes_count_step = primes_count_step * primes_count_step\n\tlocal primes_count_max\
    \ = primes_count_max * primes_count_max\n\tlocal primes_count_min = primes_count_min\
    \ * primes_count_min\n\tlocal primes_count_step = primes_count_step\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4e7sumcy.lua:65: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {}\n  local num_digits = #num\n  local prime_digits = {}\n\
    \  local prime_digits_count = 0\n  local prime_digit_count = 0\n  local prime_digit_count_2\
    \ = 0\n  local prime_digit_count_3 = 0\n  local prime_digit_count_4 = 0\n  local\
    \ prime_digit_count_5 = 0\n  local prime_digit_count_6 = 0\n  local prime_digit_count_7\
    \ = 0\n  local prime_digit_count_8 = 0\n  local prime_digit_count_9 = 0\n  local\
    \ prime_digit_count_10 = 0\n  local prime_digit_count_11 = 0\n  local prime_digit_count_12\
    \ = 0\n  local prime_digit_count_13 = 0\n  local prime_digit_count_14 = 0\n  local\
    \ prime_digit_count_15 = 0\n  local prime_digit_count_16 = 0\n  local prime_digit_count_17\
    \ = 0\n  local prime_digit_count_18 = 0\n  local prime_digit_count_19 = 0\n  local\
    \ prime_digit_count_20 = 0\n  local prime_digit_count_21 = 0\n  local prime_digit_count_22\
    \ = 0\n  local prime_digit_count_23 = 0\n  local prime_digit_count_24 = 0\n  local\
    \ prime_digit_count_25 = 0\n  local prime_digit_count_26 = 0\n  local prime_digit_count_27\
    \ = 0\n  local prime_digit_count_28 = 0\n  local prime_digit_count_29 = 0\n  local\
    \ prime_digit_count_30 = 0\n  local prime_digit_count_31 = 0\n  local prime_digit_count_32\
    \ = 0\n  local prime_digit_count_33 = 0\n  local prime_digit_count_34 = 0\n  local\
    \ prime_digit_count_35 = 0\n  local prime_digit_count_36 = 0\n  local prime_digit_count_37\
    \ = 0\n  local prime_digit_count_38 = 0\n  local prime_digit_count_39 = 0\n  local\
    \ prime_digit_count_40 = 0\n  local prime_digit_count_41 = 0\n  local prime_digit_count_42\
    \ = 0\n  local prime_digit_count_43 = 0\n  local prime_digit_count_44 = 0\n  local\
    \ prime_digit_count_45 = 0\n  local prime_digit_count_46 = 0\n  local prime_digit_count_47\
    \ = 0\n  local prime_digit_count_48 = 0\n  local prime_digit_count_49 = 0\n  local\
    \ prime_digit_count_50 = 0\n  local prime_digit_count_51 = 0\n  local prime_digit_count_52\
    \ = 0\n  local prime_digit_count_53 = 0\n  local prime_digit_count_54 = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjbz0wh_6.lua:88: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal primes = {}\n\tlocal primes_count = 0\n\tlocal hexadecimals = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnvm5_rdd.lua:21: '')'' expected (to close ''('' at line 20)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex = {}\n\tlocal primes = {}\n\tlocal prime_digits = {}\n\tlocal prime_digit_count\
    \ = 0\n\tlocal prime_digit_count_max = 0\n\tlocal prime_digit_count_min = 0\n\t\
    local prime_digit_count_sum = 0\n\tlocal prime_digit_count_sum2 = 0\n\tlocal prime_digit_count_sum3\
    \ = 0\n\tlocal prime_digit_count_sum4 = 0\n\tlocal prime_digit_count_sum5 = 0\n\
    \tlocal prime_digit_count_sum6 = 0\n\tlocal prime_digit_count_sum7 = 0\n\tlocal\
    \ prime_digit_count_sum8 = 0\n\tlocal prime_digit_count_sum9 = 0\n\tlocal prime_digit_count_sum10\
    \ = 0\n\tlocal prime_digit_count_sum11 = 0\n\tlocal prime_digit_count_sum12 =\
    \ 0\n\tlocal prime_digit_count_sum13 = 0\n\tlocal prime_digit_count_sum14 = 0\n\
    \tlocal prime_digit_count_sum15 = 0\n\tlocal prime_digit_count_sum16 = 0\n\tlocal\
    \ prime_digit_count_sum17 = 0\n\tlocal prime_digit_count_sum18 = 0\n\tlocal prime_digit_count_sum19\
    \ = 0\n\tlocal prime_digit_count_sum20 = 0\n\tlocal prime_digit_count_sum21 =\
    \ 0\n\tlocal prime_digit_count_sum22 = 0\n\tlocal prime_digit_count_sum23 = 0\n\
    \tlocal prime_digit_count_sum24 = 0\n\tlocal prime_digit_count_sum25 = 0\n\tlocal\
    \ prime_digit_count_sum26 = 0\n\tlocal prime_digit_count_sum27 = 0\n\tlocal prime_digit_count_sum28\
    \ = 0\n\tlocal prime_digit_count_sum29 = 0\n\tlocal prime_digit_count_sum30 =\
    \ 0\n\tlocal prime_digit_count_sum31 = 0\n\tlocal prime_digit_count_sum32 = 0\n\
    \tlocal prime_digit_count_sum33 = 0\n\tlocal prime_digit_count_sum34 = 0\n\tlocal\
    \ prime_digit_count_sum35 = 0\n\tlocal prime_digit_count_sum36 = 0\n\tlocal prime_digit_count_sum37\
    \ = 0\n\tlocal prime_digit_count_sum38 = 0\n\tlocal prime_digit_count_sum39 =\
    \ 0\n\tlocal prime_digit_count_sum40 = 0\n\tlocal prime_digit_count_sum41 = 0\n\
    \tlocal prime_digit_count_sum42 = 0\n\tlocal prime_digit_count_sum43 = 0\n\tlocal\
    \ prime_digit_count_sum44 = 0\n\tlocal prime_digit_count_sum45 = 0\n\tlocal prime_digit_count_sum46\
    \ = 0\n\tlocal prime_digit_count_sum47 = 0\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi9dnmzew.lua:84: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {}\n  local primes_count = 0\n  local hexadecimals = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg12pipcy.lua:21: '')'' expected (to close ''('' at line 20)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hexadecimal = {}\n    local primes = {}\n    local prime_digits = {}\n\
    \    local prime_digit_count = {}\n    local prime_digit_count_max = {}\n    local\
    \ prime_digit_count_max_index = {}\n    local prime_digit_count_max_index[1] =\
    \ 1\n    local prime_digit_count_max_index[2] = 2\n    local prime_digit_count_max_index[3]\
    \ = 3\n    local prime_digit_count_max_index[4] = 4\n    local prime_digit_count_max_index[5]\
    \ = 5\n    local prime_digit_count_max_index[6] = 6\n    local prime_digit_count_max_index[7]\
    \ = 7\n    local prime_digit_count_max_index[8] = 8\n    local prime_digit_count_max_index[9]\
    \ = 9\n    local prime_digit_count_max_index[10] = 10\n    local prime_digit_count_max_index[11]\
    \ = 11\n    local prime_digit_count_max_index[12] = 12\n    local prime_digit_count_max_index[13]\
    \ = 13\n    local prime_digit_count_max_index[14] = 14\n    local prime_digit_count_max_index[15]\
    \ = 15\n    local prime_digit_count_max_index[16] = 16\n    local prime_digit_count_max_index[17]\
    \ = 17\n    local prime_digit_count_max_index[18] = 18\n    local prime_digit_count_max_index[19]\
    \ = 19\n    local prime_digit_count_max_index[20] = 20\n    local prime_digit_count_max_index[21]\
    \ = 21\n    local prime_digit_count_max_index[22] = 22\n    local prime_digit_count_max_index[23]\
    \ = 23\n    local prime_digit_count_max_index[24] = 24\n    local prime_digit_count_max_index[25]\
    \ = 25\n    local prime_digit_count_max_index[26] = 26\n    local prime_digit_count_max_index[27]\
    \ = 27\n    local prime_digit_count_max_index[28] = 28\n    local prime_digit_count_max_index[29]\
    \ = 29\n    local prime_digit_count_max_index[30] = 30\n    local prime_digit_count_max_index[31]\
    \ = 31\n    local prime_digit_count_max_index[32] = 32\n    local prime_digit_count_max_index[33]\
    \ = 33\n    local prime_digit_count_max_index[34] = 34\n    local prime_digit_count_max_index[35]\
    \ = 35\n    local prime_digit_count_max_index[36] = 36\n    local prime_digit_count_max_index[37]\
    \ = 37\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw_jcxtni.lua:24: unexpected symbol near ''[''

    '
  stdout: ''
