name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- False\n-- >>> is_prime(101)\n-- True\n-- >>> is_prime(11)\n-- True\n-- >>> is_prime(13441)\n\
  -- True\n-- >>> is_prime(61)\n-- True\n-- >>> is_prime(4)\n-- False\n-- >>> is_prime(1)\n\
  -- False\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return\
    \ true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n\
    \  while i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend", "  if n < 2 then return false end\n\
    \  if n == 2 then return true end\n  if n == 1 then return false end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n %\
    \ 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if n\
    \ == 1 then return false end\n  if n == 0 then return false end\n  if n % 2 ==\
    \ 0 then return false end\n  if n % 3 == 0 then return false end\n  if n % 5 ==\
    \ 0 then return false end\n  if n % 7 == 0 then return false end\n  if n == 1\
    \ then return false end\n  if n == 0 then return false end\n  if n % 2 == 0 then\
    \ return false end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then\
    \ return false end\n  if n % 7 == 0 then return false end\n  if n == 1 then return\
    \ false end\n  if n == 0 then return false end\n  if n % 2 == 0 then return false\
    \ end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false\
    \ end\n  if n % 7 == 0 then return false end\n  if n == 1 then return false end\n\
    \  if n == 0 then return false end\n  if n % 2 == 0 then return false end\n  if\
    \ n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if\
    \ n % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n\
    \ == 0 then return false end\n  if n % 2 == 0 then return false end\n  if n %\
    \ 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n  if n\
    \ % 7 == 0 then return false end\n  if n == 1 then return false end\n  if n ==\
    \ 0 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n == 1 then return false end\n  if n == 0 then\
    \ return false end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then\
    \ return false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then\
    \ return false end\n  if n == 1 then return false end\n  if n == 0 then return\
    \ false end\n  if n % ", "  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python\n\
    \  -- http://stackoverflow.com/questions/2068", "  if n < 2 then return false\
    \ end\n  if n == 2 then return true end\n  if n % 2 == 0 then return false end\n\
    \  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n\
    \  if n % 7 == 0 then return false end\n  for i = 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\ndo\n  if n % i == 0 then\
    \ return false end\nend\nreturn true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even numbers for primeness\n  local i = 3\n\
    \  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n  \
    \  end\n    i = i + 2\n  end\n  return true\nend", "  if n < 2 then return false\
    \ end\n  if n == 2 then return true end\n  if n % 2 == 0 then return false end\n\
    \  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return false end\n\
    \  if n % 7 == 0 then return false end\n  if n % 11 == 0 then return false end\n\
    \  if n % 13 == 0 then return false end\n  if n % 17 == 0 then return false end\n\
    \  if n % 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n\
    \  if n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 217 == 0 then return false ", "  -- The prime test is based\
    \ on the sieve of Eratosthenes. \n  -- The sieve consists of two arrays, one containing\
    \ the odd numbers, \n  -- one containing the even numbers. \n  -- The even numbers\
    \ are the multiples of 2 less than the odd numbers. \n  -- The odd numbers are\
    \ the multiples of 2 greater than the odd numbers. \n  -- The sieve is then generated\
    \ by starting with the odd numbers and \n  -- multiplying them by 2 until they\
    \ are greater than the previous \n  -- odd number. \n  -- The odd numbers are\
    \ then added to the even numbers to get the \n  -- next odd number. \n  -- The\
    \ process continues until there are no more odd numbers. \n  -- The final sieve\
    \ is the concatenation of the odd numbers and the \n  -- even numbers. \n  --\
    \ The sieve is also called the Sieve of Atkin. \n  -- The Sieve of Atkin is described\
    \ in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Atkin\n  -- The\
    \ Sieve of Atkin is also known as the Sieve of Eratosthenes \n  -- The Sieve of\
    \ Eratosthenes is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- The Sieve of Eratosthenes is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The Sieve of Sundaram is described in detail here: \n  -- http://en.wikipedia.org/wiki/Sieve_",
  "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n \
    \ end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\n\
    \  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if n %\
    \ 7 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if n % 11 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd and even\n  if n % 13 == 0 then\n\
    \    return false\n  end\n  -- Check odd and even\n  if n % 17 == 0 then\n   \
    \ return false\n  end\n  -- Check odd and even\n  if n % 19 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even\n  if n % 23 == 0 then\n    return false\n\
    \  end\n  -- Check odd and even\n  if n % 29 == 0 then\n    return false\n  end\n\
    \  -- Check odd and even\n  if n % 31 == 0 then\n    return false\n  end\n  --\
    \ Check odd and even\n  if n % 37 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even\n  if n % 41 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even\n  if n % 43 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check odd and even\n\
    \  if n % 53 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if\
    \ n % 59 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if n %\
    \ 61 == 0 then\n    return false\n  end\n  -- Check odd and even\n  if n % 67\
    \ == 0 then\n    return false\n  end\n  -- Check odd and even\n  if n % 71 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd and even\n  if n % 73 == 0 then\n\
    \    return false\n  end\n  -- Check odd and even\n  if n % 79 == 0 then\n   \
    \ return false\n  end\n  -- Check odd and even\n  if n % 83 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even\n  if n % 89 == 0 then\n    return false\n\
    \  end\n  -- Check odd and even\n  if n % 97 == 0 then\n    return false\n  end\n\
    \  -- Check odd and even\n  if n % 101 == 0 then\n    return false\n  end\n  --\
    \ Check odd and even\n", "  -- The prime number theorem states that a prime number\
    \ greater than 1 has only two divisors: 1 and itself.\n  -- The first prime number\
    \ is named 2. The number 1 is named 1.\n  -- The number 2 is named 3. The number\
    \ 3 is named 5 and so on...\n  -- The number n can be written as the sum of consecutive\
    \ powers of prime numbers.\n  -- The first prime number is named 2. The number\
    \ 1 is named 1.\n  -- The number 2 is named 3. The number 3 is named 5 and so\
    \ on...\n  -- The number n can be written as the sum of consecutive powers of\
    \ prime numbers.\n  -- The first prime number is named 2. The number 1 is named\
    \ 1.\n  -- The number 2 is named 3. The number 3 is named 5 and so on...\n  --\
    \ The number n can be written as the sum of consecutive powers of prime numbers.\n\
    \  -- The first prime number is named 2. The number 1 is named 1.\n  -- The number\
    \ 2 is named 3. The number 3 is named 5 and so on...\n  -- The number n can be\
    \ written as the sum of consecutive powers of prime numbers.\n  -- The first prime\
    \ number is named 2. The number 1 is named 1.\n  -- The number 2 is named 3. The\
    \ number 3 is named 5 and so on...\n  -- The number n can be written as the sum\
    \ of consecutive powers of prime numbers.\n  -- The first prime number is named\
    \ 2. The number 1 is named 1.\n  -- The number 2 is named 3. The number 3 is named\
    \ 5 and so on...\n  -- The number n can be written as the sum of consecutive powers\
    \ of prime numbers.\n  -- The first prime number is named 2. The number 1 is named\
    \ 1.\n  -- The number 2 is named 3. The number 3 is named 5 and so on...\n  --\
    \ The number n can be written as the sum of consecutive powers of prime numbers.\n\
    \  -- The first prime number is named 2. The number 1 is named 1.\n  -- The number\
    \ 2 is named 3. The number 3 is named 5 and so on...\n  -- The number n can be\
    \ written as the sum of consecutive powers of prime numbers.\n  -- The first prime\
    \ number is named 2. The number 1 is named 1.\n  -- The number 2 is named 3. The\
    \ number 3 is named 5 and so on...\n  -- The number n can be written as the sum\
    \ of consecutive powers of prime numbers.\n  -- The first prime number is named\
    \ 2. The number 1 is named 1.\n  -- The number 2 is named 3. The number 3 is named\
    \ 5 and so on...\n  -- The number n can be written as the sum of consecutive powers\
    \ of prime numbers.", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 3 == 0 then\n    return false\n  end\n  if n\
    \ % 5 == 0 then\n    return false\n  end\n  -- Check divisibility by 2, 3, and\
    \ 5\n  if n % 6 == 0 then\n    return false\n  end\n  if n % 7 == 0 then\n   \
    \ return false\n  end\n  -- Check divisibility by 2 and 3\n  if n % 12 == 0 then\n\
    \    return false\n  end\n  if n % 13 == 0 then\n    return false\n  end\n  --\
    \ Check divisibility by 5\n  if n % 17 == 0 then\n    return false\n  end\n  return\
    \ true\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n  \
    \  return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers since they are special cases.\n  if n % 3 == 0 then\n \
    \   return false\n  end\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check\
    \ all the numbers from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) +\
    \ 1, 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if n < 2 then return false end\n  if n == 2 then return true\
    \ end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then return false\
    \ end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return false\
    \ end\n  if n % 11 == 0 then return false end\n  if n % 13 == 0 then return false\
    \ end\n  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false\
    \ end\n  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false\
    \ end\n  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false\
    \ end\n  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false\
    \ end\n  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false\
    \ end\n  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false\
    \ end\n  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false\
    \ end\n  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false\
    \ end\n  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false\
    \ end\n  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false\
    \ end\n  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return\
    \ false end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return ", "  if n < 2 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even numbers\n  if n % 2 == 1 then\n    return\
    \ not is_prime(n - 1)\n  end\n  -- Check odd and even numbers, starting from 3\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n\
    \    return false\n  end", "  if n < 2 then\n    return false\n  end\n  if n ==\
    \ 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n\
    \  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend", "  if n < 2 then\
    \ return false end\n  if n == 1 then return true end\n  if n % 2 == 0 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return\
    \ false end\n  if n % 7 == 0 then return false end\n  if n % 11 == 0 then return\
    \ false end\n  if n % 13 == 0 then return false end\n  if n % 17 == 0 then return\
    \ false end\n  if n % 19 == 0 then return false end\n  if n % 23 == 0 then return\
    \ false end\n  if n % 29 == 0 then return false end\n  if n % 31 == 0 then return\
    \ false end\n  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return\
    \ false end\n  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return\
    \ false end\n  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return\
    \ false end\n  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return\
    \ false end\n  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return\
    \ false end\n  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return\
    \ false end\n  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return\
    \ false end\n  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return\
    \ false end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 179 == 0 then return false end\n  if n % 183 == 0 then return\
    \ false end\n  if n % 189 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false ", "  if n < 2 then\n    return\
    \ false\n  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- Check odd-even primality of n\n  local function\
    \ is_odd_prime(n)\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime(n)\
    \ then\n    return false\n  end\n  -- Check odd-even primality of n-1\n  local\
    \ function is_odd_prime_prev(n)\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return false\n      end\n      i = i + 2\n    end\n    return true\n\
    \  end\n  if is_odd_prime_prev(n) then\n    return false\n  end\n  -- Check odd-even\
    \ primality of n+1\n  local function is_odd_prime_next(n)\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  if is_odd_prime_next(n) then\n    return false\n  end\n\
    \  -- Check odd-even primality of n+2\n  local function is_odd_prime_next(n)\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n) then\n\
    \    return false\n  end\n  -- Check odd-even primality of n+3\n  local function\
    \ is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n    end\n\
    \    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      i = i + 2\n    end\n    return true\n  end\n  if is_odd_prime_next(n)\
    \ then\n    return false\n  end\n  -- Check odd-even primality of n+4\n  local\
    \ function is_odd_prime_next(n)\n    if n % 2 == 0 then\n      return false\n\
    \    end\n    local i = 3\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return ", "  if n < 2 then return false end\n  if n == 2 then return\
    \ true end\n  if n % 2 == 0 then return false end\n  if n % 3 == 0 then return\
    \ false end\n  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return\
    \ false end\n  if n == 1 then return false end\n  if n == 0 then return false\
    \ end\n  if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n == 1 or\
    \ n == 0 then\n    return false\n  end\n  local i = 3\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return\
    \ true\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n  \
    \  return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check\
    \ odd-ness of candidate.\n  for i = 3, math.floor(n/2), 2 do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "  -- Prime\
    \ numbers are greater than 1 and divisible by 3.\n  if n < 1 then return false\
    \ end\n  if n % 3 == 0 then return false end\n  -- Check all odd numbers up to\
    \ sqrt(n).\n  for i = 2, math.sqrt(n) + 1 do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
