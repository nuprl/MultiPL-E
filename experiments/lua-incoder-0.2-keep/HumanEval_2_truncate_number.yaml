name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local integer_part = math.floor(number)\n  local decimal_part = math.modf(number\
    \ - integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ integer_part, decimal_part = math.modf(number)\n  return decimal_part * math.pow(10,\
    \ math.floor(math.log(decimal_part) / math.log(10)))\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return decimal_part\
    \ + (remainder * math.pow(10, math.floor(math.log(number, 10))))\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number -\
    \ math.pow(10, -decimals))[1]\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number) / math.log(10))\n  return math.pow(10,\
    \ decimals)\nend", "  if number < 1 then\n    return number\n  end\n  local integer_part\
    \ = math.floor(number)\n  local decimal_part = number - integer_part\n  if decimal_part\
    \ > 0 then\n    return integer_part + decimal_part / 10\n  else\n    return integer_part\n\
    \  end\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - math.floor(integer_part))\nend", "  local\
    \ decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local fractional_part = number - integer_part\n  local decimal_part\
    \ = math.pow(10, decimals - 1)\n  return integer_part + fractional_part * decimal_part\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  if decimal_part > 1 then\n    return integer_part, decimal_part - 1\n  else\n\
    \    return integer_part\n  end\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \   local decimals = math.floor(math.log(number) / math.log(10) + 1)\n    return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
