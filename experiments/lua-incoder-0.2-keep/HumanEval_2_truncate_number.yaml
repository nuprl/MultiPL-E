name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local integer_part = math.floor(number)\n  local decimal_part = math.modf(number\
    \ - integer_part)[1]\n  return integer_part + decimal_part\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ integer_part, decimal_part = math.modf(number)\n  return decimal_part * math.pow(10,\
    \ math.floor(math.log(decimal_part) / math.log(10)))\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return decimal_part\
    \ + (remainder * math.pow(10, math.floor(math.log(number, 10))))\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number -\
    \ math.pow(10, -decimals))[1]\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number) / math.log(10))\n  return math.pow(10,\
    \ decimals)\nend", "  if number < 1 then\n    return number\n  end\n  local integer_part\
    \ = math.floor(number)\n  local decimal_part = number - integer_part\n  if decimal_part\
    \ > 0 then\n    return integer_part + decimal_part / 10\n  else\n    return integer_part\n\
    \  end\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - math.floor(integer_part))\nend", "  local\
    \ decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local fractional_part = number - integer_part\n  local decimal_part\
    \ = math.pow(10, decimals - 1)\n  return integer_part + fractional_part * decimal_part\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  if decimal_part > 1 then\n    return integer_part, decimal_part - 1\n  else\n\
    \    return integer_part\n  end\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \   local decimals = math.floor(math.log(number) / math.log(10) + 1)\n    return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\n\
    end", "  local integer_part, decimals = math.modf(number)\n  return integer_part\
    \ * tonumber(string.format(\"%.1f\", decimals))\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local fractional_part = number - integer_part\n  return integer_part,\
    \ fractional_part\nend", "  if number < 1 then\n    return number\n  end\n  local\
    \ integer_part = math.floor(number)\n  local decimal_part = math.modf(number -\
    \ integer_part)[1]\n  return integer_part + decimal_part\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * tonumber(string.format(\"\
    %.1f\", decimals))\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  return math.pow(10, -decimals)\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  if remainder < 1 then\n    return decimal_part\n  else\n    return decimal_part\
    \ + remainder\n  end\nend", "  local decimals = math.floor(math.log(number) /\
    \ math.log(10))\n  return math.pow(10, decimals - 1) * number\nend", "  local\
    \ decimals = math.floor(math.log(number) / math.log(10))\n  return math.pow(10,\
    \ decimals)\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.floor(number - decimal_part)\n\
    \  if integer_part == 0 then\n    return decimal_part\n  else\n    return decimal_part\
    \ + math.pow(10, math.floor(math.log(number, 10)))\n  end\nend", "  local decimals\
    \ = math.floor(math.log(number) / math.log(10))\n  return math.floor(number *\
    \ 10^decimals) / 10^decimals\nend", "  if number < 1 then\n    return number\n\
    \  end\n  local integer_part, decimal_part = math.modf(number)\n  return decimal_part\
    \ * 100\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local integer_part,\
    \ decimal_part = math.modf(number)\n  return decimal_part * tonumber(integer_part)\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  return\
    \ math.floor(number * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.trunc(number)\n  local trunc_part = number - integer_part\n\
    \  return integer_part * 10^decimals + trunc_part\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ / 10\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  return decimal_part - integer_part\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * 10^decimals\nend", " \
    \ local sign = math.sign(number)\n  local integer_part = math.floor(number)\n\
    \  local decimal_part = math.modf(number - integer_part)[1]\n  if sign == -1 then\n\
    \    decimal_part = -decimal_part\n  end\n  return integer_part, decimal_part\n\
    end", "  local decimals = math.floor(math.log10(number))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part * 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.trunc(number)\n\
    \  local fraction = number - integer_part\n  return integer_part + (fraction /\
    \ 10^decimals)\nend", "  local decimals = math.floor(math.log(number, 10))\n \
    \ local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n \
    \ return math.floor(number / 10^decimals) / 10^decimals\nend", "  if number <\
    \ 0 then\n    return 0\n  end\n  local integer_part = math.floor(number)\n  local\
    \ decimal_part = math.modf(number - integer_part)[1]\n  return integer_part +\
    \ decimal_part\nend", "  if number < 1 then\n    return 0\n  end\n  local integer_part\
    \ = math.floor(number)\n  local fractional_part = number - integer_part\n  local\
    \ decimal_part = math.floor(fractional_part * 10)\n  if decimal_part == 0 then\n\
    \    return integer_part\n  else\n    return integer_part + decimal_part\n  end\n\
    end", "    local decimal_part = math.floor(number)\n    local integer_part = math.trunc(number)\n\
    \    local remainder = number - integer_part\n    return decimal_part + remainder\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  return\
    \ math.floor(number * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local integer_part, decimals = math.modf(number)\n  return integer_part * 10^decimals\n\
    end", "  local integer_part, decimals = math.modf(number)\n  return integer_part\
    \ * 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local integer_part\
    \ = math.floor(number)\n  local decimal_part = math.modf(number - integer_part)[1]\n\
    \  return integer_part, decimal_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - number - 1)\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local result = math.abs(number - integer_part)\n  if\
    \ result > 0.5 then\n    result = result - 1.0\n  end\n  return decimal_part +\
    \ result\nend", "  local integer_part, decimal_part = math.modf(number)\n  if\
    \ decimal_part < 1 then\n    return integer_part\n  else\n    return number -\
    \ integer_part * math.pow(10, math.floor(math.log(number, 10)))\n  end\nend",
  "  local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  local trunc_part = number - integer_part\n  local result = integer_part\
    \ + trunc_part\n  return result\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ integer_part % 10^decimals\nend", "  local integer_part, decimals = math.modf(number)\n\
    \  return integer_part * 10^decimals\nend", "  if number < 1 then\n    return\
    \ 0\n  end\n  local integer_part = math.floor(number)\n  local decimal_part =\
    \ math.modf(number - integer_part)[1]\n  return integer_part + decimal_part\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  return\
    \ math.pow(10, decimals - 1) * number / math.pow(10, decimals)\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ integer_part, decimals = math.modf(number)\n  return integer_part * 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  return\
    \ math.floor(number * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \   local decimals = math.floor(math.log(number) / math.log(10))\n    local integer_part\
    \ = math.trunc(number)\n    local truncate_part = number - integer_part\n    local\
    \ truncate_part = math.min(truncate_part, 1)\n    return integer_part + truncate_part\
    \ * 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number * 10^decimals) / 10^decimals\nend", "    local decimal_part\
    \ = math.floor(number)\n    local integer_part = math.trunc(number)\n    return\
    \ decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local\
    \ integer_part = math.trunc(number)\n  return integer_part / 10^decimals, integer_part\
    \ % 10^decimals\nend", "  local factor = 1\n  local decimal_part = number\n  while\
    \ decimal_part > 1 do\n    decimal_part = decimal_part / 10\n    factor = factor\
    \ * 10\n  end\n  return decimal_part * factor\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + (remainder * math.pow(10, math.floor(math.log10(remainder))))\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  return\
    \ math.floor(number * 10^decimals) / 10^decimals\nend", "  local integer_part,\
    \ decimal_part = math.modf(number)\n  return decimal_part * 100\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ decimals = math.floor(math.log10(number))\n  return math.pow(10, decimals -\
    \ 1) * (number / math.pow(10, decimals))\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.floor(number - decimal_part)\n  local remainder =\
    \ number - decimal_part + integer_part\n  return decimal_part, integer_part, remainder\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  local decimal_part = math.floor(number)\n  local\
    \ integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local factor = 1\n  local decimal_part\
    \ = 1\n  local integer_part = 1\n  local remainder = 0\n  while number > 0 do\n\
    \    factor = factor * 10\n    number = number / factor\n    integer_part = integer_part\
    \ * factor + number\n    decimal_part = decimal_part + factor\n    remainder =\
    \ number\n  end\n  return decimal_part + remainder\nend", "  if number < 1 then\n\
    \    return 0\n  end\n  local integer_part = math.floor(number)\n  local decimal_part\
    \ = number - integer_part\n  assert(decimal_part >= 0 and decimal_part < 1)\n\
    \  return integer_part, decimal_part\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.floor(number * 10^decimals) / 10^decimals\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part =\
    \ math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local integer_part, decimals = math.modf(number)\n  return integer_part * tonumber(string.format(\"\
    %.1f\", decimals))\nend", "  local integer_part, decimal_part = math.modf(number)\n\
    \  return decimal_part * tonumber(integer_part)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.modf(number * 10^decimals)[1]\nend", "  local decimals\
    \ = math.floor(math.log(number) / math.log(10))\n  return math.floor(number *\
    \ 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.modf(number * 10^decimals)[1]\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  local integer_part = math.trunc(number)\n  local trunc_part = number - integer_part\n\
    \  return integer_part, trunc_part, decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  if remainder < 1 then\n    return decimal_part\n  else\n    return decimal_part\
    \ + remainder\n  end\nend", "  local decimals = math.floor(math.log(number) /\
    \ math.log(10))\n  return math.pow(10, decimals)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local factor = 1\n  local decimal_part = 1\n  local integer_part = 1\n\
    \  local decimal_part_string = \"\"\n  local integer_part_string = \"\"\n  local\
    \ decimal_part_count = 0\n  local integer_part_count = 0\n  while number > 0 do\n\
    \    local remainder = math.floor(number % 1)\n    number = math.floor(number\
    \ / 1)\n    factor = factor * 10\n    decimal_part = decimal_part + remainder\n\
    \    if decimal_part > 0 then\n      decimal_part_count = decimal_part_count +\
    \ 1\n      decimal_part_string = decimal_part_string .. \".\"\n    end\n    integer_part\
    \ = integer_part * 10 + remainder\n    if integer_part > 0 then\n      integer_part_count\
    \ = integer_part_count + 1\n      integer_part_string = integer_part_string ..\
    \ \"0\"\n    end\n  end\n  if number == 0 then\n    return 0\n  end\n  if decimal_part_count\
    \ > 0 then\n    decimal_part_count = decimal_part_count - 1\n    decimal_part_string\
    \ = decimal_part_string .. \"0\"\n  end\n  if integer_part_count > 0 then\n  \
    \  integer_part_count = integer_part_count - 1\n    integer_part_string = integer_part_string\
    \ .. \"0\"\n  end\n  return math.floor(number * factor) / factor\nend", "  local\
    \ decimals = math.floor(math.log(number) / math.log(10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local integer_part, decimal_part = math.modf(number)\n\
    \  return decimal_part * math.pow(10, math.floor(math.log(decimal_part) / math.log(10)))\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local sign = math.sign(number)\n  local int_part = math.floor(number)\n\
    \  local decimal_part = math.modf(number)[0]\n  if decimal_part > 1 then\n   \
    \ return int_part\n  else\n    return int_part + decimal_part * math.pow(10, math.floor(math.log10(number)))\n\
    \  end\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local leftover_part = number - integer_part\n  return\
    \ decimal_part + leftover_part\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  return math.pow(10, decimals - 1) * (number / math.pow(10, decimals))\nend",
  "  local decimal_part = math.floor(number)\n  local integer_part = math.floor(number\
    \ - decimal_part)\n  local leftover_part = number - decimal_part + integer_part\n\
    \  return decimal_part, integer_part, leftover_part\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number, 10)))\n\
    end", "  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part / 10^decimals, decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimal_part = math.modf(number)[1]\n  return math.floor(number),\
    \ decimal_part\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.trunc(number)\n  local trunc_part = number - integer_part\n\
    \  return integer_part + (trunc_part / 10^decimals)\nend", "  local decimals =\
    \ math.floor(math.log(number, 10) + 1)\n  return math.floor(number * 10^decimals)\
    \ / 10^decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  if remainder\
    \ < 1 then\n    return decimal_part\n  else\n    return decimal_part + math.floor(remainder)\n\
    \  end\nend", "    local decimals = math.floor(math.log(number, 10))\n    local\
    \ integer_part = math.trunc(number)\n    local trunc_part = number - integer_part\n\
    \    local decimal_part = trunc_part / 10^decimals\n    return decimal_part\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  local fractional_part = number - integer_part\n  return integer_part, fractional_part,\
    \ decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n \
    \ return math.floor(number / 10^decimals) / 10^decimals\nend", "  local sign =\
    \ math.sign(number)\n  local integer = math.floor(number)\n  local decimal = number\
    \ - integer\n  if sign == -1 then\n    decimal = -decimal\n  end\n  return integer,\
    \ decimal\nend", "    local decimals = math.floor(math.log(number) / math.log(10))\n\
    \    return math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log10(number))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part * 10^decimals\nend", "  local factor = 1\n  local decimals\
    \ = 0\n  while number >= 1 do\n    number = math.floor(number / factor)\n    factor\
    \ = factor * 10\n    decimals = decimals + 1\n  end\n  return number / factor,\
    \ decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  return decimal_part + (integer_part - decimal_part)\
    \ / math.pow(10, math.floor(math.log(number, 10)))\nend", "  local factor = 1\n\
    \  local decimal_part = number\n  while decimal_part > 1 do\n    decimal_part\
    \ = decimal_part / factor\n    factor = factor * 10\n  end\n  return decimal_part\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return decimal_part\
    \ + remainder\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  local integer_part = math.trunc(number)\n  return integer_part / 10^decimals,\
    \ integer_part % 10^decimals\nend", "  if number < 1 then\n    return 0\n  end\n\
    \  local decimals = math.floor(math.log(number) / math.log(10))\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "    local decimal_part = math.modf(number)\n\
    \    local integer_part = math.floor(number)\n    return integer_part * 10 + decimal_part[1]\n\
    end", "  local decimals = math.floor(math.log10(number))\n  local integer_part\
    \ = math.pow(10, decimals)\n  local trunc_number = math.floor(number * integer_part)\
    \ / integer_part\n  return trunc_number, decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return integer_part, decimals, remainder\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  return decimal_part + (integer_part\
    \ - number > 0 and 1 or 0)\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  return math.floor(number / integer_part)\
    \ * integer_part\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  return math.floor(number / 10^decimals)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10))\n  return math.modf(number\
    \ * 10^decimals)[1]\nend", "  local decimals = math.floor(math.log(number, 10))\n\
    \  local integer_part = math.trunc(number)\n  local fraction = number - integer_part\n\
    \  return integer_part + (fraction / 10^decimals)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number * 10^decimals) / 10^decimals\nend", " \
    \ if number < 0 then\n    return 0\n  end\n  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.pow(10, decimals)\nend", "    local integer_part,\
    \ decimals = math.modf(number)\n    return integer_part * math.pow(10, decimals)\n\
    end", "  local sign = math.sign(number)\n  local abs = math.abs(number)\n  local\
    \ decimals = math.floor(math.log(abs, 10))\n  local integer_part = abs % 1\n \
    \ local fractional_part = math.trunc(abs)\n  return sign * integer_part * math.pow(10,\
    \ -decimals) + fractional_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  local fraction = number -\
    \ integer_part\n  return integer_part + (fraction / 10^decimals)\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  if integer_part == number then\n\
    \    return decimal_part\n  else\n    return number - decimal_part + 1\n  end\n\
    end", "  local decimals = math.floor(math.log(number) / math.log(10))\n  local\
    \ integer_part = math.floor(number * 10^decimals)\n  return integer_part / 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  return integer_part /\
    \ 10^decimals, integer_part % 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  local trunc_part = number -\
    \ integer_part\n  local result = integer_part + trunc_part\n  return result\n\
    end", "  if number < 1 then\n    return number\n  end\n  local integer_part =\
    \ math.floor(number)\n  local decimal_part = math.modf(number - integer_part)[1]\n\
    \  return integer_part + decimal_part\nend", "  local sign = math.sign(number)\n\
    \  local integer = math.floor(number)\n  local decimal = number - integer\n  if\
    \ decimal < 1 then\n    return nil\n  end\n  return sign * integer + decimal\n\
    end", "    local factor = 1\n    local decimal_part = number\n    while decimal_part\
    \ > 1 do\n        decimal_part = decimal_part / factor\n        factor = factor\
    \ * 10\n    end\n    return decimal_part\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  return math.floor(number * 10^decimals) / 10^decimals\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  local integer_part =\
    \ math.trunc(number)\n  return integer_part / 10^decimals, integer_part % 10^decimals\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  local integer_part = math.trunc(number)\n  local result = integer_part\
    \ / 10^decimals\n  if result < 1 then\n    return 0\n  else\n    return math.floor(result)\n\
    \  end\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return\
    \ math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log(number)\
    \ / math.log(10))\n  local integer_part = math.trunc(number)\n  return integer_part\
    \ * 10^decimals\nend", "  local decimal_part = math.floor(number)\n  local integer_part\
    \ = math.trunc(number)\n  return decimal_part + (integer_part - decimal_part)\
    \ / math.pow(10, math.floor(math.log(number, 10)))\nend", "    local integer_part,\
    \ decimals = math.modf(number)\n    return integer_part * 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - decimal_part\n  return decimal_part + remainder\n\
    end", "    local integer_part, decimals = math.modf(number)\n    return integer_part\
    \ * math.pow(10, decimals)\nend", "  local decimals = math.floor(math.log(number,\
    \ 10))\n  return math.modf(number * 10^decimals)[1]\nend", "  local integer_part,\
    \ decimals = math.modf(number)\n  return integer_part * math.pow(10, decimals)\n\
    end", "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local result = integer_part\n  if\
    \ decimal_part > 0 then\n    result = result + decimal_part / 10\n  end\n  return\
    \ result\nend", "    local decimal_part = math.floor(number)\n    local integer_part\
    \ = math.trunc(number)\n    local remainder = number - integer_part\n    return\
    \ decimal_part + remainder\nend", "    local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n    return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ * 10^decimals) / 10^decimals\nend", "  local decimals = math.floor(math.log10(number))\n\
    \  local integer_part = math.pow(10, decimals)\n  local fractional_part = number\
    \ - integer_part\n  return integer_part, fractional_part\nend", "  local decimals\
    \ = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  local remainder = number - integer_part\n  return decimal_part + remainder\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - decimal_part) / math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimals = math.floor(math.log(number) / math.log(10))\n\
    \  return math.floor(number * 10^decimals) / 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend", "  local\
    \ integer_part, decimals = math.modf(number)\n  return integer_part * 10^decimals\n\
    end", "  local decimal_part = math.floor(number)\n  local integer_part = math.trunc(number)\n\
    \  return decimal_part + (integer_part - math.floor(integer_part))\nend", "  local\
    \ decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number /\
    \ math.pow(10, decimals))[1]\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  if integer_part == number then\n\
    \    return decimal_part\n  else\n    return number - integer_part + decimal_part\n\
    \  end\nend", "  local decimals = math.floor(math.log(number) / math.log(10))\n\
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local integer_part\
    \ = math.floor(number)\n  local decimal_part = math.modf(number - integer_part)[1]\n\
    \  return integer_part + decimal_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  local integer_part = math.trunc(number)\n  local truncate_part =\
    \ number - integer_part\n  return integer_part, truncate_part, decimals\nend",
  "  local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  return math.floor(number / integer_part) * integer_part\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.modf(number\
    \ - math.pow(10, -decimals))[1]\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
