name: HumanEval_11_string_xor
language: lua
results:
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf59wsho8.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpf59wsho8.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpf59wsho8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81lrwnxv.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp81lrwnxv.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmabl74qw.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpmabl74qw.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  local binC = '00000000'\n  local binD = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. tostring(a:sub(i, i))\n  end\n  for i\
    \ = 1, #b do\n    binB = binB .. tostring(b:sub(i, i))\n  end\n  for i = 1, #binA\
    \ do\n    binC = binC .. tostring(binA:sub(i, i)) .. tostring(binB:sub(i, i))\n\
    \  end\n  for i = 1, #binC do\n    binD = binD .. tostring(binC:sub(i, i))\n \
    \ end\n  return binD\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7huriqkz.lua:28:\
    \ expected: \"010010\"\nactual: \"00000000000000000000000000000000111011000100\"\
    \nstack traceback:\n\t/tmp/tmp7huriqkz.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlm79j4t.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpdlm79j4t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = ''\n  for i\
    \ = 1, #a do\n    ret = ret .. string.rep(a[i], #b) .. string.rep(b[i], #a)\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfdem3t5.lua:8:\
    \ bad argument #1 to 'rep' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpbfdem3t5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpbfdem3t5.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local tmp = (c\
    \ ~= d) and \"1\" or \"0\"\n    result = result .. tmp\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvsmkzaa.lua:19:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpjvsmkzaa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = a\n  for i\
    \ = 1, #a do\n    res = res .. string.rep(\"0\", #b) .. b[i]\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7cam932.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpd7cam932.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq3d2v0k.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpyq3d2v0k.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpyq3d2v0k.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  local binC = '00000000'\n  local binD = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\n  end\n  for i =\
    \ 1, #b do\n    binB = binB .. tostring(b:byte(i))\n  end\n  for i = 1, #binA\
    \ do\n    binC = binC .. tostring(binA:byte(i) XOR binB:byte(i))\n  end\n  for\
    \ i = 1, #binC do\n    binD = binD .. tostring(binC:byte(i))\n  end\n  return\
    \ binD\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphsfaz74g.lua:17: ')' expected near 'XOR'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkl6u_tw.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpxkl6u_tw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local xor = c ^ d\n    local hex = xor and string.format(\"%x\", xor)\
    \ or \"?\"\n    result = result .. string.sub(hex, 1, 2)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukm1fl8m.lua:20:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpukm1fl8m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm5uohay.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmppm5uohay.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = string.byte(a, i)\n        local d =\
    \ string.byte(b, i)\n        result = result .. string.format(\"%x\", c ^ d)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzf3n1kkl.lua:18:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpzf3n1kkl.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   [0] = '0000',\n    [1] = '0001',\n    [2] = '0010',\n    [3] = '0011',\n \
    \   [4] = '0100',\n    [5] = '0101',\n    [6] = '0110',\n    [7] = '0111',\n \
    \   [8] = '1000',\n    [9] = '1001',\n    [10] = '1010',\n    [11] = '1011',\n\
    \    [12] = '1100',\n    [13] = '1101',\n    [14] = '1110',\n    [15] = '1111',\n\
    \  }\n  local result = ''\n  for i = 1, #a do\n    local xor = xor_table[string.byte(a)]\n\
    \    local xor = xor:sub(1, #xor)\n    local xor = xor:sub(2, #xor)\n    local\
    \ xor = xor:sub(3, #xor)\n    local xor = xor:sub(4, #xor)\n    local xor = xor:sub(5,\
    \ #xor)\n    local xor = xor:sub(6, #xor)\n    local xor = xor:sub(7, #xor)\n\
    \    local xor = xor:sub(8, #xor)\n    local xor = xor:sub(9, #xor)\n    local\
    \ xor = xor:sub(10, #xor)\n    local xor = xor:sub(11, #xor)\n    local xor =\
    \ xor:sub(12, #xor)\n    local xor = xor:sub(13, #xor)\n    local xor = xor:sub(14,\
    \ #xor)\n    local xor = xor:sub(15, #xor)\n    result = result .. xor\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9y9prsx.lua:27:\
    \ attempt to index local 'xor' (a nil value)\nstack traceback:\n\t/tmp/tmpc9y9prsx.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdqm8vjf.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzdqm8vjf.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 0 then\n      result = result .. tostring(c)\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtnfqw3r.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpbtnfqw3r.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local carry = a[i] xor b[i]\n    if carry > 0 then\n     \
    \ res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpalngbkgi.lua:8: '=' expected near 'b'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    res = res .. string.format(\"%x\", c ^ d)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqhbl_uc.lua:18:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpcqhbl_uc.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwb9_pxij.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpwb9_pxij.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = (result .. \"1\")\n        else\n            result = (result\
    \ .. \"0\")\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyn72fo9q.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpyn72fo9q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniveczk7.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpniveczk7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = '0000',\n    ['1'] = '0001',\n    ['1'] = '0010',\n    ['0'] = '0011',\n\
    \    ['1'] = '0100',\n    ['0'] = '0101',\n    ['1'] = '0110',\n    ['0'] = '0111',\n\
    \    ['1'] = '1000',\n    ['0'] = '1001',\n    ['1'] = '1010',\n    ['0'] = '1011',\n\
    \    ['1'] = '1100',\n    ['0'] = '1101',\n    ['1'] = '1110',\n    ['0'] = '1111',\n\
    \  }\n  return xor_table[string.format(\"%x\", a:byte())] .. xor_table[string.format(\"\
    %x\", b:byte())]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_bo3ht9.lua:24:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpe_bo3ht9.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hq6bkpa.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0hq6bkpa.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local ret = \"\"\n  \
    \  for i = 1, #a do\n        ret = ret .. string.format(\"%x\", a[i] xor b[i])\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjw0zkip7.lua:8: ')' expected near 'xor'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc9gyiv3d.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9s3pdu_n.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp9s3pdu_n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      res = res\
    \ .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm5pcg41.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmppm5pcg41.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ko7pcsq.lua:8:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp5ko7pcsq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkelcdlu9.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpkelcdlu9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxzp9q1z.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwxzp9q1z.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '0000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binH = '0000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binI = '0000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binJ = '0000000000000000000000000000000000000000000000000000000000001000'\n\
    \  local binK = '0000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binL = '0000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binM = '0000000000000000000000000000000000000000000000000000000000001011'\n\
    \  local binN = '0000000000000000000000000000000000000000000000000000000000010000'\n\
    \  local binO = '0000000000000000000000000000000000000000000000000000000000010001'\n\
    \  local binP = '0000000000000000000000000000000000000000000000000000000000010100'\n\
    \  local binQ = '0000000000000000000000000000000000000000000000000000000000010101'\n\
    \  local binR = '0000000000000000000000000000000000000000000000000000000000011000'\n\
    \  local binS = '0000000000000000000000000000000000000000000000000000000000011001'\n\
    \  local binT = '0000000000000000000000000000000000000000000000000000000000011010'\n\
    \  local binU = '0000000000000000000000000000000000000000000000000000000000011011'\n\
    \  local binV = '0000000000000000000000000000000000000000000000000000000000100000'\n\
    \  local binW = '0000000000000000000000000000000000000000000000000000000000100001'\n\
    \  local binX = '0000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binY = '0000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binZ = '0000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local bin0 = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local bin1 = '0000000000000000000000000000000000000000000000000000000000110000'\n\
    \  local bin2 = '0000000000000000000000000000000000000000000000000000000000110001'\n\
    \  local bin3 = '0000000000000000000000000000000000000000000000000000000001000000'\n\
    \  local bin4 = '0000000000000000000000000000000000000000000000000000000001000001'\n\
    \  local bin5 = '0000000000000000000000000000000000000000000000000000000001001000'\n\
    \  local bin6 = '0000000000000000000000000000000000000000000000000000000001001001'\n\
    \  local bin7 = '0000000000000000000000000000000000000000000000000000000001010000'\n\
    \  local bin8 = '0000000000000000000000000000000000000000000000000000000001010001'\n\
    \  local bin9 = '0000000000000000000000000000000000000000000000000000000001100000'\n\
    \  local binA = '0000000000000000000000000000000000000000000000000000000001100001'\n\
    \  local binB = '0000000000000000000000000000000000000000000000000000000010000000'\n\
    \  local binC = '0000000000000000000000000000000000000000000000000000000010000001'\n\
    \  local binD = '0000000000000000000000000000000000000000000000000000000010000010'\n\
    \  local binE = '0000000000000000000000000000000000000000000000000000000010000011'\n\
    \  local binF\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbjqlhd06.lua:57: 'end' expected (to close 'function' at line\
    \ 5) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhxqfo8f.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnhxqfo8f.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local xor = c ^ d\n    local carry = xor < 0 and -1 or 1\n    local\
    \ result = result .. string.format(\"%c\", xor + carry)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rzdqw52.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9rzdqw52.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpln727pq9.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpln727pq9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor_table = {\n\
    \        [0] = '0000',\n        [1] = '0001',\n        [2] = '0010',\n       \
    \ [3] = '0011',\n        [4] = '0100',\n        [5] = '0101',\n        [6] = '0110',\n\
    \        [7] = '0111',\n        [8] = '1000',\n        [9] = '1001',\n       \
    \ [10] = '1010',\n        [11] = '1011',\n        [12] = '1100',\n        [13]\
    \ = '1101',\n        [14] = '1110',\n        [15] = '1111',\n    }\n    return\
    \ (xor_table[tonumber(a)] .. xor_table[tonumber(b)])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbw6svry.lua:24:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpfbw6svry.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = \"\"\n  local\
    \ binB = \"\"\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i)) .. \"\
    0\"\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) .. \"0\"\
    \n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm96vl4bo.lua:20:\
    \ expected: \"010010\"\nactual: \"490490490480480480490480490480490480\"\nstack\
    \ traceback:\n\t/tmp/tmpm96vl4bo.lua:20: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rltzwmj.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp0rltzwmj.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d ~= b and d or c) .. a[i]\n  end\n \
    \ return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_a9tmca.lua:9:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpy_a9tmca.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = tostring(c):byte(1, -1)\n        elseif c < 0 then\n        \
    \    c = tostring(-c):byte(1, -1)\n        end\n        result = result .. c\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxoz5yol.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpjxoz5yol.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      result\
    \ = result .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n \
    \   else\n      result = result .. c\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqgt148r.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmppqgt148r.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\
    \ .. '0'\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) ..\
    \ '0'\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a9inl9f.lua:20:\
    \ expected: \"010010\"\nactual: \"0000000049049049048048048000000000490480490480490480\"\
    \nstack traceback:\n\t/tmp/tmp0a9inl9f.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph62ncfow.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmph62ncfow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = ''\n  for i\
    \ = 1, #a do\n    ret = ret .. string.rep(a[i], #b) .. b[i]\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc9800ys.lua:8:\
    \ bad argument #1 to 'rep' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpyc9800ys.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpyc9800ys.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local carry = c\n\
    \    if d == '1' then\n      carry = carry ~= '0' and 1 or 0\n    else\n     \
    \ carry = carry ~= '1' and 0 or 1\n    end\n    result = result .. string.format('%c',\
    \ tostring(carry)) .. d\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhky8p58.lua:16:\
    \ attempt to concatenate local 'd' (a nil value)\nstack traceback:\n\t/tmp/tmpmhky8p58.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vqels76.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6vqels76.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      res = res\
    \ .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rq25rx4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp4rq25rx4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc23gtpzt.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc23gtpzt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      result = result .. \"1\"\n    elseif c < 1 then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. tostring(c)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacriooqp.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpacriooqp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkvrv1a2.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzkvrv1a2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = (result .. \"1\")\n        else\n            result = (result\
    \ .. \"0\")\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01cq0nzs.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp01cq0nzs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dybfmjs.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1dybfmjs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa70eput4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpa70eput4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.001\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local c = ''\n    for\
    \ i = 1, #a do\n        c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n \
    \   end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53jstb3z.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmp53jstb3z.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    s = s .. string.format('%02.2s', tostring(c))\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo59pvws0.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpo59pvws0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76u082zx.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp76u082zx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      c = tostring(c) + 48\n    end\n    local s = tostring(c)\n   \
    \ if #s > 1 then\n      s = string.sub(s, 1, 1)\n    end\n    result = result\
    \ .. s\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd2slec3.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpxd2slec3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhez09r2.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpwhez09r2.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59_roc72.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp59_roc72.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujlg1g0h.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpujlg1g0h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0a34563.lua:8:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmph0a34563.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d xor b[i]) .. c\n  end\n  return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpu9ktkh0l.lua:9: ')' expected near 'xor'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9q_n2wc.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpb9q_n2wc.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5edoss3x.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp5edoss3x.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = result .. \"1\"\n        else\n            result = result\
    \ .. \"0\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q8604zc.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1q8604zc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = a\n  for i\
    \ = 1, #b do\n    res = res .. tostring(b:byte(i)) .. tostring(a:byte(i)) .. tostring(b:byte(i)\
    \ ^ a:byte(i))\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sq998jy.lua:16:\
    \ expected: \"010010\"\nactual: \"11100049496.600972468622e+8248492.4033699756646e+8249496.600972468622e+8248485.0070207826346e+8049481.3471372384943e+8148485.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmp_sq998jy.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) .. tostring(b[i])\n    local\
    \ d = tostring(a[i]) .. tostring(b[i])\n    if c ~= d then\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz9h99qr.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbz9h99qr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local carry = a[i] ~= b[i]\n    if carry then\n      res =\
    \ res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa5qzgbo.lua:21:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpwa5qzgbo.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q3dl0sz.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmp7q3dl0sz.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa8ujvn4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpoa8ujvn4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxjh7mg4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpbxjh7mg4.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz2owxqz.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmprz2owxqz.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n\
    \    if c ~= d then\n      result = result .. tostring(c) .. tostring(d)\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrz7gzbl.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzrz7gzbl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = \"\"\n  for\
    \ i = 1, #a do\n    ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n \
    \ end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4mc76eh.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpv4mc76eh.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv54dapve.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpv54dapve.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2he3e26.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpm2he3e26.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = ''\n  for i\
    \ = 1, #a do\n    ret = ret .. string.rep(a[i], #b) .. b[i]\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v7a04aq.lua:8:\
    \ bad argument #1 to 'rep' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp5v7a04aq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp5v7a04aq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a) ^ tostring(b)\n    local d = tostring(c:byte(1,\
    \ -1))\n    result = result .. tostring(d:byte(1, -1))\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvss9bg2.lua:9:\
    \ attempt to index local 'c' (a number value)\nstack traceback:\n\t/tmp/tmpuvss9bg2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      res = res\
    \ .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntia6otj.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpntia6otj.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local binA = '00000000'\n\
    \    local binB = '00000000'\n    for i = 1, #a do\n        binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n    end\n    for i = 1, #b do\n        binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n    end\n    return binA:sub(1,#binA) .. binB:sub(1,#binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx95_h17.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpwx95_h17.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpwx95_h17.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1']\n\
    \  }\n  return xor_table[a] xor xor_table[b]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptp_u67h8.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = result .. \"1\"\n        else\n            result = result\
    \ .. \"0\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldc0uf8r.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpldc0uf8r.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvhlsozx.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnvhlsozx.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    elseif c < 0 then\n      result = result .. \"0\"\n \
    \   else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhc9onm6.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpdhc9onm6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  local binC = '00000000'\n  for i = 1, #a do\n  \
    \  binA = binA .. tostring(a:byte(i))\n  end\n  for i = 1, #b do\n    binB = binB\
    \ .. tostring(b:byte(i))\n  end\n  for i = 1, #binA do\n    binC = binC .. tostring(binA:byte(i)\
    \ XOR binB:byte(i))\n  end\n  return binC\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfp2v525q.lua:16: ')' expected near 'XOR'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      c = tostring(c):byte(1,\
    \ -1)\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7lykuoj2.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp7lykuoj2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = {\n      ['0'] = '0',\n      ['1'] = '1',\n    },\n    ['1'] = {\n\
    \      ['0'] = '1',\n      ['1'] = '0',\n    },\n  }\n  local xor = ''\n  for\
    \ i = 1, #a do\n    xor = xor .. xor_table[a[i]][b[i]]\n  end\n  return xor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgfkkq__.lua:18:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmplgfkkq__.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = result .. \"1\"\n        else\n            result = result\
    \ .. \"0\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx758f48n.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpx758f48n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpak0v_9tr.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpak0v_9tr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptv9x994r.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmptv9x994r.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = ''\n  for i\
    \ = 1, #a do\n    ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp69b2un.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpnp69b2un.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9bh4oxs.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpa9bh4oxs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhferw7z.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpuhferw7z.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\
    \ .. '0'\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) ..\
    \ '0'\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5rvhb0i.lua:20:\
    \ expected: \"010010\"\nactual: \"0000000049049049048048048000000000490480490480490480\"\
    \nstack traceback:\n\t/tmp/tmpp5rvhb0i.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqntv3wpu.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqntv3wpu.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhmc2s0q.lua:9:\
    \ attempt to concatenate local 'd' (a nil value)\nstack traceback:\n\t/tmp/tmpvhmc2s0q.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   [0] = '0000',\n    [1] = '0001',\n    [2] = '0010',\n    [3] = '0011',\n \
    \   [4] = '0100',\n    [5] = '0101',\n    [6] = '0110',\n    [7] = '0111',\n \
    \   [8] = '1000',\n    [9] = '1001',\n    [10] = '1010',\n    [11] = '1011',\n\
    \    [12] = '1100',\n    [13] = '1101',\n    [14] = '1110',\n    [15] = '1111',\n\
    \  }\n  local xor = ''\n  for i = 1, #a do\n    xor = xor .. xor_table[tonumber(a[i])\
    \ xor tonumber(b[i])]\n  end\n  return xor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjjhmtpdp.lua:26: ']' expected near 'xor'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000001101'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000001110'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000100011'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000100110'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binQ = '000000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binR = '000000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binS = '000000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binT = '000000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binU = '000000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local bin0 = '00000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local bin1 = '00000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local bin2 = '00000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local bin3 = '0000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local bin4 = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local bin5 = '0000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local bin6 = '0000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local bin7 = '0000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local bin8 = '0000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local bin9 = '0000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binA = '0000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binB = '000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binC = '000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binD = '000000000000000000000000000000000000000000000000000000000101010'\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8y8aocpi.lua:56: 'end' expected (to close 'function' at line\
    \ 5) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqwawgn3.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpuqwawgn3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5o_vg39.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpf5o_vg39.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybz6dzgz.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpybz6dzgz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    elseif carry < 0 then\n      result = result .. \"0\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd594l6jx.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_i0m9d7.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpf_i0m9d7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc393aqu.lua:8:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmphc393aqu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfn02y8v.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpbfn02y8v.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe29f_ohe.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpe29f_ohe.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0_yeacc.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpi0_yeacc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s9ljoq1.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp7s9ljoq1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0b'\n  local\
    \ binB = '0b'\n  local binC = '0b'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i))\n  end\n  for\
    \ i = 1, #binA do\n    binC = binC .. tostring(binA:byte(i) XOR binB:byte(i))\n\
    \  end\n  return binC\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxbg3_tek.lua:16: ')' expected near 'XOR'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnk00x6qr.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnk00x6qr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtttww_p.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpqtttww_p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      result = result .. \"1\"\n    else\n      result = result .. tostring(c)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cr0ss7h.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp3cr0ss7h.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local binA = '00000000'\n\
    \    local binB = '00000000'\n    for i = 1, #a do\n        binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n    end\n    for i = 1, #b do\n        binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n    end\n    return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ujsu5i_.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp_ujsu5i_.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmp_ujsu5i_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = {['0'] = '0', ['1'] = '1'},\n    ['1'] = {['0'] = '1', ['1'] = '0'}\n\
    \  }\n  return xor_table[a] xor xor_table[b]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm29khawo.lua:10: 'end' expected (to close 'function' at line\
    \ 5) near 'xor'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      result\
    \ = result .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o5r0hi7.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp6o5r0hi7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    s = s .. string.format('%02.2s', tostring(c))\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiuba2xp.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpfiuba2xp.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = a\n  local\
    \ binB = b\n  local result = ''\n  for i = 1, #binA do\n    local carry = binA[i]\
    \ XOR binB[i]\n    if carry > 0 then\n      result = result .. '1'\n    else\n\
    \      result = result .. '0'\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpylno1ewo.lua:10: '=' expected near 'binB'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local binA = '00000000'\n\
    \    local binB = '00000000'\n    for i = 1, #a do\n        binA = binA .. tostring(a:byte(i))\n\
    \    end\n    for i = 1, #b do\n        binB = binB .. tostring(b:byte(i))\n \
    \   end\n    return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpal8z4tgk.lua:20:\
    \ expected: \"010010\"\nactual: \"0000000049494948484800000000494849484948\"\n\
    stack traceback:\n\t/tmp/tmpal8z4tgk.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    s = s .. tostring(a[i] ^ b[i])\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4x2wqub.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpc4x2wqub.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n  end\n\
    \  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0xh3oa9.lua:9:\
    \ attempt to concatenate local 'd' (a nil value)\nstack traceback:\n\t/tmp/tmpf0xh3oa9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7t_sdqe4.lua:7: unexpected symbol near '['\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8v4nieyh.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      c = tostring(c):byte(1,\
    \ -1)\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyegtyer.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxyegtyer.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbprue_b.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpqbprue_b.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpqbprue_b.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      c = tostring(c):byte(1,\
    \ -1)\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnpn8uuon.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpnpn8uuon.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local c = a[i] and b[i]\n        if c then\n   \
    \         result = result .. c\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1s3__5w.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpa1s3__5w.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5anpbgu.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpw5anpbgu.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwgyy73eo.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n\
    \    if c ~= d then\n      result = result .. tostring(c) .. tostring(d)\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f3pwov1.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp5f3pwov1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xy3myt3.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp7xy3myt3.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then c = tostring(c) end\n    result = result .. tostring(c)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd9ti25z.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmppd9ti25z.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '000000000000000000000000000000000000000000000000000000000000'\n\
    \  local binB = '000000000000000000000000000000000000000000000000000000000000'\n\
    \  local binC = '000000000000000000000000000000000000000000000000000000000000'\n\
    \  for i = 1, #a do\n    binA = binA .. tostring(a:sub(i,i))\n  end\n  for i =\
    \ 1, #b do\n    binB = binB .. tostring(b:sub(i,i))\n  end\n  for i = 1, #binA\
    \ do\n    binC = binC .. tostring(binA:sub(i,i) xor binB:sub(i,i))\n  end\n  return\
    \ binC\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaetmvisq.lua:16: ')' expected near 'xor'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja5lhsa1.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpja5lhsa1.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local xor = c ^ d\n    local hex = string.char(xor)\n    local char\
    \ = string.char(xor)\n    if hex == \"0\" then\n      hex = \"\"\n    end\n  \
    \  if char == \"0\" then\n      char = \"\"\n    end\n    result = result .. hex\
    \ .. char\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0hfok_u.lua:27:\
    \ expected: \"010010\"\nactual: \"\nstack traceback:\n\t/tmp/tmph0hfok_u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n \
    \   end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvpylvsb.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmppvpylvsb.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb9ap69u.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpkb9ap69u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.rep('1',\
    \ #a) .. a[i]\n  end\n  for i = 1, #b do\n    binB = binB .. string.rep('1', #b)\
    \ .. b[i]\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje109euv.lua:9:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpje109euv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgqeccm7.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmplgqeccm7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupa3tmjs.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpupa3tmjs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl3lu0l0.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxl3lu0l0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaahat3fo.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpaahat3fo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\
    \ .. '0'\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) ..\
    \ '0'\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g2a0ju2.lua:20:\
    \ expected: \"010010\"\nactual: \"0000000049049049048048048000000000490480490480490480\"\
    \nstack traceback:\n\t/tmp/tmp_g2a0ju2.lua:20: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = '0000',\n    ['1'] = '0001',\n    ['1'] = '0010',\n    ['0'] = '0011',\n\
    \    ['1'] = '0100',\n    ['0'] = '0101',\n    ['1'] = '0110',\n    ['0'] = '0111',\n\
    \    ['1'] = '1000',\n    ['0'] = '1001',\n    ['1'] = '1010',\n    ['0'] = '1011',\n\
    \    ['1'] = '1100',\n    ['0'] = '1101',\n    ['1'] = '1110',\n    ['0'] = '1111',\n\
    \  }\n  return xor_table[string.format('%x', string.format('%x', a:byte(), b:byte()))]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2e_erfx.lua:30:\
    \ expected: \"010010\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi2e_erfx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_table = {\n \
    \   ['0'] = {\n      ['0'] = {\n        ['0'] = {\n          ['0'] = {\n     \
    \       ['0'] = {\n              ['0'] = {\n                ['0'] = {\n      \
    \            ['0'] = {\n                    ['0'] = {\n                      ['0']\
    \ = {\n                        ['0'] = {\n                          ['0'] = {\n\
    \                            ['0'] = {\n                              ['0'] =\
    \ {\n                                ['0'] = {\n                             \
    \     ['0'] = {\n                                    ['0'] = {\n             \
    \                         ['0'] = {\n                                        ['0']\
    \ = {\n                                          ['0'] = {\n                 \
    \                           ['0'] = {\n                                      \
    \        ['0'] = {\n                                                ['0'] = {\n\
    \                                                  ['0'] = {\n               \
    \                                     ['0'] = {\n                            \
    \                          ['0'] = {\n                                       \
    \                 ['0'] = {\n                                                \
    \          ['0'] = {\n                                                       \
    \     ['0'] = {\n                                                            \
    \  ['0'] = {\n                                                               \
    \ ['0'] = {\n                                                                \
    \  ['0'] = {\n                                                               \
    \     ['0'] = {\n                                                            \
    \          ['0'] = {\n                                                       \
    \                 ['0'] = {\n                                                \
    \                          ['0'] = {\n                                       \
    \                                     ['0'] = {\n                            \
    \                                                  ['0'] = {\n               \
    \                                                                 ['0'] = {\n\
    \                                                                            \
    \      ['0'] = {\n                                                           \
    \                         ['0'] = {\n                                        \
    \                                              ['0'] = {\n                   \
    \                                                                     ['0'] =\
    \ {\n                                                                        \
    \                  ['0'] = {\n                                               \
    \                                             ['0'] = {\n                    \
    \                                                                          ['0']\
    \ = {\n                                                                      \
    \                          ['0'] = {\n                                       \
    \                                                           ['0'] = {\n      \
    \                                                                            \
    \                  ['0'] = {\n                                               \
    \                                                       ['0'] = {\n          \
    \                                                                            \
    \                  ['0'] = {\n                                               \
    \                                                           ['0'] = {\n      \
    \                                                                            \
    \                          ['0'] = {\n                                       \
    \                                                                       ['0']\
    \ = {\n                                                                      \
    \                                          ['0'] = {\n                       \
    \                                                                            \
    \               ['0'] = {\n                                                  \
    \                                                                  ['0'] = {\n\
    \                                                                            \
    \                                          ['0'] = {\n                       \
    \                                                                            \
    \                     ['0'] = {\n                                            \
    \                                                                            \
    \  ['0'] = {\n                                                               \
    \                                                             ['0'] = {\n    \
    \                                                                            \
    \                                              ['0'] = {\n                   \
    \                                                                            \
    \                                 ['0'] = {\n                                \
    \                                                                            \
    \                      ['0'] = {\n                                           \
    \                                                                            \
    \             ['0'] = {\n                                                    \
    \                                                                            \
    \      ['0'] = {\n                                                           \
    \                                                                            \
    \ ['0'] = {\n                                                                \
    \                                                                          ['0']\
    \ = {\n                                                                      \
    \                                                                      ['0'] =\
    \ {\n                                                                        \
    \                                                                      ['0'] =\
    \ {\n                                                                        \
    \                                                                        ['0']\
    \ = {\n                                                                      \
    \                                                                            ['0']\
    \ = {\n                                                                      \
    \                                                                            \
    \  ['0'] = {\n                                                               \
    \                                                                            \
    \           ['0'] = {\n                                                      \
    \                                                                            \
    \                      ['0'] = {\n                                           \
    \                                                                            \
    \                                   ['0'] = {\n                              \
    \                                  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfzdq75g.lua:86: '}' expected (to close '{' at line 82) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bvo94lt.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp9bvo94lt.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6hwpwgw.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpo6hwpwgw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n9n37nw.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmp_n9n37nw.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_result = ''\n\
    \  for i = 1, #a do\n    xor_result = xor_result .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return xor_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8cpg3rt.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpk8cpg3rt.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyg_nthy.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpsyg_nthy.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a) ^ tostring(b)\n    if c > 1 then\n\
    \      c = tostring(a) .. (c - 1)\n    end\n    result = result .. tostring(c)\n\
    \    b = tostring(b) .. tostring(c)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8q686e0.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpu8q686e0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000001101'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000001110'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000100011'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000100110'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binQ = '000000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binR = '000000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binS = '000000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binT = '000000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binU = '000000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binA = '00000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binE = '0000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binF = '0000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binG = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binH = '0000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binI = '0000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binJ = '0000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binK = '0000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binL = '0000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binM = '0000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000100111'\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg22ihvc2.lua:56: 'end' expected (to close 'function' at line\
    \ 5) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nngjzso.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp3nngjzso.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    res = res ..\
    \ tostring(c)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1z200xcz.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp1z200xcz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a:sub(i, i))\n    local d = tostring(b:sub(i,\
    \ i))\n    local t = tostring(c:byte(1, 1):bit(1, 1):xor(d:byte(1, 1):bit(1, 1)))\n\
    \    result = result .. tostring(t:byte(1, 1):bit(1, 1))\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5fl5zyx.lua:10:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpd5fl5zyx.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq9sqtct.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsq9sqtct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeq7whbpx.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzis_k5fo.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzis_k5fo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2edh5uwn.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp2edh5uwn.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_t41b4q.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpx_t41b4q.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi324lbq.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvi324lbq.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61lkfdto.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp61lkfdto.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n\
    \    if c ~= d then\n      result = result .. tostring(c) .. tostring(d)\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmljmo4kh.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmljmo4kh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztx70333.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpztx70333.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor_table = {\n\
    \        [0] = '0000',\n        [1] = '0001',\n        [2] = '0010',\n       \
    \ [3] = '0011',\n        [4] = '0100',\n        [5] = '0101',\n        [6] = '0110',\n\
    \        [7] = '0111',\n        [8] = '1000',\n        [9] = '1001',\n       \
    \ [10] = '1010',\n        [11] = '1011',\n        [12] = '1100',\n        [13]\
    \ = '1101',\n        [14] = '1110',\n        [15] = '1111',\n    }\n    return\
    \ (xor_table[tonumber(a)] .. xor_table[tonumber(b)])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmybfil_t.lua:24:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpmybfil_t.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_noq8h4.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpt_noq8h4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local xor = c ^ d\n    local carry = xor < 0 and -1 or 1\n    local\
    \ result = result .. string.format(\"%c\", xor + carry)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp126oi44l.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp126oi44l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqjrigq5.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpmqjrigq5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjryhk17p.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpjryhk17p.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n \
    \   end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxbjyqa1.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpgxbjyqa1.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local ret = ''\n  for i\
    \ = 1, #a do\n    ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsz9b_vzc.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpsz9b_vzc.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaud9hu7t.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpaud9hu7t.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = ''\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > '9' then\n      c = '0'\
    \ .. c\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuq6zic90.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpuq6zic90.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe01kmc5d.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpe01kmc5d.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0ftpzn_.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpf0ftpzn_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local xor_result = a:byte()\
    \ ^ b:byte()\n    return string.format('%x', xor_result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1026h411.lua:13:\
    \ expected: \"010010\"\nactual: \"0\"\nstack traceback:\n\t/tmp/tmp1026h411.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugjd0b9x.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpugjd0b9x.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then c = tostring(c) end\n    result = result .. tostring(c)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn03pwtbr.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpn03pwtbr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000001101'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000001110'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000100011'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000100110'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binQ = '000000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binR = '000000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binS = '000000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binT = '000000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binU = '000000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local bin0 = '00000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local bin1 = '00000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local bin2 = '00000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local bin3 = '00000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local bin4 = '00000000000000000000000000000000000000000000000000000000001001111'\n\
    \  local bin5 = '000000000000000000000000000000000000000000000000000000000010100000'\n\
    \  local bin6 = '000000000000000000000000000000000000000000000000000000000010100001'\n\
    \  local bin7 = '00000000000000000000000000000000000000000000000000000000001010100'\n\
    \  local bin8 = '00000000000000000000000000000000000000000000000000000000001010101'\n\
    \  local bin9 = '000000000000000000000000000000000000000000000000000000000010101100'\n\
    \  local binA = '00000000000000000000000000000000000000000000000000000000001011010'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000001011011'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000001011000'\n\
    \  local binD = '0000000000000000000000000000000000000000000000000000000000101100\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfy4zm30h.lua:45: unfinished string near ''0000000000000000000000000000000000000000000000000000000000101100'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsf4ev4yp.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpsf4ev4yp.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj1ahkg5.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpvj1ahkg5.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpsd9p2y_j.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      result = result .. \"1\"\n    elseif c < 1 then\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w1yun0s.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp1w1yun0s.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      result = result .. \"1\"\n    elseif c < 1 then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. c\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6zzycer.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpe6zzycer.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92dg1mfq.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp92dg1mfq.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaoncsat.lua:9:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmpuaoncsat.lua:9:\
    \ in function 'candidate'\n\t/tmp/tmpuaoncsat.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor_result = ''\n\
    \  for i = 1, #a do\n    xor_result = xor_result .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return xor_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdji788o_.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpdji788o_.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9zsym8gr.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '00000000'\n\
    \  local binB = '00000000'\n  local binC = '00000000'\n  local binD = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. string.rep('1', #a)\n    binB = binB ..\
    \ string.rep('0', #b)\n    binC = binC .. string.rep('1', #a)\n    binD = binD\
    \ .. string.rep('0', #b)\n  end\n  binA = binA .. a\n  binB = binB .. b\n  binC\
    \ = binC .. a\n  binD = binD .. b\n  binA = binA:sub(1, #binA)\n  binB = binB:sub(1,\
    \ #binB)\n  binC = binC:sub(1, #binC)\n  binD = binD:sub(1, #binD)\n  binA = binA:sub(2,\
    \ #binA)\n  binB = binB:sub(2, #binB)\n  binC = binC:sub(2, #binC)\n  binD = binD:sub(2,\
    \ #binD)\n  binA = binA:sub(3, #binA)\n  binB = binB:sub(3, #binB)\n  binC = binC:sub(3,\
    \ #binC)\n  binD = binD:sub(3, #binD)\n  binA = binA:sub(4, #binA)\n  binB = binB:sub(4,\
    \ #binB)\n  binC = binC:sub(4, #binC)\n  binD = binD:sub(4, #binD)\n  binA = binA:sub(5,\
    \ #binA)\n  binB = binB:sub(5, #binB)\n  binC = binC:sub(5, #binC)\n  binD = binD:sub(5,\
    \ #binD)\n  binA = binA:sub(6, #binA)\n  binB = binB:sub(6, #binB)\n  binC = binC:sub(6,\
    \ #binC)\n  binD = binD:sub(6, #binD)\n  binA = binA:sub(7, #binA)\n  binB = binB:sub(7,\
    \ #binB)\n  binC = binC:sub(7, #binC)\n  binD = binD:sub(7, #binD)\n  binA = binA:sub(8,\
    \ #binA)\n  binB = binB:sub(8, #binB)\n  binC = binC:sub(8, #binC)\n  binD = binD:sub(8,\
    \ #binD)\n  binA = binA:sub(9, #binA)\n  binB = binB:sub(9, #bin\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm_wn7fpl.lua:54: ')' expected (to close '(' at line 53) near\
    \ 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4y16gnlo.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmp4y16gnlo.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.001 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result =\
    \ result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b0te57t.lua:19:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9b0te57t.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp7k9jpl9p.lua:10: '=' expected near 'd'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local xor = c ^ d\n    local hex = string.char(xor)\n    hex = string.sub(hex,\
    \ 1, 2)\n    hex = string.sub(hex, 3, 4)\n    hex = string.sub(hex, 5, 6)\n  \
    \  result = result .. hex\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd7xidhh.lua:23:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsd7xidhh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \    local binB = '0000000000000000000000000000000000000000000000000000000000000010'\n\
    \    local binC = '0000000000000000000000000000000000000000000000000000000000000011'\n\
    \    local binD = '0000000000000000000000000000000000000000000000000000000000000100'\n\
    \    local binE = '0000000000000000000000000000000000000000000000000000000000000101'\n\
    \    local binF = '0000000000000000000000000000000000000000000000000000000000000110'\n\
    \    local binG = '0000000000000000000000000000000000000000000000000000000000000111'\n\
    \    local binH = '0000000000000000000000000000000000000000000000000000000000001000'\n\
    \    local binI = '0000000000000000000000000000000000000000000000000000000000001001'\n\
    \    local binJ = '0000000000000000000000000000000000000000000000000000000000001010'\n\
    \    local binK = '0000000000000000000000000000000000000000000000000000000000001011'\n\
    \    local binL = '0000000000000000000000000000000000000000000000000000000000010000'\n\
    \    local binM = '0000000000000000000000000000000000000000000000000000000000010001'\n\
    \    local binN = '0000000000000000000000000000000000000000000000000000000000010100'\n\
    \    local binO = '0000000000000000000000000000000000000000000000000000000000010101'\n\
    \    local binP = '0000000000000000000000000000000000000000000000000000000000011000'\n\
    \    local binQ = '0000000000000000000000000000000000000000000000000000000000011001'\n\
    \    local binR = '0000000000000000000000000000000000000000000000000000000000011010'\n\
    \    local binS = '0000000000000000000000000000000000000000000000000000000000011011'\n\
    \    local binT = '0000000000000000000000000000000000000000000000000000000000100000'\n\
    \    local binU = '0000000000000000000000000000000000000000000000000000000000100001'\n\
    \    local binV = '0000000000000000000000000000000000000000000000000000000000101000'\n\
    \    local binW = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \    local binX = '0000000000000000000000000000000000000000000000000000000000101010'\n\
    \    local binY = '0000000000000000000000000000000000000000000000000000000000101011'\n\
    \    local binZ = '0000000000000000000000000000000000000000000000000000000000110000'\n\
    \    local bin0 = '0000000000000000000000000000000000000000000000000000000000110001'\n\
    \    local bin1 = '0000000000000000000000000000000000000000000000000000000000110010'\n\
    \    local bin2 = '0000000000000000000000000000000000000000000000000000000000110011'\n\
    \    local bin3 = '0000000000000000000000000000000000000000000000000000000000110100'\n\
    \    local bin4 = '0000000000000000000000000000000000000000000000000000000000110101'\n\
    \    local bin5 = '00000000000000000000000000000000000000000000000000000000001101100'\n\
    \    local bin6 = '0000000000000000000000000000000000000000000000000000000000111000'\n\
    \    local bin7 = '0000000000000000000000000000000000000000000000000000000000111001'\n\
    \    local bin8 = '0000000000000000000000000000000000000000000000000000000000111010'\n\
    \    local bin9 = '0000000000000000000000000000000000000000000000000000000000111011'\n\
    \    local binA = '0000000000000000000000000000000000000000000000000000000001001000'\n\
    \    local binB = '0000000000000000000000000000000000000000000000000000000001001001'\n\
    \    local binC = '0000000000000000000000000000000000000000000000000000000001001010'\n\
    \    local binD = '0000000000000000000000000000000000000000000000000000000001001011'\n\
    \    local binE = '0000000000000000000000000000000000000000000000000000000001010000'\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n \
    \   lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8pbkl24v.lua:57: 'end' expected (to close 'function' at line\
    \ 5) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a:sub(i, i))\n    local d = tostring(b:sub(i,\
    \ i))\n    if c == \"1\" then\n      result = result .. \"0\"\n    elseif d ==\
    \ \"1\" then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0c1n4xzm.lua:24:\
    \ expected: \"010010\"\nactual: \"000010\"\nstack traceback:\n\t/tmp/tmp0c1n4xzm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '0000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binH = '0000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binI = '0000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binJ = '0000000000000000000000000000000000000000000000000000000000001000'\n\
    \  local binK = '0000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binL = '0000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binM = '0000000000000000000000000000000000000000000000000000000000001011'\n\
    \  local binN = '0000000000000000000000000000000000000000000000000000000000010000'\n\
    \  local binO = '0000000000000000000000000000000000000000000000000000000000010001'\n\
    \  local binP = '0000000000000000000000000000000000000000000000000000000000010100'\n\
    \  local binQ = '0000000000000000000000000000000000000000000000000000000000010101'\n\
    \  local binR = '0000000000000000000000000000000000000000000000000000000000011000'\n\
    \  local binS = '0000000000000000000000000000000000000000000000000000000000011001'\n\
    \  local binT = '0000000000000000000000000000000000000000000000000000000000011010'\n\
    \  local binU = '0000000000000000000000000000000000000000000000000000000000011011'\n\
    \  local binV = '0000000000000000000000000000000000000000000000000000000000100000'\n\
    \  local binW = '0000000000000000000000000000000000000000000000000000000000100001'\n\
    \  local binX = '0000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binY = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binZ = '0000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local bin0 = '0000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local bin1 = '0000000000000000000000000000000000000000000000000000000000110000'\n\
    \  local bin2 = '0000000000000000000000000000000000000000000000000000000000110001'\n\
    \  local bin3 = '0000000000000000000000000000000000000000000000000000000000110010'\n\
    \  local bin4 = '0000000000000000000000000000000000000000000000000000000000110011'\n\
    \  local bin5 = '0000000000000000000000000000000000000000000000000000000000110100'\n\
    \  local bin6 = '0000000000000000000000000000000000000000000000000000000000110101'\n\
    \  local bin7 = '00000000000000000000000000000000000000000000000000000000001101100'\n\
    \  local bin8 = '00000000000000000000000000000000000000000000000000000000001101101'\n\
    \  local bin9 = '0000000000000000000000000000000000000000000000000000000000111000'\n\
    \  local binA = '0000000000000000000000000000000000000000000000000000000000111001'\n\
    \  local binB = '0000000000000000000000000000000000000000000000000000000000111010'\n\
    \  local binC = '0000000000000000000000000000000000000000000000000000000000111011'\n\
    \  local binD = '0000000000000000000000000000000000000000000000000000000000111100'\n\
    \  local binE = '0000000000000000000000000000000000000000000000000000000000111101'\n\
    \  local bin\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb88p_p5a.lua:57: 'end' expected (to close 'function' at line\
    \ 5) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    res = res .. string.format(\"%x\", c ^ d)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqhw7r_w.lua:18:\
    \ expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpmqhw7r_w.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6452cqb.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpk6452cqb.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5a03i18.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpy5a03i18.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jfq_e5x.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp_jfq_e5x.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      c = tostring(c):byte(1,\
    \ -1)\n    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs31cmg2.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxs31cmg2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
