name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n\
  -- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--\
  \ 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local nn = math.floor(n/p)\n  if nn ~= n then return modp(nn, p)\
    \ end\n  return nn*p + p\nend", "  if p == 0 then\n    return 1\n  elseif p ==\
    \ 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  local t = n % p\n  if t < 0 then\n    return modp(t+p, p)\n \
    \ elseif t > 0 then\n    return modp(t-p, p)\n  else\n    return t\n  end\nend",
  "  local nn = math.floor(n/p)\n  if nn == 0 then\n    return 1\n  else\n    return\
    \ modp(n - nn*p, p)\n  end\nend", "  if p == 0 then\n    return 1\n  elseif p\
    \ == 1 then\n    return n\n  else\n    return modp(n / p, p)\n  end\nend", " \
    \ local nn = math.floor(n)\n  if nn == n then return n end\n  local r = n % p\n\
    \  if r == 0 then return n end\n  if r > 0 then\n    return modp(nn, p)\n  else\n\
    \    return modp(nn - 1, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n\
    \    return p\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then return\
    \ 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n  local\
    \ q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p + p\n\
    end", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif\
    \ p == -1 then\n    return -n\n  end\n  local t = modp(n / p, p)\n  if n % p ==\
    \ 0 then\n    return t\n  else\n    return t + p\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend", "  if p == 0 then return 1 end\n  if p == 1\
    \ or p == -1 then return n end\n  local q = modp(n / p, p)\n  if n % p == 0 then\
    \ return q else return q + p end\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n\
    \    return -n\n  end\n  local r = n % p\n  if r == 0 then\n    return r\n  else\n\
    \    return modp(r, p) * p\n  end\nend", "  local r = 1\n  while n > 0 do\n  \
    \  r = r * p % n\n    n = n / 2\n  end\n  return r\nend", "  local m = n % p\n\
    \  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend", " \
    \ local n1 = math.floor(n)\n  local n2 = n - n1\n  local n3 = math.floor(n2 /\
    \ p)\n  local n4 = n2 - n3 * p\n  return n1 * p + n3 * p + n4\nend", "  local\
    \ n2 = n * n\n  local p2 = p * p\n  if p2 > n2 then return n end\n  if p2 < n2\
    \ then return p end\n  local r = n % p\n  r = r * p % p\n  return r\nend", " \
    \ if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n \
    \   return n % p\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return\
    \ p\n  else\n    return modp(m, p)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
