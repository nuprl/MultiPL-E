name: HumanEval_117_select_words
language: lua
prompt: "-- Given a string s and a natural number n, you have been tasked to implement\
  \ \n-- a function that returns a list of all words from string s that contain exactly\
  \ \n-- n consonants, in order these words appear in the string s.\n-- If the string\
  \ s is empty then the function should return an empty list.\n-- Note: you may assume\
  \ the input string contains only letters and spaces.\n-- Examples:\n-- select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n-- select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"simple white space\", 2)\
  \ ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"]\n-- select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
  \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary\
  \ had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
  \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
  \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
  \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\nend", "  -- Your code here\nend", "  -- Your code\
    \ here\nend", "  -- Your code here\nend", "  -- Your code here\nend", "    local\
    \ list = {}\n    for i = 1, #s do\n        local word = s:sub(i, i)\n        if\
    \ word:sub(1, n) == string.upper(word:sub(1, n)) then\n            table.insert(list,\
    \ word)\n        end\n    end\n    return list\nend", "    local words = {}\n\
    \    local i = 1\n    while i <= #s do\n        if string.sub(s, i, i+n) == string.sub(s,\
    \ 1, n) then\n            table.insert(words, string.sub(s, 1, n))\n        end\n\
    \        i = i + 1\n    end\n    return words\nend", "    local words = {}\n \
    \   local i = 0\n    while i <= #s do\n        local c = s[i]\n        if c ==\
    \ \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n       \
    \     i = i + 1\n        elseif c == \"n\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"s\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"t\" or c == \"h\" or c == \"r\" or c == \"d\" then\n            if i\
    \ == #s then\n                table.insert(words, \"\")\n            else\n  \
    \              local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"w\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"b\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"c\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"m\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"g\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"f\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"v\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n",
  "  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      table.insert(words, string.sub(s,1,i))\n      table.insert(words,\
    \ string.sub(s,i+1,#s))\n    else\n      table.insert(words, string.sub(s,i,#s))\n\
    \    end\n  end\n  return words\nend", "  local words = {}\n  local i = 0\n  while\
    \ i <= #s do\n    local c = s[i]\n    local j = i + 1\n    while j <= #s and s[j]\
    \ == c do\n      j = j + 1\n    end\n    if j - i == n then\n      table.insert(words,\
    \ string.sub(s, i, j))\n      i = j\n    end\n  end\n  return words\nend", " \
    \ -- Your code here\nend", "  -- Your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      words[#words + 1] =\
    \ \"\"\n    else\n      if string.sub(s,i,i) == \" \" then\n        words[#words\
    \ + 1] = \"\"\n      else\n        if string.sub(s,i,i) == \" \" then\n      \
    \    words[#words + 1] = \"\"\n        else\n          if string.sub(s,i,i) ==\
    \ \" \" then\n            words[#words + 1] = \"\"\n          else\n         \
    \   if string.sub(s,i,i) == \" \" then\n              words[#words + 1] = \"\"\
    \n            else\n              if string.sub(s,i,i) == \" \" then\n       \
    \         words[#words + 1] = \"\"\n              else\n                if string.sub(s,i,i)\
    \ == \" \" then\n                  words[#words + 1] = \"\"\n                else\n\
    \                  if string.sub(s,i,i) == \" \" then\n                    words[#words\
    \ + 1] = \"\"\n                  else\n                    if string.sub(s,i,i)\
    \ == \" \" then\n                      words[#words + 1] = \"\"\n            \
    \        else\n                      if string.sub(s,i,i) == \" \" then\n    \
    \                    words[#words + 1] = \"\"\n                      else\n  \
    \                      if string.sub(s,i,i) == \" \" then\n                  \
    \        words[#words + 1] = \"\"\n                        else\n            \
    \              if string.sub(s,i,i) == \" \" then\n                          \
    \  words[#words + 1] = \"\"\n                          else\n                \
    \            if string.sub(s,i,i) == \" \" then\n                            \
    \  words[#words + 1] = \"\"\n                            else\n              \
    \                if string.sub(s,i,i) == \" \" then\n                        \
    \        words[#words + 1] = \"\"\n                              else\n      \
    \                          if string.sub(s,i,i) == \" \" then\n              \
    \                    words[#words + 1] = \"\"\n                              \
    \  else\n                                  if string.sub(s,i,i) == \" \" then\n\
    \                                    words[#words + 1] = \"\"\n              \
    \                    else\n                                    if string.sub(s,i,i)\
    \ == \" \" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \" \" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \" \" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \" \" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \" \" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if ", "  -- Base case\n  if s == \"\" then return end", "  --\
    \ Your code here\nend", "  -- Your code here\nend", "  -- Your code here\n  local\
    \ words = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+n) ==\
    \ string.sub(s,i,i+n) then\n      table.insert(words, string.sub(s,i,i+n))\n \
    \   end\n    i = i + 1\n  end\n  return words\nend", "  -- Base case\n  if s ==\
    \ \"\" then\n    return {}\n  end", "  -- Base case\n  if s == \"\" then\n   \
    \ return {}\n  end", "  -- Your code here\nend", "    local result = {}\n    for\
    \ i = 1, #s do\n        if string.sub(s,i,i) == \" \" then\n            table.insert(result,\
    \ string.sub(s,1,i))\n        end\n    end\n    if #result == 0 then\n       \
    \ return {}\n    end\n    local index = 1\n    while index <= #result do\n   \
    \     if string.sub(s,index,index) == \" \" then\n            index = index +\
    \ 1\n        else\n            local count = 0\n            for i = 1, #result\
    \ do\n                if string.sub(s,index,index) == string.sub(result, i, i)\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n            if count == n then\n                table.insert(result,\
    \ string.sub(s,index,index))\n            end\n        end\n        index = index\
    \ + 1\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
