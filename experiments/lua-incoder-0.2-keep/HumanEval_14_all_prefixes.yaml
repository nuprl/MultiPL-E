name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix\
    \ = string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    string = string[index + 1]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i]\
    \ = string\n  end\n  while #prefixes > 1 do\n    local prefix = prefixes[1]\n\
    \    prefixes[1] = prefixes[#prefixes]\n    prefixes[#prefixes] = prefix\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  table.insert(prefixes, string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n\
    \  while i <= #string do\n    prefixes[#prefixes + 1] = string\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    prefixes[#prefixes + 1] = prefix\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i = 1\n  while i <= #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i = 1\n  while i <= #string do\n    prefixes[#prefixes + 1] = string\n    i\
    \ = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
