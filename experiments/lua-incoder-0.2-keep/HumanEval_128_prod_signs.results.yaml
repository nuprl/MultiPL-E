language: lua
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local product = 1\n  for i = 1,\
    \ #arr do\n    product = product * sign\n    sign = sign * arr[i]\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna3ymdo8.lua:23:\
    \ expected: -9, actual: 8\nstack traceback:\n\t/tmp/tmpna3ymdo8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_snvvg.lua:25:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpxe_snvvg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    product = product * sign\n    sign = sign * arr[i]\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpead588ni.lua:25:\
    \ expected: -9, actual: 8\nstack traceback:\n\t/tmp/tmpead588ni.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local product = 1\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt9vepak.lua:23:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpkt9vepak.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_snvvg.lua:25:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpxe_snvvg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign =\
    \ sign * math.abs(arr[i])\n  end\n  return sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyazkp6v.lua:21:\
    \ expected: -9, actual: 16\nstack traceback:\n\t/tmp/tmpcyazkp6v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_snvvg.lua:25:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpxe_snvvg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0dnb6n4.lua:25:\
    \ expected: -9, actual: 5\nstack traceback:\n\t/tmp/tmpl0dnb6n4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    sum = sum + math.abs(arr[i]) * sign\n    sign = -sign\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a78r9nc.lua:25:\
    \ expected: -9, actual: -3\nstack traceback:\n\t/tmp/tmp3a78r9nc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    sum = sum + math.abs(arr[i]) * sign\n    sign = -sign\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd79wguw4.lua:23:\
    \ expected: -9, actual: -3\nstack traceback:\n\t/tmp/tmpd79wguw4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_snvvg.lua:25:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpxe_snvvg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign =\
    \ sign * math.abs(arr[i])\n  end\n  return sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyazkp6v.lua:21:\
    \ expected: -9, actual: 16\nstack traceback:\n\t/tmp/tmpcyazkp6v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign * v\n \
    \     sign = -sign\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps4es00r.lua:26:\
    \ expected: -9, actual: 5\nstack traceback:\n\t/tmp/tmpps4es00r.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local x = arr[i]\n    if x ~= 0 then\n      sum = sum + x\
    \ * sign\n    end\n    sign = -sign\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6uto9vu.lua:28:\
    \ expected: -9, actual: 5\nstack traceback:\n\t/tmp/tmpb6uto9vu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe_snvvg.lua:25:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpxe_snvvg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    sum = sum + math.abs(arr[i]) * sign\n    sign = -sign\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3a78r9nc.lua:25:\
    \ expected: -9, actual: -3\nstack traceback:\n\t/tmp/tmp3a78r9nc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign =\
    \ sign * math.abs(arr[i])\n  end\n  return sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyazkp6v.lua:21:\
    \ expected: -9, actual: 16\nstack traceback:\n\t/tmp/tmpcyazkp6v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local product = 1\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n\
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt9vepak.lua:23:\
    \ expected: -9, actual: -16\nstack traceback:\n\t/tmp/tmpkt9vepak.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy4zb6vi.lua:25:\
    \ expected: -9, actual: -7\nstack traceback:\n\t/tmp/tmphy4zb6vi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy4zb6vi.lua:25:\
    \ expected: -9, actual: -7\nstack traceback:\n\t/tmp/tmphy4zb6vi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
