name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- digits(1)  == 1\n-- digits(4)\
  \  == 0\n-- digits(235) == 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  local nDigits\
    \ = math.floor(n/10)\n  if nDigits == 0 then\n    return 0\n  else\n    return\
    \ (n%10) * (math.floor(n/10))\n  end\nend", "  if n < 0 then return 0 end\n  local\
    \ product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product\
    \ * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  local product\
    \ = 1\n  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  local product = 1\n  local i = 1\n  while n\
    \ > 0 do\n    product = product * i % 10\n    i = i + 1\n    n = n / 10\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  else\n    local digits\
    \ = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n == 0 then\n    return 0\n  end\n \
    \ local digit = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = n / 10\n  end\n  return product\nend",
  "  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n  end\n  return product\nend", "  local ndigits = 0\n\
    \  while n > 0 do\n    local digit = n % 10\n    n = math.floor(n / 10)\n    ndigits\
    \ = ndigits + digit\n  end\n  return ndigits\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local digits = math.floor(n)\n  if digits == 0 then\n    return\
    \ 0\n  end\n  local product = 1\n  local remainder = n - digits\n  while remainder\
    \ > 0 do\n    product = product * 2\n    remainder = remainder - 2\n  end\n  return\
    \ product\nend", "  local product = 1\n  for i = 1, n do\n    product = product\
    \ * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return product\nend",
  "  if n < 0 then\n    return 0\n  end\n  local n1 = math.floor(n)\n  local n2 =\
    \ n - n1\n  local product = 1\n  while n2 > 0 do\n    product = product * 10 +\
    \ n2 % 2\n    n2 = n2 // 2\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits =\
    \ math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local nDigits = nDigits - 1\n\
    \    local product = 1\n    for i = 1, nDigits do\n      product = product * math.floor(n/10)\
    \ % 10\n      n = math.floor(n/10)\n    end\n    return product\n  end\nend",
  "  local product = 1\n  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n\
    \      product = product * digit\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  if n == 0 then return 0 end\n  local digit = 1\n  while n > 0 do\n  \
    \  digit = n * digit\n    n = math.floor(n/10)\n  end\n  return digit\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local digit = 1\n  while n > 0 do\n  \
    \  digit = n * digit\n    n = n / 10\n  end\n  return digit\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  local digits = 0\n  while n > 0 do\n\
    \    digits = digits * 10 + n % 10\n    n = n / 10\n  end\n  return digits\nend",
  "  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n  end\n  return product\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
