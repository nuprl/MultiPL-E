name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = string\n  local length = string.len()\n  for i = 1,\
    \ length do\n    local c = string.sub(i, i)\n    if c == 'a' then\n      result\
    \ = 'A'\n    elseif c == 'A' then\n      result = 'a'\n    elseif c == 'e' then\n\
    \      result = 'E'\n    elseif c == 'E' then\n      result = 'e'\n    elseif\
    \ c == 'i' then\n      result = 'I'\n    elseif c == 'I' then\n      result =\
    \ 'i'\n    elseif c == 'o' then\n      result = 'O'\n    elseif c == 'O' then\n\
    \      result = 'o'\n    elseif c == 'u' then\n      result = 'U'\n    elseif\
    \ c == 'U' then\n      result = 'u'\n    elseif c == 'y' then\n      result =\
    \ 'Y'\n    elseif c == 'Y' then\n      result = 'y'\n    end\n  end\n  return\
    \ result\nend", "  local result = string\n  local i, j = 1, #string\n  while i\
    \ < j do\n    local char = string.sub(i, j)\n    if char == string.lower then\n\
    \      result = string.sub(i, j):upper()\n    elseif char == string.upper then\n\
    \      result = string.sub(i, j):lower()\n    end\n    i = i + 1\n    j = j -\
    \ 1\n  end\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "  local result = string\n  local i, j = 1, #string\n  while i < j do\n\
    \    local c = string.sub(i, j)\n    i = i + 1\n    if c == \"a\" then\n     \
    \ c = string.sub(i, j - 1, \"A\")\n      i = i + 1\n    end\n    if c == \"A\"\
    \ then\n      c = string.sub(i, j + 1, \"a\")\n      i = i + 1\n    end\n    if\
    \ c == \"e\" then\n      c = string.sub(i, j - 1, \"E\")\n      i = i + 1\n  \
    \  end\n    if c == \"E\" then\n      c = string.sub(i, j + 1, \"e\")\n      i\
    \ = i + 1\n    end\n    if c == \"i\" then\n      c = string.sub(i, j - 1, \"\
    I\")\n      i = i + 1\n    end\n    if c == \"I\" then\n      c = string.sub(i,\
    \ j + 1, \"i\")\n      i = i + 1\n    end\n    if c == \"o\" then\n      c = string.sub(i,\
    \ j - 1, \"O\")\n      i = i + 1\n    end\n    if c == \"O\" then\n      c = string.sub(i,\
    \ j + 1, \"o\")\n      i = i + 1\n    end\n    if c == \"u\" then\n      c = string.sub(i,\
    \ j - 1, \"U\")\n      i = i + 1\n    end\n    if c == \"U\" then\n      c = string.sub(i,\
    \ j + 1, \"u\")\n      i = i + 1\n    end\n    if c == \"l\" then\n      c = string.sub(i,\
    \ j - 1, \"L\")\n      i = i + 1\n    end\n    if c == \"L\" then\n      c = string.sub(i,\
    \ j + 1, \"l\")\n      i = i + 1\n    end\n    if c == \"s\" then\n      c = string.sub(i,\
    \ j - 1, \"S\")\n      i = i + 1\n    end\n    if c == \"S\" then\n      c = string.sub(i,\
    \ j + 1, \"s\")\n      i = i + 1\n    end\n    if c == \"t\" then\n      c = string.sub(i,\
    \ j - 1, \"T\")\n      i = i + 1\n    end\n    if c == \"T\" then\n      c = string.sub(i,\
    \ j + 1, \"t\")\n      i = i + 1\n    end\n    if c == \"n\" then\n      c = string.sub(i,\
    \ j - 1, \"N\")\n      i = i + 1\n    end\n    if c == \"N\" then\n      c = string.sub(i,\
    \ j + 1, \"n\")\n      i = i + 1\n    end\n    if c == \"m\" then\n      c = string.sub(i,\
    \ j - 1, \"M\")\n      i = i + 1\n    end\n    if c == \"M\" then\n      c = string.sub(i,\
    \ j + 1, \"m\")\n      i = i + 1\n    end\n    if c == \"p", "  local result =\
    \ string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = string\n  -- Lowercase\
    \ letters.\n  for i = 1, #string do\n    local c = string.sub(i, i, i)\n    if\
    \ c >= 'a' and c <= 'z' then\n      c = string.sub(i, i - 1, 1)\n    end\n   \
    \ result = result .. c\n  end\n  -- Uppercase letters.\n  for i = #string, 1,\
    \ -1 do\n    local c = string.sub(i, i, i)\n    if c >= 'A' and c <= 'Z' then\n\
    \      c = string.sub(i, i - 1, 1)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend", "  local result = string\n  result:gsub('%l', function(c)\n\
    \    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U', function(c)\n\
    \    return string.char(tonumber(c) - 32)\n  end)\n  return result\nend", "  local\
    \ result = string\n  local upper = string.chars:gsub('%l', function(c)\n    return\
    \ string.chars[string.chars.index(c, 1, true) + 1]\n  end)\n  local lower = string.chars:gsub('%l',\
    \ function(c)\n    return string.chars[string.chars.index(c, -1, true) - 1]\n\
    \  end)\n  for i = 1, #upper do\n    result = string.sub(result, 1, i-1) .. upper[i]\
    \ .. string.sub(result, i+1)\n  end\n  for i = 1, #lower do\n    result = string.sub(result,\
    \ 1, i-1) .. lower[i] .. string.sub(result, i+1)\n  end\n  return result\nend",
  "  local result = string\n  local i, j = 1, #string\n  while i < j do\n    local\
    \ c = string.sub(i, j)\n    if c ~= nil then\n      c = string.char(tonumber(c))\n\
    \      if c ~= nil then\n        result = result .. c\n        i = i + 1\n   \
    \   end\n    end\n    j = j + 1\n  end\n  return result\nend", "  local result\
    \ = string\n  local i, j = 1, #string\n  while i <= j do\n    if string.sub(i,\
    \ 1, 1) ~= string.sub(j, 1, 1) then\n      result = string.sub(j, 1, 1) .. string.sub(i,\
    \ 1, 1) .. string.sub(j, 2, 2) .. string.sub(i, 2, 2)\n      i = i + 1\n    else\n\
    \      i = i + 1\n      j = j + 1\n    end\n  end\n  return result\nend", "  local\
    \ result = string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "    local new_string = string\n    for i = 1, #string do\n        if string.sub(i,\
    \ 1, 1) == 'a' then\n            new_string = string.sub(i, 1, #string) + string.sub(i,\
    \ #string + 1)\n        elseif string.sub(i, 1, 1) == 'A' then\n            new_string\
    \ = string.sub(i, 1, #string) + string.sub(i, #string + 1)\n        elseif string.sub(i,\
    \ 1, 1) == 'e' then\n            new_string = string.sub(i, 1, #string) + string.sub(i,\
    \ #string + 1)\n        elseif string.sub(i, 1, 1) == 'E' then\n            new_string\
    \ = string.sub(i, 1, #string) + string.sub(i, #string + 1)\n        elseif string.sub(i,\
    \ 1, 1) == 'i' then\n            new_string = string.sub(i, 1, #string) + string.sub(i,\
    \ #string + 1)\n        elseif string.sub(i, 1, 1) == 'I' then\n            new_string\
    \ = string.sub(i, 1, #string) + string.sub(i, #string + 1)\n        elseif string.sub(i,\
    \ 1, 1) == 'o' then\n            new_string = string.sub(i, 1, #string) + string.sub(i,\
    \ #string + 1)\n        elseif string.sub(i, 1, 1) == 'O' then\n            new_string\
    \ = string.sub(i, 1, #string) + string.sub(i, #string + 1)\n        elseif string.sub(i,\
    \ 1, 1) == 'u' then\n            new_string = string.sub(i, 1, #string) + string.sub(i,\
    \ #string + 1)\n        elseif string.sub(i, 1, 1) == 'U' then\n            new_string\
    \ = string.sub(i, 1, #string) + string.sub(i, #string + 1)\n        end\n    end\n\
    \    return new_string\nend", "  local result = string\n  local i, j = 1, #string\n\
    \  while i < j do\n    local c = string.sub(i, j)\n    if c == \"a\" then\n  \
    \    c = string.sub(j, j - 1)\n    end\n    if c == \"A\" then\n      c = string.sub(j\
    \ - 1, j)\n    end\n    if c == \"0\" then\n      c = string.sub(j, j - 1)\n \
    \   end\n    if c == \"1\" then\n      c = string.sub(j, j - 1)\n    end\n   \
    \ if c == \"2\" then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"\
    3\" then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"4\" then\n  \
    \    c = string.sub(j, j - 1)\n    end\n    if c == \"5\" then\n      c = string.sub(j,\
    \ j - 1)\n    end\n    if c == \"6\" then\n      c = string.sub(j, j - 1)\n  \
    \  end\n    if c == \"7\" then\n      c = string.sub(j, j - 1)\n    end\n    if\
    \ c == \"8\" then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"9\"\
    \ then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"_\" then\n    \
    \  c = string.sub(j, j - 1)\n    end\n    if c == \"-\" then\n      c = string.sub(j,\
    \ j - 1)\n    end\n    if c == \"+\" then\n      c = string.sub(j, j - 1)\n  \
    \  end\n    if c == \"/\" then\n      c = string.sub(j, j - 1)\n    end\n    if\
    \ c == \"%\" then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"^\"\
    \ then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"~\" then\n    \
    \  c = string.sub(j, j - 1)\n    end\n    if c == \"!\" then\n      c = string.sub(j,\
    \ j - 1)\n    end\n    if c == \"&\" then\n      c = string.sub(j, j - 1)\n  \
    \  end\n    if c == \"|\" then\n      c = string.sub(j, j - 1)\n    end\n    if\
    \ c == \"{\" then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"}\"\
    \ then\n      c = string.sub(j, j - 1)\n    end\n    if c == \"[\" then\n    \
    \  c = string.sub(j, j - 1)\n    end\n    if c == \"]\" then\n      c = string.sub(j,\
    \ j - 1)\n    end\n    if c == \"<\" then\n      c = string.sub(j, j - 1)\n  \
    \  end\n    if c == \"=\" then\n      c = string.sub(j, j - 1)\n    end\n    if\
    \ c == \">\" then\n      c = string.sub(j, j - 1)\n", "  local result = string\n\
    \  -- Lowercase letters.\n  for i = 1, #string do\n    local c = string.sub(i,\
    \ i, i)\n    if string.find(c, \"[A-Z]\") then\n      result = string.gsub(result,\
    \ \"[\" .. c .. \"]\", string.upper(c))\n    end\n  end\n  -- Uppercase letters.\n\
    \  for i = 1, #string do\n    local c = string.sub(i, i, i)\n    if string.find(c,\
    \ \"[a-z]\") then\n      result = string.gsub(result, \"[\" .. c .. \"]\", string.lower(c))\n\
    \    end\n  end\n  return result\nend", "  local result = string\n  local i, j\
    \ = 1, #string\n  while i < j do\n    local char = string.sub(i, j)\n    if char\
    \ == string.lower then\n      result = string.sub(string.upper, i, string.upper)\n\
    \      i = string.upper\n    elseif char == string.upper then\n      result =\
    \ string.sub(string.lower, i, string.lower)\n      i = string.lower\n    else\n\
    \      i = i + 1\n    end\n  end\n  return result\nend", "  local result = string\n\
    \  result:gsub('%l', function(c)\n    return string.char(tonumber(c) + 32)\n \
    \ end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c) -\
    \ 32)\n  end)\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "    local result = string\n    for i, c in ipairs(string) do\n        if\
    \ c:lower() == c:upper() then\n            result = result:sub(1, #result-1)..c:lower()\n\
    \        else\n            result = result:sub(1, #result-1)..c:upper()\n    \
    \    end\n    end\n    return result\nend", "  local result = string\n  result:gsub(\"\
    ([a-z])\", function (c) \n    return string.upper(c) \n  end)\n  result:gsub(\"\
    ([A-Z])\", function (c) \n    return string.lower(c) \n  end)\n  return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
