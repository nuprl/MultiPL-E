name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if string == nil then return 0 end\n  local len = 0\n  for i = 1,\
    \ #string do\n    len = len + 1\n  end\n  return len\nend", "  return string.len()\
    \ or string.gsub(string, '[^'..string.char(127) .. '\\n]', '')\nend", "  return\
    \ string.len() or string.gsub(string, '[^\\x00-\\x7F]', '')\nend", "  return string.len()\
    \ or string.bytelen()\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() or string.bytes and string.len(string.bytes()) or 0\nend",
  "  return string.len() or 0 -- Lua 5.2\nend", "  return string.len() or 0 -- Lua\
    \ 5.2\nend", "  return string.len\nend", "  return string.len() or string.bytes\
    \ and string.bytes.length(string) or string.gsub(string, \"[^\\x00-\\x7F]\", \"\
    \"):bytelen()\nend", "  return string.len() or string.bytes or string.chars or\
    \ 0\nend", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ or string.bytes and string.len(string.bytes()) or 0\nend", "  if string == nil\
    \ then return 0 end\n  local len = 0\n  for i = 1, #string do\n    len = len +\
    \ 1\n  end\n  return len\nend", "  return string.len() or string.bytelen()\nend",
  "  return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or 0\nend", "  return string.len() -- Lua 5.2\n \
    \ or string.gsub(string, '^%s*', '')\n  or string.gsub(string, '%s+', '')\n  or\
    \ 0\nend", "  return string.len() or string.bytelen()\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
