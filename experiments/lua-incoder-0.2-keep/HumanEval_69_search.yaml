name: HumanEval_69_search
language: lua
prompt: "-- You are given a non-empty list of positive integers. Return the greatest\
  \ integer that is greater than \n-- zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n-- The frequency of an integer is the number\
  \ of times it appears in the list.\n-- If no such a value exist, return -1.\n--\
  \ Examples:\n-- search([4, 1, 2, 2, 3, 1]) == 2\n-- search([1, 2, 2, 3, 3, 3, 4,\
  \ 4, 4]) == 3\n-- search([5, 5, 4, 4, 4]) == -1\nlocal function search(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = search\n\
  \    lu.assertEquals(candidate({5, 5, 5, 5, 1}), 1)\n    lu.assertEquals(candidate({4,\
  \ 1, 4, 1, 4, 4}), 4)\n    lu.assertEquals(candidate({3, 3}), -1)\n    lu.assertEquals(candidate({8,\
  \ 8, 8, 8, 8, 8, 8, 8}), 8)\n    lu.assertEquals(candidate({2, 3, 3, 2, 2}), 2)\n\
  \    lu.assertEquals(candidate({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), 1)\n    lu.assertEquals(candidate({3, 2, 8, 2}), 2)\n   \
  \ lu.assertEquals(candidate({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), 1)\n    lu.assertEquals(candidate({8,\
  \ 8, 3, 6, 5, 6, 4}), -1)\n    lu.assertEquals(candidate({6, 9, 6, 7, 1, 4, 7, 1,\
  \ 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), 1)\n    lu.assertEquals(candidate({1,\
  \ 9, 10, 1, 3}), 1)\n    lu.assertEquals(candidate({6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), 5)\n    lu.assertEquals(candidate({1}),\
  \ 1)\n    lu.assertEquals(candidate({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5}), 4)\n    lu.assertEquals(candidate({2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), 2)\n    lu.assertEquals(candidate({1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), 1)\n    lu.assertEquals(candidate({9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), 4)\n    lu.assertEquals(candidate({2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), 4)\n    lu.assertEquals(candidate({9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), 2)\n    lu.assertEquals(candidate({5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), -1)\n    lu.assertEquals(candidate({10}),\
  \ -1)\n    lu.assertEquals(candidate({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
  \ 2)\n    lu.assertEquals(candidate({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), 1)\n \
  \   lu.assertEquals(candidate({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6}), 1)\n    lu.assertEquals(candidate({3, 10, 10, 9, 2}), -1)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max = 0\n  local freq = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == 0 then\n      freq = freq + 1\n    elseif lst[i] > 0 then\n      if freq\
    \ > 0 then\n        if freq > max then\n          max = freq\n        end\n  \
    \    end\n      freq = 1\n    else\n      freq = freq + 1\n    end\n  end\n  if\
    \ freq > 0 then\n    if freq > max then\n      max = freq\n    end\n  end\n  return\
    \ max\nend", "    local max = 0\n    local freq = 0\n    for i = 1, #lst do\n\
    \        if lst[i] == 0 then\n            freq = freq + 1\n        elseif lst[i]\
    \ > 0 then\n            if freq > 0 then\n                max = lst[i]\n     \
    \       end\n            freq = freq + 1\n        end\n    end\n    if freq >\
    \ 0 then\n        return max\n    end\n    return -1\nend", "    local max = 0\n\
    \    local freq = 0\n    for i = 1, #lst do\n        if lst[i] == 0 then\n   \
    \         freq = freq + 1\n        else\n            if freq > max then\n    \
    \            max = freq\n            end\n            freq = 1\n        end\n\
    \    end\n    if freq > max then\n        return -1\n    end\n    return max\n\
    end", "\tlocal max = 0\n\tlocal maxFreq = 0\n\tfor i = 1, #lst do\n\t\tlocal freq\
    \ = lst:count(lst[i])\n\t\tif freq > maxFreq then\n\t\t\tmax = lst[i]\n\t\t\t\
    maxFreq = freq\n\t\tend\n\tend\n\treturn max\nend", "  local max = 0\n  local\
    \ freq = 0\n  for i = 1, #lst do\n    if lst[i] == 0 then\n      return -1\n \
    \   end\n    freq = freq + 1\n    if freq > max then\n      max = freq\n    end\n\
    \  end\n  return max\nend", "    local max = 0\n    local freq = 0\n    for i\
    \ = 1, #lst do\n        if lst[i] == 0 then\n            freq = freq + 1\n   \
    \     elseif lst[i] > 0 then\n            freq = freq + 1\n            if freq\
    \ > max then\n                max = freq\n            end\n        end\n    end\n\
    \    return max\nend", "  local max = 0\n  local freq = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > 0 then\n      freq = freq + 1\n      if freq > max then\n   \
    \     max = freq\n      end\n    end\n  end\n  if max > 0 then\n    return max\n\
    \  else\n    return -1\n  end\nend", "    local max = 0\n    local freq = 0\n\
    \    for i = 1, #lst do\n        if lst[i] == 0 then\n            return -1\n\
    \        end\n        if lst[i] > 0 then\n            freq = freq + 1\n      \
    \      if freq > max then\n                max = freq\n            end\n     \
    \   end\n    end\n    return max\nend", "\tlocal max = 0\n\tlocal freq = 0\n\t\
    for _, v in ipairs(lst) do\n\t\tif v > 0 then\n\t\t\tfreq = freq + 1\n\t\t\tif\
    \ freq > max then\n\t\t\t\tmax = freq\n\t\t\tend\n\t\tend\n\tend\n\tif max ==\
    \ 0 then\n\t\treturn -1\n\tend\n\treturn max\nend", "  local max = 0\n  local\
    \ freq = 0\n  for i = 1, #lst do\n    if lst[i] == 0 then\n      return -1\n \
    \   end\n    freq = freq + 1\n    if freq > max then\n      max = freq\n    end\n\
    \  end\n  return max\nend", "  local max = 0\n  local maxCount = 0\n  for i =\
    \ 1, #lst do\n    local count = lst:count(lst[i])\n    if count > maxCount then\n\
    \      max = lst[i]\n      maxCount = count\n    end\n  end\n  return max\nend",
  "    local max_freq = lst[1]\n    for i = 2, #lst do\n        if lst[i] > max_freq\
    \ then\n            max_freq = lst[i]\n        end\n    end\n    return max_freq\n\
    end", "    local max = 0\n    local freq = 0\n    for i = 1, #lst do\n       \
    \ if lst[i] == max then\n            freq = freq + 1\n        elseif lst[i] >\
    \ max then\n            max = lst[i]\n            freq = 1\n        elseif lst[i]\
    \ == max and freq >= lst[i] then\n            freq = freq + 1\n        end\n \
    \   end\n    return max\nend", "    local max = 0\n    local freq = 0\n    for\
    \ i = 1, #lst do\n        if lst[i] > 0 then\n            freq = freq + 1\n  \
    \          if freq > max then\n                max = freq\n            end\n \
    \       end\n    end\n    return max\nend", "    local max = 0\n    local freq\
    \ = 0\n    for i = 1, #lst do\n        if lst[i] == max then\n            freq\
    \ = freq + 1\n        else\n            if freq > 0 then\n                return\
    \ max\n            end\n            max = lst[i]\n            freq = 1\n     \
    \   end\n    end\n    return -1\nend", "    local max = 0\n    local freq = 0\n\
    \    for i = 1, #lst do\n        if lst[i] == 0 then\n            freq = freq\
    \ - 1\n        else\n            freq = freq + 1\n            if freq > max then\n\
    \                max = freq\n            end\n        end\n    end\n    if freq\
    \ > max then\n        return -1\n    else\n        return max\n    end\nend",
  "    local max = 0\n    local freq = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ > 0 then\n            freq = freq + 1\n            if freq > max then\n    \
    \            max = freq\n            end\n        end\n    end\n    return max\n\
    end", "  local max = 0\n  local freq = 0\n  for i = 1, #lst do\n    if freq >\
    \ lst[i] then\n      max = lst[i]\n      freq = lst[i]\n    end\n  end\n  return\
    \ max\nend", "  local max_freq = lst[1]\n  local max_val = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] > max_val then\n      max_val = lst[i]\n    end\n   \
    \ if lst[i] > max_freq then\n      max_freq = lst[i]\n    end\n  end\n  return\
    \ max_val\nend", "  local max = 0\n  local freq = {}\n  for i = 1, #lst do\n \
    \   freq[lst[i]] = freq[lst[i]] + 1 or 1\n    if freq[lst[i]] > max then\n   \
    \   max = freq[lst[i]]\n    end\n  end\n  return max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
