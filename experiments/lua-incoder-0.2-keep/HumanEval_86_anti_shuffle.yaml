name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\n-- anti_shuffle('Hi') returns 'Hi'\n\
  -- anti_shuffle('hello') returns 'ehllo'\n-- anti_shuffle('Hello World!!!') returns\
  \ 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = string.gmatch(s, '%w+')\n  local new_words = {}\n \
    \ for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n \
    \   for j = 1, #word do\n      local c = string.byte(word[j])\n      new_word\
    \ = new_word .. string.char((c > 127 and 255 or c))\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend", "  local\
    \ words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      local new_ascii = ascii\n\
    \      if ascii < 65 then\n        new_ascii = ascii + 26\n      elseif ascii\
    \ < 91 then\n        new_ascii = ascii - 26\n      else\n        new_ascii = ascii\
    \ - 64\n      end\n      new_word = new_word .. string.char(new_ascii)\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words, '')\nend",
  "  local words = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = word\n    local j = 1\n\
    \    while true do\n      local c = string.byte(word)\n      local new_c = string.byte(new_word)\n\
    \      if c < new_c then\n        new_word = new_word .. string.sub(word, j, j\
    \ + 1)\n        j = j + 1\n      else\n        new_word = new_word .. string.sub(word,\
    \ j + 1, j + 2)\n        j = j + 2\n      end\n      if j > #word then\n     \
    \   new_word = new_word .. string.sub(word, 1, j)\n        break\n      end\n\
    \    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend", "  local\
    \ words = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%w])', function(c)\n\
    \    return string.char(tonumber(c))\n  end)\n  return sorted_words\nend", " \
    \ -- Write your solution here\n  -- return 'Write your solution here'\nend", " \
    \ local words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word\
    \ in pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  local new_s = ''\n  for _, word in pairs(new_words) do\n    new_s = new_s ..\
    \ word .. ' '\n  end\n  return new_s\nend", "  -- Write your solution here\n \
    \ -- return 'Hello World!!!' -- Your code goes here\n  return s\nend", "  local\
    \ words = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for _, word in\
    \ pairs(words) do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n\
    \  return table.concat(new_words, ' ')\nend", "  -- Write your solution here\n\
    \  local words = string.gmatch(s, '([^ ]+)')\n  local sorted_words = {}\n  for\
    \ _, word in pairs(words) do\n    table.insert(sorted_words, word)\n  end\n  table.sort(sorted_words)\n\
    \  local new_s = ''\n  for _, word in pairs(sorted_words) do\n    new_s = new_s\
    \ .. word\n  end\n  return new_s\nend", "  local words = string.gmatch(s, '%w+')\n\
    \  local new_words = {}\n  for i = 1, #words do\n    local word = words[i]\n \
    \   local new_word = ''\n    for j = 1, #word do\n      local c = string.byte(word[j])\n\
    \      local n = string.byte(word[j+1])\n      if c > n then\n        new_word\
    \ = new_word .. string.char(n - c)\n      else\n        new_word = new_word ..\
    \ string.char(c)\n      end\n    end\n    new_words[#new_words + 1] = new_word\n\
    \  end\n  return table.concat(new_words, '')\nend", "  -- Write your solution\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  ",
  "  local words = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      if ascii < 128 then\n  \
    \      new_word = new_word .. string.char(ascii)\n      else\n        new_word\
    \ = new_word .. string.char(math.random(128))\n      end\n    end\n    new_words[i]\
    \ = new_word\n  end\n  return table.concat(new_words, '')\nend", "  -- Write your\
    \ code here\n  local new_s = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii > 127\
    \ then\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i+1)\n\
    \    else\n      new_s = new_s .. char\n    end\n  end\n  return new_s\nend",
  "  local words = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1,\
    \ #words do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend", "  -- Write your solution here\n  local words = string.gmatch(s,\
    \ '%w+') -- get all words in the string\n  local sorted_words = {}\n  for i =\
    \ 1, #words do\n    sorted_words[#sorted_words + 1] = words[i] -- add each word\
    \ to the sorted list\n  end\n  table.sort(sorted_words) -- sort the words in ascending\
    \ order\n  local new_s = ''\n  for i = 1, #sorted_words do\n    new_s = new_s\
    \ .. sorted_words[i] .. ' '\n  end\n  return new_s\nend", "  local words = string.gmatch(s,\
    \ '([^ ]+)')\n  local result = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local new_word = word\n    for j = 1, #word do\n      local c = string.sub(word,\
    \ j, j)\n      local ascii = string.byte(c)\n      if ascii < 97 then\n      \
    \  ascii = ascii + 26\n      elseif ascii < 123 then\n        ascii = ascii -\
    \ 26\n      else\n        ascii = ascii - 26 + 26\n      end\n      new_word =\
    \ new_word .. string.char(ascii)\n    end\n    result[#result + 1] = new_word\n\
    \  end\n  return table.concat(result)\nend", "  -- Write your code here\n  local\
    \ words = s:gsub(' ', ' '):gsub(' ', ' ')\n  local sorted_words = {}\n  for i\
    \ = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend", "  -- Write your code here\n\
    \  local words = s:gsub(' ', '').gsub('%w+', function(w)\n    return string.char(tonumber(w))\n\
    \  end)\n  local sorted_words = table.sort(words)\n  return table.concat(sorted_words,\
    \ ' ')\nend", "  local words = string.gmatch(s, '%w+')\n  local new_s = ''\n \
    \ for i = 1, #words do\n    local word = words[i]\n    local new_word = word\n\
    \    for j = 1, #word do\n      local c = string.byte(word[j])\n      new_word\
    \ = new_word .. string.char((c > 127 and 255 or c))\n    end\n    new_s = new_s\
    \ .. new_word\n  end\n  return new_s\nend", "  -- Write your solution here\n \
    \ local new_s = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n  \
    \  if string.find(c, \"[%a]\") then\n      local new_c = string.gsub(c, \"[%a]\"\
    , function(c)\n        return string.char(tonumber(c) + 64)\n      end)\n    \
    \  new_s = new_s .. new_c\n    else\n      new_s = new_s .. c\n    end\n  end\n\
    \  return new_s\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
