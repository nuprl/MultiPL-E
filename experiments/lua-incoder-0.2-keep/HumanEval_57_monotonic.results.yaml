language: lua
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x < y then\n      return false\n    end\n    if x >\
    \ y then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo__6w0or.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo__6w0or.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpo__6w0or.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing(v)\n   \
    \ return v == l[1]\n  end\n  local function is_strictly_monotonic(v)\n    return\
    \ is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local function\
    \ is_strictly_decreasing_strictly_increasing(v)\n    return v == l[1]\n  end\n\
    \  local function is_strictly_increasing_strictly_decreasing(v)\n    return v\
    \ == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decre\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp02z4zz_a.lua:70: ''('' expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~=\
    \ 0 then\n      if x > y then\n        if w > m then\n          m = w\n      \
    \  end\n      else\n        if w < m then\n          m = w\n        end\n    \
    \  end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return\
    \ m == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniyruzjt.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpniyruzjt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n =\
    \ n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[2]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthj7x5bc.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpthj7x5bc.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpthj7x5bc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n    j = j - 1\n  end\n\
    \  return i == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbbjf6cl7.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbbjf6cl7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbbjf6cl7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    local m = m + 1\n        local n = n + 1\n      end\n    end\n    i = i +\
    \ 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kbhv_y6.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0kbhv_y6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0kbhv_y6.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local last_monotonic_flag = false\n  local last_monotonic_value = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnsvd5_v.lua:89: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    if i == 1 then\n      k = x\n    \
    \  m = x\n    else\n      if x < l[j] then\n        k = x\n      else\n      \
    \  if x > l[k] then\n          m = x\n        else\n          k = x\n        end\n\
    \      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <= k\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe27seaw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoe27seaw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjq34a75.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdjq34a75.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdjq34a75.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzryoql1m.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzryoql1m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n\
    \  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvloa178m.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvloa178m.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvloa178m.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j + 1\n    while m <= n do\n      if l[m] < l[i] then return false\
    \ end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n \
    \   i = i + 1\n    j = j + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1trp8z7c.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1trp8z7c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1trp8z7c.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[i-1] < l[i] then\n      return true\n \
    \   end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpdpmeyx.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdpdpmeyx.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdpdpmeyx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n  end\n  return\
    \ i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaneqdmvg.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaneqdmvg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpaneqdmvg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cg6h551.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8cg6h551.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8cg6h551.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i < n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x > y then\n      if w < x then\n        j = k\n      else\n        i\
    \ = k\n      end\n    elseif x < y then\n      if w > x then\n        k = k +\
    \ 1\n      else\n        i = i + 1\n      end\n    else\n      if w == x then\n\
    \        i = i + 1\n      else\n        k = k + 1\n      end\n    end\n    m =\
    \ m + 1\n  end\n  return m == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local max_val = l[1]\n  local min_val = l[1]\n  while i <= #l do\n    local\
    \ val = l[i]\n    if val > max_val then\n      max_val = val\n      j = i\n  \
    \  elseif val < min_val then\n      min_val = val\n      k = i\n    end\n    i\
    \ = i + 1\n    if i == #l then\n      if max_val > min_val then\n        monotonic_flag\
    \ = false\n      end\n      break\n    end\n  end\n  return monotonic_flag\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzjzpjrb.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbzjzpjrb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n\
    \  local last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp238sr6hu.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i <= j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4g2xfd3y.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4g2xfd3y.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4g2xfd3y.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k < l[j] then\n      j = k\n    else\n      i = k + 1\n    end\n  end\n\
    \  return i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp491khiue.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp491khiue.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp491khiue.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvh7nzti.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzvh7nzti.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzvh7nzti.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then\n      return false\n    end\n    if m ==\
    \ k then\n      if i == j then\n        return true\n      end\n      i = i +\
    \ 1\n      j = j - 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvgcskjdg.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvgcskjdg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvgcskjdg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    k = k + 1\n    if k > 1 then\n      if m ~=\
    \ l[k - 1] then\n        return false\n      end\n    end\n    i = i + 1\n   \
    \ j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx6wqb26.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfx6wqb26.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m == n then\n      if k ~= 1 then\n        return\
    \ false\n      end\n      i = i + 1\n      j = j + 1\n    else\n      k = k +\
    \ 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_6gnkye.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo_6gnkye.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvh7nzti.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzvh7nzti.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzvh7nzti.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] ~= l[i] then\n      if l[m] > l[i] then\n        j = m\n      else\n\
    \        i = m\n      end\n    else\n      i = i + 1\n      j = j - 1\n    end\n\
    \  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_nl2hg0n.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_nl2hg0n.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_nl2hg0n.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      k = k + 1\n      if k\
    \ > 1 then\n        j = j + 1\n      end\n      i = i + 1\n    end\n    i = i\
    \ + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqb015ah.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwqb015ah.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    k = k + 1\n    if l[i] > m then\n      m = l[i]\n   \
    \ end\n    if l[i] < n then\n      n = l[i]\n    end\n    i = i + 1\n  end\n \
    \ return m <= n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1thbua79.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1thbua79.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local last = l[1]\n  for i = 2, #l do\n\
    \    if l[i] ~= last then return false end\n    last = l[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_p9b3b2u.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_p9b3b2u.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    k = i\n    while k < #l and l[k] < m do\n      k = k +\
    \ 1\n    end\n    if k > i then\n      m = l[i]\n      n = l[k]\n      i = k\n\
    \    end\n  end\n  return n == m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ last_monotonic = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j\
    \ = nil\n  local last_monotonic_k = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_m = nil\n  local last_monotonic_n = nil\n  local last_monotonic_o\
    \ = nil\n  local last_monotonic_d = nil\n  local last_monotonic_r = nil\n  local\
    \ last_monotonic_p = nil\n  local last_monotonic_f = nil\n  local last_monotonic_c\
    \ = nil\n  local last_monotonic_a = nil\n  local last_monotonic_b = nil\n  local\
    \ last_monotonic_c = nil\n  local last_monotonic_d = nil\n  local last_monotonic_f\
    \ = nil\n  local last_monotonic_p = nil\n  local last_monotonic_r = 0\n  local\
    \ last_monotonic_n = 0\n  local last_monotonic_o = 0\n  local last_monotonic_d\
    \ = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b = 0\n  local last_monotonic_a\
    \ = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p = 0\n  local last_monotonic_r\
    \ = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o = 0\n  local last_monotonic_d\
    \ = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b = 0\n  local last_monotonic_a\
    \ = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p = 0\n  local last_monotonic_r\
    \ = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o = 0\n  local last_monotonic_d\
    \ = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b = 0\n  local last_monotonic_a\
    \ = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p = 0\n  local last_monotonic_r\
    \ = nil\n  local last_monotonic_n = 0\n  local last_monotonic_o = 0\n  local last_monotonic_d\
    \ = 0\n  local last_monotonic_c = 0\n  local last_monotonic_b = 0\n  local last_monotonic_a\
    \ = 0\n  local last_monotonic_f = 0\n  local last_monotonic_p = 0\n  local last_monotonic_r\
    \ = nil\n  local last_monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0tdm9yhl.lua:84: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      return true\n      end\n    else\n      if x > z then\n        return true\n\
    \      else\n        if y < z then\n          return false\n        else\n   \
    \       return true\n        end\n      end\n    end\n    i = i + 1\n    j = j\
    \ + 1\n    k = k + 1\n    m = m + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll5soct0.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpll5soct0.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < first then\n      return false\n    end\n    first = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3999vnlg.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3999vnlg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x < y then\n      i = i + 1\n    elseif x > y then\n\
    \      j = j - 1\n    else\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxck75u3.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxxck75u3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpxxck75u3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~=\
    \ 0 then\n      if x >= y then\n        if w > 0 then\n          return false\n\
    \        else\n          k = k + 1\n        end\n      else\n        if w < 0\
    \ then\n          return false\n        else\n          k = k + 1\n        end\n\
    \      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1jyb0d.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpef1jyb0d.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jnwk75p.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4jnwk75p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4jnwk75p.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  local lastVal = l[1]\n \
    \ for i = 2, #l do\n    if l[i] ~= lastVal then\n      return false\n    end\n\
    \    lastVal = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfq7si14.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyfq7si14.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \    prev[v] = false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnec0gzq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjnec0gzq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptahay31i.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptahay31i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptahay31i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      k = k + 1\n      if k > #l then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uayw6r1.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1uayw6r1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = n\n      end\n      n = n - 1\n    end\n    if i <= j then\n\
    \      j = j - 1\n    end\n    i = i + 1\n  end\n  return i <= j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0u1qyjes.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0u1qyjes.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0u1qyjes.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dbsbl4d.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7dbsbl4d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7dbsbl4d.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k ~= nil then\n      if k < l[j] then\n        j = k\n      else\n     \
    \   i = k\n      end\n    end\n    i = i + 1\n  end\n  return i == j\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3xm_61nh.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3xm_61nh.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp3xm_61nh.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_uc0p02.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpa_uc0p02.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpa_uc0p02.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_uc0p02.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpa_uc0p02.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpa_uc0p02.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local last = l[1]\n  for i = 2, #l do\n\
    \    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg0k0wkv.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjg0k0wkv.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local max_i = #l + 1\n  local max_j = #l + 1\n  while i <= max_i\
    \ and j <= max_j do\n    if l[i] < l[j] then\n      k = i\n      i = i + 1\n \
    \   elseif l[i] > l[j] then\n      k = j\n      j = j + 1\n    else\n      --\
    \ If l[i] == l[j], then we know that l[i] < l[j] so l[i] < l[k] so l[i] < l[k+1]\n\
    \      -- If l[i] < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n\
    \      -- If l[i] < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i] < l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i] > l[k+3]\n\
    \      -- If l[i] == l[k], then we know that l[i] < l[k] so l[i] < l[k+1] so l[i]\
    \ < l[k+2]\n      -- If l[i] < l[k], then l[i] < l[k+1] so l[i] < l[k+2] so l[i]\
    \ < l[k+3]\n      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i]\
    \ > l[k+3]\n      -- If l[i] > l[k], then l[i] > l[k+1] so l[i] > l[k+2] so l[i]\
    \ > l[k+3]\n      -- If l[i] < l[k], then l[i] < \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwl5cjimi.lua:50: ''end'' expected (to close ''if'' at line
    16) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local first = l[1]\n  for i = 2, #l do\n\
    \    if l[i] < first then return false end\n    first = l[i]\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwh8xkvls.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwh8xkvls.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n - 1\n    end\n\
    \    if i < j then\n      j = i\n    end\n    i = i + 1\n  end\n  return i <=\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7h_ydi42.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7h_ydi42.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7h_ydi42.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3yaywjx.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy3yaywjx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy3yaywjx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n        local t\
    \ = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32arundk.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp32arundk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp32arundk.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    if i == 1 then\n      k = x\n    \
    \  m = x\n      j = x\n    elseif j > x then\n      k = x\n      m = x\n     \
    \ j = x\n    elseif j < x then\n      k = x\n      m = x\n      j = x\n    elseif\
    \ m > x then\n      k = x\n      m = x\n      j = x\n    elseif m == x then\n\
    \      if k <= x then\n        i = i + 1\n      else\n        i = i - 1\n    \
    \  end\n    end\n  end\n  return m <= l[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlq9i_if.lua:65: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    elseif x < y then\n\
    \      return true\n    else\n      i = i + 1\n      j = j - 1\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_g9vb7i.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz_g9vb7i.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpz_g9vb7i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x < y then\n      if x < z then\n        m = x\n      else\n        n\
    \ = x\n      end\n    else\n      if y < z then\n        m = y\n      else\n \
    \       n = y\n      end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n\
    \  end\n  return m <= n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhye2t04.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdhye2t04.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    while j <= m do\n      if l[j] < l[i] then\n        local\
    \ t = l[j]\n        l[j] = l[i]\n        l[i] = t\n        j = j + 1\n      else\n\
    \        j = j + 1\n      end\n    end\n    i = i + 1\n    k = k + 1\n    m =\
    \ m + 1\n  end\n  return k > n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rgti190.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5rgti190.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while m > k do\n      if l[k] < l[m] then return false end\n    \
    \  k = k + 1\n      m = m - 1\n    end\n    if l[k] > l[m] then return true end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1tkbv3n.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpp1tkbv3n.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpp1tkbv3n.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ is_decreasing = false\n  local is_increasing = false\n  local is_monotonic =\
    \ false\n  local is_decreasing_or_nondecreasing = false\n  local is_increasing_or_nonincreasing\
    \ = false\n  local is_monotonic_or_nonmonotonic = false\n  local is_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nonincreasing = false\n\
    \  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing = false\n\
    \  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_or_nondecreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonot\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmper9c6st0.lua:46: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x > z then\n        m = x\n      else\n        n\
    \ = y\n      end\n    elseif x < y then\n      if x < z then\n        m = y\n\
    \      else\n        n = z\n      end\n    else\n      if x > z then\n       \
    \ m = z\n      else\n        n = x\n      end\n    end\n    i = i + 1\n    j =\
    \ j + 1\n    k = k + 1\n  end\n  return m <= n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt2zhmjw.lua:49:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyt2zhmjw.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[i] then\n        i, k = k, k + 1\n      elseif l[k]\
    \ > l[i] then\n        j = k\n      else\n        return false\n      end\n  \
    \  end\n    if i < j then\n      i = i + 1\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_ss3ahc.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi_ss3ahc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n        local t\
    \ = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32arundk.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp32arundk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp32arundk.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    end\n    if i ==\
    \ j then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbbmsz_i3.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbbmsz_i3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpbbmsz_i3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[2]\n\
    \  while i <= n do\n    if l[i] < m then\n      k = k + 1\n      m = l[i]\n  \
    \  elseif l[i] > m then\n      j = j + 1\n      m = l[i]\n    end\n    i = i +\
    \ 1\n  end\n  return k == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpragidriv.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpragidriv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local last_element = l[1]\n  for i = 2, #l do\n    if l[i] ~= last_element\
    \ then\n      k = j\n      j = i\n    end\n    last_element = l[i]\n    if k -\
    \ j > 1 then\n      monotonic_flag = false\n    end\n  end\n  return monotonic_flag\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8zds0d5.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz8zds0d5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local max_val = l[1]\n  local min_val = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max_val then\n      max_val = l[i]\n    end\n    if l[i] < min_val then\n\
    \      min_val = l[i]\n    end\n    if l[i] ~= l[j] then\n      monotonic_flag\
    \ = false\n    end\n    j = i\n  end\n  return monotonic_flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0ei4amo.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0ei4amo.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] ~= l[i] or l[m] ~= l[j] then\n      return false\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv8z0nnm.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmv8z0nnm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m == n then\n      if m ~= 0 then\n        k = k\
    \ + 1\n      end\n      i = i + 1\n      j = j + 1\n    else\n      k = k + 1\n\
    \    end\n  end\n  return k == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp260bqape.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp260bqape.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptahay31i.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptahay31i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptahay31i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j + 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpft5hd7af.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpft5hd7af.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpft5hd7af.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev\n  for _, v in ipairs(l) do\n    if prev == nil then\n      prev\
    \ = v\n      continue\n    end\n    if prev < v then\n      return false\n   \
    \ end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu1w7nl0l.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptjm1a3ve.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmptjm1a3ve.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmptjm1a3ve.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      if k > 1 then\n\
    \        local m = l[j]\n      end\n    else\n      k = k - 1\n      if k < 1\
    \ then\n        local m = l[j]\n      end\n    end\n    i = i + 1\n    j = j +\
    \ 1\n  end\n  return k == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytc_8dx6.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpytc_8dx6.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n    j = j - 1\n  end\n\
    \  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph73j6npe.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmph73j6npe.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmph73j6npe.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      return true\n      end\n    else\n      if x > z then\n        return true\n\
    \      else\n        return false\n      end\n    end\n    i = i + 1\n    j =\
    \ j + 1\n    k = k + 1\n    m = m + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdx6nwtq.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwdx6nwtq.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2203t48.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps2203t48.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      if m ~= 0 then\n     \
    \   return false\n      end\n      i = i + 1\n      j = j + 1\n      k = k + 1\n\
    \    else\n      if m > n then\n        j = j + 1\n      else\n        i = i +\
    \ 1\n      end\n      k = k + 1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63eaqmso.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp63eaqmso.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  local p = 1\n  local q = 1\n  local r = 1\n  local s = 1\n  local t = 1\n \
    \ local u = 1\n  local v = 1\n  local w = 1\n  local x = 1\n  local y = 1\n  local\
    \ z = 1\n  local a = l[1]\n  local b = l[2]\n  local c = l[3]\n  local d = l[4]\n\
    \  local e = l[5]\n  local f = l[6]\n  local g = l[7]\n  local h = l[8]\n  local\
    \ i = l[9]\n  local j = l[10]\n  local k = l[11]\n  local l = l[12]\n  local m\
    \ = l[13]\n  local n = l[14]\n  local p = l[15]\n  local q = l[16]\n  local r\
    \ = l[17]\n  local s = l[18]\n  local t = l[19]\n  local u = l[20]\n  local v\
    \ = l[21]\n  local w = l[22]\n  local x = l[23]\n  local y = l[24]\n  local z\
    \ = l[25]\n  local a = l[26]\n  local b = l[27]\n  local c = l[28]\n  local d\
    \ = l[29]\n  local e = l[30]\n  local f = l[31]\n  local g = l[32]\n  local h\
    \ = l[33]\n  local i = l[34]\n  local j = l[35]\n  local k = l[36]\n  local l\
    \ = l[37]\n  local m = l[38]\n  local n = l[39]\n  local p = l[40]\n  local q\
    \ = l[41]\n  local r = l[42]\n  local s = l[43]\n  local t = l[44]\n  local u\
    \ = l[45]\n  local v = l[46]\n  local w = l[47]\n  local x = l[48]\n  local y\
    \ = l[49]\n  local z = l[50]\n  local a = l[51]\n  local b = l[52]\n  local c\
    \ = l[53]\n  local d = l[54]\n  local e = l[55]\n  local f = l[56]\n  local g\
    \ = l[57]\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp31lubp54.lua:97: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local monotonic_flag2 = true\n  local monotonic_flag3 = true\n  local monotonic_flag4\
    \ = true\n  local monotonic_flag5 = true\n  local monotonic_flag6 = true\n  local\
    \ monotonic_flag7 = true\n  local monotonic_flag8 = true\n  local monotonic_flag9\
    \ = true\n  local monotonic_flag10 = true\n  local monotonic_flag11 = true\n \
    \ local monotonic_flag12 = true\n  local monotonic_flag13 = true\n  local monotonic_flag14\
    \ = true\n  local monotonic_flag15 = true\n  local monotonic_flag16 = true\n \
    \ local monotonic_flag17 = true\n  local monotonic_flag18 = true\n  local monotonic_flag19\
    \ = true\n  local monotonic_flag20 = true\n  local monotonic_flag21 = true\n \
    \ local monotonic_flag22 = true\n  local monotonic_flag23 = true\n  local monotonic_flag24\
    \ = true\n  local monotonic_flag25 = true\n  local monotonic_flag26 = true\n \
    \ local monotonic_flag27 = true\n  local monotonic_flag28 = true\n  local monotonic_flag29\
    \ = true\n  local monotonic_flag30 = true\n  local monotonic_flag31 = true\n \
    \ local monotonic_flag32 = true\n  local monotonic_flag33 = true\n  local monotonic_flag34\
    \ = true\n  local monotonic_flag35 = true\n  local monotonic_flag36 = true\n \
    \ local monotonic_flag37 = true\n  local monotonic_flag38 = true\n  local monotonic_flag39\
    \ = true\n  local monotonic_flag40 = true\n  local monotonic_flag41 = true\n \
    \ local monotonic_flag42 = true\n  local monotonic_flag43 = true\n  local monotonic_flag44\
    \ = true\n  local monotonic_flag45 = true\n  local monotonic_flag46 = true\n \
    \ local monotonic_flag47 = true\n  local monotonic_flag48 = true\n  local monotonic_flag49\
    \ = true\n  local monotonic_flag50 = true\n  local monotonic_flag51 = true\n \
    \ local monotonic_flag52 = true\n  local monotonic_flag53 = true\n  local monotonic_flag54\
    \ = true\n  local monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp75pfpdyv.lua:81: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    local m = m + 1\n        n = n + 1\n      end\n    end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lxtouuz.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6lxtouuz.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6lxtouuz.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while m > k do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36zrg0t2.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp36zrg0t2.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp36zrg0t2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n        i = m + 1\n      elseif\
    \ l[m] > l[i] then\n        local t = l[m]\n        l[m] = l[i]\n        l[i]\
    \ = t\n        j = m - 1\n      else\n        i = m + 1\n      end\n      m =\
    \ m + 1\n    end\n    i = i + 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvutajdzu.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpvutajdzu.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvutajdzu.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local m = i - k\n    local j = i - m\n    if l[j] < l[m]\
    \ then\n      k = j\n    else\n      i = m\n    end\n  end\n  return l[k] < l[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6d7macxa.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6d7macxa.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp6d7macxa.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    local k = k +\
    \ 1\n    if m > n then\n      l[j] = m\n      l[k] = n\n      i = i + 1\n    \
    \  j = j + 1\n    elseif m == n then\n      if m ~= l[j] then\n        l[j] =\
    \ m\n      end\n      i = i + 1\n      j = j + 1\n    else\n      if m > l[j]\
    \ then\n        l[j] = m\n      end\n      i = i + 1\n      j = j + 1\n    end\n\
    \  end\n  return l[1] < l[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx383c5j9.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx383c5j9.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4nebf0xr.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4nebf0xr.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4nebf0xr.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = j end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcu_c89xn.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpcu_c89xn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpcu_c89xn.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local v = l[i]\n    if v < m then\n      k = k + 1\n      if k > 1 then\n\
    \        if l[j] < m then\n          j = j + 1\n        else\n          k = k\
    \ - 1\n        end\n      end\n    end\n    if v > m then\n      k = k - 1\n \
    \     if k < 1 then\n        if l[j] > m then\n          j = j + 1\n        else\n\
    \          k = k + 1\n        end\n      end\n    end\n    i = i + 1\n  end\n\
    \  return j == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mahoy4g.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8mahoy4g.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n - 1\n    end\n\
    \    if i < j then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkr6j302k.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkr6j302k.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpkr6j302k.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x < y then\n      if x < z then\n        j = k\n      else\n        k\
    \ = k + 1\n      end\n    elseif x > y then\n      if x > z then\n        i =\
    \ i + 1\n      else\n        k = k + 1\n      end\n    else\n      if x == y then\n\
    \        j = k\n      else\n        k = k + 1\n      end\n    end\n    if m >\
    \ k then\n      m = k\n    end\n  end\n  return m == k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n     \
    \ elseif l[m] > l[n] then\n        i = m\n      else\n        return true\n  \
    \    end\n      n = m\n    end\n    i = m\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1vifz3q8.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1vifz3q8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1vifz3q8.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      if m ~= 0 then\n     \
    \   return false\n      end\n      i = i + 1\n      j = j + 1\n    else\n    \
    \  if m > n then\n        j = j + 1\n      else\n        i = i + 1\n      end\n\
    \    end\n    k = k + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg9c5208.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmg9c5208.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low > high then\n      return false\n\
    \    end\n    if low == high then\n      return true\n    end\n    local mid =\
    \ math.floor((low + high) / 2)\n    return helper(l, low, mid) or helper(l, mid\
    \ + 1, high)\n  end\n  return helper(l, 0, #l - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbch0cev.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgbch0cev.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      i = i + 1\n    else\n   \
    \   j = j - 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpge2207mn.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpge2207mn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpge2207mn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\
    \ return false end\n    if l[i] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpstxwi2bc.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpstxwi2bc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpstxwi2bc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    k = l[i]\n    if m > k then\n      m = k\n      n = l[j]\n\
    \      j = i\n    elseif n < k then\n      n = k\n      m = l[j]\n      j = i\n\
    \    end\n    i = i + 1\n  end\n  return m > n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8w5gq0hy.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8w5gq0hy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_l = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic = true -- Default to true\n\
    \  local last_monotonic_last_monotonic_last_monotonic_i = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_j = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_k = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_l = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_last_monotonic_monotonic = true -- Default\
    \ to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = true -- Default to \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc5z55kps.lua:52: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    m = m + 1\n        n = n + 1\n      end\n    end\n    i = i + 1\n    j =\
    \ j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0o0a3am.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpy0o0a3am.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpy0o0a3am.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppd7tbyao.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppd7tbyao.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppd7tbyao.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local is_decreasing = true -- Default to true\n  local is_increasing\
    \ = true -- Default to true\n  local last_element = l[1]\n  local last_element_is_decreasing\
    \ = true\n  local last_element_is_increasing = true\n  local last_element_is_decreasing_or_nondecreasing\
    \ = true\n  local last_element_is_increasing_or_nonincreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nondecreasing_or_nonincreasing = true\n  local last_element_is_nonincreasing_or_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nonincreasing_or_nondecreasing = true\n  local last_element_is_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_nonincreasing = true\n  local\
    \ last_element_is_nonincreasing_or_nondecreasing = true\n  local last_element_is_nondecreasing\
    \ = true\n  local last_element_is_nonincreasing = true\n  local last_element_is_nondecreasing_or_nonincreasing\
    \ = true\n  local last_element_is_nonincreasing_or_nondecreasing = true\n  local\
    \ last_element_is_nondecreasing = true\n  local last_element_is_nonincreasing\
    \ = true\n  local last_element_is_nondecreasing_or_non\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyk1_934n.lua:64: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x < y then\n      if x < z then\n        return false\n      else\n  \
    \      k = k + 1\n      end\n    elseif x > y then\n      if x > z then\n    \
    \    return false\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x == y then\n        if x == z then\n          return false\n        else\n\
    \          i = i + 1\n          j = j + 1\n          k = k + 1\n        end\n\
    \      else\n        if x == z then\n          return false\n        else\n  \
    \        i = i + 1\n          j = j + 1\n          k = k + 1\n        end\n  \
    \    end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjswqeq5u.lua:56:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjswqeq5u.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_o\
    \ = 1 -- Default to 1\n  local last_monotonic_m = 1 -- Default to 1\n  local last_monotonic_n\
    \ = 1 -- Default to 1\n  local last_monotonic_o = 1 -- Default to 1\n  local last_monotonic_m\
    \ = 1 -- Default to 1\n  local last_monotonic_n = 1 -- Default to 1\n  local last_monotonic_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlq9i_if.lua:65: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cg6h551.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8cg6h551.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8cg6h551.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m ~= n then\n\
    \      if m > n then\n        return false\n      elseif m < n then\n        return\
    \ true\n      else\n        return false\n      end\n    end\n    i = i + 1\n\
    \    j = j + 1\n    k = k + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33t4rptu.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp33t4rptu.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jnwk75p.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4jnwk75p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4jnwk75p.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x < y then\n      if x < z then\n        j = k\n      else\n        k\
    \ = k + 1\n      end\n    elseif x > y then\n      if x > z then\n        i =\
    \ i + 1\n      else\n        k = k + 1\n      end\n    else\n      if x == y then\n\
    \        j = k\n      else\n        k = k + 1\n      end\n    end\n    if i ==\
    \ n then\n      if j == m then\n        return true\n      else\n        return\
    \ false\n      end\n    end\n    i = i + 1\n    j = j + 1\n    m = m + 1\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1pb_rzp.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz1pb_rzp.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x == y then\n      if i == j then\n        k = k + 1\n      elseif i ==\
    \ k then\n        k = k + 1\n      elseif j == k then\n        k = k + 1\n   \
    \   else\n        i = i + 1\n        j = j + 1\n      end\n    elseif x > y then\n\
    \      if i == j then\n        k = k + 1\n      elseif i == k then\n        k\
    \ = k + 1\n      elseif j == k then\n        k = k + 1\n      else\n        i\
    \ = i + 1\n        j = j + 1\n      end\n    else\n      if i == j then\n    \
    \    k = k + 1\n      elseif i == k then\n        k = k + 1\n      elseif j ==\
    \ k then\n        k = k + 1\n      else\n        i = i + 1\n        j = j + 1\n\
    \      end\n    end\n    if m > k then\n      m = m\n    else\n      m = k\n \
    \   end\n  end\n  return m == k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[j-1] < l[i] then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpta2ieh6y.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpta2ieh6y.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpta2ieh6y.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = -1\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tagbin7.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7tagbin7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  local o = l[1]\n  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n\
    \    local o = l[k]\n    if m > n then\n      return false\n    end\n    if m\
    \ == n then\n      if o > m then\n        return false\n      end\n      if o\
    \ < m then\n        return true\n      end\n    end\n    if m > o then\n     \
    \ return true\n    end\n    if m < o then\n      return false\n    end\n    i\
    \ = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ginqfi_.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2ginqfi_.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k == nil then\n      k = l[j]\n      j = j - 1\n    end\n    if k == nil\
    \ then\n      return false\n    end\n    if k > l[i] then\n      i = i + 1\n \
    \   elseif k < l[i] then\n      j = j - 1\n    else\n      return true\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g16d2dl.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5g16d2dl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    local m = l[i]\n    local n = l[j]\n    local k = k +\
    \ 1\n    if m > n then\n      i = i + 1\n      j = j + 1\n    elseif m < n then\n\
    \      j = j + 1\n    elseif m == n then\n      if k < 2 then\n        return\
    \ true\n      else\n        i = i + 1\n        j = j + 1\n      end\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1iszcm4t.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1iszcm4t.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n\
    \  local last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp238sr6hu.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x < y then\n      return false\n    end\n    if x >\
    \ y then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo__6w0or.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo__6w0or.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpo__6w0or.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x > z then\n        return false\n      else\n  \
    \      k = k + 1\n      end\n    elseif x < y then\n      if x < z then\n    \
    \    return false\n      else\n        k = k + 1\n      end\n    else\n      if\
    \ x == y then\n        if x == z then\n          return false\n        else\n\
    \          k = k + 1\n        end\n      else\n        if x > z then\n       \
    \   return false\n        else\n          k = k + 1\n        end\n      end\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71y23gp9.lua:54:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp71y23gp9.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = nil -- Default to nil\n  local last_monotonic_j = nil -- Default to nil\n\
    \  local last_monotonic_k = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n\
    \  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l =\
    \ nil -- Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local\
    \ last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l = nil --\
    \ Default to nil\n  local last_monotonic_l = nil -- Default to nil\n  local last_monotonic_l\
    \ = nil -- Default to nil\n  local last_monotonic_l = nil -- Default to \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp238sr6hu.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < first then\n      return false\n    end\n    first = l[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3999vnlg.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3999vnlg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    while j <= n do\n      if l[j] < l[j - 1] then\n     \
    \   local temp = l[j]\n        l[j] = l[j - 1]\n        l[j - 1] = temp\n    \
    \  end\n      j = j + 1\n    end\n    i = i + 1\n    k = k + 1\n    if k > m then\n\
    \      m = k\n    end\n  end\n  return m == n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx151yulo.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpx151yulo.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpx151yulo.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = j end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcu_c89xn.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpcu_c89xn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpcu_c89xn.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- default\
    \ return value\n  local last_monotonic = true -- default return value\n  local\
    \ last_monotonic_i = nil -- default return value\n  local last_monotonic_j = nil\
    \ -- default return value\n  local last_monotonic_k = nil -- default return value\n\
    \  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return value\n  local last_monotonic_l\
    \ = nil -- default return value\n  local last_monotonic_l = nil -- default return\
    \ value\n  local last_monotonic_l = nil -- default return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4ds9pih.lua:62: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        j = k\n      else\n        i\
    \ = k\n      end\n    elseif x < z then\n      k = j\n    else\n      i = j\n\
    \    end\n    m = m + 1\n  end\n  return m == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] ~= l[i] then\n      return false\n    end\n    if l[m] > l[i] then\n\
    \      j = m\n    else\n      i = m\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqopth55.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjqopth55.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n    elseif m < n then\n      k = k - 1\n    end\n    i = i +\
    \ 1\n    j = j + 1\n  end\n  return k == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bqm5odc.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8bqm5odc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixh3b_9d.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpixh3b_9d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_decreasing(t)\n    return t ~= nil and t > 0 and t <= l[#l]\n\
    \  end\n  local function is_increasing(t)\n    return t ~= nil and t > 0 and t\
    \ >= l[#l]\n  end\n  local function is_monotonic(t)\n    return is_decreasing(t)\
    \ or is_increasing(t)\n  end\n  local function is_decreasing_or_equal(t)\n   \
    \ return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increasing_or_equal(t)\n\
    \    return is_increasing(t) or t == l[#l]\n  end\n  local function is_monotonic_or_equal(t)\n\
    \    return is_monotonic(t) or t == l[#l]\n  end\n  local function is_decreasing_or_equal(t)\n\
    \    return is_decreasing(t) or t == l[#l]\n  end\n  local function is_increas\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp30jy4l35.lua:67: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = True\n  local\
    \ last_monotonic = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j\
    \ = nil\n  local last_monotonic_k = nil\n  local last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_i = nil\n  local last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_k = nil\n  local last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_i = nil\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_j = nil\n  local last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_i =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_j =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_k =\
    \ nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_i\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_j\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_k\
    \ = nil\n  local last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic_last_monotonic\
    \ = nil\n  local last_monotonic_last_monoton\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz90upjyk.lua:53: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmpi = i\n      i = j\n      j = tmpi\n    else\n      i = i + 1\n\
    \    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqk95_fh.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkqk95_fh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpkqk95_fh.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if x ==\
    \ m and y == m and w == m then\n      i = i + 1\n      j = j + 1\n      k = k\
    \ + 1\n      m = l[i]\n    elseif x < m then\n      i = i + 1\n    elseif y <\
    \ m then\n      j = j + 1\n    elseif w < m then\n      k = k + 1\n    end\n \
    \ end\n  return i <= #l and j <= #l and k <= #l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmd3bis3.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfmd3bis3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n\
    \        l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlm1u4vf.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptlm1u4vf.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmptlm1u4vf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local last_monotonic = true -- Default to true\n  local last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_j = 1 -- Default to 1\n  local last_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_l = 1 -- Default to 1\n  local last_monotonic_monotonic\
    \ = true -- Default to true\n  local last_monotonic_monotonic_i = 1 -- Default\
    \ to 1\n  local last_monotonic_monotonic_j = 1 -- Default to 1\n  local last_monotonic_monotonic_k\
    \ = 1 -- Default to 1\n  local last_monotonic_monotonic_l = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic = true -- Default to true\n  local last_monotonic_last_monotonic_i\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_j = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_k = 1 -- Default to 1\n  local last_monotonic_last_monotonic_l\
    \ = 1 -- Default to 1\n  local last_monotonic_last_monotonic_monotonic = true\
    \ -- Default to true\n  local last_monotonic_last_monotonic_monotonic_i = 1 --\
    \ Default to 1\n  local last_monotonic_last_monotonic_monotonic_j = 1 -- Default\
    \ to 1\n  local last_monotonic_last_monotonic_monotonic_k = 1 -- Default to 1\n\
    \  local last_monotonic_last_monotonic_monotonic_l = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic = true -- Default to true\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_i = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_j = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_k = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_l = 1 -- Default to 1\n  local\
    \ last_monotonic_last_monotonic_last_monotonic_monotonic = true -- Default to\
    \ true\n  local last_monotonic_last_monotonic_last_monotonic_monotonic_i = 1 --\
    \ Default to 1\n  local last_monotonic_last_monoton\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_2nej6d_.lua:55: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k < l[j] then\n      j = k\n    else\n      i = k + 1\n    end\n  end\n\
    \  return i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp491khiue.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp491khiue.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp491khiue.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] ~= l[i] then\n      return false\n    end\n    if l[m] > l[i] then\n\
    \      j = m\n    else\n      i = m\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqopth55.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjqopth55.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzryoql1m.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzryoql1m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ieq44o6.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9ieq44o6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9ieq44o6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low > high then\n      return false\n\
    \    end\n    if low == high then\n      return true\n    end\n    if l[low] <=\
    \ l[high] then\n      return helper(l, low + 1, high)\n    else\n      return\
    \ helper(l, low, high - 1)\n    end\n  end\n  return helper(l, 1, #l)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay1eabzl.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpay1eabzl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3yaywjx.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy3yaywjx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy3yaywjx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  while i <= #l do\n\
    \    if l[i] < l[j] then\n      if l[i] < l[k] then\n        if l[i] < l[m] then\n\
    \          k = i\n        else\n          m = i\n        end\n      else\n   \
    \     k = i\n      end\n    else\n      if l[j] < l[k] then\n        if l[j] <\
    \ l[m] then\n          k = j\n        else\n          m = j\n        end\n   \
    \   else\n        k = j\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return m <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvmi0n9m.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwvmi0n9m.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local min_value = l[1]\n  local max_value = l[1]\n  for i = 2, #l\
    \ do\n    local value = l[i]\n    if value < min_value then\n      min_value =\
    \ value\n      k = i\n    elseif value > max_value then\n      max_value = value\n\
    \      j = i\n    end\n  end\n  if min_value == max_value then\n    return true\n\
    \  end\n  if min_value < max_value then\n    if j ~= i then\n      monotonic =\
    \ false\n    end\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq141ham.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeq141ham.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    k = k + 1\n    if k > 1 then\n      if m ~=\
    \ l[k - 1] then\n        return false\n      end\n    end\n    i = i + 1\n   \
    \ j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx6wqb26.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfx6wqb26.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  local last = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xtixeur.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7xtixeur.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = 0\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_w1orc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgq_w1orc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then return false end\n  local i = 1\n  local last = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xtixeur.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7xtixeur.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x == y then\n      if x > y then\n        if z > x then\n          return\
    \ false\n        else\n          k = k + 1\n        end\n      else\n        if\
    \ z < x then\n          return false\n        else\n          k = k + 1\n    \
    \    end\n      end\n    elseif x > y then\n      if z > x then\n        return\
    \ false\n      else\n        k = k + 1\n      end\n    else\n      if z < x then\n\
    \        return false\n      else\n        k = k + 1\n      end\n    end\n   \
    \ i = i + 1\n    j = j + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp7ta2uz.lua:56:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzp7ta2uz.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixh3b_9d.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpixh3b_9d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n      if k < #l then\n        m = m + 1\n      end\n\
    \    elseif w > x then\n      k = k + 1\n      if k < #l then\n        m = m +\
    \ 1\n      end\n    elseif w == x then\n      if m > 1 then\n        m = m - 1\n\
    \      end\n      i = i + 1\n      j = j + 1\n    else\n      i = i + 1\n    \
    \  j = j + 1\n    end\n  end\n  return m == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_6uegftd.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_6uegftd.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local last_monotonic_flag = false\n  local last_monotonic_value = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnsvd5_v.lua:89: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local is_decreasing = true -- Default to true\n  local is_increasing\
    \ = true -- Default to true\n  local is_decreasing_or_non_increasing = true --\
    \ Default to true\n  local is_non_increasing = true -- Default to true\n  local\
    \ is_non_decreasing = true -- Default to true\n  local is_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic = true -- Default to true\n\
    \  local is_monotonic_or_non_increasing = true -- Default to true\n  local is_monotonic_or_non_decreasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing = true\
    \ -- Default to true\n  local is_non_decreasing_or_non_increasing = true -- Default\
    \ to true\n  local is_monotonic_or_non_increasing_or_non_decreasing = true --\
    \ Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\n  local is_monotonic_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = true -- Default to true\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = true -- Default to true\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8h1gp1sd.lua:48: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    if x > m then\n      k = k + 1\n      if k > 1 then\n\
    \        local y = l[j]\n        if y < m then\n          return false\n     \
    \   end\n      end\n    end\n    i = i + 1\n    j = j + 1\n    m = x\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ahkc93z.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6ahkc93z.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixh3b_9d.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpixh3b_9d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    end\n    if i ==\
    \ j then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03ttjzop.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp03ttjzop.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp03ttjzop.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i, i+1) and true end\n    if l[i] > l[j] then\
    \ return helper(l, j, j+1) and true end\n    return false\n  end\n  return helper(l,\
    \ 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5oc7y1ot.lua:11:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5oc7y1ot.lua:11: in upvalue 'helper'\n\
    \t/tmp/tmp5oc7y1ot.lua:11: in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11: in\
    \ upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11: in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11:\
    \ in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11: in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11:\
    \ in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11: in upvalue 'helper'\n\t/tmp/tmp5oc7y1ot.lua:11:\
    \ in upvalue 'helper'\n\t...\t(skipping 249971 levels)\n\t/tmp/tmp5oc7y1ot.lua:11:\
    \ in function </tmp/tmp5oc7y1ot.lua:9>\n\t(...tail calls...)\n\t/tmp/tmp5oc7y1ot.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.090 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i + 1, j) end\n    if l[i] > l[j] then return\
    \ helper(l, i, j + 1) end\n  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6534th1.lua:11:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr6534th1.lua:11:\
    \ in function </tmp/tmpr6534th1.lua:9>\n\t(...tail calls...)\n\t/tmp/tmpr6534th1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true -- Default\
    \ to true\n  local is_increasing = true -- Default to true\n  local is_decreasing\
    \ = true -- Default to true\n  local is_monotonic = true -- Default to true\n\
    \  local is_decreasing_monotonic = true -- Default to true\n  local is_increasing_monotonic\
    \ = true -- Default to true\n  local is_decreasing_monotonic_or_nondecreasing\
    \ = true -- Default to true\n  local is_increasing_monotonic_or_nonincreasing\
    \ = true -- Default to true\n  local is_decreasing_monotonic_or_nonincreasing_or_nondecreasing\
    \ = true -- Default to true\n  local is_nondecreasing = true -- Default to true\n\
    \  local is_nonincreasing = true -- Default to true\n  local is_nondecreasing_or_nonincreasing\
    \ = true -- Default to true\n  local is_nondecreasing_or_nonincreasing_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic = true -- Default to true\n\
    \  local is_nonmonotonic_or_nonmonotonic = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = true -- Default to true\n  local is_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_non\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcpg4wtrt.lua:48: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] < l[j] then return helper(l, i, j-1) end\n    return helper(l, j, i-1)\n\
    \  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3whxgu98.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3whxgu98.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local monotonic_flag2 = true\n  local monotonic_flag3 = true\n  local monotonic_flag4\
    \ = true\n  local monotonic_flag5 = true\n  local monotonic_flag6 = true\n  local\
    \ monotonic_flag7 = true\n  local monotonic_flag8 = true\n  local monotonic_flag9\
    \ = true\n  local monotonic_flag10 = true\n  local monotonic_flag11 = true\n \
    \ local monotonic_flag12 = true\n  local monotonic_flag13 = true\n  local monotonic_flag14\
    \ = true\n  local monotonic_flag15 = true\n  local monotonic_flag16 = true\n \
    \ local monotonic_flag17 = true\n  local monotonic_flag18 = true\n  local monotonic_flag19\
    \ = true\n  local monotonic_flag20 = true\n  local monotonic_flag21 = true\n \
    \ local monotonic_flag22 = true\n  local monotonic_flag23 = true\n  local monotonic_flag24\
    \ = true\n  local monotonic_flag25 = true\n  local monotonic_flag26 = true\n \
    \ local monotonic_flag27 = true\n  local monotonic_flag28 = true\n  local monotonic_flag29\
    \ = true\n  local monotonic_flag30 = true\n  local monotonic_flag31 = true\n \
    \ local monotonic_flag32 = true\n  local monotonic_flag33 = true\n  local monotonic_flag34\
    \ = true\n  local monotonic_flag35 = true\n  local monotonic_flag36 = true\n \
    \ local monotonic_flag37 = true\n  local monotonic_flag38 = true\n  local monotonic_flag39\
    \ = true\n  local monotonic_flag40 = true\n  local monotonic_flag41 = true\n \
    \ local monotonic_flag42 = true\n  local monotonic_flag43 = true\n  local monotonic_flag44\
    \ = true\n  local monotonic_flag45 = true\n  local monotonic_flag46 = true\n \
    \ local monotonic_flag47 = true\n  local monotonic_flag48 = true\n  local monotonic_flag49\
    \ = true\n  local monotonic_flag50 = true\n  local monotonic_flag51 = true\n \
    \ local monotonic_flag52 = true\n  local monotonic_flag53 = true\n  local monotonic_flag54\
    \ = true\n  local monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp75pfpdyv.lua:81: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = 0\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_w1orc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgq_w1orc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x > y\
    \ then\n      if x < z then\n        return false\n      else\n        return\
    \ true\n      end\n    elseif x < y then\n      return false\n    else\n     \
    \ if x < z then\n        return true\n      else\n        return false\n     \
    \ end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg_gfpfe.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyg_gfpfe.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if m > x and y > w then\n      k = k + 1\n      m = x\n      n = y\n    elseif\
    \ m < x and y < w then\n      k = k + 1\n      m = x\n      n = y\n    elseif\
    \ m == x and y == w then\n      k = k + 1\n      m = x\n      n = y\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  return m > n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8jtxyl7.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu8jtxyl7.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = m end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dh9qp4q.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_dh9qp4q.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_dh9qp4q.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  if k ~= l[j] then\n      if k < l[j] then\n        j = j - 1\n      elseif\
    \ k > l[j] then\n        i = i + 1\n      else\n        return false\n      end\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kkio4r6.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7kkio4r6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7kkio4r6.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      return false\n    end\n    if m == n then\n      i = i + 1\n      j = j\
    \ + 1\n    else\n      k = k + 1\n      if k > #l then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1uayw6r1.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1uayw6r1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = 0\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq_w1orc.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgq_w1orc.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n    elseif x == y then\n      k = k + 1\n      if k >\
    \ m then\n        return false\n      end\n    else\n      m = m + 1\n      i\
    \ = i + 1\n      j = j + 1\n      k = k + 1\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9vt5uml.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi9vt5uml.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzryoql1m.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzryoql1m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  local p = 1\n  local q = 1\n  local r = 1\n  local s = l[1]\n  local t = l[1]\n\
    \  local u = 1\n  local v = 1\n  local w = 1\n  local x = l[1]\n  local y = l[1]\n\
    \  local z = l[1]\n  local a = l[1]\n  local b = l[1]\n  local c = l[1]\n  local\
    \ d = l[1]\n  local e = l[1]\n  local f = l[1]\n  local g = l[1]\n  local h =\
    \ l[1]\n  local i = l[1]\n  local j = l[1]\n  local k = l[1]\n  local l = l[1]\n\
    \  local m = l[1]\n  local n = l[1]\n  local p = l[1]\n  local q = l[1]\n  local\
    \ r = l[1]\n  local s = l[1]\n  local t = l[1]\n  local u = l[1]\n  local v =\
    \ l[1]\n  local w = l[1]\n  local x = l[1]\n  local y = l[1]\n  local z = l[1]\n\
    \  local a = l[1]\n  local b = l[1]\n  local c = l[1]\n  local d = l[1]\n  local\
    \ e = l[1]\n  local f = l[1]\n  local g = l[1]\n  local h = l[1]\n  local i =\
    \ l[1]\n  local j = l[1]\n  local k = l[1]\n  local l = l[1]\n  local m = l[1]\n\
    \  local n = l[1]\n  local p = l[1]\n  local q = l[1]\n  local r = l[1]\n  local\
    \ s = l[1]\n  local t = l[1]\n  local u = l[1]\n  local v = l[1]\n  local w =\
    \ l[1]\n  local x = l[1]\n  local y = l[1]\n  local z = l[1]\n  local a = l[1]\n\
    \  local b = l[1]\n  local c = l[1]\n  local d = l[1]\n  local e = l[1]\n  local\
    \ f = l[1]\n  local g = l[1]\n  local h = l[1]\n  local i = l[1]\n  local j =\
    \ l[1]\n  local k = l[1]\n  local l = l[1]\n  local m = l[1]\n  local n = l[1]\n\
    \  local p = l[1]\n  local q = l[1]\n  local r = l[1]\n  local s = l[1]\n  local\
    \ t = l[1]\n  local u = l[1]\n  local v = l[1]\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp91bhtqyp.lua:111: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   if l[m] < l[i] then\n      i = m + 1\n    elseif l[m] > l[i] then\n      j\
    \ = m\n    else\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvh7nzti.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzvh7nzti.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzvh7nzti.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3yaywjx.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpy3yaywjx.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy3yaywjx.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for i = 1, #l do\n    prev[tostring(l[i])] = true\n  end\n\
    \  for i = 1, #l do\n    if not prev[tostring(l[i])] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24frm948.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24frm948.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m ~= n then\n\
    \      if m > n then\n        return false\n      elseif m == n then\n       \
    \ k = k + 1\n      else\n        return true\n      end\n    end\n    i = i +\
    \ 1\n    j = j + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd26fk6i1.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd26fk6i1.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local min_value = l[1]\n  local max_value = l[1]\n  for i = 2, #l do\n    if\
    \ l[i] < min_value then\n      min_value = l[i]\n    elseif l[i] > max_value then\n\
    \      max_value = l[i]\n    end\n    if l[i] < min_value or l[i] > max_value\
    \ then\n      monotonic_flag = false\n    end\n  end\n  if min_value == max_value\
    \ then\n    return true\n  end\n  while j < #l do\n    if l[j] < min_value then\n\
    \      min_value = l[j]\n    elseif l[j] > max_value then\n      max_value = l[j]\n\
    \    end\n    if l[j] < min_value or l[j] > max_value then\n      monotonic_flag\
    \ = false\n    end\n    j = j + 1\n  end\n  return monotonic_flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbklftp6i.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbklftp6i.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then return false end\n      k = k + 1\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1aj3gyf.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl1aj3gyf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n      l[k] = m\n      i = i + 1\n    elseif m < n then\n   \
    \   k = k + 1\n      l[k] = n\n      j = j + 1\n    else\n      k = k + 1\n  \
    \    l[k] = m\n      i = i + 1\n      j = j + 1\n    end\n  end\n  return k ==\
    \ 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659799517
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jnwk75p.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4jnwk75p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp4jnwk75p.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i < #l do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x == m then\n      if y < m then\n        m = y\n      else\n        k\
    \ = k + 1\n      end\n    elseif y == n then\n      if x < n then\n        n =\
    \ x\n      else\n        k = k + 1\n      end\n    elseif x < y then\n      if\
    \ w < x then\n        m = x\n        n = y\n      else\n        k = k + 1\n  \
    \    end\n    else\n      if w > y then\n        m = y\n        n = x\n      else\n\
    \        k = k + 1\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return m <= n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kd1c1q0.lua:56:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8kd1c1q0.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dbsbl4d.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7dbsbl4d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7dbsbl4d.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then return false end\n    if i == j then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpszjiqalc.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpszjiqalc.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpszjiqalc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n\
    \  end\n  return i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmrl34v6.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppmrl34v6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppmrl34v6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l == 0 then\n    return true\n  end\n  local first = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] < first then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr88ymtzx.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr88ymtzx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then\n      return false\n    end\n    if m ==\
    \ k then\n      i = i + 1\n      j = j - 1\n    else\n      i = i + 1\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jo_7vpd.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7jo_7vpd.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7jo_7vpd.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i < #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w < x\
    \ then\n      k = k + 1\n      m = x\n    elseif w > x then\n      k = k + 1\n\
    \      m = y\n    elseif w == x then\n      if m ~= y then\n        k = k + 1\n\
    \        m = y\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return\
    \ m == l[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcoeu0h6.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphcoeu0h6.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozocaggu.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpozocaggu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpozocaggu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        return false\n      else\n  \
    \      j = k\n      end\n    elseif x < z then\n      if y < z then\n        return\
    \ false\n      else\n        k = m\n      end\n    else\n      if y < z then\n\
    \        j = k\n      else\n        i = i + 1\n        k = k + 1\n      end\n\
    \    end\n    m = m + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa87upjrk.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa87upjrk.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then\n      j = m\n    else\n      i = m\n    end\n  end\n\
    \  return i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7iwtjnmd.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp7iwtjnmd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7iwtjnmd.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    while j <= n and l[j] < l[i] do\n      j = j + 1\n   \
    \ end\n    if j > n then\n      return false\n    end\n    while k <= n and l[k]\
    \ > l[i] do\n      k = k + 1\n    end\n    if k > n then\n      return false\n\
    \    end\n    if l[j] < l[i] then\n      m = m + 1\n      if m > 1 then\n    \
    \    return false\n      end\n    end\n    if l[k] > l[i] then\n      m = m +\
    \ 1\n      if m > 1 then\n        return false\n      end\n    end\n    i = i\
    \ + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb2kdwyp.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppb2kdwyp.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x > y then\n      return false\n    end\n    if i ==\
    \ j then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03ttjzop.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp03ttjzop.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp03ttjzop.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799512
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  local n = l[1]\n\
    \  while i <= #l do\n    local m = l[i]\n    local n = l[j]\n    if m > n then\n\
    \      k = k + 1\n      if k > 1 then\n        if m > l[k - 1] then\n        \
    \  j = k\n        else\n          i = i + 1\n        end\n      else\n       \
    \ j = j + 1\n      end\n    elseif m < n then\n      k = k + 1\n      if k > 1\
    \ then\n        if m < l[k - 1] then\n          i = i + 1\n        else\n    \
    \      j = j + 1\n        end\n      else\n        j = j + 1\n      end\n    else\n\
    \      i = i + 1\n      j = j + 1\n    end\n  end\n  return j > i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tgdowxg.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4tgdowxg.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799512
