language: lua
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local x = l[i]\n  \
    \  local y = l[j]\n    if x < y then\n      return false\n    end\n    if x >\
    \ y then\n      return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo__6w0or.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo__6w0or.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpo__6w0or.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing(v)\n   \
    \ return v == l[1]\n  end\n  local function is_strictly_monotonic(v)\n    return\
    \ is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local function\
    \ is_strictly_decreasing_strictly_increasing(v)\n    return v == l[1]\n  end\n\
    \  local function is_strictly_increasing_strictly_decreasing(v)\n    return v\
    \ == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(v)\n\
    \    return v == l[1]\n  end\n  local function is_strictly_decre\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp02z4zz_a.lua:70: ''('' expected near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = l[1]\n  while i <= #l\
    \ do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if w ~=\
    \ 0 then\n      if x > y then\n        if w > m then\n          m = w\n      \
    \  end\n      else\n        if w < m then\n          m = w\n        end\n    \
    \  end\n    end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return\
    \ m == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniyruzjt.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpniyruzjt.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n =\
    \ n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[2]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthj7x5bc.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpthj7x5bc.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpthj7x5bc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n    j = j - 1\n  end\n\
    \  return i == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbbjf6cl7.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbbjf6cl7.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbbjf6cl7.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        return\
    \ false\n      elseif l[m] > l[n] then\n        return true\n      else\n    \
    \    local m = m + 1\n        local n = n + 1\n      end\n    end\n    i = i +\
    \ 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kbhv_y6.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp0kbhv_y6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0kbhv_y6.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local last_monotonic_flag = false\n  local last_monotonic_value = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local\
    \ last_monotonic_count = 0\n  local last_monotonic_count = 0\n  local last_monotonic_count\
    \ = 0\n  local last_monotonic_count = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnsvd5_v.lua:89: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    if i == 1 then\n      k = x\n    \
    \  m = x\n    else\n      if x < l[j] then\n        k = x\n      else\n      \
    \  if x > l[k] then\n          m = x\n        else\n          k = x\n        end\n\
    \      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return m <= k\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe27seaw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoe27seaw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjq34a75.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdjq34a75.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdjq34a75.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if l[i] < l[j] then\n      return helper(l, i + 1, j)\n    else\n \
    \     return helper(l, i, j - 1)\n    end\n  end\n  return helper(l, 1, #l)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzryoql1m.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzryoql1m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n\
    \  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvloa178m.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpvloa178m.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpvloa178m.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j + 1\n    while m <= n do\n      if l[m] < l[i] then return false\
    \ end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n \
    \   i = i + 1\n    j = j + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1trp8z7c.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp1trp8z7c.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1trp8z7c.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i-1] > l[i] then\n\
    \      return false\n    end\n    if l[i-1] < l[i] then\n      return true\n \
    \   end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpdpmeyx.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdpdpmeyx.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdpdpmeyx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzrhmol1.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmplzrhmol1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplzrhmol1.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n  end\n  return\
    \ i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaneqdmvg.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpaneqdmvg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpaneqdmvg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmvj6j4x_.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmvj6j4x_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmvj6j4x_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cg6h551.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8cg6h551.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8cg6h551.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i < n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x > y then\n      if w < x then\n        j = k\n      else\n        i\
    \ = k\n      end\n    elseif x < y then\n      if w > x then\n        k = k +\
    \ 1\n      else\n        i = i + 1\n      end\n    else\n      if w == x then\n\
    \        i = i + 1\n      else\n        k = k + 1\n      end\n    end\n    m =\
    \ m + 1\n  end\n  return m == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_flag = true\n\
    \  local max_val = l[1]\n  local min_val = l[1]\n  while i <= #l do\n    local\
    \ val = l[i]\n    if val > max_val then\n      max_val = val\n      j = i\n  \
    \  elseif val < min_val then\n      min_val = val\n      k = i\n    end\n    i\
    \ = i + 1\n    if i == #l then\n      if max_val > min_val then\n        monotonic_flag\
    \ = false\n      end\n      break\n    end\n  end\n  return monotonic_flag\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzjzpjrb.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbzjzpjrb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
