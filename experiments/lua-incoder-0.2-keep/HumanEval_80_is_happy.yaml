name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is happy\
  \ or not.\n-- A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- is_happy(a) => False\n-- is_happy(aa)\
  \ => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n-- is_happy(adb)\
  \ => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~=\
    \ s[i - 3] then\n      happy = true\n    end\n  end\n  return happy\nend", " \
    \ local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i + 3] ~= s[i + 3] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local first_letter = s[1]\n  local second_letter = s[2]\n  local third_letter\
    \ = s[3]\n  if first_letter == second_letter or first_letter == third_letter then\n\
    \    return is_happy(string.sub(s,2,4))\n  else\n    return false\n  end\nend",
  "  -- base case\n  if #s < 3 then\n    return false\n  end", "    local count =\
    \ 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count % 3 == 0\nend", "  local happy = false\n  local count = 0\n  for i = 1,\
    \ #s do\n    if count == 3 then\n      if s[i] ~= s[count + 1] then\n        happy\
    \ = false\n        break\n      end\n      count = count + 1\n    end\n    if\
    \ s[i] ~= s[count + 1] then\n      happy = false\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return happy\nend", "    local happy = false\n    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n        \
    \    count = count + 1\n        else\n            count = count - 1\n        end\n\
    \        if count >= 3 then\n            happy = true\n        end\n    end\n\
    \    return happy\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ letters = {}\n  for i = 1, #s do\n    table.insert(letters, s[i])\n  end\n \
    \ local happy = true\n  for i = 1, #letters do\n    if letters[i] ~= letters[i\
    \ + 1] then\n      happy = false\n    end\n  end\n  return happy\nend", "  --\
    \ base case\n  if #s < 3 then return false end", "    local happy = false\n  \
    \  local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n \
    \           count = count + 1\n        else\n            count = count - 1\n \
    \       end\n        if count >= 3 then\n            happy = true\n          \
    \  break\n        end\n    end\n    return happy\nend", "    local happy = false\n\
    \    for i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i]\
    \ ~= s[i - 3] then\n            happy = true\n        end\n    end\n    return\
    \ happy\nend", "    local count = 0\n    for i = 1, #s do\n        if s[i]:lower()\
    \ == s[i]:lower() then\n            count = count + 1\n        else\n        \
    \    count = count\n        end\n    end\n    return count >= 3 and count == #s\n\
    end", "  -- base case\n  if #s <= 3 then\n    return true\n  end", "    local\
    \ happy = false\n    local count = 0\n    for i = 1, #s do\n        if s[i] ~=\
    \ s[count] then\n            happy = true\n        else\n            count = count\
    \ + 1\n        end\n    end\n    return happy and count >= 3\nend", "  -- base\
    \ case\n  if #s <= 3 then return true end\n  -- base case\n  if #s == 1 then return\
    \ false end\n  -- base case\n  if #s == 2 then return true end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- base case\n  if #s == 4 then return true\
    \ end\n  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if\
    \ #s == 6 then return true end\n  -- base case\n  if #s == 7 then return true\
    \ end\n  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if\
    \ #s == 9 then return true end\n  -- base case\n  if #s == 10 then return true\
    \ end\n  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if\
    \ #s == 12 then return true end\n  -- base case\n  if #s == 13 then return true\
    \ end\n  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if\
    \ #s == 15 then return true end\n  -- base case\n  if #s == 16 then return true\
    \ end\n  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if\
    \ #s == 18 then return true end\n  -- base case\n  if #s == 19 then return true\
    \ end\n  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if\
    \ #s == 21 then return true end\n  -- base case\n  if #s == 22 then return true\
    \ end\n  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if\
    \ #s == 24 then return true end\n  -- base case\n  if #s == 25 then return true\
    \ end\n  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if\
    \ #s == 27 then return true end\n  -- base case\n  if #s == 28 then return true\
    \ end\n  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if\
    \ #s == 30 then return true end\n  -- base case\n  if #s == 31 then return true\
    \ end\n  -- base case\n  if #s == 32 then return true end\n  -- base case\n  if\
    \ #s == 33 then return true end\n  -- base case\n  if #s == 34 then return true\
    \ end\n  -- base case\n  if #s == 35 then return true end\n  -- base case\n  if ",
  "  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  if count >= 3 then\n    for i = 1, count do\n      if s[i] ~= s[count + i]\
    \ then\n        happy = false\n        break\n      end\n    end\n  end\n  return\
    \ happy\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~=\
    \ s[i - 3] then\n      happy = true\n    end\n  end\n  return happy\nend", " \
    \ -- base case\n  if #s <= 3 then return true end", "  -- base case\n  if #s <\
    \ 3 then return false end\n  -- base case\n  if #s == 3 then return true end\n\
    \  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i+1] then\n      happy = false\n      break\n    end\n  end\n  return happy\n\
    end", "  -- base case\n  if #s <= 3 then\n    return true\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
