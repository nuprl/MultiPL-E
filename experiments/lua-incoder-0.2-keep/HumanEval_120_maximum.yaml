name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- Input:\
  \ arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input: arr\
  \ = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the array\
  \ will be in the range of [1, 1000].\n-- 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr,\
  \ k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local maxArr\n    local maxIndex\n    local maxVal\n    local maxCount\n\
    \    local maxCountIndex\n    local maxCountVal\n    local maxCountIndexArr\n\
    \    local maxCountValArr\n    local maxCountIndexArrIndex\n    local maxCountValArrIndex\n\
    \    local maxCountIndexArrIndexArr\n    local maxCountValArrIndexArr\n    local\
    \ maxCountIndexArrIndexArrIndex\n    local maxCountValArrIndexArrIndex\n    local\
    \ maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountValArrIndexArrIndexArr\n\
    \    local maxCountIndexArrIndexArrIndexArr\n    local maxCountVal", "  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the max number in the\
    \ first k elements\n  local max_num = arr[1]\n  -- Get the max number in the remaining\
    \ elements\n  for i = 2, k do\n    if arr[i] > max_num then\n      max_num = arr[i]\n\
    \    end\n  end\n  -- Return the max number in the first k elements\n  return\
    \ arr[1:k+1]\nend", "  local max_arr = {}\n  local max_count = 0\n  for i = 1,\
    \ k do\n    if max_count == 0 then\n      max_count = arr[i]\n      max_arr[i]\
    \ = max_count\n    elseif max_count < arr[i] then\n      max_count = arr[i]\n\
    \      max_arr[i] = max_count\n    end\n  end\n  return max_arr\nend", "  -- Write\
    \ your code here\n  local max_arr = {}\n  local max_count = 0\n  for i = 1, k\
    \ do\n    local max_value = arr[1]\n    for j = 2, #arr do\n      if arr[j] >\
    \ max_value then\n        max_value = arr[j]\n      end\n    end\n    max_arr[i]\
    \ = max_value\n    max_count = max_count + 1\n  end\n  return max_arr\nend", " \
    \   local result = {}\n    local max = 0\n    local index = 0\n    for i = 1,\
    \ k do\n        if arr[i] > max then\n            max = arr[i]\n            index\
    \ = i\n        end\n    end\n    result[index] = max\n    for i = k + 1, #arr\
    \ do\n        if arr[i] > max then\n            max = arr[i]\n        end\n  \
    \  end\n    return result\nend", "  -- Write your code here\n  local max_arr =\
    \ {}\n  local max_count = 0\n  for i = 1, k do\n    max_count = max_count + 1\n\
    \  end\n  for i = 1, k do\n    if max_count > #max_arr then\n      max_arr = max_arr\
    \ .. arr[i]\n    else\n      if arr[i] > max_arr[1] then\n        max_arr[1] =\
    \ arr[i]\n      else\n        max_arr[2] = arr[i]\n      end\n    end\n  end\n\
    \  return max_arr\nend", "    local max_arr = {}\n    local max_count = 0\n  \
    \  for i = 1, k do\n        local max_val = -1000\n        for j = 1, #arr do\n\
    \            if arr[j] > max_val then\n                max_val = arr[j]\n    \
    \        end\n        end\n        max_arr[i] = max_val\n        if max_count\
    \ < i then\n            max_count = i\n        end\n    end\n    return max_arr\n\
    end", "  -- Write your code here\n  local max = {}\n  local i = 1\n  while i <=\
    \ k do\n    local max_element = arr[i]\n    for j = i + 1, k do\n      if arr[j]\
    \ > max_element then\n        max_element = arr[j]\n      end\n    end\n    table.insert(max,\
    \ max_element)\n    i = i + 1\n  end\n  return max\nend", "  -- Write your code\
    \ here\n  local max_arr = {}\n  local max_idx = {}\n  for i = 1, k do\n    max_arr[i]\
    \ = arr[i]\n    max_idx[i] = i\n  end\n  for i = k + 1, #arr do\n    if arr[i]\
    \ > max_arr[k] then\n      max_arr[k] = arr[i]\n      max_idx[k] = i\n    end\n\
    \  end\n  return max_arr\nend", "    local max_arr = {}\n    local max_count =\
    \ 0\n    for i = 1, k do\n        if max_count == 0 then\n            max_count\
    \ = arr[i]\n        elseif arr[i] > max_count then\n            max_count = arr[i]\n\
    \        end\n    end\n    max_arr[1] = max_count\n    for i = 2, k do\n     \
    \   if arr[i] > max_count then\n            max_count = arr[i]\n        end\n\
    \        max_arr[i] = max_count\n    end\n    return max_arr\nend", "  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end", "    local max_arr = {}\n  \
    \  local max_idx = 1\n    for i = 1, k do\n        max_idx = i\n        for j\
    \ = 1, k do\n            if arr[j] > arr[max_idx] then\n                max_idx\
    \ = j\n            end\n        end\n        max_arr[max_idx] = arr[max_idx]\n\
    \    end\n    return max_arr\nend", "    local max_arr = {}\n    local max_count\
    \ = 0\n    for i = 1, k do\n        max_count = max_count + 1\n        if max_count\
    \ == 1 then\n            max_arr[i] = arr[i]\n        else\n            if arr[i]\
    \ > max_arr[i] then\n                max_arr[i] = arr[i]\n            end\n  \
    \      end\n    end\n    return max_arr\nend", "    local max_arr = {}\n    local\
    \ max_count = 0\n    for i = 1, k do\n        if arr[i] > max_arr[i] then\n  \
    \          max_arr[i] = arr[i]\n            max_count = i\n        end\n    end\n\
    \    for i = k + 1, #arr do\n        if arr[i] > max_arr[i] then\n           \
    \ max_arr[i] = arr[i]\n            max_count = i\n        end\n    end\n    return\
    \ max_arr\nend", "  -- Base case: if the array is empty, return an empty list\n\
    \  if k == 0 then\n    return {}\n  end", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "    local max_arr = {}\n    local max_count = 0\n  \
    \  for i = 1, k do\n        local max_val = -1000\n        for j = 1, #arr do\n\
    \            if arr[j] > max_val then\n                max_val = arr[j]\n    \
    \        end\n        end\n        max_arr[i] = max_val\n        max_count = max_count\
    \ + 1\n    end\n    return max_arr\nend", "    local max_arr = {}\n    local max_count\
    \ = 0\n    for i = 1, k do\n        max_count = max_count + 1\n        max_arr[i]\
    \ = 0\n    end\n    for i = 1, #arr do\n        max_count = max_count + 1\n  \
    \      if max_count > k then\n            break\n        end\n        max_arr[i]\
    \ = max_arr[i] + arr[i]\n    end\n    return max_arr\nend", "    local max_arr\
    \ = {}\n    local max_idx = {}\n    local max_num = 0\n    for i = 1, k do\n \
    \       max_num = max_num + arr[i]\n        max_arr[i] = max_num\n        max_idx[i]\
    \ = i\n    end\n    for i = k + 1, #arr do\n        max_num = max_num - arr[i]\n\
    \        max_arr[i] = max_num\n        max_idx[i] = i\n    end\n    return max_arr\n\
    end", "    local max_arr = {}\n    local max_idx = 1\n    local max_val = arr[1]\n\
    \    for idx = 2, k do\n        if arr[idx] > max_val then\n            max_val\
    \ = arr[idx]\n            max_idx = idx\n        end\n    end\n    max_arr[max_idx]\
    \ = max_val\n    return max_arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
