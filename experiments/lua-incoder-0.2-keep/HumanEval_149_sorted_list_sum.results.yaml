language: lua
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n \
    \ end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e55zfdk.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp8e55zfdk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for i = 1, #lst do\n    local word = lst[i]\n  \
    \  local length = #word\n    if sorted_list[length] == nil then\n      sorted_list[length]\
    \ = word\n    else\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf9pjtit.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpxf9pjtit.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word,\
    \ 1)\n    end\n  end\n  table.sort(sorted_list, function(a, b) return #a < #b\
    \ end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7js4evx.lua:21:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj7js4evx.lua:21: in local 'candidate'\n\t/tmp/tmpj7js4evx.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[#sorted_list + 1]\
    \ = word\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ckj8omb.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmp1ckj8omb.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[i]\
    \ = current_word\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwdmnggi.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgwdmnggi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        if current_word < next_word then\n         \
    \ table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n        end\n      else\n        if current_word_size > next_word_size\
    \ then\n          table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n        end\n      end\n    end\n  end\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vnjxizo.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"aa\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmp4vnjxizo.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaq6u8wa.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbaq6u8wa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  local sorted_list_sorted\
    \ = {}\n  local sorted_list_sorted_len = #sorted_list_sorted\n  local sorted_list_sorted_index\
    \ = 0\n  local sorted_list_sorted_index_len = 0\n  local sorted_list_sorted_index_len2\
    \ = 0\n  local sorted_list_sorted_index_len3 = 0\n  local sorted_list_sorted_index_len4\
    \ = 0\n  local sorted_list_sorted_index_len5 = 0\n  local sorted_list_sorted_index_len6\
    \ = 0\n  local sorted_list_sorted_index_len7 = 0\n  local sorted_list_sorted_index_len8\
    \ = 0\n  local sorted_list_sorted_index_len9 = 0\n  local sorted_list_sorted_index_len10\
    \ = 0\n  local sorted_list_sorted_index_len11 = 0\n  local sorted_list_sorted_index_len12\
    \ = 0\n  local sorted_list_sorted_index_len13 = 0\n  local sorted_list_sorted_index_len14\
    \ = 0\n  local sorted_list_sorted_index_len15 = 0\n  local sorted_list_sorted_index_len16\
    \ = 0\n  local sorted_list_sorted_index_len17 = 0\n  local sorted_list_sorted_index_len18\
    \ = 0\n  local sorted_list_sorted_index_len19 = 0\n  local sorted_list_sorted_index_len20\
    \ = 0\n  local sorted_list_sorted_index_len21 = 0\n  local sorted_list_sorted_index_len22\
    \ = 0\n  local sorted_list_sorted_index_len23 = 0\n  local sorted_list_sorted_index_len24\
    \ = 0\n  local sorted_list_sorted_index_len25 = 0\n  local sorted_list_sorted_index_len26\
    \ = 0\n  local sorted_list_sorted_index_len27 = 0\n  local sorted_list_sorted_index_len28\
    \ = 0\n  local sorted_list_sorted_index_len29 = 0\n  local sorted_list_sorted_index_len30\
    \ = 0\n  local sorted_list_sorted_index_len31 = 0\n  local sorted_list_sorted_index_len32\
    \ = 0\n  local sorted_list_sorted_index_len33 = 0\n  local sorted_list_sorted_index_len34\
    \ = 0\n  local sorted_list_sorted_index_len35 = 0\n  local sorted_list_sorted_index_len36\
    \ = 0\n  local sorted_list_sorted_index_len37 = 0\n  local sorted_list_sorted_index_len38\
    \ = 0\n  local sorted_list_sorted_index_len39 = 0\n  local sorted_list_sorted_index_len40\
    \ = 0\n  local sorted_list_sorted_index_len41 = 0\n  local sorted_list_sorted_index_len42\
    \ = 0\n  local sorted_list_sorted_index_len43 = 0\n  local sorted_list_sorted_index_len44\
    \ = 0\n  local sorted_list_sorted_index_len45 = 0\n  local sorted_list_sorted_index_len46\
    \ = 0\n  local sorted_list_sorted_index_len47 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6anavfyc.lua:81: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length\
    \ do\n    local word = lst[i]\n    local word_length = #word\n    if word_length\
    \ % 2 == 1 then\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fzuihyv.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3fzuihyv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local word_length = #word\n    if word_length % 2 ==\
    \ 1 then\n      table.insert(sorted_lst, word)\n    else\n      local word_1 =\
    \ word\n      local word_2 = word\n      word_2 = word_2:sub(1, word_length -\
    \ 1)\n      table.insert(sorted_lst, word_1)\n      table.insert(sorted_lst, word_2)\n\
    \    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1_4fsws.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpi1_4fsws.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = {}\n  local sorted_index_len\
    \ = {}\n  for i = 1, #lst do\n    sorted_index[#sorted_index + 1] = i\n    sorted_index_len[#sorted_index_len\
    \ + 1] = #lst[i]\n  end\n  table.sort(sorted_index, function(a, b) return sorted_index_len[a]\
    \ < sorted_index_len[b] end)\n  local i = 0\n  local j = 1\n  while i <= #sorted_index\
    \ do\n    local word = lst[sorted_index[i]]\n    local length = #word\n    if\
    \ length % 2 == 1 then\n      sorted_lst[j] = word\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52c_tax5.lua:27:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmp52c_tax5.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp52c_tax5.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      sorted_lst[#sorted_lst +\
    \ 1] = word\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a\
    \ < #b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna9sb_ox.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpna9sb_ox.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ < current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ < current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n      else\n        local next_word_index = 1\n        while next_word_index\
    \ < next_word_length do\n          local next_word_char = next_word[next_word_index]\n\
    \          local current_word_char = current_word[current_word_index]\n      \
    \    if next_word_char < current_word_char then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n            sorted_list_index = sorted_list_index\
    \ + next_word_index\n            break\n          else\n            local next_word_index\
    \ = next_word_index + 1\n          end\n        end\n      end\n      current_word_index\
    \ = current_word_index + next_word_length\n    end\n    sorted_list_index = sorted_list_index\
    \ + current_word_length\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21jmgy1a.lua:51:\
    \ expected: {\"aa\"}\nactual: {\"aa\", 3=\"aaa\"}\nstack traceback:\n\t/tmp/tmp21jmgy1a.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = #lst\n\
    \  for i = 1, sorted_length do\n    local word = lst[i]\n    local word_length\
    \ = #word\n    if word_length % 2 == 1 then\n      table.insert(sorted_lst, word)\n\
    \    else\n      local word_index = word_length / 2\n      local word_left = word:sub(1,\
    \ word_index)\n      local word_right = word:sub(word_index + 1, word_length)\n\
    \      local word_left_length = #word_left\n      local word_right_length = #word_right\n\
    \      if word_left_length < word_right_length then\n        table.insert(sorted_lst,\
    \ word_left)\n      else\n        table.insert(sorted_lst, word_right)\n     \
    \ end\n    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpavv083.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgpavv083.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_length\
    \ = sorted_list[sorted_list_index]:len()\n    if current_length % 2 == 1 then\n\
    \      sorted_list[sorted_list_index] = sorted_list[sorted_list_index]:lower()\n\
    \      sorted_list_index = sorted_list_index + 1\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lzg2q5u.lua:93: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  while sorted_list_index <= sorted_list_size do\n    local current_word = sorted_list[sorted_list_index]\n\
    \    local current_word_size = #current_word\n    local current_word_index = 1\n\
    \    while current_word_index <= current_word_size do\n      local next_word =\
    \ sorted_list[sorted_list_index + current_word_index]\n      local next_word_size\
    \ = #next_word\n      local next_word_index = 1\n      while next_word_index <=\
    \ next_word_size do\n        if next_word_index == current_word_index then\n \
    \         sorted_list[sorted_list_index + current_word_index] = nil\n        else\n\
    \          local next_word_char = next_word[next_word_index]\n          local\
    \ current_word_char = current_word[current_word_index]\n          if next_word_char\
    \ == current_word_char then\n            sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          else\n            sorted_list_index = sorted_list_index + next_word_index\n\
    \          end\n        end\n        next_word_index = next_word_index + next_word_index\n\
    \      end\n      current_word_index = current_word_index + current_word_index\n\
    \    end\n    sorted_list_index = sorted_list_index + current_word_size\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy__i4qm9.lua:22:\
    \ attempt to get length of a nil value (local 'current_word')\nstack traceback:\n\
    \t/tmp/tmpy__i4qm9.lua:22: in local 'candidate'\n\t/tmp/tmpy__i4qm9.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word:sub(1,\
    \ word_size - 1)\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp721hu0k.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"\", \"aa\", \"aa\"}\nstack traceback:\n\t/tmp/tmpp721hu0k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  for i = 1, #lst\
    \ do\n    local length = string.len(lst[i])\n    if sorted_list_length < length\
    \ then\n      sorted_list_length = length\n    end\n    table.insert(sorted_list,\
    \ lst[i])\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7a73wyn.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpz7a73wyn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ if sorted_index > #sorted_lst then\n      sorted_lst[#sorted_lst+1] = lst[i]\n\
    \    elseif sorted_index % 2 == 1 then\n      sorted_lst[#sorted_lst+1] = lst[i]\n\
    \    else\n      local j = 1\n      while j <= #sorted_lst and sorted_lst[j] <\
    \ lst[i] do\n        j = j + 1\n      end\n      sorted_lst[#sorted_lst+1] = sorted_lst[j]\
    \ .. lst[i]\n    end\n    sorted_index = sorted_index + 1\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzure67dd.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzure67dd.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if next_word_size\
    \ == current_word_size then\n        sorted_list[j] = nil\n      elseif next_word_size\
    \ > current_word_size then\n        sorted_list[i] = current_word\n        sorted_list[j]\
    \ = next_word\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1dm4ul.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjk1dm4ul.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      table.insert(sorted_list, current_word)\n\
    \      table.insert(sorted_list, current_word .. \"a\")\n      table.insert(sorted_list,\
    \ current_word .. \"b\")\n      table.insert(sorted_list, current_word .. \"c\"\
    )\n      table.insert(sorted_list, current_word .. \"d\")\n      table.insert(sorted_list,\
    \ current_word .. \"e\")\n      table.insert(sorted_list, current_word .. \"f\"\
    )\n      table.insert(sorted_list, current_word .. \"g\")\n      table.insert(sorted_list,\
    \ current_word .. \"h\")\n      table.insert(sorted_list, current_word .. \"i\"\
    )\n      table.insert(sorted_list, current_word .. \"j\")\n      table.insert(sorted_list,\
    \ current_word .. \"k\")\n      table.insert(sorted_list, current_word .. \"l\"\
    )\n      table.insert(sorted_list, current_word .. \"m\")\n      table.insert(sorted_list,\
    \ current_word .. \"n\")\n      table.insert(sorted_list, current_word .. \"o\"\
    )\n      table.insert(sorted_list, current_word .. \"p\")\n      table.insert(sorted_list,\
    \ current_word .. \"q\")\n      table.insert(sorted_list, current_word .. \"r\"\
    )\n      table.insert(sorted_list, current_word .. \"s\")\n      table.insert(sorted_list,\
    \ current_word .. \"t\")\n      table.insert(sorted_list, current_word .. \"u\"\
    )\n      table.insert(sorted_list, current_word .. \"v\")\n      table.insert(sorted_list,\
    \ current_word .. \"w\")\n      table.insert(sorted_list, current_word .. \"x\"\
    )\n      table.insert(sorted_list, current_word .. \"y\")\n      table.insert(sorted_list,\
    \ current_word .. \"z\")\n      table.insert(sorted_list, current_word .. \"aa\"\
    )\n      table.insert(sorted_list, current_word .. \"ab\")\n      table.insert(sorted_list,\
    \ current_word .. \"ac\")\n      table.insert(sorted_list, current_word .. \"\
    ad\")\n      table.insert(sorted_list, current_word .. \"ae\")\n      table.insert(sorted_list,\
    \ current_word .. \"af\")\n      table.insert(sorted_list, current_word .. \"\
    ag\")\n      table.insert(sorted_list, current_word .. \"ah\")\n      table.insert(sorted_list,\
    \ current_word .. \"ai\")\n      table.insert(sorted_list, current_word .. \"\
    aj\")\n      table.insert(sorted_list, current_word .. \"ak\")\n      table.insert(sorted_list,\
    \ current_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1yp89mot.lua:61: '')'' expected (to close ''('' at line 60)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wvb4wz8.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3wvb4wz8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    if current_word_length % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length\
    \ do\n    local word = lst[i]\n    local word_length = #word\n    if word_length\
    \ % 2 == 1 then\n      sorted_list[#sorted_list + 1] = word\n    end\n  end\n\
    \  table.sort(sorted_list, function(a, b) return #a < #b end)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m3tg6fh.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp7m3tg6fh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word)\n\
    \    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9quqwfp.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmps9quqwfp.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_keys = {}\n  for i = 1, #lst do\n   \
    \ local key = lst[i]\n    sorted_keys[#sorted_keys + 1] = key\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt66_g1rd.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpt66_g1rd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        if current_word < next_word then\n         \
    \ table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n          break\n        end\n      else\n        if current_word_size\
    \ > next_word_size then\n          table.insert(sorted_list, next_word)\n    \
    \      break\n        end\n      end\n    end\n  end\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc9e_vi7.lua:43:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmptc9e_vi7.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  for i =\
    \ 1, sorted_list_len do\n    local word = sorted_list[i]\n    local word_len =\
    \ #word\n    if word_len % 2 ~= 0 then\n      sorted_list[i - 1] = word\n    \
    \  sorted_list[i - 1] = word\n    end\n  end\n  return sorted_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu81hihve.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpu81hihve.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, word in ipairs(lst) do\n    table.insert(sorted_list,\
    \ word)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx435hafh.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpx435hafh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[i - 1] = word\n \
    \     table.insert(sorted_list, word:sub(1, word_size - 1))\n    end\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3n8vwgy.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aaa\", \"\", \"aa\"}\nstack traceback:\n\
    \t/tmp/tmpp3n8vwgy.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key_count =\
    \ {}\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys\
    \ + 1] = key\n    sorted_key_count[key] = 1\n  end\n  table.sort(sorted_keys,\
    \ function(a, b)\n    return sorted_key_count[a] > sorted_key_count[b]\n  end)\n\
    \  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_5_md9o.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpy_5_md9o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[i]\
    \ = current_word\n    end\n  end\n  table.sort(sorted_list, function(a, b) return\
    \ #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7fm1qzk.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpw7fm1qzk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word:sub(1,\
    \ word_size - 1)\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mrf39_k.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"\", \"aa\"}\nstack traceback:\n\t/tmp/tmp4mrf39_k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = 0\n  local sorted_list_len2\
    \ = 0\n  local sorted_list_len3 = 0\n  for _, word in ipairs(lst) do\n    sorted_list[#sorted_list\
    \ + 1] = word\n    sorted_list_len = #sorted_list + 1\n    sorted_list_len2 =\
    \ sorted_list_len2 + 1\n    sorted_list_len3 = sorted_list_len3 + 1\n  end\n \
    \ table.sort(sorted_list, function(a, b) return #a == #b end)\n  local sorted_list_len4\
    \ = #sorted_list\n  local sorted_list_len5 = #sorted_list - sorted_list_len4\n\
    \  local sorted_list_len6 = #sorted_list - sorted_list_len4 - sorted_list_len5\n\
    \  local sorted_list_len7 = #sorted_list - sorted_list_len4 - sorted_list_len5\
    \ - sorted_list_len6\n  local sorted_list_len8 = #sorted_list - sorted_list_len4\
    \ - sorted_list_len5 - sorted_list_len6 - sorted_list_len7\n  local sorted_list_len9\
    \ = #sorted_list - sorted_list_len4 - sorted_list_len5 - sorted_list_len6 - sorted_list_len7\
    \ - sorted_list_len8\n  local sorted_list_len10 = #sorted_list - sorted_list_len4\
    \ - sorted_list_len5 - sorted_list_len6 - sorted_list_len7 - sorted_list_len8\
    \ - sorted_list_len9\n  local sorted_list_len11 = #sorted_list - sorted_list_len4\
    \ - sorted_list_len5 - sorted_list_len6 - sorted_list_len7 - sorted_list_len8\
    \ - sorted_list_len9 - sorted_list_len10\n  local sorted_list_len12 = #sorted_list\
    \ - sorted_list_len4 - sorted_list_len5 - sorted_list_len6 - sorted_list_len7\
    \ - sorted_list_len8 - sorted_list_len9 - sorted_list_len10 - sorted_list_len11\n\
    \  local sorted_list_len13 = #sorted_list - sorted_list_len4 - sorted_list_len5\
    \ - sorted_list_len6 - sorted_list_len7 - sorted_list_len8 - sorted_list_len9\
    \ - sorted_list_len10 - sorted_list_len11 - sorted_list_len12\n  local sorted_list_len14\
    \ = #sorted_list - sorted_list_len4 - sorted_list_len5 - sorted_list_len6 - sorted_list_len7\
    \ - sorted_list_len8 - sorted_list_len9 - sorted_list_len10 - sorted_list_len11\
    \ - sorted_list_len12 - sorted_list_len13\n  local sorted_list_len15 = #sorted_list\
    \ - sorted_list_len4 - sorted_list_len5 - sorted_list_len6 - sorted_list_len7\
    \ - sorted_list_len8 - sorted_list_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9508qv7a.lua:51: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n        end\n        if next_word_index > current_word_index then\n \
    \         local current_word_length = current_word_index - next_word_index + 1\n\
    \          local next_word_length = next_word_index - current_word_index + 1\n\
    \          if current_word_length > next_word_length then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n          else\n            sorted_list[sorted_list_index\
    \ + current_word_index + 1] = next_word\n          end\n        end\n        next_word_index\
    \ = next_word_index + next_word_length\n      end\n      current_word_index =\
    \ current_word_index + current_word_length\n    end\n    sorted_list_index = sorted_list_index\
    \ + current_word_size\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1clovqbh.lua:41:\
    \ attempt to perform arithmetic on a nil value (global 'current_word_length')\n\
    stack traceback:\n\t/tmp/tmp1clovqbh.lua:41: in local 'candidate'\n\t/tmp/tmp1clovqbh.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[#sorted_list\
    \ + 1] = current_word\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzzdkmac.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmpdzzdkmac.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size < current_word_size\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \        sorted_list_index = sorted_list_index + current_word_index\n      else\n\
    \        sorted_list_index = sorted_list_index + current_word_index\n      end\n\
    \      current_word_index = current_word_index + next_word_size\n    end\n   \
    \ sorted_list_index = sorted_list_index + current_word_size\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_86i3ut.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpd_86i3ut.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if current_word_index\
    \ == next_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index - 1\n        end\n  \
    \      if next_word_index == current_word_index + 1 then\n          sorted_list[sorted_list_index\
    \ + next_word_index] = nil\n          sorted_list_index = sorted_list_index -\
    \ 1\n        end\n        if next_word_index == current_word_index + 2 then\n\
    \          sorted_list[sorted_list_index + next_word_index] = nil\n          sorted_list_index\
    \ = sorted_list_index - 1\n        end\n        if next_word_index == current_word_index\
    \ + 3 then\n          sorted_list[sorted_list_index + next_word_index] = nil\n\
    \          sorted_list_index = sorted_list_index - 1\n        end\n        if\
    \ next_word_index == current_word_index + 4 then\n          sorted_list[sorted_list_index\
    \ + next_word_index] = nil\n          sorted_list_index = sorted_list_index -\
    \ 1\n        end\n        if next_word_index == current_word_index + 5 then\n\
    \          sorted_list[sorted_list_index + next_word_index] = nil\n          sorted_list_index\
    \ = sorted_list_index - 1\n        end\n        if next_word_index == current_word_index\
    \ + 6 then\n          sorted_list[sorted_list_index + next_word_index] = nil\n\
    \          sorted_list_index = sorted_list_index - 1\n        end\n        if\
    \ next_word_index == current_word_index + 7 then\n          sorted_list[sorted_list_index\
    \ + next_word_index] = nil\n          sorted_list_index = sorted_list_index -\
    \ 1\n        end\n        if next_word_index == current_word_index + 8 then\n\
    \          sorted_list[sorted_list_index + next_word_index] = nil\n          sorted_list_index\
    \ = sorted_list_index - 1\n        end\n        if next_word_index == current_word_index\
    \ + 9 then\n          sorted_list[sorted_list_index + next_word_index] = nil\n\
    \          sorted_list_index = sorted_list_index - 1\n        end\n        if\
    \ next_word_index == current_word_index + 10 then\n          sorted_list[sorted_list_index\
    \ + next_word_index] = nil\n          sorted_list_index = sorted_list_index -\
    \ 1\n        end\n        if next_word_index == current_word_index + 11 then\n\
    \          sorted_list[sorted_list_index + next_word_index] = nil\n          sorted_list_index\
    \ = sorted_list_index - 1\n        end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsoxwizla.lua:88: ''end'' expected (to close ''while'' at line
    26) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, word in ipairs(lst) do\n    table.insert(sorted_list,\
    \ word)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx435hafh.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpx435hafh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_value = lst[1]\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt7_boxrh.lua:73: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local length = #word\n    if length % 2 == 1 then\n\
    \      sorted_lst[sorted_index] = word\n      sorted_index = sorted_index + 1\n\
    \    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n06sxx3.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp9n06sxx3.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = 0\n  for i = 1, #lst do\n\
    \    local word = lst[i]\n    sorted_list_len = sorted_list_len + #word\n    if\
    \ sorted_list_len > 1 then\n      table.insert(sorted_list, word)\n    end\n \
    \ end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gx47ggh.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp7gx47ggh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  for i\
    \ = 1, sorted_list_length do\n    local current_word = sorted_list[i]\n    local\
    \ current_word_length = #current_word\n    for j = i + 1, sorted_list_length do\n\
    \      local next_word = sorted_list[j]\n      local next_word_length = #next_word\n\
    \      if current_word_length < next_word_length then\n        table.insert(sorted_list,\
    \ current_word)\n        table.insert(sorted_list, next_word)\n        break\n\
    \      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cc8aa7v.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"aa\", \"aaa\", \"a\"\
    , \"aaa\"}\nstack traceback:\n\t/tmp/tmp1cc8aa7v.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_element\
    \ = sorted_list[sorted_list_index]\n    local current_element_size = #current_element\n\
    \    if current_element_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_element\n      sorted_list_index = sorted_list_index + 1\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wvb4wz8.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3wvb4wz8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaq6u8wa.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbaq6u8wa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = 0\n  for i = 1, #lst do\n\
    \    local word = lst[i]\n    sorted_list[sorted_list_len] = word\n    sorted_list_len\
    \ = sorted_list_len + 1\n  end\n  table.sort(sorted_list, function(a, b) return\
    \ #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglx6286h.lua:29:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmpglx6286h.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word:sub(1,\
    \ word_size - 1)\n    end\n  end\n  table.sort(sorted_list, function(a, b) return\
    \ #a == #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fgf5ot5.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"\", \"aa\"}\nstack traceback:\n\t/tmp/tmp7fgf5ot5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local word_length = #word\n    if word_length % 2 ==\
    \ 1 then\n      table.insert(sorted_lst, word)\n    else\n      local word_1 =\
    \ word\n      local word_2 = word\n      word_1:sub(1, word_length / 2)\n    \
    \  word_2:sub(word_length / 2, word_length)\n      table.insert(sorted_lst, word_1)\n\
    \      table.insert(sorted_lst, word_2)\n    end\n  end\n  for i = 1, #sorted_lst\
    \ do\n    sorted_lst[i]:sub(1, #sorted_lst[i])\n  end\n  return sorted_lst\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3hlpekq.lua:40:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"aa\", \"a\", \"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpz3hlpekq.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[i]\
    \ = current_word\n    end\n  end\n  table.sort(sorted_list, function(a, b) return\
    \ #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7fm1qzk.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpw7fm1qzk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n \
    \ end\n  table.sort(sorted_lst)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuv72rj9.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpwuv72rj9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index <= sorted_list_length do\n\
    \    local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ <= current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ == current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n      else\n        local next_word_index = current_word_index + next_word_length\
    \ - 1\n        if next_word_index > sorted_list_length then\n          sorted_list[sorted_list_index\
    \ + current_word_index] = nil\n        else\n          local next_word_value =\
    \ next_word[next_word_index]\n          while next_word_index > 1 do\n       \
    \     local next_word_value = next_word[next_word_index - 1]\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word_value\n            -- Move to the next word\n\
    \            sorted_list_index = sorted_list_index + next_word_length - 1\n  \
    \          -- Move to the next index\n            sorted_list_index = sorted_list_index\
    \ + 1\n            -- Move to the next word\n            sorted_list_index = sorted_list_index\
    \ + next_word_length - 1\n            -- Move to the next index\n            sorted_list_index\
    \ = sorted_list_index + 1\n          end\n          -- Move to the next word\n\
    \          sorted_list_index = sorted_list_index + next_word_length - 1\n    \
    \      -- Move to the next index\n          sorted_list_index = sorted_list_index\
    \ + 1\n        end\n      end\n      -- Move to the next word\n      sorted_list_index\
    \ = sorted_list_index + next_word_length - 1\n      -- Move to the next index\n\
    \      sorted_list_index = sorted_list_index + 1\n    end\n    -- Move to the\
    \ next word\n    sorted_list_index = sorted_list_index + current_word_length -\
    \ 1\n    -- Move to the next index\n    sorted_list_index = sorted_list_index\
    \ + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lf2ufxa.lua:24:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmp9lf2ufxa.lua:24: in local 'candidate'\n\t/tmp/tmp9lf2ufxa.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index - 1\n        end\n  \
    \      if next_word_index > current_word_index then\n          sorted_list[sorted_list_index\
    \ + current_word_index + 1] = nil\n          sorted_list_index = sorted_list_index\
    \ + 1\n        end\n        next_word_index = next_word_index + 1\n      end\n\
    \      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp469g_khc.lua:47:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp469g_khc.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87usdw91.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmp87usdw91.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = 0\n  for i = 1, #lst do\n\
    \    local word = lst[i]\n    sorted_list[#sorted_list + 1] = word\n    sorted_list_len\
    \ = #sorted_list + 1\n  end\n  table.sort(sorted_list, function(a, b) return #a\
    \ == #b end)\n  for i = 1, #sorted_list do\n    sorted_list[#sorted_list + 1]\
    \ = sorted_list[i]\n  end\n  -- sorted_list_len should be the length of the sorted\
    \ list\n  -- sorted_list should be the sorted list\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp757ie1k5.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"aa\", \"a\", \"aaa\"\
    }\nstack traceback:\n\t/tmp/tmp757ie1k5.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n \
    \ end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0ai8qhy.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpk0ai8qhy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      if current_word_index == current_word_size then\n        sorted_list[sorted_list_index]\
    \ = current_word\n        break\n      end\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_size = #next_word\n      if next_word_size\
    \ % 2 ~= 0 then\n        sorted_list[sorted_list_index + current_word_index] =\
    \ next_word\n      else\n        local next_word_index = current_word_index +\
    \ next_word_size - 1\n        local next_word_value = next_word[next_word_index]\n\
    \        local next_word_value_size = #next_word_value\n        if next_word_value_size\
    \ % 2 ~= 0 then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = next_word_value\n        else\n          local next_word_value_index = next_word_index\
    \ + next_word_value_size - 1\n          local next_word_value_value = next_word_value[next_word_value_index]\n\
    \          local next_word_value_value_size = #next_word_value_value\n       \
    \   if next_word_value_value_size % 2 ~= 0 then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word_value_value\n          else\n            local\
    \ next_word_value_value_index = next_word_value_index + next_word_value_value_size\
    \ - 1\n            local next_word_value_value_value = next_word_value_value[next_word_value_value_index]\n\
    \            local next_word_value_value_value_size = #next_word_value_value_value\n\
    \            if next_word_value_value_value_size % 2 ~= 0 then\n             \
    \ sorted_list[sorted_list_index + current_word_index] = next_word_value_value_value\n\
    \            else\n              local next_word_value_value_index = next_word_value_index\
    \ + next_word_value_value_size_size - 1\n              local next_word_value_value_value\
    \ = next_word_value_value[next_word_value_value_index]\n              local next_word_value_value_value_size\
    \ = #next_word_value_value_value\n              if next_word_value_value_value_size_size\
    \ % 2 ~= 0 then\n                sorted_list[sorted_list_index + current_word_index]\
    \ = next_word_value_value_value\n              else\n                sorted_list[sorted_list_index\
    \ + current_word_index] = next_word_value_value_value\n              end\n   \
    \         end\n          end\n        end\n      end\n      current_word_index\
    \ = current_word_index + next_word_size - 1\n    end\n    sorted_list_index =\
    \ sorted_list_index + current_word_size - 1\n  end\n  return sorted_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz9nd0xmh.lua:67: ''end'' expected (to close ''function'' at
    line 14) near ''lu''

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  local sorted_list_index\
    \ = 0\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length do\n\
    \    local word = lst[i]\n    local word_length = #word\n    if sorted_list_length\
    \ == 0 then\n      sorted_list[sorted_list_index] = word\n      sorted_list_index\
    \ = sorted_list_index + 1\n    elseif word_length == sorted_list_length then\n\
    \      sorted_list[sorted_list_index] = word\n      sorted_list_index = sorted_list_index\
    \ + 1\n    elseif word_length > sorted_list_length then\n      sorted_list[sorted_list_index]\
    \ = word\n      sorted_list_length = word_length\n      sorted_list_index = sorted_list_index\
    \ + 1\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbp3a01ui.lua:40:\
    \ expected: {\"aa\"}\nactual: {0=\"aaa\"}\nstack traceback:\n\t/tmp/tmpbp3a01ui.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local length = #lst[i]\n    if length % 2 == 1 then\n      sorted_lst[sorted_index]\
    \ = lst[i]\n      sorted_index = sorted_index + 1\n    end\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy8i47g1.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpqy8i47g1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sj6b_np.lua:93: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ < current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ < current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n      else\n        local next_word_index = current_word_index\
    \ + next_word_length - 1\n        local next_word_value = next_word[next_word_index]\n\
    \        local next_word_value_index = #next_word_value\n        local next_word_value_value\
    \ = next_word_value[next_word_value_index]\n        if next_word_value_value <\
    \ next_word_value_value then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n        end\n      end\n      current_word_index = current_word_index\
    \ + next_word_length - 1\n    end\n    sorted_list_index = sorted_list_index +\
    \ current_word_length - 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, word in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ word)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpade951ml.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpade951ml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      elseif current_word_size > next_word_size then\n     \
    \   sorted_list[j], sorted_list[i] = next_word, current_word\n      end\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67c_vhbs.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp67c_vhbs.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      -- If the current word has an odd\
    \ length, remove it from the list.\n      sorted_list[sorted_list_index] = nil\n\
    \      sorted_list_size = sorted_list_size - 1\n      sorted_list_index = sorted_list_index\
    \ - 1\n    else\n      -- If the current word has an even length, add it to the\
    \ list.\n      sorted_list[sorted_list_index] = current_word\n      sorted_list_index\
    \ = sorted_list_index + 1\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7ilvf6r.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"aa\", 3=\"aaa\"}\nstack traceback:\n\t/tmp/tmpj7ilvf6r.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i - 1] = word\n \
    \     table.insert(sorted_list, word:sub(1, word_size - 1))\n    end\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vqkdxq1.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aaa\", \"\", \"aa\"}\nstack traceback:\n\
    \t/tmp/tmp1vqkdxq1.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n        else\n          local next_word_char = next_word[next_word_index]\n\
    \          local current_word_char = current_word[current_word_index]\n      \
    \    if next_word_char > current_word_char then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n            sorted_list_index = sorted_list_index\
    \ + current_word_index\n          else\n            sorted_list[sorted_list_index\
    \ + current_word_index] = current_word\n            sorted_list_index = sorted_list_index\
    \ + current_word_index\n          end\n        end\n        next_word_index =\
    \ next_word_index + 1 -- Increment the index\n      end\n      current_word_index\
    \ = current_word_index + 1 -- Increment the index\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1 -- Increment the index\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w3zrgcd.lua:52:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3w3zrgcd.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  for i\
    \ = 1, sorted_list_length do\n    local current_word = sorted_list[i]\n    local\
    \ current_word_length = #current_word\n    for j = i + 1, sorted_list_length do\n\
    \      local next_word = sorted_list[j]\n      local next_word_length = #next_word\n\
    \      if next_word_length == current_word_length then\n        sorted_list[j]\
    \ = nil\n      elseif next_word_length > current_word_length then\n        sorted_list[i]\
    \ = current_word\n        sorted_list[j] = next_word\n      end\n    end\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvi6nlgxm.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpvi6nlgxm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  local sorted_list_index\
    \ = 0\n  local sorted_list_length = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_length = sorted_list_length - 1\n  local sorted_list_index = 1\n\
    \  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n  local sorted_list_length = sorted_list_length - 1\n  local sorted_list_index\
    \ = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy3r70ai0.lua:90: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word)\n\
    \    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9quqwfp.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmps9quqwfp.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if current_word_index\
    \ == next_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index + current_word_index\n\
    \        end\n        if current_word_index + next_word_index > current_word_size\
    \ + next_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index + current_word_index\n\
    \        end\n        if next_word_index + next_word_index > current_word_size\
    \ + next_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index + current_word_index\n\
    \        end\n        next_word_index = next_word_index + next_word_index\n  \
    \    end\n      current_word_index = current_word_index + current_word_index\n\
    \    end\n    sorted_list_index = sorted_list_index + current_word_index\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4cgrr64.lua:51:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmps4cgrr64.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      elseif current_word_size < next_word_size then\n     \
    \   sorted_list[j], sorted_list[i] = next_word, current_word\n      end\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0zwgrhk.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpj0zwgrhk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pytupib.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4pytupib.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_length = sorted_list[sorted_list_index]:len()\n    if current_length\
    \ > 1 then\n      local current_word = sorted_list[sorted_list_index]\n      local\
    \ next_word = sorted_list[sorted_list_index + 1]\n      local next_word_length\
    \ = next_word:len()\n      if next_word_length == current_length then\n      \
    \  sorted_list[sorted_list_index] = next_word\n        sorted_list_index = sorted_list_index\
    \ + 1\n      elseif next_word_length < current_length then\n        sorted_list[sorted_list_index]\
    \ = next_word\n        sorted_list_index = sorted_list_index + 1\n      else\n\
    \        sorted_list[sorted_list_index] = current_word\n        sorted_list_index\
    \ = sorted_list_index + 1\n      end\n    else\n      sorted_list_index = sorted_list_index\
    \ + 1\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnluelohi.lua:44:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpnluelohi.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = #lst\n\
    \  local sorted_strings = {}\n  local sorted_string_index = 1\n  local sorted_string_length\
    \ = #sorted_strings\n  local sorted_string_length_index = 1\n  local sorted_string_length_string\
    \ = sorted_strings[sorted_string_length_index]\n  local sorted_string_length_string_index\
    \ = sorted_string_index\n  local sorted_string_length_string_value = sorted_strings[sorted_string_length_string_index]\n\
    \  local sorted_string_length_string_value_index = sorted_string_index\n  local\
    \ sorted_string_length_string_value_value = sorted_strings[sorted_string_length_string_value_index]\n\
    \  local sorted_string_length_string_value_value_index = sorted_string_index\n\
    \  local sorted_string_length_string_value_value_value = sorted_strings[sorted_string_length_string_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_index = sorted_string_index\n\
    \  local sorted_string_length_string_value_value_value_value = sorted_strings[sorted_string_length_string_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_index = sorted_string_index\n\
    \  local sorted_string_length_string_value_value_value_value_value = sorted_strings[sorted_string_length_string_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_index = sorted_string_index\n\
    \  local sorted_string_length_string_value_value_value_value_value_value = sorted_strings[sorted_string_length_string_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_index = sorted_string_index\n\
    \  local sorted_string_length_string_value_value_value_value_value_value = sorted_strings[sorted_string_length_string_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_value_index\
    \ = sorted_string_index\n  local sorted_string_length_string_value_value_value_value_value_value_value\
    \ = sorted_strings[sorted_string_length_string_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_value_index\
    \ = sorted_string_index\n  local sorted_string_length_string_value_value_value_value_value_value_value\
    \ = sorted_strings[sorted_string_length_string_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_value_value_index\
    \ = sorted_string_index\n  local sorted_string_length_string_value_value_value_value_value_value_value_value\
    \ = sorted_strings[sorted_string_length_string_value_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_value_value_index\
    \ = sorted_string_index\n  local sorted_string_length_string_value_value_value_value_value_value_value_value\
    \ = sorted_strings[sorted_string_length_string_value_value_value_value_value_value_index]\n\
    \  local sorted_string_length_string_value_value_value_value_value_value_value_value_index\
    \ = sorted_string\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv2de20k2.lua:59: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local i = 0\n  while i < sorted_list_len do\n    local\
    \ j = i + 1\n    while j < sorted_list_len do\n      if sorted_list[i] > sorted_list[j]\
    \ then\n        local temp = sorted_list[i]\n        sorted_list[i] = sorted_list[j]\n\
    \        sorted_list[j] = temp\n      end\n      j = j + 1\n    end\n    i = i\
    \ + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprnwwbi1j.lua:22:\
    \ attempt to compare string with nil\nstack traceback:\n\t/tmp/tmprnwwbi1j.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmprnwwbi1j.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index <= next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = \"\"\n        end\n        next_word_index = next_word_index + 1\n      end\n\
    \      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j4qhabg.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"\", \"\"}\nstack traceback:\n\t/tmp/tmp2j4qhabg.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, str in ipairs(lst) do\n    local length =\
    \ #str\n    if length % 2 == 1 then\n      table.insert(sorted_list, str)\n  \
    \  end\n  end\n  table.sort(sorted_list, function(a, b) return #a > #b end)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla784efy.lua:29:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"a\"}\nstack traceback:\n\t/tmp/tmpla784efy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_index_size = #sorted_list\n  local sorted_list_index_value\
    \ = 1\n  local sorted_list_index_value_max = #sorted_list\n  local sorted_list_index_value_min\
    \ = sorted_list_size\n  local sorted_list_index_value_mid = sorted_list_size /\
    \ 2\n  local sorted_list_index_value_mid2 = sorted_list_size / 2\n  local sorted_list_index_value_mid3\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid4 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid5 = sorted_list_size / 2\n  local sorted_list_index_value_mid6\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid7 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid8 = sorted_list_size / 2\n  local sorted_list_index_value_mid9\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid10 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid11 = sorted_list_size / 2\n  local sorted_list_index_value_mid12\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid13 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid14 = sorted_list_size / 2\n  local sorted_list_index_value_mid15\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid16 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid17 = sorted_list_size / 2\n  local sorted_list_index_value_mid18\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid19 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid20 = sorted_list_size / 2\n  local sorted_list_index_value_mid21\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid22 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid23 = sorted_list_size / 2\n  local sorted_list_index_value_mid24\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid25 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid26 = sorted_list_size / 2\n  local sorted_list_index_value_mid27\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid28 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid29 = sorted_list_size / 2\n  local sorted_list_index_value_mid30\
    \ = sorted_list_size / 2\n  local sorted_list_index_value_mid31 = sorted_list_size\
    \ / 2\n  local sorted_list_index_value_mid32 = sorted_list_size / 2\n  local sorted_list_index_value_mid33\
    \ = sorted_list_size / 2\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0_xks09f.lua:69: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list, function(a, b) return #a == #b end)\n \
    \ return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c24oso3.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp2c24oso3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_value = sorted_list[sorted_list_index]\n  while sorted_list_index\
    \ < sorted_list_size do\n    local next_value = sorted_list[sorted_list_index]\n\
    \    local next_index = sorted_list_index + 1\n    local next_size = sorted_list_size\
    \ - 1\n    while next_index < next_size do\n      if next_value == sorted_list_value\
    \ then\n        sorted_list[sorted_list_index] = sorted_list[sorted_list_index\
    \ + 1]\n        sorted_list_index = sorted_list_index + 1\n      elseif next_value\
    \ < sorted_list_value then\n        sorted_list_value = next_value\n        sorted_list_index\
    \ = next_index\n      else\n        sorted_list_value = next_value\n        sorted_list_index\
    \ = next_index\n      end\n    end\n    sorted_list[sorted_list_index] = next_value\n\
    \    sorted_list_index = next_index\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3nqwiz9.lua:44:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpd3nqwiz9.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_value = lst[1]\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  while sorted_list_index < sorted_list_length\
    \ do\n    local current_value = sorted_list_value\n    local current_index = sorted_list_index\n\
    \    local current_length = #current_value\n    while current_length > 1 do\n\
    \      local current_value = sorted_list_value\n      local current_index = sorted_list_index\n\
    \      local current_length = #current_value\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      local current_value = current_value\n      local current_index = current_index\n\
    \      local current_length = current_length\n      local current_value = current_value\n\
    \      local current_index = current_index\n      local current_length = current_length\n\
    \      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n\
    \    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI', 'asdf',\
    \ 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d',\
    \ 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI',\
    \ 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b',\
    \ 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd',\
    \ 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpymc2akbb.lua:100: ''end'' expected (to close ''while'' at
    line 25) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pytupib.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4pytupib.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size % 2 ~= 0 then\n\
    \        sorted_list[sorted_list_index + current_word_index] = next_word\n   \
    \   end\n      current_word_index = current_word_index + next_word_size\n    end\n\
    \    sorted_list_index = sorted_list_index + current_word_size\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3rob0kx.lua:38:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpo3rob0kx.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    if word_len % 2\
    \ ~= 0 then\n      sorted_list[#sorted_list + 1] = word\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a > #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpn_qgr1.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"a\"}\nstack traceback:\n\t/tmp/tmpfpn_qgr1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, word in ipairs(lst) do\n    table.insert(sorted_list,\
    \ word)\n  end\n  table.sort(sorted_list, function(a, b) return #a == #b end)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j_x92fc.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp0j_x92fc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, word in ipairs(lst) do\n    sorted_lst[#sorted_lst\
    \ + 1] = word\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25kc0pvl.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp25kc0pvl.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[i] = current_word\n        sorted_list[j]\
    \ = next_word\n      else\n        sorted_list[i] = next_word\n        sorted_list[j]\
    \ = current_word\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr4n0iad.lua:40:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmplr4n0iad.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len + 1\n  local\
    \ sorted_list_len = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len\
    \ + 1\n  local sorted_list_len = sorted_list_len - 1\n  local sorted_list_len\
    \ = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len - 1\n  local\
    \ sorted_list_len = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len\
    \ - 1\n  local sorted_list_len = sorted_list_len + 1\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len + 1\n  local\
    \ sorted_list_len = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len\
    \ + 1\n  local sorted_list_len = sorted_list_len - 1\n  local sorted_list_len\
    \ = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len - 1\n  local\
    \ sorted_list_len = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len\
    \ - 1\n  local sorted_list_len = sorted_list_len + 1\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len + 1\n  local\
    \ sorted_list_len = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len\
    \ + 1\n  local sorted_list_len = sorted_list_len - 1\n  local sorted_list_len\
    \ = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len - 1\n  local\
    \ sorted_list_len = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len\
    \ - 1\n  local sorted_list_len = sorted_list_len + 1\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len + 1\n  local\
    \ sorted_list_len = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len\
    \ + 1\n  local sorted_list_len = sorted_list_len - 1\n  local sorted_list_len\
    \ = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len - 1\n  local\
    \ sorted_list_len = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len\
    \ - 1\n  local sorted_list_len = sorted_list_len + 1\n  local sorted_list_len\
    \ = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len + 1\n  local\
    \ sorted_list_len = sorted_list_len - 1\n  local sorted_list_len = sorted_list_len\
    \ + 1\n  local sorted_list_len = sorted_list_len - 1\n  local sorted_list_len\
    \ = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len - 1\n  local\
    \ sorted_list_len = sorted_list_len + 1\n  local sorted_list_len = sorted_list_len\
    \ - 1\n  local sorted_list_len = sorted_list_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo_p8brsm.lua:80: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for i = 1, #lst do\n    local word = lst[i]\n  \
    \  local length = #word\n    if sorted_list[length] == nil then\n      sorted_list[length]\
    \ = word\n    else\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf9pjtit.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpxf9pjtit.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = 1\n\
    \  for i = 1, #lst do\n    local length = string.len(lst[i])\n    if length ~=\
    \ sorted_length then\n      sorted_length = length\n      sorted_index = i\n \
    \   end\n  end\n  for i = 1, #lst do\n    local length = string.len(lst[i])\n\
    \    if length ~= sorted_length then\n      sorted_lst[sorted_index] = lst[i]\n\
    \      sorted_index = sorted_index + 1\n    end\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37mkla_7.lua:38:\
    \ expected: {\"aa\"}\nactual: {3=\"aa\", 4=\"a\"}\nstack traceback:\n\t/tmp/tmp37mkla_7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      table.insert(sorted_lst,\
    \ word)\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkumvxnpf.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpkumvxnpf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local length = string.len(lst[i])\n    if length % 2 == 1 then\n      sorted_lst[sorted_index]\
    \ = lst[i]\n      sorted_index = sorted_index + 1\n    end\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb9xr88e1.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpb9xr88e1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size % 2 ~= 0 then\n\
    \        sorted_list[sorted_list_index + current_word_index] = next_word\n   \
    \   else\n        local next_word_index = 1\n        while next_word_index <=\
    \ next_word_size do\n          local next_word_index = next_word_index + 1\n \
    \         local next_word_value = next_word[next_word_index]\n          local\
    \ next_word_value_size = #next_word_value\n          if next_word_value_size %\
    \ 2 ~= 0 then\n            sorted_list[sorted_list_index + current_word_index\
    \ + 1] = next_word_value\n          else\n            local next_word_value_index\
    \ = 1\n            while next_word_value_index <= next_word_value_size do\n  \
    \            local next_word_value_index = next_word_value_index + 1\n       \
    \       local next_word_value_value = next_word_value[next_word_value_index]\n\
    \              local next_word_value_value_size = #next_word_value_value\n   \
    \           if next_word_value_value_size % 2 ~= 0 then\n                sorted_list[sorted_list_index\
    \ + current_word_index + next_word_value_index] = next_word_value_value\n    \
    \          else\n                local next_word_value_value_index = 1\n     \
    \           while next_word_value_value_index <= next_word_value_value_size do\n\
    \                  local next_word_value_value_index = next_word_value_value_index\
    \ + 1\n                  local next_word_value_value_value = next_word_value_value[next_word_value_value_index]\n\
    \                  local next_word_value_value_value_size = #next_word_value_value_value\n\
    \                  if next_word_value_value_value_size % 2 ~= 0 then\n       \
    \             sorted_list[sorted_list_index + current_word_index + next_word_value_index\
    \ + 1] = next_word_value_value_value\n                  else\n               \
    \     local next_word_value_value_index = 1\n                    while next_word_value_value_index\
    \ <= next_word_value_value_value_size do\n                      local next_word_value_value_index\
    \ = next_word_value_value_index + 1\n                      local next_word_value_value_value\
    \ = next_word_value_value[next_word_value_value_index]\n                     \
    \ local next_word_value_value_value_size = #next_word_value_value_value\n    \
    \                  if next_word_value_value_value_size % 2 ~= 0 then\n       \
    \                 sorted_list[sorted_list_index + current_word_index + next_word_value_index\
    \ + next_word_value_value_index] = next_word_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5b5ut_nh.lua:72: ''end'' expected (to close ''if'' at line
    57) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    if sorted_list[word_len]\
    \ == nil then\n      sorted_list[word_len] = word\n    else\n      table.insert(sorted_list,\
    \ word)\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e3lvv8v.lua:33:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp_e3lvv8v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index <= sorted_list_length do\n\
    \    local current_length = sorted_list[sorted_list_index]:len()\n    if current_length\
    \ % 2 == 1 then\n      local current_word = sorted_list[sorted_list_index]\n \
    \     local next_word = sorted_list[sorted_list_index + 1]\n      local next_word_length\
    \ = next_word:len()\n      if next_word_length == current_length then\n      \
    \  sorted_list[sorted_list_index] = next_word\n        sorted_list_index = sorted_list_index\
    \ + 1\n      else\n        local next_word_index = sorted_list_index + 1\n   \
    \     while next_word_index <= sorted_list_length do\n          local next_word_length\
    \ = sorted_list[next_word_index]:len()\n          if next_word_length == current_length\
    \ then\n            sorted_list[sorted_list_index] = next_word\n            sorted_list_index\
    \ = sorted_list_index + 1\n          else\n            local next_word_index =\
    \ next_word_index + 1\n          end\n        end\n      end\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  for i =\
    \ 1, sorted_list_len do\n    local current_word = sorted_list[i]\n    local current_word_len\
    \ = #current_word\n    for j = i + 1, sorted_list_len do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_len = #next_word\n      if next_word_len\
    \ > current_word_len then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl433hluj.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpl433hluj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size % 2 ~= 0 then\n\
    \        sorted_list[sorted_list_index + current_word_index] = next_word\n   \
    \   end\n      current_word_index = current_word_index + next_word_size\n    end\n\
    \    sorted_list_index = sorted_list_index + current_word_size\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwur68jxv.lua:24:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmpwur68jxv.lua:24: in local 'candidate'\n\t/tmp/tmpwur68jxv.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaq6u8wa.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbaq6u8wa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_index_size = #sorted_list\n  local sorted_list_index_value\
    \ = 1\n  local sorted_list_index_value_size = 1\n  local sorted_list_index_value_last\
    \ = 1\n  local sorted_list_index_value_last_size = #sorted_list\n  local sorted_list_index_value_last_value\
    \ = sorted_list_index_value\n  local sorted_list_index_value_last_value_size =\
    \ sorted_list_index_value_size\n  local sorted_list_index_value_last_value_last\
    \ = sorted_list_index_value_last\n  local sorted_list_index_value_last_value_last_size\
    \ = sorted_list_index_value_last_size\n  local sorted_list_index_value_last_value_last_value\
    \ = sorted_list_index_value_last_value\n  local sorted_list_index_value_last_value_last_value_size\
    \ = sorted_list_index_value_last_value_size\n  local sorted_list_index_value_last_value_last_value_last\
    \ = sorted_list_index_value_last_value_last\n  local sorted_list_index_value_last_value_last_value_last_size\
    \ = sorted_list_index_value_last_value_last_size\n  local sorted_list_index_value_last_value_last_value_last_value\
    \ = sorted_list_index_value_last_value_last_value\n  local sorted_list_index_value_last_value_last_value_last_value_size\
    \ = sorted_list_index_value_last_value_last_value_last_size\n  local sorted_list_index_value_last_value_last_value_last_value_last\
    \ = sorted_list_index_value_last_value_last_value_last_value_last\n  local sorted_list_index_value_last_value_last_value_last_value_last_size\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_size\n  local\
    \ sorted_list_index_value_last_value_last_value_last_value_last_value = sorted_list_index_value_last_value_last_value_last_value_last_value\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_size\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_value_size\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_last\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_value_last_last\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_last_size\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_value_last_value_size\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_last_value\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_value_last_value_last\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_last_value_size\
    \ = sorted_list_index_value_last_value_last_value_last_value_last_value_last_value_size\n\
    \  local sorted_list_index_value_last_value_last_value_last_value_last_value_last_value_last\
    \ = sorted_list_index_value_last_value_last_value_last_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjtih3cd0.lua:55: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        if current_word < next_word then\n         \
    \ table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n        end\n      elseif current_word_size > next_word_size then\n\
    \        table.insert(sorted_list, current_word)\n      end\n    end\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9o4yifb.lua:39:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"aa\"}\nstack traceback:\n\
    \t/tmp/tmpo9o4yifb.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_element\
    \ = sorted_list[sorted_list_index]\n    local current_element_size = #current_element\n\
    \    if current_element_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_element\n      sorted_list_index = sorted_list_index + 1\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index <= sorted_list_length do\n\
    \    local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ <= current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ == current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n      else\n        local next_word_index = current_word_index\
    \ + next_word_length\n        if next_word_index > sorted_list_length then\n \
    \         sorted_list[sorted_list_index + current_word_index] = next_word\n  \
    \      else\n          local next_word_next_index = current_word_index + next_word_length\
    \ + 1\n          if next_word_next_index > sorted_list_length then\n         \
    \   sorted_list[sorted_list_index + current_word_index] = next_word\n        \
    \  else\n            local next_word_next_next_index = current_word_index + next_word_length\
    \ + 2\n            if next_word_next_next_index > sorted_list_length then\n  \
    \            sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \            else\n              local next_word_next_next_next_index = current_word_index\
    \ + next_word_length + 3\n              if next_word_next_next_next_index > sorted_list_length\
    \ then\n                sorted_list[sorted_list_index + current_word_index] =\
    \ next_word\n              else\n                local next_word_next_next_next_next_index\
    \ = current_word_index + next_word_length + 4\n                if next_word_next_next_next_next_index\
    \ > sorted_list_length then\n                  sorted_list[sorted_list_index +\
    \ current_word_index] = next_word\n                else\n                  local\
    \ next_word_next_next_next_next_index = current_word_index + next_word_length\
    \ + 5\n                  if next_word_next_next_next_next_index > sorted_list_length\
    \ then\n                    sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n                  else\n                    local next_word_next_next_next_next_index\
    \ = current_word_index + next_word_length + 6\n                    if next_word_next_next_next_next_index\
    \ > sorted_list_length then\n                      sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n                    else\n              \
    \        local next_word_next_next_next_next_index = current_word_index + next_word_length\
    \ + 7\n                      if next_word_next_next_next_next_index > sorted_list_length\
    \ then\n                        sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n                      else\n                        local next_word_next_next_next_next_index\
    \ = current_word_index + next_word_length + 8\n                        if next_word_next_next_next_next_index\
    \ > sorted_list_length then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpay0n6rtl.lua:76: ''end'' expected (to close ''if'' at line
    61) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ < current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ < current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = next_word\n      else\n        sorted_list_index = sorted_list_index + current_word_index\
    \ + next_word_length\n      end\n      current_word_index = current_word_index\
    \ + next_word_length\n    end\n    sorted_list_index = sorted_list_index + current_word_length\n\
    \    sorted_list_length = sorted_list_length - current_word_length\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporbfqvx6.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmporbfqvx6.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 ~= 0 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    if sorted_list[word_len]\
    \ == nil then\n      sorted_list[word_len] = word\n    else\n      sorted_list[word_len]\
    \ = sorted_list[word_len] .. \" \" .. word\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mt7d4_q.lua:33:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp0mt7d4_q.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if next_word_size\
    \ == current_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      elseif next_word_size < current_word_size then\n     \
    \   sorted_list[j], sorted_list[i] = next_word, current_word\n      end\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphwui3_u3.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmphwui3_u3.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if next_word_size\
    \ == current_word_size then\n        sorted_list[j] = nil\n      elseif next_word_size\
    \ > current_word_size then\n        sorted_list[i] = current_word\n        sorted_list[j]\
    \ = next_word\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk1dm4ul.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjk1dm4ul.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = 0\n  local sorted_list_len2\
    \ = 0\n  for i = 1, #lst do\n    local word = lst[i]\n    local word_len = #word\n\
    \    if sorted_list_len == 0 then\n      sorted_list_len = word_len\n      sorted_list_len2\
    \ = word_len\n    elseif sorted_list_len == word_len then\n      sorted_list_len2\
    \ = sorted_list_len2\n    elseif sorted_list_len2 < word_len then\n      sorted_list_len2\
    \ = word_len\n    end\n    sorted_list[#sorted_list + 1] = word\n  end\n  table.sort(sorted_list,\
    \ function(a, b)\n    if #a > #b then\n      return 1\n    elseif #a < #b then\n\
    \      return -1\n    else\n      return a<b\n    end\n  end)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1feczd15.lua:46:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aa\"}\nstack traceback:\n\t/tmp/tmp1feczd15.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  for i =\
    \ 1, sorted_list_len do\n    local current_word = sorted_list[i]\n    local current_word_len\
    \ = #current_word\n    for j = i + 1, sorted_list_len do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_len = #next_word\n      if current_word_len\
    \ == next_word_len then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93mk6t5s.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp93mk6t5s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          sorted_list_index = sorted_list_index - 1\n        end\n  \
    \      if next_word_index > current_word_index then\n          sorted_list[sorted_list_index\
    \ + current_word_index + 1] = nil\n          sorted_list_index = sorted_list_index\
    \ + 1\n        end\n        next_word_index = next_word_index + 1\n      end\n\
    \      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp469g_khc.lua:47:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp469g_khc.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  for i = 1, #lst\
    \ do\n    local length = string.len(lst[i])\n    if sorted_list_length == 0 then\n\
    \      sorted_list_length = length\n    elseif sorted_list_length == length then\n\
    \      sorted_list[#sorted_list + 1] = lst[i]\n    else\n      local j = 1\n \
    \     while j < #sorted_list do\n        if string.len(sorted_list[j]) > length\
    \ then\n          table.insert(sorted_list, sorted_list[j])\n          j = j +\
    \ 1\n        else\n          break\n        end\n      end\n      table.insert(sorted_list,\
    \ lst[i])\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_n86bqw.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpy_n86bqw.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[i] = word\n    end\n\
    \  end\n  table.sort(sorted_list, function(a, b) return #a < #b end)\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7evex7d.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpy7evex7d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for _, word in ipairs(lst)\
    \ do\n    sorted_lst[sorted_index] = word\n    sorted_index = sorted_index + 1\n\
    \  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzecos_jk.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpzecos_jk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  for _, word in ipairs(lst)\
    \ do\n    sorted_list[sorted_list_length] = word\n    sorted_list_length = sorted_list_length\
    \ + 1\n  end\n  table.sort(sorted_list, function(a, b) return #a < #b end)\n \
    \ return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74e3one7.lua:28:\
    \ expected: {\"aa\"}\nactual: {0=\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmp74e3one7.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local length = #lst[i]\n    if length % 2 == 1 then\n      sorted_lst[sorted_index]\
    \ = lst[i]\n      sorted_index = sorted_index + 1\n    end\n  end\n  return sorted_lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5qevxt2.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp_5qevxt2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, str in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ str)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfpp3eg8.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmptfpp3eg8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, item in ipairs(lst) do\n    table.insert(sorted_list,\
    \ item)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt7rokls.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmptt7rokls.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size % 2 ~= 0 then\n\
    \        sorted_list[sorted_list_index + current_word_index] = next_word\n   \
    \   end\n      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluhmcx81.lua:24:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmpluhmcx81.lua:24: in local 'candidate'\n\t/tmp/tmpluhmcx81.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    if current_word_length % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, word in ipairs(lst) do\n    sorted_list[#sorted_list\
    \ + 1] = word\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27jrd1gf.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp27jrd1gf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wvb4wz8.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3wvb4wz8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  for i = 1, sorted_list_len do\n    local word = lst[i]\n    local word_len\
    \ = #word\n    if word_len % 2 ~= 0 then\n      sorted_list[sorted_list_index]\
    \ = word\n      sorted_list_index = sorted_list_index + 1\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbnv41bt.lua:35:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdbnv41bt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = #lst\n\
    \  local sorted_value = lst[1]\n  for i = 2, sorted_length do\n    if sorted_value\
    \ == lst[i] then\n      sorted_index = sorted_index + 1\n    else\n      sorted_lst[sorted_index]\
    \ = sorted_value\n      sorted_index = sorted_index + 1\n      sorted_value =\
    \ lst[i]\n    end\n  end\n  sorted_lst[sorted_index] = sorted_value\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygh_z_9o.lua:35:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpygh_z_9o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if current_word_index\
    \ == next_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n        end\n        next_word_index = next_word_index + 1\n      end\n\
    \      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_vkczp1.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp6_vkczp1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[i] = word\n    end\n\
    \  end\n  table.sort(sorted_list, function(a, b) return #a < #b end)\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7evex7d.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpy7evex7d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      -- If the current word has an odd\
    \ length, delete it.\n      -- The list should be sorted by length, so the deleted\
    \ word should be at the end.\n      -- The list should be sorted by length, so\
    \ the deleted word should be at the end.\n      -- The list should be sorted by\
    \ length, so the deleted word should be at the end.\n      -- The list should\
    \ be sorted by length, so the deleted word should be at the end.\n      -- The\
    \ list should be sorted by length, so the deleted word should be at the end.\n\
    \      -- The list should be sorted by length, so the deleted word should be at\
    \ the end.\n      -- The list should be sorted by length, so the deleted word\
    \ should be at the end.\n      -- The list should be sorted by length, so the\
    \ deleted word should be at the end.\n      -- The list should be sorted by length,\
    \ so the deleted word should be at the end.\n      -- The list should be sorted\
    \ by length, so the deleted word should be at the end.\n      -- The list should\
    \ be sorted by length, so the deleted word should be at the end.\n      -- The\
    \ list should be sorted by length, so the deleted word should be at the end.\n\
    \      -- The list should be sorted by length, so the deleted word should be at\
    \ the end.\n      -- The list should be sorted by length, so the deleted word\
    \ should be at the end.\n      -- The list should be sorted by length, so the\
    \ deleted word should be at the end.\n      -- The list should be sorted by length,\
    \ so the deleted word should be at the end.\n      -- The list should be sorted\
    \ by length, so the deleted word should be at the end.\n      -- The list should\
    \ be sorted by length, so the deleted word should be at the end.\n      -- The\
    \ list should be sorted by length, so the deleted word should be at the end.\n\
    \      -- The list should be sorted by length, so the deleted word should be at\
    \ the end.\n      -- The list should be sorted by length, so the deleted word\
    \ should be at the end.\n      -- The list should be sorted by length, so the\
    \ deleted word should be at the end.\n      -- The list should be sorted by length,\
    \ so the deleted word should be at the end.\n      -- The list should be sorted\
    \ by length, so the deleted word should be at the end.\n      -- The list should\
    \ be sorted by length, so the deleted word should be at the end.\n      -- The\
    \ list should be sorted by length, so the deleted word should be at the end.\n\
    \      -- The list should be sorted by length, so the deleted word should be at\
    \ the end.\n      -- The list should be sorted by length\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5t61unr4.lua:64: ''end'' expected (to close ''if'' at line
    21) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_value = lst[1]\n  local sorted_list_value_length =\
    \ #sorted_list_value\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local sorted_list_value_length_value\
    \ = sorted_list_length\n  local sorted_list_value_length_index = 1\n  local \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5o7zh63w.lua:81: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ if sorted_index == 1 then\n      sorted_lst[1] = lst[i]\n    else\n      if\
    \ sorted_index > 1 then\n        if sorted_lst[sorted_index] < lst[i] then\n \
    \         sorted_lst[sorted_index] = lst[i]\n          sorted_index = sorted_index\
    \ + 1\n        end\n      else\n        sorted_lst[1] = lst[i]\n      end\n  \
    \  end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp311ysz09.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aaa\"}\nstack traceback:\n\t/tmp/tmp311ysz09.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_index_size = #sorted_list\n  local sorted_list_index_value\
    \ = 1\n  local sorted_list_index_value_max = #sorted_list\n  local sorted_list_index_value_min\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid = sorted_list_index_value\n\
    \  local sorted_list_index_value_mid_index = 1\n  local sorted_list_index_value_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_min = sorted_list_index_value\n\
    \  local sorted_list_index_value_mid_index_mid = sorted_list_index_value\n  local\
    \ sorted_list_index_value_mid_index_mid_index = 1\n  local sorted_list_index_value_mid_index_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_mid_index_min = sorted_list_index_value\n\
    \  local sorted_list_index_value_mid_index_mid_index_mid = sorted_list_index_value\n\
    \  local sorted_list_index_value_mid_index_mid_index_mid_index = 1\n  local sorted_list_index_value_mid_index_mid_index_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_mid_index_mid_index_min\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index\
    \ = 1\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_min\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index\
    \ = 1\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_min\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_mid\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_mid_index\
    \ = 1\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_mid_index_max\
    \ = #sorted_list\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_mid_index_min\
    \ = sorted_list_index_value\n  local sorted_list_index_value_mid_index_mid_index_mid_index_mid_index_mid_index_mid_index_mid\
    \ = sorted_list_index_value\n  local sorted_list_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1ilx8v6.lua:61: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = 1\n\
    \  for i = 1, #lst do\n    local length = #lst[i]\n    if sorted_length == length\
    \ then\n      table.insert(sorted_lst, lst[i])\n    elseif sorted_length < length\
    \ then\n      table.insert(sorted_lst, lst[i])\n      sorted_length = length\n\
    \      sorted_index = sorted_index + 1\n    else\n      local j = 1\n      while\
    \ j < sorted_index do\n        if sorted_length == sorted_index then\n       \
    \   table.insert(sorted_lst, lst[i])\n          break\n        elseif sorted_length\
    \ < sorted_index then\n          table.insert(sorted_lst, lst[i])\n          break\n\
    \        else\n          local k = j + 1\n          while k < sorted_index do\n\
    \            if sorted_length == sorted_index then\n              table.insert(sorted_lst,\
    \ lst[i])\n              break\n            elseif sorted_length < sorted_index\
    \ then\n              table.insert(sorted_lst, lst[i])\n              break\n\
    \            else\n              local new_length = sorted_length\n          \
    \    sorted_length = sorted_length - 1\n              table.insert(sorted_lst,\
    \ lst[i])\n              sorted_length = new_length\n            end\n       \
    \     k = k + 1\n          end\n        end\n        j = j + 1\n      end\n  \
    \  end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyv73r3y.lua:63:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmppyv73r3y.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 0\n  local sorted_length = 0\n\
    \  local sorted_keys = {}\n  local sorted_key_index = {}\n  for i = 1, #lst do\n\
    \    local length = string.len(lst[i])\n    if sorted_length == 0 then\n     \
    \ sorted_length = length\n      sorted_index = i\n      sorted_keys[sorted_index]\
    \ = lst[i]\n      sorted_key_index[sorted_index] = i\n    elseif sorted_length\
    \ == length then\n      sorted_keys[sorted_index] = lst[i]\n      sorted_key_index[sorted_index]\
    \ = i\n      sorted_index = sorted_index + 1\n    else\n      sorted_length =\
    \ sorted_length\n      sorted_index = i\n      sorted_keys[sorted_index] = lst[i]\n\
    \      sorted_key_index[sorted_index] = i\n    end\n  end\n  sorted_length = sorted_length\
    \ - 1\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_key_index[i]] = sorted_keys[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm7m_gzq.lua:48:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpwm7m_gzq.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size == current_word_size\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \      else\n        local next_word_index = 1\n        while next_word_index\
    \ < next_word_size do\n          local next_next_word = sorted_list[sorted_list_index\
    \ + current_word_index + next_word_index]\n          local next_next_word_size\
    \ = #next_next_word\n          if next_next_word_size == next_word_size then\n\
    \            sorted_list[sorted_list_index + current_word_index + next_word_index]\
    \ = next_next_word\n          else\n            local next_next_word_index = 1\n\
    \            while next_next_word_index < next_next_word_size do\n           \
    \   local next_next_next_word = sorted_list[sorted_list_index + current_word_index\
    \ + next_word_index + next_next_word_index]\n              local next_next_next_word_size\
    \ = #next_next_next_word\n              if next_next_next_word_size == next_next_word_size\
    \ then\n                sorted_list[sorted_list_index + current_word_index + next_word_index\
    \ + next_next_word_index] = next_next_next_word\n              else\n        \
    \        next_next_word_index = next_next_word_index + 1\n              end\n\
    \            end\n          end\n          next_word_index = next_word_index +\
    \ 1\n        end\n      end\n      current_word_index = current_word_index + 1\n\
    \    end\n    sorted_list_index = sorted_list_index + 1\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh749to6.lua:59:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjh749to6.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  for _, word in ipairs(lst)\
    \ do\n    sorted_list[#sorted_list + 1] = word\n    sorted_list_length = sorted_list_length\
    \ + #word\n  end\n  table.sort(sorted_list, function(a, b) return #a > #b end)\n\
    \  for _, word in ipairs(sorted_list) do\n    sorted_list[#sorted_list + 1] =\
    \ word\n  end\n  for i = 1, sorted_list_length do\n    sorted_list[#sorted_list\
    \ + 1] = sorted_list[i]\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = {}\n  local sorted_index_len\
    \ = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    sorted_index[#sorted_index\
    \ + 1] = i\n    sorted_index_len[#sorted_index_len + 1] = #word\n  end\n  table.sort(sorted_index,\
    \ function(a, b) return sorted_index_len[a] < sorted_index_len[b] end)\n  for\
    \ i = 1, #sorted_index do\n    sorted_lst[#sorted_lst + 1] = sorted_index[i]\n\
    \  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3t7c_t5.lua:33:\
    \ expected: {\"aa\"}\nactual: {2, 1, 3}\nstack traceback:\n\t/tmp/tmpp3t7c_t5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in pairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu1tfsnp.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbu1tfsnp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_length = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_length do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_length = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_length\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_length = #next_word\n      if next_word_length == current_word_length\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = nil\n  \
    \    else\n        sorted_list_index = sorted_list_index + next_word_length\n\
    \      end\n      current_word_index = current_word_index + next_word_length\n\
    \    end\n    sorted_list_index = sorted_list_index + current_word_length\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ph2a4t5.lua:26:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmp0ph2a4t5.lua:26: in local 'candidate'\n\t/tmp/tmp0ph2a4t5.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wvb4wz8.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3wvb4wz8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word:sub(1,\
    \ word_size - 1)\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mrf39_k.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"\", \"aa\"}\nstack traceback:\n\t/tmp/tmp4mrf39_k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if next_word_size\
    \ == current_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl2vugwx.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpkl2vugwx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, str in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ str)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfpp3eg8.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmptfpp3eg8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_value = lst[1]\n  local sorted_list_value = sorted_list_value\n\
    \  local sorted_list_value = sorted_list_value\n  while sorted_list_index < sorted_list_len\
    \ do\n    local current_value = lst[sorted_list_index]\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_value = current_value\n    local current_value\
    \ = current_value\n    local current_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzfh304_e.lua:100: ''end'' expected (to close ''while'' at
    line 21) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      sorted_lst[#sorted_lst+1]\
    \ = word\n    end\n  end\n  table.sort(sorted_lst, function(a,b) return #a < #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nljc6jm.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp1nljc6jm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    if current_word_length % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_word\n      sorted_list_index = sorted_list_index + 1\n    end\n \
    \ end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  for i\
    \ = 1, sorted_list_length do\n    local current_word = sorted_list[i]\n    local\
    \ current_word_length = #current_word\n    for j = i + 1, sorted_list_length do\n\
    \      local next_word = sorted_list[j]\n      local next_word_length = #next_word\n\
    \      if current_word_length == next_word_length then\n        sorted_list[j],\
    \ current_word = current_word, next_word\n      end\n    end\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg7i_xkk.lua:34:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmprg7i_xkk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  for i\
    \ = 1, sorted_list_length do\n    local current_word = sorted_list[i]\n    local\
    \ current_word_length = #current_word\n    for j = i + 1, sorted_list_length do\n\
    \      local next_word = sorted_list[j]\n      local next_word_length = #next_word\n\
    \      if current_word_length == next_word_length then\n        if current_word\
    \ > next_word then\n          table.insert(sorted_list, current_word)\n      \
    \    table.insert(sorted_list, next_word)\n          break\n        end\n    \
    \  elseif current_word_length > next_word_length then\n        break\n      end\n\
    \    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j_01yzm.lua:40:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp7j_01yzm.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word[word_size\
    \ - 1]\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbk63b_e.lua:31:\
    \ expected: {\"AI\", \"asdf\", \"school\"}\nactual: {\"school\", \"AI\", \"asdf\"\
    }\nstack traceback:\n\t/tmp/tmpvbk63b_e.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ if sorted_index == 1 then\n      sorted_lst[1] = lst[i]\n    else\n      if\
    \ sorted_index > 1 then\n        if sorted_lst[sorted_index] < lst[i] then\n \
    \         sorted_lst[sorted_index] = lst[i]\n        end\n      else\n       \
    \ sorted_lst[1] = lst[i]\n      end\n    end\n    sorted_index = sorted_index\
    \ + 1\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsf6ldfth.lua:22:\
    \ attempt to compare nil with string\nstack traceback:\n\t/tmp/tmpsf6ldfth.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpsf6ldfth.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, word in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ word)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3llnco4j.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmp3llnco4j.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, word in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ word)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpade951ml.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpade951ml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index <= sorted_list_length do\n\
    \    local current_length = sorted_list[sorted_list_index]:len()\n    if current_length\
    \ % 2 == 1 then\n      sorted_list[sorted_list_index] = sorted_list[sorted_list_index]:lower()\n\
    \      sorted_list_index = sorted_list_index + 1\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[j + 1] = nil\n      else\n      \
    \  sorted_list[j + 1] = current_word\n      end\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rb6i9jf.lua:22:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmp9rb6i9jf.lua:22: in local 'candidate'\n\t/tmp/tmp9rb6i9jf.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    if word_len % 2\
    \ ~= 0 then\n      sorted_list[#sorted_list + 1] = word\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyke9tv2.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpoyke9tv2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = 1\n\
    \  for i = 1, #lst do\n    local length = string.len(lst[i])\n    if sorted_length\
    \ < length then\n      sorted_length = length\n      sorted_index = i\n    end\n\
    \  end\n  table.insert(sorted_lst, lst[sorted_index])\n  while sorted_index <=\
    \ #lst do\n    local length = string.len(lst[sorted_index])\n    if sorted_length\
    \ < length then\n      sorted_length = length\n      table.insert(sorted_lst,\
    \ lst[sorted_index])\n    end\n    sorted_index = sorted_index + 1\n  end\n  table.sort(sorted_lst)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyugrdp4j.lua:41:\
    \ expected: {\"aa\"}\nactual: {\"aaa\"}\nstack traceback:\n\t/tmp/tmpyugrdp4j.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[i - 1] = word\n \
    \     sorted_list[i - 1] = word\n    end\n  end\n  return sorted_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g27wrq1.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\", \"aaa\"}\nstack traceback:\n\t\
    /tmp/tmp_g27wrq1.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    if word_len % 2\
    \ ~= 0 then\n      sorted_list[#sorted_list + 1] = word\n    end\n  end\n  table.sort(sorted_list,\
    \ function(a, b) return #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyke9tv2.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpoyke9tv2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  for i =\
    \ 1, sorted_list_len do\n    local word = sorted_list[i]\n    local word_len =\
    \ #word\n    if word_len % 2 ~= 0 then\n      sorted_list[#sorted_list + 1] =\
    \ word\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan5gxwa0.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmpan5gxwa0.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    if current_word_size % 2 == 1 then\n      -- If the current word length is\
    \ odd, delete it from the list\n      sorted_list[sorted_list_index] = nil\n \
    \     sorted_list_size = sorted_list_size - 1\n    else\n      -- If the current\
    \ word length is even, sort the list alphabetically\n      table.insert(sorted_list,\
    \ current_word)\n    end\n    sorted_list_index = sorted_list_index + 1\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzffxybo.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"aa\", 3=\"aaa\", 4=\"aa\"}\nstack traceback:\n\
    \t/tmp/tmpzzffxybo.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[i]\
    \ = current_word\n    end\n  end\n  table.sort(sorted_list, function(a, b) return\
    \ #a < #b end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7fm1qzk.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpw7fm1qzk.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, str in ipairs(lst) do\n    table.insert(sorted_list,\
    \ str)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01klzzo6.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp01klzzo6.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    sorted_list[#sorted_list + 1] = word\n  end\n\
    \  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnqn1fs07.lua:28:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpnqn1fs07.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[i] = nil\n      else\n        sorted_list[j],\
    \ sorted_list[i] = sorted_list[i], sorted_list[j]\n      end\n    end\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpax6pf1aw.lua:22:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmpax6pf1aw.lua:22: in local 'candidate'\n\t/tmp/tmpax6pf1aw.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length\
    \ do\n    local word = lst[i]\n    local word_length = #word\n    if word_length\
    \ % 2 == 1 then\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fzuihyv.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3fzuihyv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word)\n\
    \    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9quqwfp.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmps9quqwfp.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, word in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ word)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpade951ml.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpade951ml.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length\
    \ do\n    local word = lst[i]\n    local word_length = #word\n    if word_length\
    \ % 2 == 1 then\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fzuihyv.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3fzuihyv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index <= current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size == current_word_size\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = nil\n  \
    \    elseif next_word_size < current_word_size then\n        sorted_list[sorted_list_index\
    \ + current_word_index + 1] = next_word\n      else\n        sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n      end\n      current_word_index = current_word_index\
    \ + 2\n    end\n    sorted_list_index = sorted_list_index + 2\n  end\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnckkhjjw.lua:24:\
    \ attempt to get length of a nil value (local 'next_word')\nstack traceback:\n\
    \t/tmp/tmpnckkhjjw.lua:24: in local 'candidate'\n\t/tmp/tmpnckkhjjw.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n        else\n          local next_word_char = next_word[next_word_index]\n\
    \          local current_word_char = current_word[current_word_index]\n      \
    \    if next_word_char == current_word_char then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n            sorted_list_index = sorted_list_index\
    \ + current_word_index\n          else\n            sorted_list_index = sorted_list_index\
    \ + next_word_index\n          end\n        end\n        next_word_index = next_word_index\
    \ + 1\n      end\n      current_word_index = current_word_index + 1\n    end\n\
    \    sorted_list_index = sorted_list_index + 1\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xsmvea6.lua:51:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4xsmvea6.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_size = #sorted_list\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1sj6b_np.lua:93: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local sorted_list_index = 1\n  local sorted_list_len = #lst\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #lst\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #lst\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #lst\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp269a3neo.lua:97: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  for i = 1, sorted_list_len\
    \ do\n    local word = lst[i]\n    local word_len = #word\n    local j = 1\n \
    \   while j <= word_len do\n      local word_j = word[j]\n      if word_j ~= word[j\
    \ - 1] then\n        sorted_list[#sorted_list + 1] = word_j\n      end\n     \
    \ j = j + 1\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a_2o2dn.lua:36:\
    \ expected: {\"aa\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6a_2o2dn.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = {}\n  for i = 1, #lst do\n  \
    \  local word = lst[i]\n    sorted_index[#sorted_index + 1] = i\n    sorted_lst[#sorted_lst\
    \ + 1] = word\n  end\n  table.sort(sorted_index, function(a, b) return sorted_index[a]\
    \ < sorted_index[b] end)\n  for i = 1, #sorted_index do\n    sorted_lst[sorted_index[i]]\
    \ = lst[i]\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpximrusjf.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpximrusjf.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if next_word_size == current_word_size\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \      else\n        local next_word_index = 1\n        while next_word_index\
    \ < next_word_size do\n          if next_word_index == current_word_index then\n\
    \            sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \          else\n            local next_word_next_word = sorted_list[sorted_list_index\
    \ + current_word_index + next_word_index]\n            local next_word_next_word_size\
    \ = #next_word_next_word\n            if next_word_next_word_size == next_word_size\
    \ then\n              sorted_list[sorted_list_index + current_word_index + next_word_index]\
    \ = next_word_next_word\n            else\n              local next_word_next_word_index\
    \ = 1\n              while next_word_next_word_index < next_word_next_word_size\
    \ do\n                sorted_list[sorted_list_index + current_word_index + next_word_index\
    \ + next_word_next_word_index] = next_word_next_word\n                next_word_next_word_index\
    \ = next_word_next_word_index + 1\n              end\n            end\n      \
    \    end\n          next_word_index = next_word_index + 1\n        end\n     \
    \ end\n      current_word_index = current_word_index + 1\n    end\n    sorted_list_index\
    \ = sorted_list_index + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf2ic70u.lua:58:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpxf2ic70u.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, str in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ str)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfpp3eg8.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmptfpp3eg8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      if current_word_size == next_word_size\
    \ then\n        sorted_list[sorted_list_index + current_word_index] = next_word\n\
    \      elseif current_word_size > next_word_size then\n        sorted_list[sorted_list_index\
    \ + current_word_index + 1] = next_word\n      else\n        sorted_list_index\
    \ = sorted_list_index + current_word_index + 1\n      end\n      current_word_index\
    \ = current_word_index + next_word_size\n    end\n    sorted_list_index = sorted_list_index\
    \ + 1\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpyi4dku.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"a\"}\nstack traceback:\n\t/tmp/tmpxpyi4dku.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_element\
    \ = sorted_list[sorted_list_index]\n    local current_element_size = #current_element\n\
    \    if current_element_size % 2 == 1 then\n      sorted_list[sorted_list_index]\
    \ = current_element\n      sorted_list_index = sorted_list_index + 1\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659794936
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word\n    end\n\
    \  end\n  table.sort(sorted_list, function(a, b) return #a < #b end)\n  return\
    \ sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv85re_vj.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpv85re_vj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaq6u8wa.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbaq6u8wa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index < sorted_list_size do\n    local current_word\
    \ = sorted_list[sorted_list_index]\n    local current_word_size = #current_word\n\
    \    local current_word_index = 1\n    while current_word_index < current_word_size\
    \ do\n      local next_word = sorted_list[sorted_list_index + current_word_index]\n\
    \      local next_word_size = #next_word\n      local next_word_index = 1\n  \
    \    while next_word_index < next_word_size do\n        if next_word_index ==\
    \ current_word_index then\n          sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n        end\n        if next_word_index > current_word_index then\n \
    \         sorted_list[sorted_list_index + current_word_index + 1] = nil\n    \
    \    end\n        next_word_index = next_word_index + 2\n      end\n      current_word_index\
    \ = current_word_index + 2\n    end\n    sorted_list_index = sorted_list_index\
    \ + 2\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm_fwxus.lua:45:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpjm_fwxus.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ word_len = #word\n    if word_len % 2 ~= 0 then\n      table.insert(sorted_lst,\
    \ word)\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b\
    \ end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwkda6gv.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgwkda6gv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, word in ipairs(lst) do\n    table.insert(sorted_list,\
    \ word)\n  end\n  table.sort(sorted_list, function(a, b) return #a == #b end)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j_x92fc.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp0j_x92fc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[j + 1] = current_word\n        sorted_list[j]\
    \ = nil\n      else\n        sorted_list[j + 1] = next_word\n      end\n    end\n\
    \  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnkhghcai.lua:19:\
    \ attempt to get length of a nil value (local 'current_word')\nstack traceback:\n\
    \t/tmp/tmpnkhghcai.lua:19: in local 'candidate'\n\t/tmp/tmpnkhghcai.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659794932
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, item in ipairs(lst) do\n    table.insert(sorted_list,\
    \ item)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt7rokls.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmptt7rokls.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  for i = 1, #sorted_list do\n    local word = sorted_list[i]\n\
    \    local length = #word\n    if length % 2 == 1 then\n      sorted_list[i] =\
    \ word\n      sorted_list[i - 1]\n    end\n  end\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq4wzyvqz.lua:22: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_index_size = #sorted_list\n  while sorted_list_index\
    \ < sorted_list_size do\n    local current_word = sorted_list[sorted_list_index]\n\
    \    local current_word_size = #current_word\n    local current_word_index = sorted_list_index\n\
    \    while current_word_index < sorted_list_index_size do\n      local next_word\
    \ = sorted_list[current_word_index]\n      local next_word_size = #next_word\n\
    \      if current_word_size == next_word_size then\n        sorted_list[current_word_index]\
    \ = next_word\n        sorted_list_index = current_word_index\n        sorted_list_index_size\
    \ = sorted_list_index_size - 1\n      elseif current_word_size > next_word_size\
    \ then\n        sorted_list_index = current_word_index\n        sorted_list_index_size\
    \ = sorted_list_index_size - 1\n      else\n        sorted_list_index = current_word_index\
    \ + 1\n        sorted_list_index_size = sorted_list_index_size - 1\n      end\n\
    \    end\n    sorted_list_index = sorted_list_index + 1\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem8zl7he.lua:46:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpem8zl7he.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794932
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        sorted_list[j] = nil\n      elseif current_word_size\
    \ > next_word_size then\n        sorted_list[j], sorted_list[i] = sorted_list[i],\
    \ sorted_list[j]\n      end\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pytupib.lua:36:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp4pytupib.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word)\n\
    \    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7j4o8yt.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmpl7j4o8yt.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794932
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, item in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ item)\n  end\n  table.sort(sorted_lst, function(a, b) return #a > #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrv709xo.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aaa\", \"aa\", \"a\"}\nstack traceback:\n\t/tmp/tmpgrv709xo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659794931
