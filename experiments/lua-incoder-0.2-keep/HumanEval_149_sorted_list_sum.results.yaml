language: lua
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n \
    \ end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8e55zfdk.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp8e55zfdk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for i = 1, #lst do\n    local word = lst[i]\n  \
    \  local length = #word\n    if sorted_list[length] == nil then\n      sorted_list[length]\
    \ = word\n    else\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxf9pjtit.lua:32:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpxf9pjtit.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      table.insert(sorted_list, word,\
    \ 1)\n    end\n  end\n  table.sort(sorted_list, function(a, b) return #a < #b\
    \ end)\n  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7js4evx.lua:21:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpj7js4evx.lua:21: in local 'candidate'\n\t/tmp/tmpj7js4evx.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 ~= 0 then\n      sorted_list[#sorted_list + 1]\
    \ = word\n    end\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ckj8omb.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"a\", \"aaa\"}\nstack\
    \ traceback:\n\t/tmp/tmp1ckj8omb.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    if current_word_size % 2 == 1 then\n      sorted_list[i]\
    \ = current_word\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwdmnggi.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgwdmnggi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local current_word = sorted_list[i]\n    local current_word_size\
    \ = #current_word\n    for j = i + 1, sorted_list_size do\n      local next_word\
    \ = sorted_list[j]\n      local next_word_size = #next_word\n      if current_word_size\
    \ == next_word_size then\n        if current_word < next_word then\n         \
    \ table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n        end\n      else\n        if current_word_size > next_word_size\
    \ then\n          table.insert(sorted_list, current_word)\n          table.insert(sorted_list,\
    \ next_word)\n        end\n      end\n    end\n  end\n  return sorted_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vnjxizo.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\", \"aa\", \"a\"}\nstack traceback:\n\
    \t/tmp/tmp4vnjxizo.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaq6u8wa.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"aa\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpbaq6u8wa.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_len = #sorted_list\n  local sorted_list_sorted\
    \ = {}\n  local sorted_list_sorted_len = #sorted_list_sorted\n  local sorted_list_sorted_index\
    \ = 0\n  local sorted_list_sorted_index_len = 0\n  local sorted_list_sorted_index_len2\
    \ = 0\n  local sorted_list_sorted_index_len3 = 0\n  local sorted_list_sorted_index_len4\
    \ = 0\n  local sorted_list_sorted_index_len5 = 0\n  local sorted_list_sorted_index_len6\
    \ = 0\n  local sorted_list_sorted_index_len7 = 0\n  local sorted_list_sorted_index_len8\
    \ = 0\n  local sorted_list_sorted_index_len9 = 0\n  local sorted_list_sorted_index_len10\
    \ = 0\n  local sorted_list_sorted_index_len11 = 0\n  local sorted_list_sorted_index_len12\
    \ = 0\n  local sorted_list_sorted_index_len13 = 0\n  local sorted_list_sorted_index_len14\
    \ = 0\n  local sorted_list_sorted_index_len15 = 0\n  local sorted_list_sorted_index_len16\
    \ = 0\n  local sorted_list_sorted_index_len17 = 0\n  local sorted_list_sorted_index_len18\
    \ = 0\n  local sorted_list_sorted_index_len19 = 0\n  local sorted_list_sorted_index_len20\
    \ = 0\n  local sorted_list_sorted_index_len21 = 0\n  local sorted_list_sorted_index_len22\
    \ = 0\n  local sorted_list_sorted_index_len23 = 0\n  local sorted_list_sorted_index_len24\
    \ = 0\n  local sorted_list_sorted_index_len25 = 0\n  local sorted_list_sorted_index_len26\
    \ = 0\n  local sorted_list_sorted_index_len27 = 0\n  local sorted_list_sorted_index_len28\
    \ = 0\n  local sorted_list_sorted_index_len29 = 0\n  local sorted_list_sorted_index_len30\
    \ = 0\n  local sorted_list_sorted_index_len31 = 0\n  local sorted_list_sorted_index_len32\
    \ = 0\n  local sorted_list_sorted_index_len33 = 0\n  local sorted_list_sorted_index_len34\
    \ = 0\n  local sorted_list_sorted_index_len35 = 0\n  local sorted_list_sorted_index_len36\
    \ = 0\n  local sorted_list_sorted_index_len37 = 0\n  local sorted_list_sorted_index_len38\
    \ = 0\n  local sorted_list_sorted_index_len39 = 0\n  local sorted_list_sorted_index_len40\
    \ = 0\n  local sorted_list_sorted_index_len41 = 0\n  local sorted_list_sorted_index_len42\
    \ = 0\n  local sorted_list_sorted_index_len43 = 0\n  local sorted_list_sorted_index_len44\
    \ = 0\n  local sorted_list_sorted_index_len45 = 0\n  local sorted_list_sorted_index_len46\
    \ = 0\n  local sorted_list_sorted_index_len47 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6anavfyc.lua:81: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = #lst\n  for i = 1, sorted_list_length\
    \ do\n    local word = lst[i]\n    local word_length = #word\n    if word_length\
    \ % 2 == 1 then\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fzuihyv.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmp3fzuihyv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  for i = 1, #lst do\n   \
    \ local word = lst[i]\n    local word_length = #word\n    if word_length % 2 ==\
    \ 1 then\n      table.insert(sorted_lst, word)\n    else\n      local word_1 =\
    \ word\n      local word_2 = word\n      word_2 = word_2:sub(1, word_length -\
    \ 1)\n      table.insert(sorted_lst, word_1)\n      table.insert(sorted_lst, word_2)\n\
    \    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a < #b end)\n\
    \  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1_4fsws.lua:37:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aa\", \"aaa\"}\nstack traceback:\n\
    \t/tmp/tmpi1_4fsws.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = {}\n  local sorted_index_len\
    \ = {}\n  for i = 1, #lst do\n    sorted_index[#sorted_index + 1] = i\n    sorted_index_len[#sorted_index_len\
    \ + 1] = #lst[i]\n  end\n  table.sort(sorted_index, function(a, b) return sorted_index_len[a]\
    \ < sorted_index_len[b] end)\n  local i = 0\n  local j = 1\n  while i <= #sorted_index\
    \ do\n    local word = lst[sorted_index[i]]\n    local length = #word\n    if\
    \ length % 2 == 1 then\n      sorted_lst[j] = word\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52c_tax5.lua:27:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmp52c_tax5.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp52c_tax5.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  for i = 1, #lst do\n    local word = lst[i]\n    local\
    \ length = #word\n    if length % 2 == 1 then\n      sorted_lst[#sorted_lst +\
    \ 1] = word\n    end\n  end\n  table.sort(sorted_lst, function(a, b) return #a\
    \ < #b end)\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna9sb_ox.lua:30:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpna9sb_ox.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_length = #sorted_list\n  local\
    \ sorted_list_index = 1\n  while sorted_list_index < sorted_list_length do\n \
    \   local current_word = sorted_list[sorted_list_index]\n    local current_word_length\
    \ = #current_word\n    local current_word_index = 1\n    while current_word_index\
    \ < current_word_length do\n      local next_word = sorted_list[sorted_list_index\
    \ + current_word_index]\n      local next_word_length = #next_word\n      if next_word_length\
    \ < current_word_length then\n        sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n      else\n        local next_word_index = 1\n        while next_word_index\
    \ < next_word_length do\n          local next_word_char = next_word[next_word_index]\n\
    \          local current_word_char = current_word[current_word_index]\n      \
    \    if next_word_char < current_word_char then\n            sorted_list[sorted_list_index\
    \ + current_word_index] = next_word\n            sorted_list_index = sorted_list_index\
    \ + next_word_index\n            break\n          else\n            local next_word_index\
    \ = next_word_index + 1\n          end\n        end\n      end\n      current_word_index\
    \ = current_word_index + next_word_length\n    end\n    sorted_list_index = sorted_list_index\
    \ + current_word_length\n  end\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21jmgy1a.lua:51:\
    \ expected: {\"aa\"}\nactual: {\"aa\", 3=\"aaa\"}\nstack traceback:\n\t/tmp/tmp21jmgy1a.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_lst = {}\n  local sorted_index = 1\n  local sorted_length = #lst\n\
    \  for i = 1, sorted_length do\n    local word = lst[i]\n    local word_length\
    \ = #word\n    if word_length % 2 == 1 then\n      table.insert(sorted_lst, word)\n\
    \    else\n      local word_index = word_length / 2\n      local word_left = word:sub(1,\
    \ word_index)\n      local word_right = word:sub(word_index + 1, word_length)\n\
    \      local word_left_length = #word_left\n      local word_right_length = #word_right\n\
    \      if word_left_length < word_right_length then\n        table.insert(sorted_lst,\
    \ word_left)\n      else\n        table.insert(sorted_lst, word_right)\n     \
    \ end\n    end\n  end\n  return sorted_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpavv083.lua:42:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"a\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpgpavv083.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  while sorted_list_index <= sorted_list_size do\n    local current_length\
    \ = sorted_list[sorted_list_index]:len()\n    if current_length % 2 == 1 then\n\
    \      sorted_list[sorted_list_index] = sorted_list[sorted_list_index]:lower()\n\
    \      sorted_list_index = sorted_list_index + 1\n    end\n  end\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_len = #lst\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len\
    \ = #sorted_list\n  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n\
    \  local sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local\
    \ sorted_list_index = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n\
    \  local sorted_list_len = #sorted_list\n  local sorted_list_index = 1\n  local\
    \ sorted_list_len = #sorted_list\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lzg2q5u.lua:93: ''end'' expected (to close ''function'' at
    line 14) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  for _, v in ipairs(lst) do\n    table.insert(sorted_list,\
    \ v)\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0esk65h.lua:26:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpa0esk65h.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  local sorted_list_index\
    \ = 1\n  local sorted_list_size = #sorted_list\n  local sorted_list_index = 1\n\
    \  while sorted_list_index <= sorted_list_size do\n    local current_word = sorted_list[sorted_list_index]\n\
    \    local current_word_size = #current_word\n    local current_word_index = 1\n\
    \    while current_word_index <= current_word_size do\n      local next_word =\
    \ sorted_list[sorted_list_index + current_word_index]\n      local next_word_size\
    \ = #next_word\n      local next_word_index = 1\n      while next_word_index <=\
    \ next_word_size do\n        if next_word_index == current_word_index then\n \
    \         sorted_list[sorted_list_index + current_word_index] = nil\n        else\n\
    \          local next_word_char = next_word[next_word_index]\n          local\
    \ current_word_char = current_word[current_word_index]\n          if next_word_char\
    \ == current_word_char then\n            sorted_list[sorted_list_index + current_word_index]\
    \ = nil\n          else\n            sorted_list_index = sorted_list_index + next_word_index\n\
    \          end\n        end\n        next_word_index = next_word_index + next_word_index\n\
    \      end\n      current_word_index = current_word_index + current_word_index\n\
    \    end\n    sorted_list_index = sorted_list_index + current_word_size\n  end\n\
    \  return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa', 'a', 'aaa'}),\
    \ {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf', 'b'}), {'AI',\
    \ 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c', 'a'}), {})\n\
    \    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd', 'dcba'})\n\
    \    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n    lu.assertEquals(candidate({'a',\
    \ 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb',\
    \ 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy__i4qm9.lua:22:\
    \ attempt to get length of a nil value (local 'current_word')\nstack traceback:\n\
    \t/tmp/tmpy__i4qm9.lua:22: in local 'candidate'\n\t/tmp/tmpy__i4qm9.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = lst\n  local sorted_list_size = #sorted_list\n  for i =\
    \ 1, sorted_list_size do\n    local word = sorted_list[i]\n    local word_size\
    \ = #word\n    if word_size % 2 == 1 then\n      sorted_list[i] = word:sub(1,\
    \ word_size - 1)\n    end\n  end\n  table.sort(sorted_list)\n  return sorted_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
    \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
    \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
    \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
    \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI',\
    \ 'ai', 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}),\
    \ {})\n    lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd',\
    \ 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp721hu0k.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"\", \"aa\", \"aa\"}\nstack traceback:\n\t/tmp/tmpp721hu0k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function that accepts a list of strings as a parameter,\n--\
    \ deletes the strings that have odd lengths from it,\n-- and returns the resulted\
    \ list with a sorted order,\n-- The list is always a list of strings and never\
    \ an array of numbers,\n-- and it may contain duplicates.\n-- The order of the\
    \ list should be ascending by length of each word, and you\n-- should return the\
    \ list sorted by that rule.\n-- If two words have the same length, sort the list\
    \ alphabetically.\n-- The function should return a list of strings in sorted order.\n\
    -- You may assume that all words will have the same length.\n-- For example:\n\
    -- assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n-- assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nlocal function sorted_list_sum(lst)\n\
    \  local sorted_list = { }\n  local sorted_list_length = 0\n  for i = 1, #lst\
    \ do\n    local length = string.len(lst[i])\n    if sorted_list_length < length\
    \ then\n      sorted_list_length = length\n    end\n    table.insert(sorted_list,\
    \ lst[i])\n  end\n  table.sort(sorted_list)\n  return sorted_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n    lu.assertEquals(candidate({'aa',\
    \ 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school', 'AI', 'asdf',\
    \ 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d', 'b', 'c',\
    \ 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}), {'abcd',\
    \ 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai', 'au'})\n\
    \    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'aaaa',\
    \ 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa', 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7a73wyn.lua:31:\
    \ expected: {\"aa\"}\nactual: {\"a\", \"aa\", \"aaa\"}\nstack traceback:\n\t/tmp/tmpz7a73wyn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
