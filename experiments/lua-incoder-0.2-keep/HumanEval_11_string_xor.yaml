name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      result = result\
    \ .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n    else\n\
    \      result = result .. c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    elseif carry < 0 then\n      result = result .. \"0\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ xor_table = {\n    ['0'] = {\n      ['0'] = {\n        ['0'] = {\n         \
    \ ['0'] = {\n            ['0'] = {\n              ['0'] = {\n                ['0']\
    \ = {\n                  ['0'] = {\n                    ['0'] = {\n          \
    \            ['0'] = {\n                        ['0'] = {\n                  \
    \        ['0'] = {\n                            ['0'] = {\n                  \
    \            ['0'] = {\n                                ['0'] = {\n          \
    \                        ['0'] = {\n                                    ['0']\
    \ = {\n                                      ['0'] = {\n                     \
    \                   ['0'] = {\n                                          ['0']\
    \ = {\n                                            ['0'] = {\n               \
    \                               ['0'] = {\n                                  \
    \              ['0'] = {\n                                                  ['0']\
    \ = {\n                                                    ['0'] = {\n       \
    \                                               ['0'] = {\n                  \
    \                                      ['0'] = {\n                           \
    \                               ['0'] = {\n                                  \
    \                          ['0'] = {\n                                       \
    \                       ['0'] = {\n                                          \
    \                      ['0'] = {\n                                           \
    \                       ['0'] = {\n                                          \
    \                          ['0'] = {\n                                       \
    \                               ['0'] = {\n                                  \
    \                                      ['0'] = {\n                           \
    \                                               ['0'] = {\n                  \
    \                                                          ['0'] = {\n       \
    \                                                                       ['0']\
    \ = {\n                                                                      \
    \          ['0'] = {\n                                                       \
    \                           ['0'] = {\n                                      \
    \                                              ['0'] = {\n                   \
    \                                                                   ['0'] = {\n\
    \                                                                            \
    \            ['0'] = {\n                                                     \
    \                                     ['0'] = {\n                            \
    \                                                                ['0'] = {\n \
    \                                                                            \
    \                 ['0'] = {\n                                                \
    \                                                ['0'] = {\n                 \
    \                                                                            \
    \     ['0'] = {\n                                                            \
    \                                        ['0'] = {\n                         \
    \                                                                            \
    \ ['0'] = {\n                                                                \
    \                                        ['0'] = {\n                         \
    \                                                                            \
    \     ['0'] = {\n                                                            \
    \                                                ['0'] = {\n                 \
    \                                                                            \
    \                 ['0'] = {\n                                                \
    \                                                                ['0'] = {\n \
    \                                                                            \
    \                                     ['0'] = {\n                            \
    \                                                                            \
    \            ['0'] = {\n                                                     \
    \                                                                 ['0'] = {\n\
    \                                                                            \
    \                                            ['0'] = {\n                     \
    \                                                                            \
    \                         ['0'] = {\n                                        \
    \                                                                            \
    \        ['0'] = {\n                                                         \
    \                                                                     ['0'] =\
    \ {\n                                                                        \
    \                                                        ['0'] = {\n         \
    \                                                                            \
    \                                             ['0'] = {\n                    \
    \                                                                            \
    \                                    ['0'] = {\n                             \
    \                                                                            \
    \                             ['0'] = {\n                                    \
    \                                                                            \
    \                        ['0'] = {\n                                         \
    \                                                                            \
    \                     ['0'] = {\n                                            \
    \                                                                            \
    \                    ['0'] = {\n                                             \
    \                                                                            \
    \                     ['0'] = {\n                                            \
    \                                                                            \
    \                        ['0'] = {\n                                         \
    \                                                                            \
    \                             ['0'] = {\n                                    \
    \                                                                            \
    \                                    ['0'] = {\n                             \
    \                                                                            \
    \                                             ['0'] = {\n                    \
    \                                                                            \
    \                                                        ['0'] = {\n         \
    \                                                                            \
    \                                                                     ['0'] =\
    \ {\n                                                                ", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n\
    \    local d = string.byte(b:sub(i, i))\n    local carry = c xor d\n    local\
    \ new_c = c xor carry\n    local new_d = d xor carry\n    local new_carry = new_c\
    \ xor new_d\n    local new_new_c = new_c xor new_carry\n    local new_new_d =\
    \ new_d xor new_carry\n    local new_new_carry = new_new_c xor new_new_d\n   \
    \ local new_new_new_c = new_new_c xor new_new_new_d\n    local new_new_new_d =\
    \ new_new_d xor new_new_carry\n    local new_new_new_carry = new_new_new_c xor\
    \ new_new_new_d\n    local new_new_new_new_c = new_new_new_c xor new_new_new_d\n\
    \    local new_new_new_new_d = new_new_new_d xor new_new_new_carry\n    local\
    \ new_new_new_new_carry = new_new_new_new_c xor new_new_new_d\n    local new_new_new_new_new_c\
    \ = new_new_new_new_c xor new_new_new_d\n    local new_new_new_new_new_d = new_new_new_new_d\
    \ xor new_new_new_carry\n    local new_new_new_new_new_carry = new_new_new_new_c\
    \ xor new_new_new_d\n    local new_new_new_new_new_new_c = new_new_new_new_c xor\
    \ new_new_new_d\n    local new_new_new_new_new_d = new_new_new_new_d xor new_new_new_carry\n\
    \    local new_new_new_new_new_carry = new_new_new_new_c xor new_new_new_d\n \
    \   local new_new_new_new_new_new_c = new_new_new_new_c xor new_new_new_d\n  \
    \  local new_new_new_new_new_new_d = new_new_new_new_d xor new_new_new_carry\n\
    \    local new_new_new_new_new_new_carry = new_new_new_new_c xor new_new_new_d\n\
    \    local new_new_new_new_new_new_c = new_new_new_new_c xor new_new_new_d\n \
    \   local new_new_new_new_new_new_d = new_new_new_new_d xor new_new_new_carry\n\
    \    local new_new_new_new_new_new_carry = new_new_new_new_c xor new_new_new_d\n\
    \    local new_new_new_new_new_new_c = new_new_new_new_c xor new_new_new_d\n \
    \   local new_new_new_new_new_new_d = new_new_new_new_d ", "  local result = \"\
    \"\n  for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if\
    \ c > 1 then\n      c = tostring(c) - 48\n    end\n    result = result .. tostring(c)\n\
    \  end\n  return result\nend", "  local binA = '00000000'\n  local binB = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local res\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n\
    \  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c =\
    \ a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result .. c\n \
    \   end\n  end\n  return result\nend", "  local xor_table = {\n    [0] = '0000',\n\
    \    [1] = '0001',\n    [2] = '0010',\n    [3] = '0011',\n    [4] = '0100',\n\
    \    [5] = '0101',\n    [6] = '0110',\n    [7] = '0111',\n    [8] = '1000',\n\
    \    [9] = '1001',\n    [10] = '1010',\n    [11] = '1011',\n    [12] = '1100',\n\
    \    [13] = '1101',\n    [14] = '1110',\n    [15] = '1111',\n  }\n  local xor\
    \ = table.concat(xor_table, \"0\")\n  local result = a:sub(1, #a) + b:sub(1, #b)\
    \ + xor:sub(1, #xor)\n  return result\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format(\"%x\"\
    , c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ c = a[i] ^ b[i]\n        if c > 0 then\n            c = tostring(c):byte(8)\n\
    \        end\n        result = result .. c\n    end\n    return result\nend",
  "  local binA = '00000000'\n  local binB = '00000000'\n  local binC = '00000000'\n\
    \  local binD = '00000000'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\
    \ .. '0'\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) ..\
    \ '0'\n  end\n  for i = 1, #binA do\n    binC = binC .. tostring(binA:byte(i))\
    \ .. '1'\n  end\n  for i = 1, #binB do\n    binD = binD .. tostring(binB:byte(i))\
    \ .. '1'\n  end\n  return binD:sub(1, #binD) .. binC:sub(1, #binC)\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local\
    \ d = string.byte(b, i)\n    local carry = c xor d\n    local newcarry = string.format(\"\
    %c\", (carry or 0) ^ 1)\n    result = result .. newcarry\n  end\n  return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^\
    \ b[i]\n        if c > 0 then\n            result = result .. \"1\"\n        else\n\
    \            result = result .. \"0\"\n        end\n    end\n    return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^\
    \ b[i]\n        if c > 0 then\n            c = string.format(\"%x\", c)\n    \
    \    end\n        result = result .. c\n    end\n    return result\nend", "  local\
    \ binA = '0b'\n  local binB = '0b'\n  local binC = '0b'\n  local binD = '0b'\n\
    \  local binE = '0b'\n  local binF = '0b'\n  local binG = '0b'\n  local binH =\
    \ '0b'\n  local binI = '0b'\n  local binJ = '0b'\n  local binK = '0b'\n  local\
    \ binL = '0b'\n  local binM = '0b'\n  local binN = '0b'\n  local binO = '0b'\n\
    \  local binP = '0b'\n  local binQ = '0b'\n  local binR = '0b'\n  local binS =\
    \ '0b'\n  local binT = '0b'\n  local binU = '0b'\n  local binV = '0b'\n  local\
    \ binW = '0b'\n  local binX = '0b'\n  local binY = '0b'\n  local binZ = '0b'\n\
    \  local binA = '0b'\n  local binB = '0b'\n  local binC = '0b'\n  local binD =\
    \ '0b'\n  local binE = '0b'\n  local binF = '0b'\n  local binG = '0b'\n  local\
    \ binH = '0b'\n  local binI = '0b'\n  local binJ = '0b'\n  local binK = '0b'\n\
    \  local binL = '0b'\n  local binM = '0b'\n  local binN = '0b'\n  local binO =\
    \ '0b'\n  local binP = '0b'\n  local binQ = '0b'\n  local binR = '0b'\n  local\
    \ binS = '0b'\n  local binT = '0b'\n  local binU = '0b'\n  local binV = '0b'\n\
    \  local binW = '0b'\n  local binX = '0b'\n  local binY = '0b'\n  local binZ =\
    \ '0b'\n  local binA = '0b'\n  local binB = '0b'\n  local binC = '0b'\n  local\
    \ binD = '0b'\n  local binE = '0b'\n  local binF = '0b'\n  local binG = '0b'\n\
    \  local binH = '0b'\n  local binI = '0b'\n  local binJ = '0b'\n  local binK =\
    \ '0b'\n  local binL = '0b'\n", "  local c = ''\n  for i = 1, #a do\n    c = c\
    \ .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return c\nend", "  local\
    \ xor_table = {\n    ['0'] = '0000',\n    ['1'] = '0001',\n    ['1'] = '0010',\n\
    \    ['0'] = '0011',\n    ['1'] = '0100',\n    ['0'] = '0101',\n    ['1'] = '0110',\n\
    \    ['0'] = '0111',\n    ['1'] = '1000',\n    ['0'] = '1001',\n    ['1'] = '1010',\n\
    \    ['0'] = '1011',\n    ['1'] = '1100',\n    ['0'] = '1101',\n    ['1'] = '1110',\n\
    \    ['0'] = '1111',\n  }\n  local xor = table.concat(xor_table, 2)\n  return\
    \ a:sub(1, 2):sub(3)..xor:sub(1, 2):sub(3)..b:sub(1, 2):sub(3)\nend", "  local\
    \ res = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n\
    \  return res\nend", "  local binA = '00000000'\n  local binB = '00000000'\n \
    \ for i = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local xor = c ^ d\n    if xor > 0 then\n      result = result .. \"\
    1\"\n    elseif xor < 0 then\n      result = result .. \"0\"\n    else\n     \
    \ result = result .. \"0\"\n    end\n  end\n  return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        local c = a[i]\n        result\
    \ = (result + c) ^ b[i]\n    end\n    return result\nend", "  local xor_table\
    \ = {\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] =\
    \ ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0']\
    \ = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1']\
    \ = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['0']\
    \ = ['0'],\n    ['", "  local result = \"\"\n  for i = 1, #a do\n    local c =\
    \ string.byte(a, i)\n    local d = string.byte(b, i)\n    local carry = c xor\
    \ d\n    local newchar = string.byte(result, i)\n    if carry then\n      newchar\
    \ = string.char(newchar + carry)\n    end\n    table.insert(result, newchar)\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = ''\n  for i\
    \ = 1, #a do\n    local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i,\
    \ i))\n    local xor = c ^ d\n    if xor > 0 then\n      result = result .. string.char(xor)\n\
    \    elseif xor < 0 then\n      result = result .. string.char(xor + 256)\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    local carry = c xor d\n    local newcarry = string.format(\"%0d\"\
    , carry)\n    if newcarry > 9 then\n      newcarry = newcarry - 10\n    end\n\
    \    result = result .. newcarry\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c\
    \ ~= d then\n      result = result .. c\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n\
    \    local carry = tostring(c):byte(1, -1)\n    if carry then\n      result =\
    \ result .. carry .. tostring(c):byte(-1)\n    else\n      result = result ..\
    \ tostring(c)\n    end\n  end\n  return result\nend", "  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = string.byte(a, 1, i)\n    local d = string.byte(b,\
    \ 1, i)\n    local res = res .. string.format(\"%x\", c ^ d)\n  end\n  return\
    \ res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^\
    \ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n\
    \    if c == \"0\" then\n      result = result .. \"1\"\n    elseif d == \"0\"\
    \ then\n      result = result .. \"0\"\n    else\n      result = result .. tostring(c)\
    \ .. tostring(d)\n    end\n  end\n  return result\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    elseif c == 0 then\n      result = result .. \"0\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a) ^ string.byte(b)\n\
    \    local d = string.byte(tostring(c))\n    result = result .. string.char(d)\n\
    \    b = string.sub(b, 2)\n  end\n  return result\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    elseif c < 0 then\n      result = result .. \"0\"\n \
    \   else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = ''\n  for i\
    \ = 1, #a do\n    local c = string.byte(a) ^ string.byte(b)\n    if c > 0 then\n\
    \      result = result .. string.char(c)\n    end\n    b = string.sub(b, 1, #b)\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = string.byte(a:sub(i, i))\n    local d = string.byte(b:sub(i, i))\n\
    \    local carry = c xor d\n    if carry > 0 then\n      result = result .. \"\
    1\"\n    elseif carry < 0 then\n      result = result .. \"0\"\n    else\n   \
    \   result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ binA = '00000000'\n  local binB = '00000000'\n  for i = 1, #a do\n    binA =\
    \ binA .. string.format('%010b', tonumber(a[i]))\n  end\n  for i = 1, #b do\n\
    \    binB = binB .. string.format('%010b', tonumber(b[i]))\n  end\n  return binA:sub(1,\
    \ #binA) .. binB:sub(1, #binB)\nend", "  local binA = '00000000'\n  local binB\
    \ = '00000000'\n  local binC = '00000000'\n  local binD = '00000000'\n  local\
    \ binE = '00000000'\n  local binF = '00000000'\n  local binG = '00000000'\n  local\
    \ binH = '00000000'\n  local binI = '00000000'\n  local binJ = '00000000'\n  local\
    \ binK = '00000000'\n  local binL = '00000000'\n  local binM = '00000000'\n  local\
    \ binN = '00000000'\n  local binO = '00000000'\n  local binP = '00000000'\n  local\
    \ binQ = '00000000'\n  local binR = '00000000'\n  local binS = '00000000'\n  local\
    \ binT = '00000000'\n  local binU = '00000000'\n  local binV = '00000000'\n  local\
    \ binW = '00000000'\n  local binX = '00000000'\n  local binY = '00000000'\n  local\
    \ binZ = '00000000'", "  local result = \"\"\n  for i = 1, #a do\n    local c\
    \ = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    elseif c < 0 then\n      result = result .. \"0\"\n    end\n  end\n \
    \ return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c\
    \ = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i]) .. tostring(b[i])\n\
    \    if c == \"0\" then\n      result = result .. \"0\"\n    else\n      result\
    \ = result .. \"1\"\n    end\n  end\n  return result\nend", "  local c = ''\n\
    \  for i = 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n\
    \  end\n  return c\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local xor_table = {\n    ['0'] = '0000',\n\
    \    ['1'] = '0001',\n    ['1'] = '0010',\n    ['0'] = '0011',\n    ['1'] = '0100',\n\
    \    ['0'] = '0101',\n    ['1'] = '0110',\n    ['0'] = '0111',\n    ['1'] = '1000',\n\
    \    ['0'] = '1001',\n    ['1'] = '1010',\n    ['0'] = '1011',\n    ['1'] = '1100',\n\
    \    ['0'] = '1101',\n    ['1'] = '1110',\n    ['0'] = '1111',\n  }\n  local xor\
    \ = xor_table[string.format(\"%x\", a) .. string.format(\"%x\", b)]\n  return\
    \ xor\nend", "  local ret = ''\n  for i = 1, #a do\n    ret = ret .. string.rep(a[i],\
    \ #b[i])\n  end\n  return ret\nend", "  local c = ''\n  for i = 1, #a do\n   \
    \ c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return c\nend",
  "  local res = \"\"\n  for i = 1, #a do\n    local c = string.byte(a:sub(i, i))\n\
    \    local d = string.byte(b:sub(i, i))\n    local xor = c ^ d\n    if xor > 0\
    \ then\n      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n\
    \  end\n  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local carry = c\
    \ xor d\n    if carry > 0 then\n      result = result .. \"1\"\n      carry =\
    \ carry >> 1\n    end\n    if carry > 0 then\n      result = result .. \"0\"\n\
    \    end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local binA = '00000000'\n  local binB = '00000000'\n  for i\
    \ = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n  end\n\
    \  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            result\
    \ = result .. \"1\"\n        else\n            result = result .. \"0\"\n    \
    \    end\n    end\n    return result\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local x = 0\n  for i = 1, #a do\n    x = x + (a[i] == '1' and\
    \ b[i] == '1' or a[i] == '0' and b[i] == '0')\n  end\n  return tostring(x)\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = string.byte(a) ^ string.byte(b)\n  \
    \  if c > 0 then\n      result = result .. string.char(c)\n    end\n    b = string.byte(b)\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = tostring(a[i]) ^ tostring(b[i])\n    if c > 1 then\n      result\
    \ = result .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n \
    \   end\n  end\n  return result\nend", "  local xor_table = {\n    [1] = '0000',\n\
    \    [2] = '0001',\n    [3] = '0010',\n    [4] = '0011',\n    [5] = '0100',\n\
    \    [6] = '0101',\n    [7] = '0110',\n    [8] = '0111',\n    [9] = '1000',\n\
    \    [10] = '1001',\n    [11] = '1010',\n    [12] = '1011',\n    [13] = '1100',\n\
    \    [14] = '1101',\n    [15] = '1110',\n    [16] = '1111',\n  }\n  local xor_result\
    \ = xor_table[a] .. xor_table[b]\n  return xor_result\nend", "  local c = ''\n\
    \  for i = 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n\
    \  end\n  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ binA = '00000000'\n  local binB = '00000000'\n  for i = 1, #a do\n    binA =\
    \ binA .. tostring(a:byte(i)) .. '0'\n  end\n  for i = 1, #b do\n    binB = binB\
    \ .. tostring(b:byte(i)) .. '0'\n  end\n  return binA:sub(1, #binA) .. binB:sub(1,\
    \ #binB)\nend", "  local res = \"\"\n  for i = 1, #a do\n    local c = string.byte(a)\
    \ ^ string.byte(b)\n    res = string.sub(res, i - 1, i) + string.format(\"%x\"\
    , c)\n    b = string.sub(b, 1, i)\n  end\n  return res\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local xor = c ^ d\n    if xor > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local binA = '00000000'\n  local binB = '00000000'\n  local binC = '00000000'\n\
    \  local binD = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  for i = 1, #binA do\n    binC = binC .. string.format('%010b',\
    \ tonumber(binA[i]))\n  end\n  for i = 1, #binB do\n    binD = binD .. string.format('%010b',\
    \ tonumber(binB[i]))\n  end\n  return binD .. binC\nend", "  local result = \"\
    \"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i]\n    local d = b[i]\n    local carry = c\n    if d == \"1\" then\n\
    \      carry = carry ~= \"0\"\n    end\n    result = result .. carry .. d\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, 1, i)\n    local\
    \ d = string.byte(b, 1, i)\n    local xor = c ^ d\n    local carry = xor < 0 and\
    \ 1 or 0\n    local result = result .. string.format(\"%c\", xor + carry)\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local xor_result = ''\n  for i = 1, #a do\n    xor_result = xor_result\
    \ .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return xor_result\nend",
  "  local s = ''\n  for i = 1, #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return s\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local binA = '00000000'\n  local binB =\
    \ '00000000'\n  local binC = '00000000'\n  for i = 1, #a do\n    binA = binA ..\
    \ tostring(a:sub(i, i))\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:sub(i,\
    \ i))\n  end\n  for i = 1, #binA do\n    binC = binC .. tostring(binA:sub(i, i)\
    \ xor binB:sub(i, i))\n  end\n  return binC\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a,\
    \ i)\n    local d = string.byte(b, i)\n    local carry = c xor d\n    if carry\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local binA = '00000000'\n  local binB = '00000000'\n  for i\
    \ = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n  end\n\
    \  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n \
    \     c = tostring(c):byte(1, -1)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n     \
    \   local c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format(\"\
    %x\", c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "    local c = ''\n    for i = 1, #a do\n        local d = a[i]\n      \
    \  c = (d ~= b[i]) and c or d .. '0'\n    end\n    return c\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c\
    \ ~= d then\n      result = result .. c\n    end\n  end\n  return result\nend",
  "  local s = ''\n  for i = 1, #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local binA = '00000000'\n  local binB = '00000000'\n  for i = 1, #a do\n\
    \    binA = binA .. string.format('%010b', tonumber(a[i]))\n  end\n  for i = 1,\
    \ #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n  end\n  return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n \
    \     result = result .. c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c ^ d\n    local newcarry = carry ~= 0 and carry or 1\n\
    \    carry = newcarry > 0 and 1 or 0\n    local newcarry = string.char(carry)\n\
    \    result = result .. newcarry\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "  local xor_table = {\n    ['0'] = {\n \
    \     ['0'] = '0',\n      ['1'] = '1',\n    },\n    ['1'] = {\n      ['0'] = '1',\n\
    \      ['1'] = '0',\n    },\n  }\n  local xor = table.unpack(xor_table[tostring(a)])\n\
    \  local result = table.unpack(xor_table[tostring(b)])\n  table.insert(result,\
    \ table.unpack(xor))\n  return table.concat(result)\nend", "  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.rep('1',\
    \ #a) .. a\n  end\n  for i = 1, #b do\n    binB = binB .. string.rep('1', #b)\
    \ .. b\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local\
    \ s = ''\n  for i = 1, #a do\n    s = s .. string.format('%x', a[i] ^ b[i])\n\
    \  end\n  return s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = tostring(a[i]) ^ tostring(b[i])\n    if c > \"9\" then\n      c = \"0\"\
    \ .. c\n    end\n    result = result .. c\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local\
    \ d = string.byte(b, i)\n    local carry = c xor d\n    local newcarry = string.format(\"\
    %c\", carry)\n    if newcarry > \"9\" then\n      newcarry = newcarry + \"0\"\n\
    \    end\n    result = result .. newcarry\n  end\n  return result\nend", "   \
    \ local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n \
    \       if c > 0 then\n            c = string.format(\"%x\", c)\n        end\n\
    \        result = result .. c\n    end\n    return result\nend", "  local s =\
    \ ''\n  for i = 1, #a do\n    s = s .. string.rep(a[i], #b[i])\n  end\n  return\
    \ s\nend", "    local binA = '0b'\n    local binB = '0b'\n    for i = 1, #a do\n\
    \        binA = binA .. tostring(a[i])\n    end\n    for i = 1, #b do\n      \
    \  binB = binB .. tostring(b[i])\n    end\n    return binA:sub(1, #binA) .. binB:sub(1,\
    \ #binB)\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n\
    \    local d = b[i]\n    local tmp = (c ~= d) and \"1\" or \"0\"\n    result =\
    \ result .. tmp\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n   \
    \   result = result .. c\n    end\n  end\n  return result\nend", "  local s =\
    \ ''\n  for i = 1, #a do\n    s = s .. tostring(a[i] ^ b[i])\n  end\n  return\
    \ s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a)\
    \ ^ string.byte(b)\n    if c > 0 then\n      result = result .. string.char(c)\n\
    \    end\n    b = string.sub(b, 1, #b)\n  end\n  return result\nend", "  local\
    \ c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "    local result = \"\"\n    for i = 1, #a do\n   \
    \     local c = a[i] ^ b[i]\n        if c > 0 then\n            result = result\
    \ .. \"1\"\n        else\n            result = result .. \"0\"\n        end\n\
    \    end\n    return result\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local carry\
    \ = c xor d\n    if carry > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i] and b[i]\n    if c then\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n    local\
    \ d = tostring(b[i])\n    if c ~= d then\n      result = result .. tostring(c^d)\n\
    \    end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      result = result\
    \ .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n    end\n \
    \ end\n  return result\nend", "  local binA = '00000000'\n  local binB = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "  local s = ''\n  for i = 1, #a do\n   \
    \ local c = a[i] ^ b[i]\n    s = s .. string.format('%02.2x', c)\n  end\n  return\
    \ s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "    local binA = '00000000'\n    local binB = '00000000'\n  \
    \  for i = 1, #a do\n        binA = binA .. tostring(a:byte(i))\n    end\n   \
    \ for i = 1, #b do\n        binB = binB .. tostring(b:byte(i))\n    end\n    return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "    local result = \"\"\n \
    \   for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n \
    \           c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend", "  local result = \"\"\n  for i = 1,\
    \ #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result ..\
    \ \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local binA = '00000000'\n  local binB = '00000000'\n  local binC = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. tostring(a:sub(i, i))\n  end\n  for i\
    \ = 1, #b do\n    binB = binB .. tostring(b:sub(i, i))\n  end\n  for i = 1, #binA\
    \ do\n    binC = binC .. tostring(binA:sub(i, i) xor binB:sub(i, i))\n  end\n\
    \  return binC:sub(1, #binC)\nend", "    local result = \"\"\n    for i = 1, #a\
    \ do\n        local c = string.byte(a, i)\n        local d = string.byte(b, i)\n\
    \        if c ~= d then\n            local t = c ^ d\n            local s = string.char(t,\
    \ t)\n            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "  local res = \"\"\n  for i = 1, #a do\n    local carry = a[i] xor b[i]\n\
    \    if carry > 0 then\n      res = res .. \"1\"\n    else\n      res = res ..\
    \ \"0\"\n    end\n  end\n  return res\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local binA = '00000000'\n  local binB = '00000000'\n  for i\
    \ = 1, #a do\n    binA = binA .. tostring(a:byte(i)) .. '0'\n  end\n  for i =\
    \ 1, #b do\n    binB = binB .. tostring(b:byte(i)) .. '0'\n  end\n  return binA:sub(1,\
    \ #binA) .. binB:sub(1, #binB)\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            result\
    \ = result .. \"1\"\n        else\n            result = result .. \"0\"\n    \
    \    end\n    end\n    return result\nend", "    local result = \"\"\n    for\
    \ i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n       \
    \     c = string.format(\"%x\", c)\n        end\n        result = result .. c\n\
    \    end\n    return result\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local carry\
    \ = c xor d\n    local newchar = string.byte(result, i)\n    if carry > 0 then\n\
    \      newchar = string.char(newchar + 1, carry)\n    else\n      newchar = string.char(newchar\
    \ + 1, 0)\n    end\n    table.insert(result, newchar)\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local binA = '00000000'\n\
    \  local binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\
    \ .. '0'\n  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i)) ..\
    \ '0'\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local\
    \ binA = '00000000'\n  local binB = '00000000'\n  for i = 1, #a do\n    binA =\
    \ binA .. string.format('%010b', tonumber(a[i]))\n  end\n  for i = 1, #b do\n\
    \    binB = binB .. string.format('%010b', tonumber(b[i]))\n  end\n  return binA:sub(1,\
    \ #binA) .. binB:sub(1, #binB)\nend", "  local s = ''\n  for i = 1, #a do\n  \
    \  s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return s\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n\
    \    if c ~= d then\n      result = result .. c\n    end\n  end\n  return result\n\
    end", "  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binK = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binL = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binM = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binN = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binO = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binP = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binQ = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binR = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binS = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binT = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binU = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binK = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binL = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binM = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binN = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binO = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binP = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binQ = '00000000000000000000000000000000000000000000000000000000", " \
    \   local binA = \"\"\n    local binB = \"\"\n    for i = 1, #a do\n        binA\
    \ = binA .. tostring(a:byte(i))\n    end\n    for i = 1, #b do\n        binB =\
    \ binB .. tostring(b:byte(i))\n    end\n    return binA:byte(#binA) .. binB:byte(#binB)\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n\
    \    local d = tostring(b[i])\n    if c ~= d then\n      result = result .. tostring(c)\
    \ .. tostring(d)\n    end\n  end\n  return result\nend", "    local res = \"\"\
    \n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            res = res .. \"1\"\n        else\n            res = res .. \"0\"\n\
    \        end\n    end\n    return res\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n    if\
    \ c ~= d then\n      result = result .. tostring(c) .. tostring(d)\n    end\n\
    \  end\n  return result\nend", "  local c = ''\n  for i = 1, #a do\n    local\
    \ x = tonumber(a[i])\n    local y = tonumber(b[i])\n    if x == y and x ~= 0 then\n\
    \      c = c .. x\n    else\n      c = c .. '0'\n    end\n  end\n  return c\n\
    end", "  local binA = '00000000'\n  local binB = '00000000'\n  for i = 1, #a do\n\
    \    binA = binA .. string.format('%010b', tonumber(a[i]))\n  end\n  for i = 1,\
    \ #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n  end\n  return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local s = ''\n  for i = 1,\
    \ #a do\n    s = s .. tostring(a[i] ^ b[i])\n  end\n  return s\nend", "  local\
    \ res = a\n  for i = 1, #b do\n    res = res .. tostring(b:sub(i, i)) .. tostring(a:sub(i,\
    \ i))\n  end\n  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = tostring(a[i])\n    local d = tostring(b[i])\n    if c ~= d then\n\
    \      result = result .. tostring(c) .. tostring(d)\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n\
    \    if c ~= d then\n      result = result .. tostring(c) .. tostring(d)\n   \
    \ end\n  end\n  return result\nend", "  local result = ''\n  for i = 1, #a do\n\
    \    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local t\
    \ = c ^ d\n    if t > 0 then\n      result = result .. string.char(t)\n    else\n\
    \      result = result .. '0'\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "    local s = ''\n    for i = 1, #a do\n\
    \        s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n    end\n    return\
    \ s\nend", "  local x = 0\n  for i = 1, #a do\n    x = x + (a[i] == '1' and b[i]\
    \ == '1' and 1 or 0)\n  end\n  return tostring(x)\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local carry\
    \ = c\n    if d == \"1\" then\n      carry = carry ~= \"0\"\n    end\n    result\
    \ = result .. carry .. d\n  end\n  return result\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for i = 1, #a do\n        result[i] = a[i] xor b[i]\n    end\n\
    \    return table.concat(result)\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local res = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n   \
    \ if c > 0 then\n      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n\
    \    end\n  end\n  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    elseif c < 0 then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000001001'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000001101'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000001110'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000100011'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000100110'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binQ = '000000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local binR = '000000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local binS = '000000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local binT = '000000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local binU = '000000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local bin0 = '00000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local bin1 = '00000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local bin2 = '00000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local bin3 = '00000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local bin4 = '00000000000000000000000000000000000000000000000000000000001001111'\n\
    \  local bin5 = '00000000000000000000000000000000000000000000000000000000001010000'\n\
    \  local bin6 = '00000000000000000000000000000000000000000000000000000000001010001'\n\
    \  local bin7 = '00000000000000000000000000000000000000000000000000000000001010100'\n\
    \  local bin8 = '00000000000000000000000000000000000000000000000000000000001010101'\n\
    \  local bin9 = '00000000000000000000000000000000000000000000000000000000001010111'\n\
    \  local binA = '00000000000000000000000000000000000000000000000000000000001011000'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000001011001'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000001011010'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000001011011",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ c = a[i] ^ b[i]\n        if c > 0 then\n            result = result .. \"1\"\
    \n        else\n            result = result .. \"0\"\n        end\n    end\n \
    \   return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = ''\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > '9' then\n\
    \      c = '0' .. c\n    end\n    result = result .. c\n  end\n  return result\n\
    end", "  local c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^\
    \ tostring(b:byte(i))\n  end\n  return c\nend", "  local c = ''\n  for i = 1,\
    \ #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\nend", " \
    \ local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local c = ''\n  for i = 1, #a do\n    local d = a[i]\n    c\
    \ = (d ~= b[i]) and c or d .. '0'\n  end\n  return c\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n   \
    \   result = result .. \"1\"\n    elseif c < 1 then\n      result = result ..\
    \ \"0\"\n    else\n      result = result .. c\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n   \
    \   result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] and b[i]\n    if\
    \ c then\n      result = result .. c\n    end\n  end\n  return result\nend", " \
    \ local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a:sub(i, i))\n\
    \    local d = tostring(b:sub(i, i))\n    local e = (c:byte() ^ d:byte()):byte()\n\
    \    local f = tostring(e)\n    if f == \"0\" then\n      result = result .. \"\
    0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n  end\n\
    \  return c\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
