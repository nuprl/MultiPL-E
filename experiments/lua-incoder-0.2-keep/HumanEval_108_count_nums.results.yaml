language: lua
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    if v % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05_g0u9.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb05_g0u9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n > 0 then\n \
    \     break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw6lehvo.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpnw6lehvo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here\n  local count = 0\n  for i = 1, #arr do\n    local num\
    \ = arr[i]\n    if num < 0 then\n      num = -num\n    end\n    count = count\
    \ + math.floor(math.log(abs(num), 10))\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp962ot2x3.lua:16:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp962ot2x3.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp962ot2x3.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr do\n   \
    \   sum = sum + arr[j] % 10\n      arr[j] = arr[j] / 10\n    end\n    if sum >\
    \ 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ovzkbsd.lua:27:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp2ovzkbsd.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + 1\n      n = math.abs(n)\n      for j = 1, n do\n      \
    \  if arr[i] % 10 + j > 0 then\n          count = count + 1\n        end\n   \
    \   end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8ofj_u_.lua:30:\
    \ expected: 6, actual: 22\nstack traceback:\n\t/tmp/tmpl8ofj_u_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n >= 0 then\n\
    \      break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugbjm4a3.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpugbjm4a3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + 1\n      n = math.abs(n)\n      while n > 0 do\n       \
    \ count = count + 1\n        n = math.floor(n/10)\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnwk55k8.lua:29:\
    \ expected: 6, actual: 12\nstack traceback:\n\t/tmp/tmpjnwk55k8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then break\
    \ end\n    if s < 0 then\n      s = -s - 1\n    end\n    n = n + s\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjqnjuv8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwjqnjuv8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm0ypjic.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbm0ypjic.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here\n  local n = 0\n  for i = 1, #arr do\n    local sum = 0\n\
    \    for j = 1, #arr[i] do\n      sum = sum + arr[i][j]\n    end\n    if sum >\
    \ 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1khc5968.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp1khc5968.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1khc5968.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n\
    \      num = -num\n    end\n    count = count + math.floor(math.log(math.abs(num),\
    \ 10)) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdd6lrwo.lua:24:\
    \ expected: 0, actual: -#Inf\nstack traceback:\n\t/tmp/tmpfdd6lrwo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0sempu0.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpd0sempu0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + math.floor(math.log10(n))\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62117eua.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp62117eua.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here\n  local n = 0\n  for i = 1, #arr do\n    local sum = 0\n\
    \    for j = 1, #arr[i] do\n      sum = sum + arr[i][j]\n    end\n    if sum >\
    \ 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1khc5968.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp1khc5968.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1khc5968.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + math.floor((d % 10) + 1)\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rl4xl2_.lua:23:\
    \ expected: 0, actual: 20\nstack traceback:\n\t/tmp/tmp2rl4xl2_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + count_nums(math.abs(n)) -- count the digits of n\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxpkgyg7.lua:10:\
    \ attempt to get length of a number value (local 'arr')\nstack traceback:\n\t\
    /tmp/tmptxpkgyg7.lua:10: in upvalue 'count_nums'\n\t/tmp/tmptxpkgyg7.lua:13: in\
    \ local 'candidate'\n\t/tmp/tmptxpkgyg7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here.\n  local count = 0\n  for i = 1, #arr do\n    local sum\
    \ = 0\n    for j = 1, #arr[i] do\n      sum = sum + arr[i][j]\n    end\n    if\
    \ sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0fb4l7uv.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp0fb4l7uv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0fb4l7uv.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then\n    \
    \  n = n + 1\n    elseif s < 0 then\n      n = n + count_nums(math.abs(s)) * math.pow(10,\
    \ math.abs(s))\n    else\n      n = n + s\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzfo951mc.lua:10:\
    \ attempt to get length of a number value (local 'arr')\nstack traceback:\n\t\
    /tmp/tmpzfo951mc.lua:10: in upvalue 'count_nums'\n\t/tmp/tmpzfo951mc.lua:15: in\
    \ local 'candidate'\n\t/tmp/tmpzfo951mc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digits = arr:sub(i, i):gsub(\"%d+\",\
    \ \"\")\n    if digits then\n      n = n + tonumber(digits)\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3xqvkq2.lua:11:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpu3xqvkq2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpu3xqvkq2.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if\
    \ digit > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n_2bn5f.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp_n_2bn5f.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n      v = v - math.floor(v)\n      if v > 0 then\n        n = n +\
    \ v\n      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaesxz5wj.lua:31:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpaesxz5wj.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + 1\n      v = v - v % 10\n    end\n    if v > 0 then\n      n = n +\
    \ v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3shrsod.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpd3shrsod.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_num(arr[i])\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq81570l4.lua:11:\
    \ attempt to call a nil value (global 'count_num')\nstack traceback:\n\t/tmp/tmpq81570l4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq81570l4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then\n    \
    \  n = n + 1\n    elseif s < 0 then\n      n = n + count_nums(math.abs(s)) * (math.floor(math.log10(abs(s)))\
    \ + 1)\n    else\n      n = n + count_nums(math.abs(s)) * (math.floor(math.log10(abs(s)))\
    \ + 1)\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb3d9f34p.lua:10:\
    \ attempt to get length of a number value (local 'arr')\nstack traceback:\n\t\
    /tmp/tmpb3d9f34p.lua:10: in upvalue 'count_nums'\n\t/tmp/tmpb3d9f34p.lua:15: in\
    \ local 'candidate'\n\t/tmp/tmpb3d9f34p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = math.abs(arr[i])\n    if d > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv32qtom.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmplv32qtom.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n    count = count + math.floor(n/10)\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nl24dq_.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp8nl24dq_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + math.floor((math.abs(d) + 9) / 10) * 10\n    end\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4y_rubs.lua:23:\
    \ expected: 0, actual: 20\nstack traceback:\n\t/tmp/tmpp4y_rubs.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    v = v % 10\n    if v > 0 then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rlv5u88.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0rlv5u88.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n >= 0 then\n\
    \      break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugbjm4a3.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpugbjm4a3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe90nndi.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmppe90nndi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.floor(arr[i]/10)\n    if\
    \ digit > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuorrnryi.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpuorrnryi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then break\
    \ end\n    local digits = math.floor(math.abs(s))\n    if digits > 0 then\n  \
    \    n = n + digits\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx92d2xmv.lua:25:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpx92d2xmv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + (arr[i] > 0 and arr[i] % 10 or\
    \ 0)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e6lfx5u.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1e6lfx5u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    if n > 0 then\n\
    \      count = count + math.floor((math.log(n) / math.log(10)) + 1)\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwllsgpja.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwllsgpja.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + 1\n      if d > 0 then\n        local s = math.abs(d)\n       \
    \ if s % 10 == 0 then\n          n = n + 1\n        end\n      end\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskmk4c7i.lua:29:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpskmk4c7i.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here.\n  local n = 0\n  for i = 1, #arr do\n    local sum =\
    \ 0\n    for j = 1, #arr[i] do\n      sum = sum + arr[i][j]\n    end\n    if sum\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5c9u_e9.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmpn5c9u_e9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpn5c9u_e9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s < 0 then\n     \
    \ s = -s - 1\n    end\n    if s % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1j2axsk.lua:26:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpy1j2axsk.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n      v = v - math.floor(v)\n      if v > 0 then\n        n = n +\
    \ 1\n      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawo90dxo.lua:31:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpawo90dxo.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      arr[i] = n\n    end\n    count = count + math.floor(n/10)\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizawi201.lua:26:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpizawi201.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n < 0 then\n \
    \     n = -n\n    end\n    count = count + math.floor((math.abs(n) + 1) / (10\
    \ + math.abs(n)))\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dcvpq4k.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp3dcvpq4k.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + (arr[i] > 0 and arr[i] % 10 or\
    \ 0)\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e6lfx5u.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1e6lfx5u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + math.floor(math.log10(n)) + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwfj6hjv.lua:26:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpwwfj6hjv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe90nndi.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmppe90nndi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local num = tonumber(arr[i])\n    if num ==\
    \ nil then\n      n = n + 1\n    elseif num < 0 then\n      n = n + num % 10\n\
    \    else\n      n = n + num\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd7tyq20.lua:27:\
    \ expected: 0, actual: 17\nstack traceback:\n\t/tmp/tmpkd7tyq20.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + (arr[i]%10)\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusbbva39.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpusbbva39.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    count = count +\
    \ math.floor((math.log(n) / math.log(10)) + 1)\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpp9dxm1.lua:25:\
    \ expected: 0, actual: #NaN\nstack traceback:\n\t/tmp/tmprpp9dxm1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + d\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1ky5ady.lua:23:\
    \ expected: 0, actual: -3\nstack traceback:\n\t/tmp/tmpm1ky5ady.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here\n  local n = 0\n  for i = 1, #arr do\n    local sum = 0\n\
    \    for j = 1, #arr[i] do\n      sum = sum + arr[i][j]\n    end\n    if sum >\
    \ 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1khc5968.lua:13:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp1khc5968.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1khc5968.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - (n % 10)\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cwzb99b.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1cwzb99b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0sempu0.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpd0sempu0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    local digits = math.floor(math.abs(v))\n    if digits >\
    \ 0 then\n      n = n + digits\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpib1fiu3r.lua:27:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpib1fiu3r.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + math.floor(math.abs(n))\n    else\n      count = count\
    \ + math.floor(math.abs(n) * math.pow(10, -math.abs(n)))\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdla06yp.lua:26:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpqdla06yp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    count = count +\
    \ math.floor((math.floor(n/10) + math.floor(n%10)) / 2)\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8ibhx_9.lua:25:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmpi8ibhx_9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkstn7qqj.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkstn7qqj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    if v % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05_g0u9.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb05_g0u9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n > 0 then\n \
    \     break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw6lehvo.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpnw6lehvo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - (n % 10)\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cwzb99b.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1cwzb99b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + math.floor((d / 10) + 1)\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fuqz1yb.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2fuqz1yb.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit < 0 then\n\
    \      digit = digit + 10\n    end\n    n = n + digit / 10\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe921yqvf.lua:24:\
    \ expected: 0, actual: 1.7\nstack traceback:\n\t/tmp/tmpe921yqvf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe90nndi.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmppe90nndi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm0ypjic.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbm0ypjic.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then break\
    \ end\n    if s < 0 then\n      s = -s - 1\n    end\n    n = n + s\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjqnjuv8.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwjqnjuv8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe90nndi.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmppe90nndi.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    if n > 0 then\n\
    \      count = count + math.floor((math.log(n) / math.log(10)) + 1)\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwllsgpja.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwllsgpja.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, #arr[i] do\n\
    \      sum = sum + arr[i][j]\n    end\n    if sum > 0 then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45d37ykw.lua:12:\
    \ attempt to get length of a number value (field '?')\nstack traceback:\n\t/tmp/tmp45d37ykw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp45d37ykw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n\
    \      num = -num\n    end\n    count = count + math.floor(math.log(abs(num),\
    \ 10)) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp736okmry.lua:15:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmp736okmry.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp736okmry.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0 then\n \
    \     n = n + 1\n      local digits = math.floor(math.log(num, 10))\n      local\
    \ digit = math.floor(num / math.pow(10, digits))\n      if digit > 0 then\n  \
    \      n = n + digit\n      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xxx921x.lua:29:\
    \ expected: 6, actual: 22\nstack traceback:\n\t/tmp/tmp9xxx921x.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm0ypjic.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbm0ypjic.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + (arr[i] > 0 and arr[i] or -arr[i])\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuapdnfw.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbuapdnfw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit < 0 then\n\
    \      digit = digit + 10\n    end\n    n = n + digit / 10\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe921yqvf.lua:24:\
    \ expected: 0, actual: 1.7\nstack traceback:\n\t/tmp/tmpe921yqvf.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digits = arr:sub(i, i)\n    if digits\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmw0wprfx.lua:11:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpmw0wprfx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmw0wprfx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n > 0 then\n \
    \     break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw6lehvo.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpnw6lehvo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + 1\n      v = v - v % 10\n    end\n    if v > 0 then\n      n = n +\
    \ v\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3shrsod.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpd3shrsod.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n > 0 then\n \
    \     break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw6lehvo.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpnw6lehvo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + math.floor(math.log10(n))\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62117eua.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp62117eua.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  --\
    \ Write your code here.\n  local n = 0\n  for i = 1, #arr do\n    local sum =\
    \ 0\n    for j = 1, #arr do\n      sum = sum + arr[j]\n      if sum > 0 then\n\
    \        break\n      end\n    end\n    if sum > 0 then\n      n = n + 1\n   \
    \ end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_66t_go4.lua:31:\
    \ expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmp_66t_go4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    local digits = math.floor(n/10)\n\
    \    n = n % 10\n    if n > 0 then\n      count = count + digits\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppekiwjyf.lua:29:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmppekiwjyf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n >= 0 then\n\
    \      break\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugbjm4a3.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpugbjm4a3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n >= 0 then\n\
    \      count = count + 1\n      n = math.abs(n)\n    end\n    count = count +\
    \ math.floor((math.floor(n/10) + math.floor(n/100) + math.floor(n/1000))/3)\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ok5ez9u.lua:25:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmp9ok5ez9u.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = tonumber(arr[i])\n    if n then\n\
    \      count = count + 1\n      n = math.abs(n)\n      if n > 0 then\n       \
    \ count = count + math.floor((math.log(n) / math.log(10)) + 1)\n      end\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv31tytzv.lua:27:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpv31tytzv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    v = v % 10\n    if v > 0 then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rlv5u88.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0rlv5u88.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n\
    \      num = -num\n    end\n    count = count + math.floor(math.log(math.abs(num),\
    \ 10)) + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdd6lrwo.lua:24:\
    \ expected: 0, actual: -#Inf\nstack traceback:\n\t/tmp/tmpfdd6lrwo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjuokrew.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpxjuokrew.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    v = v % 10\n    if v > 0 then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rlv5u88.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0rlv5u88.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n \
    \     count = count + math.floor(math.log10(n))\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62117eua.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp62117eua.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - (n % 10)\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cwzb99b.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp1cwzb99b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_6aymwx.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpi_6aymwx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v > 0 then\n     \
    \ n = n + 1\n      v = v - v % 10\n      if v > 0 then\n        n = n + 1\n  \
    \    end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwt86ioo.lua:30:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmptwt86ioo.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_digits(arr[i])\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk0_fgfg_.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpk0_fgfg_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpk0_fgfg_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.floor(math.abs(arr[i]) /\
    \ 10)\n    if digit > 0 then\n      n = n + digit\n    end\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xl8uo0k.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5xl8uo0k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s == 0 then\n    \
    \  n = n + 1\n    elseif s < 0 then\n      n = n + count_nums(math.abs(s)) * (math.abs(s)\
    \ - math.pow(10, math.floor(math.log10(math.abs(s)))))\n    else\n      n = n\
    \ + s\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir4y34hv.lua:10:\
    \ attempt to get length of a number value (local 'arr')\nstack traceback:\n\t\
    /tmp/tmpir4y34hv.lua:10: in upvalue 'count_nums'\n\t/tmp/tmpir4y34hv.lua:15: in\
    \ local 'candidate'\n\t/tmp/tmpir4y34hv.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + 1\n      v = v - v % 10\n    end\n    if v > 0 then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxetjhcrv.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxetjhcrv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local s = arr[i]\n    if s ~= 0 then\n    \
    \  n = n + 1\n      while s > 0 do\n        s = s - 1\n        n = n + 1\n   \
    \   end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms00o_a7.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpms00o_a7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    if v % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05_g0u9.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb05_g0u9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    if v % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05_g0u9.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb05_g0u9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    count = count + count_num(arr[i])\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq81570l4.lua:11:\
    \ attempt to call a nil value (global 'count_num')\nstack traceback:\n\t/tmp/tmpq81570l4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpq81570l4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + d * (d > 0 and d or -d) % 10\n    end\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpat7ryt11.lua:23:\
    \ expected: 0, actual: 15\nstack traceback:\n\t/tmp/tmpat7ryt11.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + math.floor((d % 10) + 1)\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rl4xl2_.lua:23:\
    \ expected: 0, actual: 20\nstack traceback:\n\t/tmp/tmp2rl4xl2_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n     \
    \ v = -v\n    end\n    if v % 10 == 0 then\n      n = n + 1\n    end\n  end\n\
    \  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb05_g0u9.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb05_g0u9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n - arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm0ypjic.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpbm0ypjic.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + math.abs(arr[i])\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapty3emy.lua:21:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpapty3emy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n      n = n + arr[i]\n    end\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv8u7oh2.lua:25:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmprv8u7oh2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + digit\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjteht8eh.lua:24:\
    \ expected: 6, actual: 16\nstack traceback:\n\t/tmp/tmpjteht8eh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v >= 0 then\n    \
    \  n = n + 1\n      v = v - v % 10\n    end\n    if v > 0 then\n      n = n +\
    \ 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxetjhcrv.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxetjhcrv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local d = tonumber(arr[i])\n    if d then\n\
    \      n = n + d\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1ky5ady.lua:23:\
    \ expected: 0, actual: -3\nstack traceback:\n\t/tmp/tmpm1ky5ady.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local n = n + arr[i]\n    if n < 0 then\n \
    \     n = n * -1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflpriybt.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpflpriybt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + arr[i]\n      if sum > 0 then\n        n = n + 1\n        break\n\
    \      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1iepgpm.lua:31:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpp1iepgpm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798492
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = math.abs(arr[i])\n    if digit\
    \ > 0 then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthzkyf93.lua:23:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpthzkyf93.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes an array of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums([]) == 0\n-- >>> count_nums([-1, 11, -11])\
    \ == 1\n-- >>> count_nums([1, 1, 2]) == 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for i = 1, #arr do\n    local digit = arr[i]\n    if digit > 0 then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxcoe5fp.lua:27:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpqxcoe5fp.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
