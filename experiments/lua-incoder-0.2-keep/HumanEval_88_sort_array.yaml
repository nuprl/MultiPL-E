name: HumanEval_88_sort_array
language: lua
prompt: "-- Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n-- you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given array.\n-- Examples:\n-- * sort_array([]) => []\n-- * sort_array([5])\
  \ => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n-- * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: []
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
