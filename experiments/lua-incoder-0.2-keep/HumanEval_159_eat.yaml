name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return an array of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
  \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
  -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
  \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of remaining\
  \ carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n-- * 0 <=\
  \ need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function eat(number,\
  \ need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: []
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
