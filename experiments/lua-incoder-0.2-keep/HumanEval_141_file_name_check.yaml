name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"example.txt\"\
  ) # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ > 3 then\n      return nil\n   end\n   if #file_name < 1 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1,\
    \ 1)) then\n      return nil\n   end\n   if #string.gmatch(file_name, \"[^.]\"\
    ) ~= 1 then\n      return nil\n   end\n   return 'Yes'\nend", "  -- Check that\
    \ the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n          return \"No\"\n        else\n          -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ \".\") ~= nil then\n            if string.find(file_name, \".\") ~= nil then\n\
    \              if string.find(file_name, \".\") ~= nil then\n                if\
    \ string.find(file_name, \".\") ~= nil then\n                  if string.find(file_name,\
    \ \".\") ~= nil then\n                    if string.find(file_name, \".\") ~=\
    \ nil then\n                      if string.find(file_name, \".\") ~= nil then\n\
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                    return \"Yes\"\n                        else\n          \
    \                return \"No\"\n                        end\n                \
    \      else\n                        return \"No\"\n                      end\n\
    \                    else\n                      return \"No\"\n             \
    \       end\n                  else\n                    return \"No\"\n     \
    \             end\n                else\n                  return \"No\"\n   \
    \             end\n              else\n                return \"No\"\n       \
    \       end\n            else\n              return \"No\"\n            end\n\
    \          else\n            return \"No\"\n          end\n        end\n     \
    \ else\n        return \"No\"\n      end\n    else\n      return \"No\"\n    end\n\
    \  else\n    return \"No\"\n  end\nend", "  -- Remove all non-alphanumeric characters\
    \ from the file name.\n  file_name = string.gsub(file_name, \"[^A-Za-z0-9]\",\
    \ \"\")\n  -- If the file name contains more than three digits, return 'No'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"No\"\n  end\n  --\
    \ If the file name contains less than three digits, return 'Yes'.\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \".\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'),\
    \ return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n    return \"\
    Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), return 'Yes'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"Yes\"\n  end\n \
    \ -- If the file name does not contain any dot ('.'), return 'Yes'.\n  if string.find(file_name,\
    \ \"%\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'),\
    \ return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n    return \"\
    Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), return 'Yes'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"Yes\"\n  end\n \
    \ -- If the file name does not contain any dot ('.'), return 'Yes'.\n  if string.find(file_name,\
    \ \"%\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), ",
  "   if file_name == nil then\n      return nil\n   end", "  local file_name = file_name:lower()\n\
    \  local file_name = string.gsub(file_name, \" \", \"\")\n  local file_name =\
    \ string.gsub(file_name, \":\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n", "    local num_digits = string.len(file_name)\n    local dot_index\
    \ = string.find(file_name, \".\")\n    local dot_substr = string.sub(file_name,\
    \ dot_index + 1, -1)\n    local dot_substr_length = string.len(dot_substr)\n \
    \   local dot_substr_start_letter = string.sub(dot_substr, 1, 1)\n    local dot_substr_end_letter\
    \ = string.sub(dot_substr, dot_substr_length + 1, -1)\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"..\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      if\
    \ string.find(file_name, \".\") then\n         return nil\n      end\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"/\") then\n      return nil\n   end\n   if string.find(file_name, \"\\\\\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \":\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"|\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"|\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return ",
  "    local file_name = file_name:lower()\n    local file_name = file_name:gsub(\"\
    [^0-9a-z.]\", \"\")\n    local file_name = file_name:gsub(\"^.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[a-z][a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z", "    local file_name =\
    \ file_name:lower()\n    local file_ext = file_name:sub(1,4)\n    local file_ext\
    \ = file_ext:sub(1,3)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)", "   if string.find(file_name, \".\") ~= nil then\n   \
    \   if string.find(file_name, \".\") ~= 1 then\n         return 'No'\n      else\n\
    \         if string.find(file_name, \" \") ~= nil then\n            return 'No'\n\
    \         else\n            if string.find(file_name, \" \") ~= 1 then\n     \
    \          return 'No'\n            else\n               if string.find(file_name,\
    \ \" \") ~= 1 then\n                  return 'No'\n               else\n     \
    \             if string.find(file_name, \" \") ~= 1 then\n                   \
    \  return 'No'\n                  else\n                     if string.find(file_name,\
    \ \" \") ~= 1 then\n                        return 'No'\n                    \
    \ else\n                        if string.find(file_name, \" \") ~= 1 then\n \
    \                          return 'No'\n                        else\n       \
    \                    if string.find(file_name, \" \") ~= 1 then\n            \
    \                  return 'No'\n                           else\n            \
    \                  if string.find(file_name, \" \") ~= 1 then\n              \
    \                   return 'No'\n                              else\n        \
    \                         if string.find(file_name, \" \") ~= 1 then\n       \
    \                             return 'No'\n                                 else\n\
    \                                    if string.find(file_name, \" \") ~= 1 then\n\
    \                                        return 'No'\n                       \
    \             else\n                                        return 'Yes'\n   \
    \                                 end\n                                 end\n\
    \                              end\n                           end\n         \
    \               end\n                     end\n                  end\n       \
    \        end\n            end\n         end\n      end\n   else\n      return\
    \ 'No'\n   end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, string.sub(file_name,1,1)) == nil\
    \ then\n        -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\")+2)) ~= nil then\n          return \"Yes\"\
    \n        else\n          return \"No\"\n        end\n      else\n        return\
    \ \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n    return\
    \ \"No\"\n  end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if string.find(file_name, \".\") ~= nil then\n    -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1) ~= \"\" then\n     \
    \ -- Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \      if string.find(file_name, \"exe\") ~= nil then\n        return true\n \
    \     elseif string.find(file_name, \"dll\") ~= nil then\n        return true\n\
    \      elseif string.find(file_name, \"txt\") ~= nil then\n        return true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  else\n    return false\n  end\nend", "  local file_name = file_name\n\
    \  local file_name = string.gsub(file_name, \"[^0-9.]\", \"\")\n  local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" ", "  local file_name = file_name:lower()\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"..\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"^\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"$\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[%\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%^\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%$\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%*\") then\n      return nil\n   end\n   if string.find(file_name, \"%?\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%<\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%=\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%+\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%-\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%:\") then\n      return nil\n   end\n   if string.find(file_name, \"%!\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%~\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%$\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%&\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%|\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%?\") then\n      return nil\n   end\n   if string.find(file_name, \"%<\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%=\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%+\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%-\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%/\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%:\") then\n      return ", "   if file_name ==\
    \ nil then\n      return nil\n   end\n   \n   local file_name = file_name:lower()\n\
    \   \n   if #file_name > 3 then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return nil\n   end\n   \n   if file_name:sub(2, 2)\
    \ ~= '.' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= string.upper(string.sub(file_name,\
    \ 1, 1)) then\n      return nil\n   end\n   \n   if string.sub(file_name, 2, 3)\
    \ ~= '.txt' then\n      return nil\n   end\n   \n   if string.sub(file_name, 2,\
    \ 3) ~= '.exe' then\n      return nil\n   end\n   \n   if string.sub(file_name,\
    \ 2, 3) ~= '.dll' then\n      return nil\n   end\n   \n   return 'Yes'\nend",
  "   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 1) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 2) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 3) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 4) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 5) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 6) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 7) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 8) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 9) ~= 1\
    \ then\n      return nil\n   end\n   return true\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name == nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   -- Check that the substring before the dot is not empty\n   if string.find(file_name,\
    \ \".\", 1, 1) then\n      return nil\n   end\n   -- Check that the substring\
    \ before the dot starts with a latin alphapet letter\n   if string.find(file_name,\
    \ \".\", 1, 1) then\n      local first_char = string.sub(file_name,1,1)\n    \
    \  if not string.find(string.char(string.byte(first_char)), string.char(\"a\"\
    ), string.byte(\"z\")) then\n         return nil\n      end\n   end\n   -- Check\
    \ that the substring after the dot is one of these\n   if string.find(file_name,\
    \ \".\", 1, 2) then\n      local last_char = string.sub(file_name,string.find(file_name,\
    \ \".\", 1, 2)-1)\n      if string.find(last_char, \"exe\") then\n         return\
    \ \"Yes\"\n      elseif string.find(last_char, \"dll\") then\n         return\
    \ \"Yes\"\n      else\n         return nil\n      end\n   else\n      return nil\n\
    \   end\nend", "    local file_name = file_name:lower()\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ first_letter = string.sub(file_name,1,1)\n    local valid_letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local valid_letters_length = #valid_letters\n    if first_letter ~= nil\
    \ and first_letter ~= \"\" then\n        if first_letter ~= string.sub(valid_letters,1,1)\
    \ then\n            return false\n        end\n    end\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ extension = string.sub(file_name,dot_index+1)\n    local valid_extensions =\
    \ \"txt,exe,dll\"\n    local valid_extensions_length = #valid_extensions\n   \
    \ if extension ~= nil and extension ~= \"\" then\n        if extension ~= string.sub(valid_extensions,1,valid_extensions_length)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "   if string.find(file_name, \".\") ~= nil then\n      local file_ext = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n      if string.find(file_ext, \".\") ~=\
    \ nil then\n         if string.find(file_ext, \".\") ~= nil then\n           \
    \ local file_ext = string.sub(file_name, string.find(file_name, \".\") + 1)\n\
    \            if string.find(file_ext, \".\") ~= nil then\n               if string.find(file_ext,\
    \ \".\") ~= nil then\n                  local file_ext = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n                  if string.find(file_ext,\
    \ \".\") ~= nil then\n                     return 'No'\n                  else\n\
    \                     return 'Yes'\n                  end\n               else\n\
    \                  return 'Yes'\n               end\n            else\n      \
    \         return 'Yes'\n            end\n         else\n            return 'Yes'\n\
    \         end\n      else\n         return 'Yes'\n      end\n   else\n      return\
    \ 'Yes'\n   end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
