name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- file_name_check(\"example.txt\"\
  ) # => 'Yes'\n-- file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ > 3 then\n      return nil\n   end\n   if #file_name < 1 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1,\
    \ 1)) then\n      return nil\n   end\n   if #string.gmatch(file_name, \"[^.]\"\
    ) ~= 1 then\n      return nil\n   end\n   return 'Yes'\nend", "  -- Check that\
    \ the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n          return \"No\"\n        else\n          -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ \".\") ~= nil then\n            if string.find(file_name, \".\") ~= nil then\n\
    \              if string.find(file_name, \".\") ~= nil then\n                if\
    \ string.find(file_name, \".\") ~= nil then\n                  if string.find(file_name,\
    \ \".\") ~= nil then\n                    if string.find(file_name, \".\") ~=\
    \ nil then\n                      if string.find(file_name, \".\") ~= nil then\n\
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                    return \"Yes\"\n                        else\n          \
    \                return \"No\"\n                        end\n                \
    \      else\n                        return \"No\"\n                      end\n\
    \                    else\n                      return \"No\"\n             \
    \       end\n                  else\n                    return \"No\"\n     \
    \             end\n                else\n                  return \"No\"\n   \
    \             end\n              else\n                return \"No\"\n       \
    \       end\n            else\n              return \"No\"\n            end\n\
    \          else\n            return \"No\"\n          end\n        end\n     \
    \ else\n        return \"No\"\n      end\n    else\n      return \"No\"\n    end\n\
    \  else\n    return \"No\"\n  end\nend", "  -- Remove all non-alphanumeric characters\
    \ from the file name.\n  file_name = string.gsub(file_name, \"[^A-Za-z0-9]\",\
    \ \"\")\n  -- If the file name contains more than three digits, return 'No'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"No\"\n  end\n  --\
    \ If the file name contains less than three digits, return 'Yes'.\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \".\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'),\
    \ return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n    return \"\
    Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), return 'Yes'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"Yes\"\n  end\n \
    \ -- If the file name does not contain any dot ('.'), return 'Yes'.\n  if string.find(file_name,\
    \ \"%\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'),\
    \ return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n    return \"\
    Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), return 'Yes'.\n\
    \  if string.find(file_name, \"%\") ~= nil then\n    return \"Yes\"\n  end\n \
    \ -- If the file name does not contain any dot ('.'), return 'Yes'.\n  if string.find(file_name,\
    \ \"%\") ~= nil then\n    return \"Yes\"\n  end\n  -- If the file name does not\
    \ contain any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~=\
    \ nil then\n    return \"Yes\"\n  end\n  -- If the file name does not contain\
    \ any dot ('.'), return 'Yes'.\n  if string.find(file_name, \"%\") ~= nil then\n\
    \    return \"Yes\"\n  end\n  -- If the file name does not contain any dot ('.'), ",
  "   if file_name == nil then\n      return nil\n   end", "  local file_name = file_name:lower()\n\
    \  local file_name = string.gsub(file_name, \" \", \"\")\n  local file_name =\
    \ string.gsub(file_name, \":\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n", "    local num_digits = string.len(file_name)\n    local dot_index\
    \ = string.find(file_name, \".\")\n    local dot_substr = string.sub(file_name,\
    \ dot_index + 1, -1)\n    local dot_substr_length = string.len(dot_substr)\n \
    \   local dot_substr_start_letter = string.sub(dot_substr, 1, 1)\n    local dot_substr_end_letter\
    \ = string.sub(dot_substr, dot_substr_length + 1, -1)\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n    local dot_substr_start_letter_is_latin_letter\
    \ = string.sub(dot_substr_start_letter, 1, 1) == \"a\"\n    local dot_substr_end_letter_is_latin_letter\
    \ = string.sub(dot_substr_end_letter, 1, 1) == \"a\"\n", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"..\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      if\
    \ string.find(file_name, \".\") then\n         return nil\n      end\n   end\n\
    \   if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"/\") then\n      return nil\n   end\n   if string.find(file_name, \"\\\\\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \":\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"|\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"|\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return ",
  "    local file_name = file_name:lower()\n    local file_name = file_name:gsub(\"\
    [^0-9a-z.]\", \"\")\n    local file_name = file_name:gsub(\"^.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[a-z][a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z]\", \"\")\n\
    \    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z][a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z", "    local file_name =\
    \ file_name:lower()\n    local file_ext = file_name:sub(1,4)\n    local file_ext\
    \ = file_ext:sub(1,3)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)\n    local file_ext = file_ext:sub(1,1)\n    local file_ext\
    \ = file_ext:sub(1,1)", "   if string.find(file_name, \".\") ~= nil then\n   \
    \   if string.find(file_name, \".\") ~= 1 then\n         return 'No'\n      else\n\
    \         if string.find(file_name, \" \") ~= nil then\n            return 'No'\n\
    \         else\n            if string.find(file_name, \" \") ~= 1 then\n     \
    \          return 'No'\n            else\n               if string.find(file_name,\
    \ \" \") ~= 1 then\n                  return 'No'\n               else\n     \
    \             if string.find(file_name, \" \") ~= 1 then\n                   \
    \  return 'No'\n                  else\n                     if string.find(file_name,\
    \ \" \") ~= 1 then\n                        return 'No'\n                    \
    \ else\n                        if string.find(file_name, \" \") ~= 1 then\n \
    \                          return 'No'\n                        else\n       \
    \                    if string.find(file_name, \" \") ~= 1 then\n            \
    \                  return 'No'\n                           else\n            \
    \                  if string.find(file_name, \" \") ~= 1 then\n              \
    \                   return 'No'\n                              else\n        \
    \                         if string.find(file_name, \" \") ~= 1 then\n       \
    \                             return 'No'\n                                 else\n\
    \                                    if string.find(file_name, \" \") ~= 1 then\n\
    \                                        return 'No'\n                       \
    \             else\n                                        return 'Yes'\n   \
    \                                 end\n                                 end\n\
    \                              end\n                           end\n         \
    \               end\n                     end\n                  end\n       \
    \        end\n            end\n         end\n      end\n   else\n      return\
    \ 'No'\n   end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, string.sub(file_name,1,1)) == nil\
    \ then\n        -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\")+2)) ~= nil then\n          return \"Yes\"\
    \n        else\n          return \"No\"\n        end\n      else\n        return\
    \ \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n    return\
    \ \"No\"\n  end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if string.find(file_name, \".\") ~= nil then\n    -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1) ~= \"\" then\n     \
    \ -- Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \      if string.find(file_name, \"exe\") ~= nil then\n        return true\n \
    \     elseif string.find(file_name, \"dll\") ~= nil then\n        return true\n\
    \      elseif string.find(file_name, \"txt\") ~= nil then\n        return true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  else\n    return false\n  end\nend", "  local file_name = file_name\n\
    \  local file_name = string.gsub(file_name, \"[^0-9.]\", \"\")\n  local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" ", "  local file_name = file_name:lower()\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n  local file_name = string.gsub(file_name, \",\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"..\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"^\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"$\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[%\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%^\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%$\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%*\") then\n      return nil\n   end\n   if string.find(file_name, \"%?\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%<\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%=\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%+\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%-\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%:\") then\n      return nil\n   end\n   if string.find(file_name, \"%!\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%~\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%$\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%&\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%|\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%?\") then\n      return nil\n   end\n   if string.find(file_name, \"%<\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"%=\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"%+\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%-\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%/\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"%:\") then\n      return ", "   if file_name ==\
    \ nil then\n      return nil\n   end\n   \n   local file_name = file_name:lower()\n\
    \   \n   if #file_name > 3 then\n      return nil\n   end\n   \n   if file_name:sub(1,\
    \ 1) ~= '\\\\' then\n      return nil\n   end\n   \n   if file_name:sub(2, 2)\
    \ ~= '.' then\n      return nil\n   end\n   \n   if file_name:sub(1, 1) ~= string.upper(string.sub(file_name,\
    \ 1, 1)) then\n      return nil\n   end\n   \n   if string.sub(file_name, 2, 3)\
    \ ~= '.txt' then\n      return nil\n   end\n   \n   if string.sub(file_name, 2,\
    \ 3) ~= '.exe' then\n      return nil\n   end\n   \n   if string.sub(file_name,\
    \ 2, 3) ~= '.dll' then\n      return nil\n   end\n   \n   return 'Yes'\nend",
  "   if file_name == nil then\n      return nil\n   end\n   if #file_name < 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 1) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 2) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 3) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 4) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 5) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 6) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 7) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 8) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 9) ~= 1\
    \ then\n      return nil\n   end\n   return true\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name == nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   -- Check that the substring before the dot is not empty\n   if string.find(file_name,\
    \ \".\", 1, 1) then\n      return nil\n   end\n   -- Check that the substring\
    \ before the dot starts with a latin alphapet letter\n   if string.find(file_name,\
    \ \".\", 1, 1) then\n      local first_char = string.sub(file_name,1,1)\n    \
    \  if not string.find(string.char(string.byte(first_char)), string.char(\"a\"\
    ), string.byte(\"z\")) then\n         return nil\n      end\n   end\n   -- Check\
    \ that the substring after the dot is one of these\n   if string.find(file_name,\
    \ \".\", 1, 2) then\n      local last_char = string.sub(file_name,string.find(file_name,\
    \ \".\", 1, 2)-1)\n      if string.find(last_char, \"exe\") then\n         return\
    \ \"Yes\"\n      elseif string.find(last_char, \"dll\") then\n         return\
    \ \"Yes\"\n      else\n         return nil\n      end\n   else\n      return nil\n\
    \   end\nend", "    local file_name = file_name:lower()\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ first_letter = string.sub(file_name,1,1)\n    local valid_letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local valid_letters_length = #valid_letters\n    if first_letter ~= nil\
    \ and first_letter ~= \"\" then\n        if first_letter ~= string.sub(valid_letters,1,1)\
    \ then\n            return false\n        end\n    end\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ extension = string.sub(file_name,dot_index+1)\n    local valid_extensions =\
    \ \"txt,exe,dll\"\n    local valid_extensions_length = #valid_extensions\n   \
    \ if extension ~= nil and extension ~= \"\" then\n        if extension ~= string.sub(valid_extensions,1,valid_extensions_length)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "   if string.find(file_name, \".\") ~= nil then\n      local file_ext = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n      if string.find(file_ext, \".\") ~=\
    \ nil then\n         if string.find(file_ext, \".\") ~= nil then\n           \
    \ local file_ext = string.sub(file_name, string.find(file_name, \".\") + 1)\n\
    \            if string.find(file_ext, \".\") ~= nil then\n               if string.find(file_ext,\
    \ \".\") ~= nil then\n                  local file_ext = string.sub(file_name,\
    \ string.find(file_name, \".\") + 1)\n                  if string.find(file_ext,\
    \ \".\") ~= nil then\n                     return 'No'\n                  else\n\
    \                     return 'Yes'\n                  end\n               else\n\
    \                  return 'Yes'\n               end\n            else\n      \
    \         return 'Yes'\n            end\n         else\n            return 'Yes'\n\
    \         end\n      else\n         return 'Yes'\n      end\n   else\n      return\
    \ 'Yes'\n   end\nend", "   if string.find(file_name, \".\") ~= nil then\n    \
    \  local file_name = string.gsub(file_name, \"\", \".\")\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         if string.find(file_name, \".\") ~= nil then\n\
    \            if string.find(file_name, \".\") ~= nil then\n               if string.find(file_name,\
    \ \".\") ~= nil then\n                  if string.find(file_name, \".\") ~= nil\
    \ then\n                     return 'No'\n                  else\n           \
    \          return 'Yes'\n                  end\n               else\n        \
    \          return 'Yes'\n               end\n            else\n              \
    \ return 'Yes'\n            end\n         else\n            return 'Yes'\n   \
    \      end\n      else\n         return 'Yes'\n      end\n   else\n      return\
    \ 'Yes'\n   end\nend", "   if #file_name > 3 then\n      return \"No\"\n   elseif\
    \ #file_name == 0 then\n      return \"No\"\n   elseif file_name:sub(1, 1) ~=\
    \ \".\" then\n      return \"No\"\n   elseif file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return \"No\"\n   elseif #file_name ~= 1 then\n     \
    \ return \"No\"\n   elseif file_name:sub(2, 3) ~= \".exe\" then\n      return\
    \ \"No\"\n   elseif file_name:sub(2, 3) ~= \".dll\" then\n      return \"No\"\n\
    \   else\n      return \"Yes\"\n   end\nend", "   if #file_name > 3 then\n   \
    \   return false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z' then\n      return false\n\
    \   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n      return false\n  \
    \ end\n   if file_name:sub(2, 3) ~= 'txt' then\n      return false\n   end\n \
    \  if file_name:sub(2, 3) ~= 'exe' then\n      return false\n   end\n   if file_name:sub(2,\
    \ 3) ~= 'dll' then\n      return false\n   end\n   return true\nend", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") then\n    -- Check that the substring before the dot is not empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if\
    \ string.sub(file_name,1,1) ~= \"\" then\n      -- Check that the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n      if string.find(file_name,\
    \ \"exe\") then\n        return true\n      elseif string.find(file_name, \"dll\"\
    ) then\n        return true\n      elseif string.find(file_name, \"txt\") then\n\
    \        return true\n      else\n        return false\n      end\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend", "  -- Check\
    \ that the file name contains exactly one dot\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n      return \"No\"\n\
    \    end\n    -- Check that the file name does not contain more than three digits\n\
    \    if file_name:sub(1, 1) ~= \".\" then\n      if file_name:sub(2, 2) ~= \"\
    .\" then\n        return \"No\"\n      end\n    end\n    -- Check that the file\
    \ name starts with a latin alphapet letter\n    if file_name:sub(1, 1) ~= \".\"\
    \ then\n      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n        return \"No\"\n      end\n    end\n    -- Check that\
    \ the file name contains one of these extensions\n    if string.find(file_name,\
    \ \"exe\") ~= nil then\n      if string.find(file_name, \"exe\") ~= nil then\n\
    \        return \"Yes\"\n      end\n    end\n    if string.find(file_name, \"\
    dll\") ~= nil then\n      if string.find(file_name, \"dll\") ~= nil then\n   \
    \     return \"Yes\"\n      end\n    end\n  end\n  return \"No\"\nend", "  --\
    \ Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,\
    \ 1) ~= '.' then\n    return 'No'\n  end\n  -- Check that the file's name does\
    \ not contain more than three digits ('0'-'9')\n  if string.find(file_name, \"\
    %0\") then\n    return 'No'\n  end\n  -- Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n  if string.find(file_name, \"%1\") then\n\
    \    return 'No'\n  end\n  -- Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n  if string.find(file_name, \"%2\") then\n    return\
    \ 'No'\n  end\n  -- Check that the file's name does not contain more than three\
    \ digits ('0'-'9')\n  if string.find(file_name, \"%3\") then\n    return 'No'\n\
    \  end\n  -- Check that the file's name does not contain more than three digits\
    \ ('0'-'9')\n  if string.find(file_name, \"%4\") then\n    return 'No'\n  end\n\
    \  -- Check that the file's name does not contain more than three digits ('0'-'9')\n\
    \  if string.find(file_name, \"%5\") then\n    return 'No'\n  end\n  -- Check\
    \ that the file's name does not contain more than three digits ('0'-'9')\n  if\
    \ string.find(file_name, \"%6\") then\n    return 'No'\n  end\n  -- Check that\
    \ the file's name does not contain more than three digits ('0'-'9')\n  if string.find(file_name,\
    \ \"%7\") then\n    return 'No'\n  end\n  -- Check that the file's name does not\
    \ contain more than three digits ('0'-'9')\n  if string.find(file_name, \"%8\"\
    ) then\n    return 'No'\n  end\n  -- Check that the file's name does not contain\
    \ more than three digits ('0'-'9')\n  if string.find(file_name, \"%9\") then\n\
    \    return 'No'\n  end\n  -- Check that the file's name does not contain more\
    \ than three digits ('0'-'9')\n  if string.find(file_name, \"%0\") then\n    return\
    \ 'No'\n  end\n  -- Check that the file's name does not contain more than three\
    \ digits ('0'-'9')\n  if string.find(file_name, \"%1\") then\n    return 'No'\n\
    \  end\n  -- Check that the file's name does not contain more than three digits\
    \ ('0'-'9')\n  if string.find(file_name, \"%2\") then\n    return 'No'\n  end\n\
    \  -- Check that the file's name does not contain more than three digits ('0'-'9')\n\
    \  if string.find(file_name, \"%3\") then\n    return 'No'\n  end\n  -- Check\
    \ that the file's name does not ", "  -- Remove all non-alphanumeric characters\
    \ from the file name.\n  file_name = string.gsub(file_name, \n               \
    \            '[^A-Za-z0-9]', '')\n  -- If the file's name contains only one dot,\
    \ return 'No'.\n  if string.find(file_name, \".\") ~= nil then\n    return 'No'\n\
    \  end\n  -- If the file's name contains more than one dot, return 'No'.\n  if\
    \ string.find(file_name, \"..\") ~= nil then\n    return 'No'\n  end\n  -- If\
    \ the file's name starts with an invalid character, return 'No'.\n  if string.find(file_name,\
    \ \"^\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts with\
    \ a latin alphabet letter, return 'No'.\n  if string.find(file_name, \"^[a-Z]\"\
    ) ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts with an\
    \ uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name, \"\
    ^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an lowercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[a-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n  if string.find(file_name,\
    \ \"^[A-Z]\") ~= nil then\n    return 'No'\n  end\n  -- If the file's name starts\
    \ with an uppercase latin alphabet letter, return 'No'.\n", "  local file_name\
    \ = string.lower(file_name)\n  local dot_index = string.find(file_name, \".\"\
    )\n  if dot_index == nil then\n    return \"No\"\n  end\n  local file_name = string.sub(file_name,1,dot_index)\n\
    \  local file_name = string.gsub(file_name, \" \", \"\")\n  local file_name =\
    \ string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n", "   local file_name = file_name:lower()\n   if #file_name >\
    \ 3 then\n      return false\n   end\n   if file_name ~= file_name then\n    \
    \  return false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return false\n\
    \   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return false\n   end\n \
    \  if file_name:sub(1, 1) ~= 'z' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'Z'\
    \ then\n      return false\n   end\n   if file_name:sub(2, 2) ~= 'txt' then\n\
    \      return false\n   end\n   if file_name:sub(2, 2) ~= 'exe' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 2) ~= 'dll' then\n      return false\n\
    \   end\n   return true\nend", "  -- Check that the file name contains exactly\
    \ one dot '.'\n  if string.find(file_name, \".\") ~= nil then\n    local file_name\
    \ = string.gsub(file_name, \".\", \"\")\n    -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if string.find(file_name, \"^[a-zA-Z]\") ~= nil then\n   \
    \   -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n      if string.find(file_name, \"(txt|exe|dll)\") ~= nil then\n   \
    \     return 'Yes'\n      else\n        return 'No'\n      end\n    else\n   \
    \   return 'No'\n    end\n  else\n    return 'No'\n  end\nend", "  -- Check that\
    \ the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n      return nil\n    end\n\
    \    -- Check that the substring before the dot is not empty, and that it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name:sub(1,\
    \ 1) ~= '' then\n      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n        return nil\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(1,\
    \ file_name:len()), 'exe') ~= nil then\n      return nil\n    end\n    if string.find(file_name:sub(1,\
    \ file_name:len()), 'dll') ~= nil then\n      return nil\n    end\n  end\n  return\
    \ 'Yes'\nend", "   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil and file_name ~= \"\" then\n      -- Check that there\
    \ are no more than three digits in the file's name\n      if string.find(file_name,\
    \ \".\") ~= nil then\n         -- Check that there are no more than three digits\
    \ in the file's name\n         if string.find(file_name, \".\") ~= nil then\n\
    \            -- Check that there are no more than three digits in the file's name\n\
    \            if string.find(file_name, \".\") ~= nil then\n               -- Check\
    \ that there are no more than three digits in the file's name\n              \
    \ if string.find(file_name, \".\") ~= nil then\n                  -- Check that\
    \ there are no more than three digits in the file's name\n                  if\
    \ string.find(file_name, \".\") ~= nil then\n                     -- Check that\
    \ there are no more than three digits in the file's name\n                   \
    \  if string.find(file_name, \".\") ~= nil then\n                        -- Check\
    \ that there are no more than three digits in the file's name\n              \
    \          if string.find(file_name, \".\") ~= nil then\n                    \
    \       -- Check that there are no more than three digits in the file's name\n\
    \                           if string.find(file_name, \".\") ~= nil then\n   \
    \                           -- Check that there are no more than three digits\
    \ in the file's name\n                              return \"No\"\n          \
    \                 end\n                        end\n                     end\n\
    \                  end\n               end\n            end\n         end\n  \
    \    end\n   end\n   return \"Yes\"\nend", "    local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n    local file_name = file_name:gsub(\"%.\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[0-9]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[\\.]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^\\.]\", \"\")\n    local file_name = file_name:gsub(\"^[^a-z]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Z]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"",
  "   local file_name = file_name\n   local file_name = string.gsub(file_name, \"\
    [^0-9.]\", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n   local file_name =\
    \ string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" \", \"\")\n   local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n   local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n   local file_name = string.gsub(file_name, \" ", "    local file_name\
    \ = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"%.\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[a-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[A-Z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^.]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name =\
    \ file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"", "   if string.find(file_name, \".\") ~= nil then\n   \
    \   if string.find(file_name, \".\") == 1 then\n         if string.find(file_name,\
    \ \".\") == 1 then\n            if string.find(file_name, \".\") == 1 then\n \
    \              if string.find(file_name, \".\") == 1 then\n                  if\
    \ string.find(file_name, \".\") == 1 then\n                     if string.find(file_name,\
    \ \".\") == 1 then\n                        if string.find(file_name, \".\") ==\
    \ 1 then\n                           if string.find(file_name, \".\") == 1 then\n\
    \                              if string.find(file_name, \".\") == 1 then\n  \
    \                               if string.find(file_name, \".\") == 1 then\n \
    \                                   if string.find(file_name, \".\") == 1 then\n\
    \                                       if string.find(file_name, \".\") == 1\
    \ then\n                                          if string.find(file_name, \"\
    .\") == 1 then\n                                             if string.find(file_name,\
    \ \".\") == 1 then\n                                                if string.find(file_name,\
    \ \".\") == 1 then\n                                                   if string.find(file_name,\
    \ \".\") == 1 then\n                                                      if string.find(file_name,\
    \ \".\") == 1 then\n                                                         if\
    \ string.find(file_name, \".\") == 1 then\n                                  \
    \                           if string.find(file_name, \".\") == 1 then\n     \
    \                                                           if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \          if string.find(file_name, \".\") == 1 then\n                      \
    \                                                if string.find(file_name, \"\
    .\") == 1 then\n                                                             \
    \            if string.find(file_name, \".\") == 1 then\n                    \
    \                                                        if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                      if string.find(file_name, \".\") == 1 then\n          \
    \                                                                        if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                            if string.find(file_name, \".\") == 1 then\n    \
    \                                                                            \
    \        if string.find(file_name, \".\") == 1 then\n                        \
    \                                                                   if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                                     if string.find(file_name, \".\") == 1 then\n\
    \                                                                            \
    \                     if string.find(file_name, \".\") == 1 then\n           \
    \                                                                            \
    \            if string.find(file_name, \".\") == 1 then\n                    \
    \                                                                            \
    \     if string.find(file_name, \".\") == 1 then\n                           \
    \                                                                            if\
    \ string.find(file_name, \".\") == 1 then\n                                  \
    \                                                                       if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                                                  if string.find(file_name, \"\
    .\") == 1 then\n                                                             \
    \                                                if string.find(file_name, \"\
    .\") == 1 then\n                                                             \
    \                                                   if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                                                                          if\
    \ string.find(file_name, \".\") == 1 then\n                                  \
    \                                                                            \
    \                      if string.find(file_name, \".\") == 1 then\n          \
    \                                                                            \
    \                                                   if string.find(file_name,\
    \ \".\") == 1 then\n                                                         \
    \                                                                            \
    \       if string.find(file_name, \".\") == 1 then\n                         \
    \                                                                            \
    \                                          if string.find(file_name, \".\") ==\
    \ 1 then\n                                                                   \
    \                                                                            \
    \   if ", "  -- Check that the file name contains exactly one dot '.'\n  if file_name\
    \ ~= nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, string.sub(file_name,1,1)) == nil then\n    \
    \    -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\")+1)) ~= nil then\n          return \"Yes\"\
    \n        else\n          return \"No\"\n        end\n      else\n        return\
    \ \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n    return\
    \ \"No\"\n  end\nend", "  local file_name = file_name\n  local file_ext = string.match(file_name,\
    \ \"%.[^.]*$\")\n  local file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext\
    \ = file_ext and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n\
    \  local file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext\
    \ and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n  local\
    \ file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n\
    \  local file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext\
    \ and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n  local\
    \ file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n\
    \  local file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext\
    \ and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n  local\
    \ file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n\
    \  local file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext\
    \ and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n  local\
    \ file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n\
    \  local file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext\
    \ and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n  local\
    \ file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n\
    \  local file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext\
    \ and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n  local\
    \ file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext and file_ext:sub(1,3)\n\
    \  local file_ext = file_ext and file_ext:lower()\n  local file_ext = file_ext\
    \ and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:lower()\n  local\
    \ file_ext = file_ext and file_ext:sub(1,3)\n  local file_ext = file_ext and file_ext:",
  "    local file_name = file_name:lower()\n    local dot_index = file_name:find(\"\
    .\") -- Find the position of the first dot\n    local file_name = file_name:sub(1,\
    \ dot_index) -- Get the substring before the dot\n    local extension = file_name:sub((dot_index\
    \ + 1), (file_name:len())) -- Get the substring after the dot\n    local extension\
    \ = extension:lower()\n    local extension_length = #extension\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    local extension_length = extension_length - 1\n\
    \    local extension_length = extension_length + 1\n    local extension_length\
    \ = extension_length - 1\n    local extension_length = extension_length + 1\n\
    \    local extension_length = extension_length - 1\n    local extension_length\
    \ = extension_length + 1\n    ", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name > 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \" \") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"%\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"#\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"$\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"&\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"'\") then\n      return nil\n   end\n   if string.find(file_name, \"(\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \")\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"<\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \">\") then\n      return nil\n   end\n   if string.find(file_name, \"=\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"~\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"`\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"'\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"#\") then\n      return nil\n   end\n   if string.find(file_name, \"$\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"&\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"(\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \")\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"[\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"]\") then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"=\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"~\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"`\") then\n", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" then\n    -- Check that the substring before the dot is not empty\n\
    \    if file_name ~= \".\" then\n      -- Check that the substring before the\
    \ dot starts with a letter from the latin alphabetic alphabet\n      if not string.sub(file_name,1,1)\
    \ ~= string.char(string.byte(\"a\") or string.byte(\"A\")) then\n        return\
    \ false\n      end\n    end\n    -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n    local extensions = { \"txt\", \"exe\"\
    , \"dll\" }\n    for _, extension in ipairs(extensions) do\n      if string.find(file_name,\
    \ extension, 1, true) then\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name:sub(1,1) ~= '.' then\n    return 'No'\n  end\n  -- Check\
    \ that the file name does not contain more than three digits ('0'-'9')\n  if string.find(file_name,\
    \ '%0') then\n    return 'No'\n  end\n  -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n  if string.find(file_name, '%1') then\n \
    \   return 'No'\n  end\n  -- Check that the file name does not contain more than\
    \ three digits ('0'-'9')\n  if string.find(file_name, '%2') then\n    return 'No'\n\
    \  end\n  -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n  if string.find(file_name, '%3') then\n    return 'No'\n  end\n\
    \  -- Check that the file name does not contain more than three digits ('0'-'9')\n\
    \  if string.find(file_name, '%4') then\n    return 'No'\n  end\n  -- Check that\
    \ the file name does not contain more than three digits ('0'-'9')\n  if string.find(file_name,\
    \ '%5') then\n    return 'No'\n  end\n  -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n  if string.find(file_name, '%6') then\n \
    \   return 'No'\n  end\n  -- Check that the file name does not contain more than\
    \ three digits ('0'-'9')\n  if string.find(file_name, '%7') then\n    return 'No'\n\
    \  end\n  -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n  if string.find(file_name, '%8') then\n    return 'No'\n  end\n\
    \  -- Check that the file name does not contain more than three digits ('0'-'9')\n\
    \  if string.find(file_name, '%9') then\n    return 'No'\n  end\n  -- Check that\
    \ the file name does not contain more than three digits ('0'-'9')\n  if string.find(file_name,\
    \ '%0') then\n    return 'No'\n  end\n  -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n  if string.find(file_name, '%1') then\n \
    \   return 'No'\n  end\n  -- Check that the file name does not contain more than\
    \ three digits ('0'-'9')\n  if string.find(file_name, '%2') then\n    return 'No'\n\
    \  end\n  -- Check that the file name does not contain more than three digits\
    \ ('0'-'9')\n  if string.find(file_name, '%3') then\n    return 'No'\n  end\n\
    \  -- Check that the file name does not contain more than three digits ('0'-'9')\n\
    \  if string.find(file_name, '%4') then\n    return 'No'\n  end\n  -- Check that\
    \ the ", "  -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that the file name starts with\
    \ a latin alphapet letter\n  if file_name:sub(1,1) ~= 'a' then\n    return 'No'\n\
    \  end\n  -- Check that the file name contains only latin alphapet letters and\
    \ '0'-'9'\n  local count = 0\n  for i = 1, #file_name do\n    if file_name:sub(i,i)\
    \ ~= 'a' then\n      count = count + 1\n    end\n  end\n  if count > 3 then\n\
    \    return 'No'\n  end\n  -- Check that the file name contains only 'txt', 'exe',\
    \ 'dll'\n  if file_name == 'txt' or file_name == 'exe' or file_name == 'dll' then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.len(file_name) <= 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \".\") ~= 1 then\n         return nil\n      end\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 1) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 2) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 3) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 4) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 5) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 6) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 7) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 8) ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\", 1, 9) ~= 1 then\n      return nil\n   end\n   return true\nend", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= '' then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        local index = string.find(file_name, \".\")\n  \
    \      local sub_string = string.sub(file_name,1,index)\n        if sub_string\
    \ ~= nil and sub_string ~= '' then\n          if string.find(sub_string, \"a\"\
    ) ~= nil then\n            if string.find(sub_string, \"A\") ~= nil then\n   \
    \           return 'Yes'\n            else\n              return 'No'\n      \
    \      end\n          else\n            return 'No'\n          end\n        else\n\
    \          return 'No'\n        end\n      else\n        return 'No'\n      end\n\
    \    else\n      return 'No'\n    end\n  else\n    return 'No'\n  end\nend", " \
    \   local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+$\", \"\")\n    local file_name = file_name:gsub(\"^%w+.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%w+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%+\", \"\")\n    local file_name = file_name:gsub(\"%w+%+$\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+%+.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%+%+\", \"\")\n \
    \   local file_name = file_name:gsub(\"%w+%+%+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%+%+.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%+%+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%+%+%+\", \"\"\
    )\n    local file_name = file_name:gsub(\"%w+%+%+%+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%+%+%+.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%+%+%+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%+%+%+%+\", \"\
    \")\n    local file_name = file_name:gsub(\"%w+%+%+%+%+$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w+%+%+%+%+.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%+%+%+%+%.\", \"\")\n    local file_name = file_name:gsub(\"^%w+%+%+%+%+%+\"\
    , \"\")\n    local file_name = file_name:gsub(\"%w+%+%+%+%+%+$\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^%w+%+%+%+%+%+.\", \"\")\n    local file_name =\
    \ file_name:gsub(\"%w+%+%+%+%+%+%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%w+%+%+%+%+%+%+\", \"\")\n    local file_name = file_name:gsub(\"%w+%+%+%+%+%+%+$",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= \"\" then\n    local dot_index = string.find(file_name, \"\
    .\")\n    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that there are no more than three digits in the file's name\n    local digits_index\
    \ = string.find(file_name, \"[0-9]\")\n    if digits_index == nil then\n     \
    \ return \"No\"\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    local digits_index = string.find(file_name, \"[0-9]\"\
    )\n    if digits_index == nil then\n", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if\
    \ string.find(file_name, \".\") ~= nil then\n      -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name, \".\") ~= nil\
    \ and string.sub(file_name,1,1) ~= nil then\n        if string.find(string.lower(string.sub(file_name,1,1)),string.letters)\
    \ ~= nil then\n          -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n          if string.find(string.lower(string.sub(file_name,1,1)),{'txt','exe','dll'})\
    \ ~= nil then\n            return true\n          else\n            return false\n\
    \          end\n        else\n          return false\n        end\n      else\n\
    \        return false\n      end\n    else\n      return false\n    end\n  else\n\
    \    return false\n  end\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name > 3 then\n      return nil\n   end\n   if #file_name\
    \ < 1 then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= \".\" then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 2), 1, 1)) then\n      return nil\n   end\n   if string.find(file_name, \".\"\
    ) then\n      return nil\n   end\n   return true\nend", "   -- Check that the\
    \ file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= \"\" then\n      -- Check that the file's name contains exactly one dot '.'\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n         -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n         if file_name:sub(1, 1) ~= \"\" then\n\
    \            -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n            if file_name:sub(1, 2) ~= \".exe\" and file_name:sub(1,\
    \ 2) ~= \".dll\" and file_name:sub(1, 2) ~= \".txt\" then\n               return\
    \ \"No\"\n            else\n               return \"Yes\"\n            end\n \
    \        else\n            return \"No\"\n         end\n      else\n         return\
    \ \"Yes\"\n      end\n   else\n      return \"No\"\n   end\nend", "   if string.find(file_name,\
    \ \".\") ~= nil then\n      local sub_string = string.sub(file_name, 1, string.find(file_name,\
    \ \".\") - 1)\n      if string.find(sub_string, \".\") ~= nil then\n         if\
    \ string.find(sub_string, \".\") ~= nil then\n            if string.find(sub_string,\
    \ \".\") ~= nil then\n               if string.find(sub_string, \".\") ~= nil\
    \ then\n                  if string.find(sub_string, \".\") ~= nil then\n    \
    \                 if string.find(sub_string, \".\") ~= nil then\n            \
    \            if string.find(sub_string, \".\") ~= nil then\n                 \
    \          if string.find(sub_string, \".\") ~= nil then\n                   \
    \           if string.find(sub_string, \".\") ~= nil then\n                  \
    \               if string.find(sub_string, \".\") ~= nil then\n              \
    \                      if string.find(sub_string, \".\") ~= nil then\n       \
    \                                if string.find(sub_string, \".\") ~= nil then\n\
    \                                         if string.find(sub_string, \".\") ~=\
    \ nil then\n                                            if string.find(sub_string,\
    \ \".\") ~= nil then\n                                               if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                  if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                     if\
    \ string.find(sub_string, \".\") ~= nil then\n                               \
    \                          if string.find(sub_string, \".\") ~= nil then\n   \
    \                                                          if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \          if string.find(sub_string, \".\") ~= nil then\n                   \
    \                                                 if string.find(sub_string, \"\
    .\") ~= nil then\n                                                           \
    \              if string.find(sub_string, \".\") ~= nil then\n               \
    \                                                             if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                        if string.find(sub_string, \".\") ~= nil then\n     \
    \                                                                            \
    \ if string.find(sub_string, \".\") ~= nil then\n                            \
    \                                                         if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                 if string.find(sub_string, \".\") ~= nil then\n\
    \                                                                            \
    \               if string.find(sub_string, \".\") ~= nil then\n              \
    \                                                                            \
    \    if string.find(sub_string, \".\") ~= nil then\n                         \
    \                                                                       if string.find(sub_string,\
    \ \".\") ~= nil then\n                                                       \
    \                                            if string.find(sub_string, \".\"\
    ) ~= nil then\n                                                              \
    \                                       if string.find(sub_string, \".\") ~",
  "  return string.match(file_name, \"^%w{3}\\.%w{3}$\") ~= nil and string.match(file_name,\
    \ \"^[^.]\") ~= nil and string.match(file_name, \"^%w{3}\") ~= nil and string.match(file_name,\
    \ \"^%w{3}\\.%w{3}$\") ~= nil\nend", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if #file_name > 3 then\n      return nil\n   end\n   if file_name\
    \ ~= string.sub(file_name,1,1) then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"$\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"[\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"]\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"{\") then\n      return nil\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"|\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \";\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"<\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \">\") then\n      return nil\n   end\n   if string.find(file_name, \"/\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"\\\\\") then\n     \
    \ return nil\n   end\n   if string.find(file_name, \"?\") then\n      return nil\n\
    \   end\n   if string.find(file_name, \"*\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"|\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \";\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(", "    local file_name = file_name\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local ", "    local file_name = file_name:lower()\n    local\
    \ dot_index = string.find(file_name, \".\")\n    local dot_string = string.sub(file_name,1,dot_index)\n\
    \    local dot_string_length = string.len(dot_string)\n    if dot_string_length\
    \ == 0 then\n        return 'No'\n    end\n    if dot_string_length == 1 then\n\
    \        if string.sub(dot_string,1,1) ~= 'a' and string.sub(dot_string,1,1) ~=\
    \ 'A' then\n            return 'No'\n        end\n    end\n    local dot_string_length\
    \ = string.len(dot_string)\n    if dot_string_length == 2 then\n        if string.sub(dot_string,1,1)\
    \ ~= '0' and string.sub(dot_string,1,1) ~= '9' then\n            return 'No'\n\
    \        end\n    end\n    return 'Yes'\nend", "  local file_name = file_name:lower()\n\
    \  local dot_index = file_name:find(\".\") -- Find the position of the dot '.'\n\
    \  local file_name = file_name:sub(1, dot_index) -- Get the substring before the\
    \ dot '.'\n  local file_name = file_name:gsub(\"^[a-z_]\", \"\") -- Remove all\
    \ characters from the string beginning with the latin alphapet ('a'-'z')\n  local\
    \ file_name = file_name:gsub(\"[^a-z]\", \"\") -- Remove all characters from the\
    \ string that are not latin alphapet ('a'-'z' and 'A'-'Z')\n  local file_name\
    \ = file_name:gsub(\"^0\", \"\") -- Remove all characters from the string beginning\
    \ with the digit ('0'-'9')\n  local file_name = file_name:gsub(\"^\", \"\") --\
    \ Remove all characters from the string beginning with the digit ('0'-'9')\n \
    \ local file_name = file_name:gsub(\"^[0-9]\", \"\") -- Remove all characters\
    \ from the string beginning with the digit ('0'-'9')\n  local file_name = file_name:gsub(\"\
    ^[0-9][0-9]\", \"\") -- Remove all characters from the string beginning with the\
    \ digit ('0'-'9')\n  local file_name = file_name:gsub(\"^[0-9][0-9][0-9]\", \"\
    \") -- Remove all characters from the string beginning with the digit ('0'-'9')\n\
    \  local file_name = file_name:gsub(\"^[0-9][0-9][0-9][0-9]\", \"\") -- Remove\
    \ all characters from the string beginning with the digit ('0'-'9')\n  local file_name\
    \ = file_name:gsub(\"^[0-9][0-9][0-9][0-9][0-9]\", \"\") -- Remove all characters\
    \ from the string beginning with the digit ('0'-'9')\n  local file_name = file_name:gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9]\", \"\") -- Remove all characters from the string\
    \ beginning with the digit ('0'-'9')\n  local file_name = file_name:gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\") -- Remove all characters from the string beginning with the digit ('0'-'9')\n\
    \  local file_name = file_name:gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\") -- Remove all characters from the string beginning with the digit ('0'-'9')\n\
    \  local file_name = file_name:gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\") -- Remove all characters from the string beginning with the digit ('0'-'9')\n\
    \  local file_name = file_name:gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\") -- Remove all characters from the string beginning with the digit ('0'-'9')\n\
    \  local file_name = file_name", "   if file_name == nil then\n      return nil\n\
    \   end\n   if string.len(file_name) > 3 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \" \") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"^\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"$\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"[\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"]\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"{\") then\n      return nil\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"|\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"~\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"`\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"'\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"<\") then\n      return nil\n   end\n   if string.find(file_name, \">\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"/\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"\\\\\") then\n      return nil\n\
    \   end\n   if string.find(file_name, \"?\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"*\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"(\") then\n      return nil\n   end\n   if string.find(file_name, \")\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"-\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"+\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"=\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"^\") then\n      return nil\n   end\n   if string.find(file_name, \"$\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"[\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"]\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"{\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"}\") ", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"..\") then\n      return \"No\"\n\
    \   end\n   if string.find(file_name, \".\") then\n      local first_dot = string.find(file_name,\
    \ \".\")\n      local first_dot_length = string.len(file_name) - first_dot\n \
    \     if first_dot_length == 0 then\n         return \"No\"\n      elseif first_dot_length\
    \ == 1 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 2 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 3 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 4 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 5 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 6 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 7 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 8 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      elseif first_dot_length\
    \ == 9 then\n         if string.sub(file_name,1,1) ~= 'a' and string.sub(file_name,1,1)\
    \ ~= 'A' then\n            return \"No\"\n         end\n      else\n         return\
    \ \"No\"\n      end\n   end\n   if string.find(file_name, \".txt\") then\n   \
    \   return \"Yes\"\n   end\n   if string.find(file_name, \".exe\") then\n    \
    \  return \"Yes\"\n   end\n   if string.find(file_name, \".dll\") then\n     \
    \ return \"Yes\"\n   end\n   return ", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if\
    \ file_name:sub(1, 1) ~= \".\" then\n      return \"No\"\n    end\n    -- Check\
    \ that the file name starts with a latin alphapet letter\n    if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n      return\
    \ \"No\"\n    end\n    -- Check that the file name contains only latin alphapet\
    \ letters and '0'-'9'\n    local digits = string.gsub(file_name, \"[^0-9.]\",\
    \ \"\")\n    if digits ~= \"\" then\n      return \"No\"\n    end\n  end\n  return\
    \ \"Yes\"\nend", "  return string.match(\"^[0-9][0-9][0-9]\" .. file_name .. \"\
    .*$\", \"^[^.]*\\.[^.]*$\") ~= nil\nend", "   if string.find(file_name, \".\"\
    ) ~= nil then\n      local file_name = string.gsub(file_name, \" \", \"\")\n \
    \     local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.g", "    local file_name = file_name:lower()\n\
    \    local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \":\", \"\")\n    local file_name = string.gsub(file_name,\
    \ \",\", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n", "    local file_name = file_name:lower()\n\
    \    local dot_index = string.find(file_name, \".\")\n    if dot_index == nil\
    \ then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local file_name = string.gsub(file_name, \" \", \"\")\n    local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local ", "  local file_name = file_name\n  local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local ",
  "    local file_name = file_name:gsub(\"^%.*\", \"\")\n    local file_name = file_name:gsub(\"\
    %.*$\", \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%l\", \"\")\n    local file_name = file_name:gsub(\"%l$\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%l\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%l$\", \"\")\n    local file_name = file_name:gsub(\"^%l\"\
    , \"\")\n    local file_name = file_name:gsub(\"%l$\", \"\")\n    local file_name\
    \ = file_name:gsub", "   if #file_name > 3 then\n      return false\n   end\n\
    \   if #file_name == 1 then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'a'\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return false\n \
    \  end\n   if file_name:sub(2, 3) ~= '.txt' then\n      return false\n   end\n\
    \   if file_name:sub(2, 3) ~= '.exe' then\n      return false\n   end\n   if file_name:sub(2,\
    \ 3) ~= '.dll' then\n      return false\n   end\n   return true\nend", "  local\
    \ file_name = file_name:lower()\n  local dot_index = file_name:find('.')\n  if\
    \ dot_index == nil then\n    return 'No'\n  end\n  local file_name = file_name:sub(1,\
    \ dot_index)\n  local first_letter = file_name:sub(1, 1)\n  if first_letter ~=\
    \ 'a' and first_letter ~= 'z' and first_letter ~= 'A' and first_letter ~= 'Z'\
    \ then\n    return 'No'\n  end\n  local extensions = { ['txt'] = 1, ['exe'] =\
    \ 1, ['dll'] = 1 }\n  local extension = extensions[file_name]\n  if extension\
    \ == nil then\n    return 'No'\n  end\n  return 'Yes'\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   \n   local file_name = file_name:lower()\n\
    \   \n   if #file_name > 3 then\n      return nil\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         return nil\n \
    \     end\n   end\n   \n   if #file_name == 1 then\n      if file_name:sub(1,\
    \ 1) ~= '-' then\n         return nil\n      end\n   end\n   \n   if #file_name\
    \ == 1 then\n      if file_name:sub(1, 1) ~= '-' then\n         ", "   if #file_name\
    \ > 3 then\n      return false\n   end\n   if #file_name == 1 then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return false\n\
    \   end\n   if file_name:sub(1, 1) ~= '.' then\n      return false\n   end\n \
    \  if file_name:sub(1, 1) ~= 'a' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'z' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'A'\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n  \
    \    return false\n   end\n   if file_name:sub(2, 3) ~= '.txt' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 3) ~= '.exe' then\n      return false\n\
    \   end\n   if file_name:sub(2, 3) ~= '.dll' then\n      return false\n   end\n\
    \   return true\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if file_name:sub(1,\
    \ 1) ~= \".\" then\n      return \"No\"\n    end\n    -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n\
    \      if file_name:sub(1, 1) ~= \"\" then\n        if string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte(\"a\"..string.byte(\"z\"))) ~= nil then\n  \
    \        return \"Yes\"\n        end\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub((string.len(file_name)\
    \ - 1), 1) ~= \"exe\" and file_name:sub((string.len(file_name) - 1), 1) ~= \"\
    dll\" then\n        return \"No\"\n      end\n    end\n  end\n  return \"No\"\n\
    end", "  -- Check that the file name contains exactly one dot '.'\n  if file_name\
    \ ~= nil and file_name ~= \"\" then\n    if string.find(file_name, \".\") ~= nil\
    \ then\n      -- Check that the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, \".\") ~= nil and string.sub(file_name,1,1) ~=\
    \ nil and string.sub(file_name,1,1) ~= \"\" then\n        -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n        if string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \".\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil then\n          local file_name = string.lower(string.sub(file_name,1,string.find(file_name,\
    \ \".\")))\n          if string.find(file_name, \".txt\") ~= nil then\n      \
    \      return 'Yes'\n          elseif string.find(file_name, \".exe\") ~= nil\
    \ then\n            return 'Yes'\n          elseif string.find(file_name, \".dll\"\
    ) ~= nil then\n            return 'Yes'\n          else\n            return 'No'\n\
    \          end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n         return \"No\"\n      end\n   end\n   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(2,\
    \ 2) ~= \"exe\" and file_name:sub(2, 2) ~= \"dll\" then\n            return \"\
    No\"\n         end\n      end\n   end\n   -- Check that the file name contains\
    \ exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n   \
    \   if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(2, 2) ~= \"\
    exe\" and file_name:sub(2, 2) ~= \"dll\" then\n            if file_name:sub(3,\
    \ 3) ~= \".txt\" or file_name:sub(3, 3) ~= \".exe\" or file_name:sub(3, 3) ~=\
    \ \".dll\" then\n               return \"No\"\n            end\n         end\n\
    \      end\n   end\n   -- Check that the file name contains exactly one dot '.'\n\
    \   if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \".\" then\n         if file_name:sub(2, 2) ~= \"exe\" and file_name:sub(2,\
    \ 2) ~= \"dll\" then\n            if file_name:sub(3, 3) ~= \".txt\" or file_name:sub(3,\
    \ 3) ~= \".exe\" or file_name:sub(3, 3) ~= \".dll\" then\n               if file_name:sub(4,\
    \ 4) ~= \".txt\" or file_name:sub(4, 4) ~= \".exe\" or file_name:sub(4, 4) ~=\
    \ \".dll\" then\n                  if file_name:sub(5, 5) ~= \".txt\" or file_name:sub(5,\
    \ 5) ~= \".exe\" or file_name:sub(5, 5) ~= \".dll\" then\n                   \
    \  if file_name:sub(6, 6) ~= \".txt\" or file_name:sub(6, 6) ~= \".exe\" or file_name:sub(6,\
    \ 6) ~= \".dll\" then\n                        if file_name:sub(7, 7) ~= \".txt\"\
    \ or file_name:sub(7, 7) ~= \".exe\" or file_name:sub(7, 7) ~= \".dll\" then\n\
    \                           if file_name:sub(8, 8) ~= \".txt\" or file_name:sub(8,\
    \ 8) ~= \".exe\" or file_name:sub(8, 8) ~= \".dll\" then\n                   \
    \           return \"No\"\n                           end\n                  \
    \      end\n", "  -- Check that the file name contains exactly one dot '.'\n \
    \ if file_name ~= nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~=\
    \ \".\" then\n      return \"No\"\n    end\n    -- Check that the substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n\
    \      local sub_string = file_name:sub(1, 3)\n      if sub_string ~= nil and\
    \ sub_string ~= \"\" then\n        if sub_string:sub(1, 1) ~= string.lower(string.sub(sub_string,\
    \ 1, 1)) then\n          return \"No\"\n        end\n      end\n    end\n    --\
    \ Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n    if file_name ~= nil and file_name ~= \"\" then\n      local sub_string\
    \ = file_name:sub(4, 4)\n      if sub_string ~= nil and sub_string ~= \"\" then\n\
    \        local extensions = { \"txt\", \"exe\", \"dll\" }\n        if sub_string:sub(1,\
    \ 1) ~= string.lower(string.sub(sub_string, 1, 1)) then\n          return \"No\"\
    \n        end\n        for _, extension in ipairs(extensions) do\n          if\
    \ sub_string:sub(1, 4) ~= extension then\n            return \"No\"\n        \
    \  end\n        end\n      end\n    end\n  end\n  return \"Yes\"\nend", "  --\
    \ Check the length of the file name\n  if string.len(file_name) > 3 then\n   \
    \ return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name, \"\
    .\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"..\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"%\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"/\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"\\\\\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \":\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"<\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \">\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"|\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"?\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"*\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"[\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"]\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"{\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"}\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"(\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \")\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"%\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"?\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"*\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"[\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"]\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"{\") then\n    return 'No'\n  end\n  -- Check the file name\n  if string.find(file_name,\
    \ \"}", "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\
    ^[a-zA-Z]\") ~= nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"^[0-9]\") ~= nil then\n      return nil\n   end\n   return true\nend", " \
    \ -- Check that the file name contains exactly one dot '.'\n  if file_name:sub(1,1)\
    \ ~= '.' then\n    return 'No'\n  end\n  -- Check that there are no more than\
    \ three digits in the file's name\n  local digits = string.gsub(file_name, '%d+',\
    \ '')\n  if #digits > 3 then\n    return 'No'\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%A+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%A+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%A+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%A+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%A+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file's name\n  local letters = string.gsub(file_name,\
    \ '%a+', '')\n  if #letters > 3 then\n    return 'No'\n  end\n  -- Check that\
    \ there are no more than three digits in the file", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= ''\
    \ then\n    if file_name:sub(1, 1) ~= '.' then\n      return nil\n    end\n  \
    \  -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name\
    \ ~= '' then\n      local sub_string = file_name:sub(1, 3)\n      if sub_string\
    \ ~= nil and sub_string ~= '' then\n        local letter = sub_string:sub(1, 1)\n\
    \        if letter ~= nil and letter ~= '' then\n          if letter ~= 'a' and\
    \ letter ~= 'A' and letter ~= '0' and letter ~= '9' then\n            return nil\n\
    \          end\n        end\n      end\n    end\n    -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    if file_name\
    \ ~= '' then\n      local sub_string = file_name:sub(3)\n      if sub_string ~=\
    \ nil and sub_string ~= '' then\n        local extension = sub_string:sub(1, 3)\n\
    \        if extension ~= nil and extension ~= '' then\n          if extension\
    \ ~= 'txt' and extension ~= 'exe' and extension ~= 'dll' then\n            return\
    \ nil\n          end\n        end\n      end\n    end\n  end\n  return 'Yes'\n\
    end", "    local file_name = string.lower(file_name)\n    local dot_index = string.find(file_name,\
    \ \".\")\n    local dot_string = string.sub(file_name,dot_index+1)\n    local\
    \ dot_string_length = string.len(dot_string)\n    local dot_string_first_letter\
    \ = string.sub(dot_string,1,1)\n    local dot_string_second_letter = string.sub(dot_string,2,1)\n\
    \    local dot_string_third_letter = string.sub(dot_string,3,1)\n    local dot_string_fourth_letter\
    \ = string.sub(dot_string,4,1)\n    local dot_string_fifth_letter = string.sub(dot_string,5,1)\n\
    \    local dot_string_sixth_letter = string.sub(dot_string,6,1)\n    local dot_string_seventh_letter\
    \ = string.sub(dot_string,7,1)\n    local dot_string_eighth_letter = string.sub(dot_string,8,1)\n\
    \    local dot_string_ninth_letter = string.sub(dot_string,9,1)\n    local dot_string_tenth_letter\
    \ = string.sub(dot_string,10,1)\n    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_second_letter_upper = string.upper(dot_string_second_letter)\n\
    \    local dot_string_third_letter_upper = string.upper(dot_string_third_letter)\n\
    \    local dot_string_fourth_letter_upper = string.upper(dot_string_fourth_letter)\n\
    \    local dot_string_fifth_letter_upper = string.upper(dot_string_fifth_letter)\n\
    \    local dot_string_sixth_letter_upper = string.upper(dot_string_sixth_letter)\n\
    \    local dot_string_seventh_letter_upper = string.upper(dot_string_seventh_letter)\n\
    \    local dot_string_eighth_letter_upper = string.upper(dot_string_eighth_letter)\n\
    \    local dot_string_ninth_letter_upper = string.upper(dot_string_ninth_letter)\n\
    \    local dot_string_tenth_letter_upper = string.upper(dot_string_tenth_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_second_letter_lower = string.lower(dot_string_second_letter)\n\
    \    local dot_string_third_letter_lower = string.lower(dot_string_third_letter)\n\
    \    local dot_string_fourth_letter_lower = string.lower(dot_string_fourth_letter)\n\
    \    local dot_string_fifth_letter_lower = string.lower(dot_string_fifth_letter)\n\
    \    local dot_string_sixth_letter_lower = string.lower(dot_string_sixth_letter)\n\
    \    local dot_string_seventh_letter_lower = string.lower(dot_string_seventh_letter)\n\
    \    local dot_string_eighth_letter_lower = ", "   -- Check that the file name\
    \ contains exactly one dot '.'\n   if file_name ~= nil and file_name ~= \"\" then\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n         return \"No\"\n      end\n\
    \   end\n   -- Check that the file's name contains only digits (0-9)\n   if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n\
    \         if file_name:sub(1, 1) ~= \".\" then\n            if file_name:sub(1,\
    \ 1) ~= \".\" then\n               if file_name:sub(1, 1) ~= \".\" then\n    \
    \              if file_name:sub(1, 1) ~= \".\" then\n                     if file_name:sub(1,\
    \ 1) ~= \".\" then\n                        if file_name:sub(1, 1) ~= \".\" then\n\
    \                           if file_name:sub(1, 1) ~= \".\" then\n           \
    \                   if file_name:sub(1, 1) ~= \".\" then\n                   \
    \              if file_name:sub(1, 1) ~= \".\" then\n                        \
    \            if file_name:sub(1, 1) ~= \".\" then\n                          \
    \             if file_name:sub(1, 1) ~= \".\" then\n                         \
    \                if file_name:sub(1, 1) ~= \".\" then\n                      \
    \                      if file_name:sub(1, 1) ~= \".\" then\n                \
    \                               if file_name:sub(1, 1) ~= \".\" then\n       \
    \                                           if file_name:sub(1, 1) ~= \".\" then\n\
    \                                                     if file_name:sub(1, 1) ~=\
    \ \".\" then\n                                                         if file_name:sub(1,\
    \ 1) ~= \".\" then\n                                                         \
    \    if file_name:sub(1, 1) ~= \".\" then\n                                  \
    \                               if file_name:sub(1, 1) ~= \".\" then\n       \
    \                                                             if file_name:sub(1,\
    \ 1) ~= \".\" then\n                                                         \
    \            if file_name:sub(1, 1) ~= \".\" then\n                          \
    \                                           if file_name:sub(1, 1) ~= \".\" then\n\
    \                                                                     if file_name:sub(1,\
    \ 1) ~= \".\" then\n                                                         \
    \            if file_name:sub(1, 1) ~= \".\" then\n                          \
    \                                           if file_name:sub(1, 1) ~= \".\" then\n\
    \                                                                     if file_name:sub(1,\
    \ 1) ~= \".\" then\n                                                         \
    \            if file_name:sub(1, 1) ~= \".\" then\n                          \
    \                                           if file_name:sub(1, 1) ~= \".\" then\n\
    \                                                                     if file_name:sub(1,\
    \ 1) ~= \".\" then\n                                                         \
    \            if file_name:sub(1, 1) ~= \".\" then\n                          \
    \                                           if file_name:sub(1, 1) ~= \".\" then\n\
    \                                                                     if file_name:sub(1, ",
  "  -- Check that the file name contains exactly one dot '.'\n  if string.find(file_name,\
    \ \".\") ~= nil then\n    local file_name = string.gsub(file_name, \".\", \"\"\
    )\n    -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.find(file_name,\
    \ \"^[a-zA-Z]\") ~= nil then\n      -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n      if string.find(file_name, \"[txt]\"\
    ) ~= nil then\n        return true\n      elseif string.find(file_name, \"[exe]\"\
    ) ~= nil then\n        return true\n      elseif string.find(file_name, \"[dll]\"\
    ) ~= nil then\n        return true\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend",
  "  return string.find(file_name, \"^[0-9][0-9]\") ~= nil and string.find(file_name,\
    \ \".\") ~= nil and string.find(file_name, \"^[a-z][a-z]\") ~= nil and string.find(file_name,\
    \ \"^[a-z][a-z].*\") ~= nil\nend", "  -- Check that the file name contains exactly\
    \ one dot '.'\n  if file_name ~= nil and file_name ~= '' then\n    local dot_index\
    \ = file_name:find('.')\n    if dot_index == nil then\n      return nil\n    end\n\
    \    -- Check that the substring before the dot should not be empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if dot_index\
    \ == nil then\n      return nil\n    end\n    local first_letter = file_name:sub(1,\
    \ 1)\n    if first_letter ~= nil and first_letter ~= '' then\n      local letter_index\
    \ = 1\n      while letter_index <= #first_letter do\n        local letter = first_letter:sub(letter_index,\
    \ letter_index)\n        if letter ~= nil and letter ~= '' then\n          if\
    \ letter ~= 'a' and letter ~= 'A' and letter ~= '0' and letter ~= '9' then\n \
    \           return nil\n          end\n        end\n        letter_index = letter_index\
    \ + 1\n      end\n    end\n    -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    local file_type_index = 1\n    while\
    \ file_type_index <= #file_name do\n      local file_type = file_name:sub(file_type_index,\
    \ file_type_index)\n      if file_type ~= nil and file_type ~= '' then\n     \
    \   local file_type_index = 1\n        while file_type_index <= #file_type do\n\
    \          local file_type_letter = file_type:sub(file_type_index, file_type_index)\n\
    \          if file_type_letter ~= nil and file_type_letter ~= '' then\n      \
    \      if file_type_letter ~= 'txt' and file_type_letter ~= 'exe' and file_type_letter\
    \ ~= 'dll' then\n              return nil\n            end\n          end\n  \
    \        file_type_index = file_type_index + 1\n        end\n      end\n     \
    \ file_type_index = file_type_index + 1\n    end\n  end\n  return 'Yes'\nend",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n     \
    \ return \"No\"\n    end\n    -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ \"No\"\n      end\n    end\n    -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name, \"exe\"\
    ) ~= nil then\n      if string.find(file_name, \"dll\") ~= nil then\n        return\
    \ \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend", "   -- Check that\
    \ the file name contains exactly one dot '.'\n   if file_name ~= nil and file_name\
    \ ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n         return \"\
    No\"\n      end\n   end\n   -- Check that the file name does not contain more\
    \ than three digits ('0'-'9')\n   if file_name ~= nil and file_name ~= \"\" then\n\
    \      if file_name:sub(1, 1) ~= \".\" then\n         if file_name:sub(2, 2) ~=\
    \ \".\" then\n            if file_name:sub(3, 3) ~= \".\" then\n             \
    \  if file_name:sub(4, 4) ~= \".\" then\n                  if file_name:sub(5,\
    \ 5) ~= \".\" then\n                     if file_name:sub(6, 6) ~= \".\" then\n\
    \                        if file_name:sub(7, 7) ~= \".\" then\n              \
    \             if file_name:sub(8, 8) ~= \".\" then\n                         \
    \     if file_name:sub(9, 9) ~= \".\" then\n                                 return\
    \ \"No\"\n                              end\n                           end\n\
    \                        end\n                     end\n                  end\n\
    \               end\n            end\n         end\n      end\n   end\n   -- Check\
    \ that the file name starts with a latin alphapet letter\n   if file_name ~= nil\
    \ and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \".\" then\n   \
    \      if file_name:sub(2, 2) ~= \".\" then\n            if file_name:sub(3, 3)\
    \ ~= \".\" then\n               if file_name:sub(4, 4) ~= \".\" then\n       \
    \           if file_name:sub(5, 5) ~= \".\" then\n                     if file_name:sub(6,\
    \ 6) ~= \".\" then\n                        if file_name:sub(7, 7) ~= \".\" then\n\
    \                           if file_name:sub(8, 8) ~= \".\" then\n           \
    \                   if file_name:sub(9, 9) ~= \".\" then\n                   \
    \              if file_name:sub(10, 10) ~= \".\" then\n                      \
    \              if file_name:sub(11, 11) ~= \".\" then\n                      \
    \                 if file_name:sub(12, 12) ~= \".\" then\n                   \
    \                      if file_name:sub(13, 13) ~= \".\" then\n              \
    \                              if file_name:sub(14, 14) ~= \".\" then\n      \
    \                                         if file_name:sub(15, 15) ~= \".\" then\n\
    \                                                  if file_name:sub(16, 16) ~=\
    \ \".\" then\n                                                     if file_name:sub(17,\
    \ 17) ~= \".\" then\n                                                        \
    \ if file_name:sub(18, 18) ~= \".\" then\n                                   \
    \                        if file_name:sub(19, 19) ~= ", "  local file_name = file_name:lower()\n\
    \  local dot_index = file_name:find('.')\n  if dot_index == nil then\n    return\
    \ 'No'\n  end\n  local file_name = file_name:sub(1, dot_index)\n  local first_letter\
    \ = file_name:sub(1, 1)\n  if first_letter ~= first_letter:upper() then\n    return\
    \ 'No'\n  end\n  local extensions = { \"txt\", \"exe\", \"dll\" }\n  local extension_index\
    \ = #extensions\n  local extension = file_name:sub(dot_index + 1, dot_index)\n\
    \  if extension ~= extensions[extension_index] then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= '' then\n    if file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n    end\n    -- Check that the substring\
    \ before the dot is not empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name:sub(1, 1) ~= '' then\n      if file_name:sub(1,\
    \ 1) ~= string.lower(string.sub(file_name:sub(1, 1), 1, 1)) then\n        return\
    \ 'No'\n      end\n    end\n    -- Check that the substring after the dot is one\
    \ of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(1, #file_name),\
    \ {'txt', 'exe', 'dll'}) == nil then\n      return 'No'\n    end\n  end\n  return\
    \ 'Yes'\nend", "    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local\
    \ file_name = file_name:gsub(\"%.\", \"\")\n    local file_name = file_name:gsub(\"\
    ^%l\", \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^%w\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^%w\", \"\")\n    local file_name = file_name:gsub(\"^%w\"\
    , \"\")\n    local file_name = file_name:gsub(\"^", "   local file_name = string.lower(file_name)\n\
    \   if string.find(file_name, \".\") ~= nil then\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" ", "   local file_name = file_name:lower()\n   local file_name = file_name:gsub(\"\
    [^0-9.]\", \"\")\n   local file_name = file_name:gsub(\"^.\", \"\")\n   local\
    \ file_name = file_name:gsub(\"%.\", \"\")\n   if file_name == \"\" then\n   \
    \   return \"No\"\n   else\n      if string.find(file_name, \".\") == nil then\n\
    \         return \"No\"\n      else\n         if string.find(file_name, \".\"\
    ) == 1 then\n            if string.find(file_name, \".\") == 1 then\n        \
    \       if string.find(file_name, \".\") == 1 then\n                  if string.find(file_name,\
    \ \".\") == 1 then\n                     return \"No\"\n                  else\n\
    \                     return \"Yes\"\n                  end\n               else\n\
    \                  return \"Yes\"\n               end\n            else\n    \
    \           return \"Yes\"\n            end\n         else\n            return\
    \ \"Yes\"\n         end\n      end\n   end\nend", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= nil then\n \
    \     if string.find(file_name, \".\") == 1 then\n         if string.find(file_name,\
    \ \".\") == 1 then\n            if string.find(file_name, \".\") == 1 then\n \
    \              if string.find(file_name, \".\") == 1 then\n                  if\
    \ string.find(file_name, \".\") == 1 then\n                     return nil\n \
    \                 end\n               end\n            end\n         end\n   \
    \   end\n   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == nil then\n         if string.find(file_name, \".\") == nil then\n\
    \            if string.find(file_name, \".\") == nil then\n               if string.find(file_name,\
    \ \".\") == nil then\n                  if string.find(file_name, \".\") == nil\
    \ then\n                     return nil\n                  end\n             \
    \  end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") == nil then\n      if string.find(file_name, \".\") == nil then\n   \
    \      if string.find(file_name, \".\") == nil then\n            if string.find(file_name,\
    \ \".\") == nil then\n               if string.find(file_name, \".\") == nil then\n\
    \                  if string.find(file_name, \".\") == nil then\n            \
    \         return nil\n                  end\n               end\n            end\n\
    \         end\n      end\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      if string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ nil\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ nil\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\"", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name:sub(1,1) ~=\
    \ '.' then\n    return 'No'\n  end\n  -- Check that the file name does not contain\
    \ more than three digits ('0'-'9')\n  local digits = file_name:sub(1,3)\n  if\
    \ digits ~= '' then\n    if tonumber(digits) ~= digits then\n      return 'No'\n\
    \    end\n  end\n  -- Check that the file name starts with a latin alphapet letter\n\
    \  local first_letter = file_name:sub(1,1)\n  if first_letter ~= '' then\n   \
    \ if first_letter ~= 'a' and first_letter ~= 'A' then\n      return 'No'\n   \
    \ end\n  end\n  -- Check that the file name contains one of these: ['txt', 'exe',\
    \ 'dll']\n  local extensions = { ['txt'] = 1, ['exe'] = 1, ['dll'] = 1 }\n  local\
    \ extensions_count = 0\n  for extension in pairs(extensions) do\n    extensions_count\
    \ = extensions_count + 1\n  end\n  if extensions_count ~= 3 then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  -- Check that the file name contains exactly\
    \ one dot '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if file_name:sub(1,\
    \ 1) ~= \".\" then\n      return \"No\"\n    end\n    -- Check that the substring\
    \ before the dot is not empty\n    if file_name:sub(1, 1) ~= \"\" then\n     \
    \ -- Check that the substring before the dot starts with a latin alphapet letter\n\
    \      if file_name:sub(1, 1) ~= string.lower(string.sub(string.lower(file_name),\
    \ 1, 1)) then\n        return \"No\"\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name,\
    \ \"exe\") ~= nil then\n      if string.find(file_name, \"dll\") ~= nil then\n\
    \        return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend", " \
    \  if #file_name > 3 then\n      return nil\n   end\n   if #file_name == 1 then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'z' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'A' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n\
    \      return nil\n   end\n   return true\nend", "  local file_name = file_name:gsub(\"\
    ^%w+\", \"\")\n  local file_name = file_name:gsub(\"%.\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[a-z]\", \"\")\n  local file_name = file_name:gsub(\"^[A-Z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[\\.]\", \"\")\n  local file_name = file_name:gsub(\"^[^\\\
    .]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^a-z]\", \"\")\n  local file_name = file_name:gsub(\"^[^A-Z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9a-z]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n  local file_name = file_name:gsub(\"\
    ^[^0-9A-Z]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9A-Za-z]\", \"\"\
    )\n  local file_name = file_name:gsub(\"^[^a-z][0-9]\", \"\")\n  local file_name\
    \ = file_name:gsub(\"^[^a-z][0-9A-Z]\", \"\")\n  local file_name = file_name:gsub(\"\
    ^[^a-z][0-9A-Za-z]\", \"\")\n  local file_name = file_name:gsub(\"^[^a-z][0-9a-z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^a-z][^0-9]\", \"\")\n  local\
    \ file_name = file_name:gsub(\"^[^a-z][^0-9A-Z]\", \"\")\n  local file_name =\
    \ file_name:gsub(\"^[^a-z][^0-9A-Za-z]\", \"\")\n  local file_name = file_name:gsub(\"\
    ^[^a-z][^0-9a-z]\", \"\")\n  local file_name = file_name:gsub(\"^[^a-z][^A-Z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^a-z][^A-Za-z]\", \"\")\n  local\
    \ file_name = file_name:gsub(\"^[^a-z][^a-z]\", \"\")\n  local file_name = file_name:gsub(\"\
    ^[^0-9][^A-Za-z]\", \"\")\n  local file_name = file_name:gsub(\"^[^0-9][^A-Z]\"\
    , \"\")\n  local file_name = file_name:gsub(\"^[^0-9][^A-Za-z]\", \"\")\n  local\
    \ file_name = file_name:gsub(\"^[^0-9][^a-z]\", \"\")\n  local file_name = file_name:gsub(\"\
    ^[^A-Z][^A-Za-z]\", \"\")\n  local file_name = file_name:gsub(\"^[^A-Z", "   if\
    \ file_name == nil then\n      return nil\n   end", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= ''\
    \ then\n    if file_name:sub(1, 1) ~= '.' then\n      return 'No'\n    end\n \
    \   -- Check that the substring before the dot is not empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name:sub(1,\
    \ 1) ~= '' then\n      if string.find(string.lower(file_name:sub(1, 1)), string.letters(string.byte('a'))\
    \ .. string.letters(string.byte('A')) .. string.letters(string.byte('z')) .. string.letters(string.byte('Z'))\
    \ .. string.letters(string.byte('0')) .. string.letters(string.byte('9')) .. '.')\
    \ then\n        return 'No'\n      end\n    end\n    -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2,\
    \ #file_name), '.') then\n      if string.find(file_name:sub(2, #file_name), 'exe')\
    \ then\n        return 'No'\n      elseif string.find(file_name:sub(2, #file_name),\
    \ 'dll') then\n        return 'No'\n      else\n        return 'Yes'\n      end\n\
    \    end\n  end\n  return 'No'\nend", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if #file_name < 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"/\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"\\\\\") then\n      return nil\n\
    \   end\n   if string.find(file_name, \":\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"<\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \">\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"?\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"*\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"[\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"]\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"{\") then\n      return nil\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"(\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \")\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"!\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\"\") then\n      return nil\n   end\n   if string.find(file_name, \"'\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"#\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"$\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"^\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"&\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"+\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"-\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"=\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" then\n    -- Get the substring before the dot '.'\n    local file_name\
    \ = file_name:sub(1, file_name:find(\".\") - 1)\n    -- Check that it starts with\
    \ a latin alphapet letter\n    if file_name ~= nil and file_name ~= \"\" and file_name:byte(1)\
    \ ~= 97 then\n      -- Check that it contains only latin alphapet letters and\
    \ '0'-'9'\n      local letters = string.gsub(file_name, \"[^A-Za-z0-9]\", \"\"\
    )\n      if letters ~= nil and letters ~= \"\" then\n        -- Check that it\
    \ contains only 'txt'/'exe'/'dll' extensions\n        local extensions = string.gsub(file_name,\
    \ \"[^txt.exe,dll]\", \"\")\n        if extensions ~= nil and extensions ~= \"\
    \" then\n          return true\n        end\n      end\n    end\n  end\n  return\
    \ false\nend", "    local file_name = file_name:lower()\n    local file_name =\
    \ file_name:gsub(\"%w+\", \"\")\n    local file_name = file_name:gsub(\"%w+%.\"\
    , \"\")\n    local file_name = file_name:gsub(\"%w+%.%.\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%w+%.%.%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.%.%.%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.\",\
    \ \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.\", \"\")\n   \
    \ local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.\", \"\")\n    local file_name = file_name:gsub(\"\
    %w+%.%.%.%.%.%.%.%.%.\", \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.\"\
    , \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.\", \"\"\
    )\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.\", \"\")\n \
    \   local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.\", \"\")\n  \
    \  local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.\", \"\")\n   \
    \ local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.\", \"\")\n  \
    \  local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.\", \"\")\n \
    \   local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.\", \"\")\n\
    \    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.%.\", \"\"\
    )\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.%.%.\", \"\
    \")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.%.%.\"\
    , \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.%.%.\"\
    , \"\")\n    local file_name = file_name:gsub(\"%w+%.%.%.%.%.%.%.%.%.%.%.%.%.%.\"\
    , \"\")\n    local file", "   if string.find(file_name, \".\") == nil then\n \
    \     return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      return \"No\"\n   end\n   if string.find(file_name, \".\") == nil then\n",
  "    local file_name = file_name\n    local dot_index = string.find(file_name, \"\
    .\")\n    if dot_index == nil then\n        return true\n    end\n    local file_name\
    \ = file_name:sub(1, dot_index)\n    local first_letter = string.sub(file_name,1,1)\n\
    \    if first_letter ~= 'a' and first_letter ~= 'A' and first_letter ~= '0' and\
    \ first_letter ~= '9' then\n        return false\n    end\n    local dot_index\
    \ = string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ true\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ extension = file_name:sub((dot_index+1))\n    if extension == \"txt\" or extension\
    \ == \"exe\" or extension == \"dll\" then\n        return true\n    end\n    return\
    \ false\nend", "  -- Check that the file name contains exactly one dot '.'\n \
    \ if file_name ~= nil then\n    if string.find(file_name, \".\") ~= nil then\n\
    \      -- Check that the substring before the dot should not be empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if\
    \ string.find(file_name, string.sub(file_name,1,1)) == nil then\n        -- Check\
    \ that the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\")+3)) ~= nil then\n          return 'Yes'\n\
    \        else\n          return 'No'\n        end\n      else\n        return\
    \ 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n\
    \  end\nend", "    local file_name = file_name:lower()\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = file_name:sub(1, dot_index)\n    local\
    \ first_letter = string.sub(file_name,1,1)\n    if first_letter ~= string.sub(string.sub(string.sub(file_name,1,1),1,1),1,1)\
    \ then\n        return false\n    end\n    local file_type = string.sub(file_name,dot_index+1,string.find(file_name,\
    \ \".\"))\n    if file_type ~= \"txt\" and file_type ~= \"exe\" and file_type\
    \ ~= \"dll\" then\n        return false\n    end\n    return true\nend", "   if\
    \ file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      if string.find(file_name, \".\") ~= 1 then\n     \
    \    return nil\n      end\n   end\n   if string.find(file_name, \"..\") ~= nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") ~= nil then\n\
    \      return nil\n   end\n   if string.find(file_name, \"/\") ~= nil then\n \
    \     return nil\n   end\n   if string.find(file_name, \":\") ~= nil then\n  \
    \    return nil\n   end\n   if string.find(file_name, \"<\") ~= nil then\n   \
    \   return nil\n   end\n   if string.find(file_name, \">\") ~= nil then\n    \
    \  return nil\n   end\n   if string.find(file_name, \"|\") ~= nil then\n     \
    \ return nil\n   end\n   if string.find(file_name, \"[\") ~= nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"]\") ~= nil then\n      return nil\n\
    \   end\n   if string.find(file_name, \"{\") ~= nil then\n      return nil\n \
    \  end\n   if string.find(file_name, \"}\") ~= nil then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"%\") ~= nil then\n      return nil\n   end\n\
    \   if string.find(file_name, \"[\") ~= nil then\n      return nil\n   end\n \
    \  if string.find(file_name, \"]\") ~= nil then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"{\") ~= nil then\n      return nil\n   end\n   if\
    \ string.find(file_name, \"}\") ~= nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"|\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\
    <\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \">\"\
    ) ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"/\") ~=\
    \ nil then\n      return nil\n   end\n   if string.find(file_name, \":\") ~= nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") ~= nil then\n\
    \      return nil\n   end\n   if string.find(file_name, \"[\") ~= nil then\n \
    \     return nil\n   end\n   if string.find(file_name, \"]", "  local file_name\
    \ = file_name:lower()\n  local dot_index = file_name:find('.')\n  if dot_index\
    \ == nil then\n    return true\n  end\n  local file_name = file_name:sub(1, dot_index)\n\
    \  local first_letter = file_name:sub(1, 1)\n  local valid_letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local valid_letters_length = #valid_letters\n  local first_letter_length =\
    \ #first_letter\n  if first_letter_length < valid_letters_length then\n    return\
    \ false\n  end\n  if first_letter:sub(1, 1) ~= first_letter then\n    return false\n\
    \  end\n  local valid_extensions = 'txt;exe;dll'\n  local valid_extensions_length\
    \ = #valid_extensions\n  local extension_index = file_name:find(';')\n  if extension_index\
    \ == nil then\n    return true\n  end\n  local extension = file_name:sub(1, extension_index)\n\
    \  local extension = extension:lower()\n  if extension:sub(1, 1) ~= extension\
    \ then\n    return false\n  end\n  local extension_length = #extension\n  if extension_length\
    \ < valid_extensions_length then\n    return false\n  end\n  if extension:sub(1,\
    \ extension_length) ~= extension then\n    return false\n  end\n  return true\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot is not\
    \ empty\n      if string.sub(file_name,1,1) ~= \"\" then\n         -- Check that\
    \ the substring before the dot starts with a latin alphapet letter\n         if\
    \ string.sub(file_name,1,1) ~= string.char(string.byte(\"a\") .. string.byte(\"\
    z\") .. string.byte(\"A\") .. string.byte(\"Z\")) then\n            -- Check that\
    \ the substring after the dot is one of these\n            if string.find(file_name,\
    \ \"exe\") ~= nil then\n               if string.find(file_name, \"dll\") ~= nil\
    \ then\n                  return \"Yes\"\n               else\n              \
    \    return \"No\"\n               end\n            else\n               return\
    \ \"No\"\n            end\n         else\n            return \"No\"\n        \
    \ end\n      else\n         return \"No\"\n      end\n   else\n      return \"\
    No\"\n   end\nend", "   if file_name == nil then\n      return nil\n   end\n \
    \  if #file_name > 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"\\\\\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"/\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"@\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"<\") then\n      return nil\n   end\n   if string.find(file_name, \">\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"|\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"[\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"]\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"{\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"}\") then\n      return nil\n   end\n   if string.find(file_name, \"(\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \")\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"-\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \".\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"..\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"\\\\\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"/\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"@\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"?\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"<\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \">\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"|\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") ", "  return string.match(\"^[0-9][0-9][0-9][0-9]\\\
    .[a-zA-Z][a-zA-Z]$\", \"^\" .. file_name .. \"$\")\nend", "  -- Check that the\
    \ file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n      return \"No\"\n\
    \    end\n    -- Check that the substring before the dot is not empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name:sub(1,\
    \ 1) ~= \"\" then\n      local first_letter = file_name:sub(1, 1):lower()\n  \
    \    if first_letter ~= nil and first_letter ~= \"\" then\n        if first_letter\
    \ ~= first_letter:sub(1, 1) then\n          return \"No\"\n        end\n     \
    \ end\n    end\n    -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n    local extension = file_name:sub(2)\n    if extension\
    \ ~= nil and extension ~= \"\" then\n      if extension:sub(1, 1) ~= \"a\" and\
    \ extension:sub(1, 1) ~= \"b\" and extension:sub(1, 1) ~= \"c\" then\n       \
    \ return \"No\"\n      end\n    end\n  end\n  return \"Yes\"\nend", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" then\n    -- Check that there are no more than\
    \ three digits in the file's name\n    if string.find(file_name, \"%0\") then\n\
    \      return 'No'\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    if string.find(file_name, \"%1\") then\n      return\
    \ 'No'\n    end\n    -- Check that there are no more than three digits in the\
    \ file's name\n    if string.find(file_name, \"%2\") then\n      return 'No'\n\
    \    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%3\") then\n      return 'No'\n    end\n\
    \    -- Check that there are no more than three digits in the file's name\n  \
    \  if string.find(file_name, \"%4\") then\n      return 'No'\n    end\n    --\
    \ Check that there are no more than three digits in the file's name\n    if string.find(file_name,\
    \ \"%5\") then\n      return 'No'\n    end\n    -- Check that there are no more\
    \ than three digits in the file's name\n    if string.find(file_name, \"%6\")\
    \ then\n      return 'No'\n    end\n    -- Check that there are no more than three\
    \ digits in the file's name\n    if string.find(file_name, \"%7\") then\n    \
    \  return 'No'\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    if string.find(file_name, \"%8\") then\n      return\
    \ 'No'\n    end\n    -- Check that there are no more than three digits in the\
    \ file's name\n    if string.find(file_name, \"%9\") then\n      return 'No'\n\
    \    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%0\") then\n      return 'No'\n    end\n\
    \    -- Check that there are no more than three digits in the file's name\n  \
    \  if string.find(file_name, \"%1\") then\n      return 'No'\n    end\n    --\
    \ Check that there are no more than three digits in the file's name\n    if string.find(file_name,\
    \ \"%2\") then\n      return 'No'\n    end\n    -- Check that there are no more\
    \ than three digits in the file's name\n    if string.find(file_name, \"%3\")\
    \ then\n      return 'No'\n    end\n    -- Check that there are no more than three\
    \ digits in the file's name\n    if string.find(file_name, \"%4\") then\n    \
    \  return 'No'\n    end\n    -- Check that there are no more than three digits\
    \ in the file's name\n    if string.find(file_name, \"%5\") then\n      return\
    \ 'No'\n    end\n    -- Check that there are no more than three digits in the\
    \ file's name\n    if string.find(file_name, \"%6\") then\n      return 'No'\n\
    \    end\n    -- Check that there are no more than three digits in the file's\
    \ name\n    if string.find(file_name, \"%7\") then\n      return '", "    local\
    \ file_name = file_name:gsub(\"^%d+\", \"\") -- Remove all digits from the string\n\
    \    local file_name = file_name:gsub(\"%.\", \"\") -- Remove all dots from the\
    \ string\n    local file_name = file_name:gsub(\"^[a-z]+\", \"\") -- Remove all\
    \ letters from the string\n    local file_name = file_name:gsub(\"^[A-Z]+\", \"\
    \") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^[%w]+\", \"\") ", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil and file_name ~= \"\" and file_name:sub(1, 1) ~= \".\"\
    \ then\n    return nil\n  end", "   if file_name == nil then\n      return nil\n\
    \   end\n   \n   local file_name = file_name:lower()\n   \n   if #file_name >\
    \ 3 then\n      return nil\n   end\n   \n   if file_name ~= file_name then\n \
    \     return nil\n   end\n   \n   if file_name:sub(1, 1) ~= '.' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, 1) ~= 'a' .. 'z' then\n      return\
    \ nil\n   end\n   \n   if file_name:sub(1, #file_name) ~= 'exe' then\n      return\
    \ nil\n   end\n   \n   return 'Yes'\nend", "    local file_name = file_name:lower()\n\
    \    local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n", "  local file_name = file_name:lower()\n\
    \  local dot_index = file_name:find(\".\") -- Find the position of the dot '.'\n\
    \  local file_name = file_name:sub(1, dot_index) -- Get the substring before the\
    \ dot\n  local file_name = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all letters\
    \ after the dot\n  local file_name = file_name:gsub(\"[^a-z0-9\\.]\", \"\") --\
    \ Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    ^0*\", \"\") -- Remove all leading zeroes\n  local file_name = file_name:gsub(\"\
    ^1*\", \"\") -- Remove all leading ones\n  local file_name = file_name:gsub(\"\
    ^2*\", \"\") -- Remove all leading twos\n  local file_name = file_name:gsub(\"\
    ^3*\", \"\") -- Remove all leading threes\n  local file_name = file_name:gsub(\"\
    ^4*\", \"\") -- Remove all leading fours\n  local file_name = file_name:gsub(\"\
    ^5*\", \"\") -- Remove all leading fives\n  local file_name = file_name:gsub(\"\
    ^6*\", \"\") -- Remove all leading sixes\n  local file_name = file_name:gsub(\"\
    ^7*\", \"\") -- Remove all leading sevens\n  local file_name = file_name:gsub(\"\
    ^8*\", \"\") -- Remove all leading eights\n  local file_name = file_name:gsub(\"\
    ^9*\", \"\") -- Remove all leading nines\n  local file_name = file_name:gsub(\"\
    ^[a-z_]+$\", \"\") -- Remove all letters after the dot\n  local file_name = file_name:gsub(\"\
    ^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric characters\n  local file_name\
    \ = file_name:gsub(\"^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric characters\n\
    \  local file_name = file_name:gsub(\"^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:gsub(\"^[^a-z0-9\\.]*$\", \"\") --\
    \ Remove all non-alphanumeric characters\n  local file_name = file_name:gsub(\"\
    ^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric characters\n  local file_name\
    \ = file_name:gsub(\"^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric characters\n\
    \  local file_name = file_name:gsub(\"^[^a-z0-9\\.]*$\", \"\") -- Remove all non-alphanumeric\
    \ characters\n  local file_name = file_name:g", "   if file_name == nil then\n\
    \      return nil\n   end\n   if string.len(file_name) ~= 3 then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,2) ~= string.sub(file_name,1,2)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,3) ~= string.sub(file_name,1,3)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,4) ~= string.sub(file_name,1,4)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,5) ~= string.sub(file_name,1,5)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,6) ~= string.sub(file_name,1,6)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,7) ~= string.sub(file_name,1,7)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,8) ~= string.sub(file_name,1,8)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,9) ~= string.sub(file_name,1,9)\
    \ then\n      return nil\n   end\n   return 'Yes'\nend", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if #file_name < 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= string.char(string.byte(\"a\") or string.byte(\"\
    A\")) then\n      return nil\n   end\n   if string.sub(file_name,string.len(file_name),string.len(file_name))\
    \ ~= string.char(string.byte(\"0\") or string.byte(\"9\")) then\n      return\
    \ nil\n   end\n   return true\nend", "    local file_name = string.lower(file_name)\n\
    \    local dot_index = string.find(file_name, \".\")\n    local file_name = string.sub(file_name,1,dot_index)\n\
    \    local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local ", "  -- Check that the file name contains exactly one dot '.'\n  if\
    \ file_name ~= nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \"\
    .\" then\n      return \"No\"\n    end\n    -- Check that the substring before\
    \ the dot is not empty, and it starts with a letter from the latin alphapet ('a'-'z'\
    \ and 'A'-'Z')\n    if file_name:sub(1, 1) ~= \"\" then\n      if string.find(string.lower(file_name:sub(1,\
    \ 1)), string.letters(string.byte(\"a\"))) then\n        return \"No\"\n     \
    \ end\n    end\n    -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2, string.len(file_name)),\
    \ \"exe\") ~= nil then\n      return \"Yes\"\n    end\n    if string.find(file_name:sub(2,\
    \ string.len(file_name)), \"dll\") ~= nil then\n      return \"Yes\"\n    end\n\
    \  end\n  return \"No\"\nend", "  -- Check that the file name contains exactly\
    \ one dot '.'\n  if file_name ~= nil then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= nil then\n      local letter_index = string.find(string.sub(file_name,1,1),\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n      if letter_index\
    \ == nil then\n        return \"No\"\n      end\n    end\n    -- Check that the\
    \ substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    local\
    \ extension_index = string.find(string.sub(file_name,dot_index+1), \"txt,exe,dll\"\
    )\n    if extension_index == nil then\n      return \"No\"\n    end\n  end\n \
    \ return \"Yes\"\nend", "    local file_name = string.lower(file_name)\n    local\
    \ dot_index = string.find(file_name, \".\")\n    local dot_string = string.sub(file_name,1,dot_index)\n\
    \    local dot_string_length = string.len(dot_string)\n    local dot_string_first_letter\
    \ = string.sub(dot_string,1,1)\n    local dot_string_last_letter = string.sub(dot_string,dot_string_length-1,dot_string_length)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.lower(dot_string_first_letter)\n\
    \    local dot_string_last_letter_lower = string.lower(dot_string_last_letter)\n\
    \    local dot_string_first_letter_upper = string.upper(dot_string_first_letter)\n\
    \    local dot_string_last_letter_upper = string.upper(dot_string_last_letter)\n\
    \    local dot_string_first_letter_lower = string.", "    local file_name = file_name:gsub(\"\
    ^[%d]+$\", \"\")\n    local file_name = file_name:gsub(\"%.\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    %.\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local\
    \ file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\"\
    )\n    local file_name = file_name:gsub", "    local file_name = file_name\n \
    \   local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local ", "    local file_name = file_name\n\
    \    local dot_index = string.find(file_name, \".\")\n    if dot_index == nil\
    \ then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub(1,\
    \ dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = file_name:sub",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= \"\" and file_name ~= \".\" then\n    -- Check that the file's\
    \ name contains exactly one dot '.'\n    if file_name ~= \".\" then\n      --\
    \ Check that the substring before the dot should not be empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name ~=\
    \ \"\" and file_name:sub(1, 1) ~= \"\" then\n        -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n        if file_name:sub(1,\
    \ 2) ~= \".\" and file_name:sub(1, 2) ~= \"exe\" and file_name:sub(1, 2) ~= \"\
    dll\" then\n          return true\n        else\n          return false\n    \
    \    end\n      else\n        return false\n      end\n    else\n      return\
    \ false\n    end\n  else\n    return false\n  end\nend", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if string.len(file_name) <= 3 then\n    \
    \  return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.sub(file_name, 1, 1) ~= string.char(string.byte(\"\
    a\")) then\n      return nil\n   end\n   if string.sub(file_name, string.len(file_name)\
    \ - 1, string.len(file_name)) ~= string.char(string.byte(\"z\")) then\n      return\
    \ nil\n   end\n   if string.sub(file_name, string.len(file_name) - 1, string.len(file_name))\
    \ ~= string.char(string.byte(\"A\")) then\n      return nil\n   end\n   return\
    \ true\nend", "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\
    ..\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"%\"\
    ) ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"/\") ~=\
    \ nil then\n      return nil\n   end\n   if string.find(file_name, \"\\\\\") ~=\
    \ nil then\n      return nil\n   end\n   if string.find(file_name, \":\") ~= nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"<\") ~= nil then\n\
    \      return nil\n   end\n   if string.find(file_name, \">\") ~= nil then\n \
    \     return nil\n   end\n   if string.find(file_name, \"|\") ~= nil then\n  \
    \    return nil\n   end\n   if string.find(file_name, \"?\") ~= nil then\n   \
    \   return nil\n   end\n   if string.find(file_name, \"*\") ~= nil then\n    \
    \  return nil\n   end\n   if string.find(file_name, \"[\") ~= nil then\n     \
    \ return nil\n   end\n   if string.find(file_name, \"]\") ~= nil then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") ~= nil then\n      return nil\n\
    \   end\n   if string.find(file_name, \"}\") ~= nil then\n      return nil\n \
    \  end\n   if string.find(file_name, \"(\") ~= nil then\n      return nil\n  \
    \ end\n   if string.find(file_name, \")\") ~= nil then\n      return nil\n   end\n\
    \   if string.find(file_name, \"|\") ~= nil then\n      return nil\n   end\n \
    \  if string.find(file_name, \"!\") ~= nil then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"%\") ~= nil then\n      return nil\n   end\n   if\
    \ string.find(file_name, \"+\") ~= nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"-\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"/\"\
    ) ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\\\\\"\
    ) ~= nil then\n      return nil\n   end\n   ", "   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n      return \"No\"\n   end\n   if string.find(file_name, \"\
    .\") == nil then\n", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil and file_name ~= \"\" then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    else\n      --\
    \ Check that there are no more than three digits in the file's name\n      if\
    \ string.find(file_name, \"%0\") ~= nil then\n        return \"No\"\n      else\n\
    \        -- Check that there are no more than three digits in the file's name\n\
    \        if string.find(file_name, \"%1\") ~= nil then\n          return \"No\"\
    \n        else\n          -- Check that there are no more than three digits in\
    \ the file's name\n          if string.find(file_name, \"%2\") ~= nil then\n \
    \           return \"No\"\n          else\n            -- Check that there are\
    \ no more than three digits in the file's name\n            if string.find(file_name,\
    \ \"%3\") ~= nil then\n              return \"No\"\n            else\n       \
    \       -- Check that there are no more than three digits in the file's name\n\
    \              if string.find(file_name, \"%4\") ~= nil then\n               \
    \ return \"No\"\n              else\n                -- Check that there are no\
    \ more than three digits in the file's name\n                if string.find(file_name,\
    \ \"%5\") ~= nil then\n                  return \"No\"\n                else\n\
    \                  -- Check that there are no more than three digits in the file's\
    \ name\n                  if string.find(file_name, \"%6\") ~= nil then\n    \
    \                return \"No\"\n                  else\n                    --\
    \ Check that there are no more than three digits in the file's name\n        \
    \            if string.find(file_name, \"%7\") ~= nil then\n                 \
    \     return \"No\"\n                    else\n                      -- Check\
    \ that there are no more than three digits in the file's name\n              \
    \        if string.find(file_name, \"%8\") ~= nil then\n                     \
    \   return \"No\"\n                      else\n                        -- Check\
    \ that there are no more than three digits in the file's name\n              \
    \          if string.find(file_name, \"%9\") ~= nil then\n                   \
    \       return \"No\"\n                        else\n                        \
    \  -- Check that there are no more than three digits in the file's name\n    \
    \                      if string.find(file_name, \"%0\") ~= nil then\n       \
    \                     return \"No\"\n                          else\n        \
    \                    -- Check that there are no more than three digits in the\
    \ file's name\n                            if string.find(file_name, \"%1\") ~=\
    \ nil then\n                              return \"No\"\n                    \
    \        else\n                              -- Check that there are no more than\
    \ three digits in the file's name\n                              if string.find(file_name,\
    \ \"%2\") ~= nil then\n                                return \"No\"\n       \
    \                       else\n                                -- Check that there\
    \ are no more than three digits in the file's name\n", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\
    \" then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        if string.find(file_name, \".\") ~= nil then\n \
    \         if string.find(file_name, \".\") ~= nil then\n            if string.find(file_name,\
    \ \".\") ~= nil then\n              if string.find(file_name, \".\") ~= nil then\n\
    \                if string.find(file_name, \".\") ~= nil then\n              \
    \    if string.find(file_name, \".\") ~= nil then\n                    if string.find(file_name,\
    \ \".\") ~= nil then\n                      if string.find(file_name, \".\") ~=\
    \ nil then\n                        if string.find(file_name, \".\") ~= nil then\n\
    \                          if string.find(file_name, \".\") ~= nil then\n    \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                          if string.find(file_name, \".\") ~= nil then\n    \
    \                              if string.find(file_name, \".\") ~= nil then\n\
    \                                    if string.find(file_name, \".\") ~= nil then\n\
    \                                      if string.find(file_name, \".\") ~= nil\
    \ then\n                                        if string.find(file_name, \".\"\
    ) ~= nil then\n                                          if string.find(file_name,\
    \ \".\") ~= nil then\n                                            if string.find(file_name,\
    \ \".\") ~= nil then\n                                              if string.find(file_name,\
    \ \".\") ~= nil then\n                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                  if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \     if string.find(file_name, \".\") ~= nil then\n                         \
    \                                     if string.find(file_name, \".\") ~= nil\
    \ then\n                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \           if string.find(file_name, \".\") ~= nil then\n                   \
    \                                                 if string.find(file_name, \"\
    .\") ~= nil then\n                                                           \
    \     ", "   if file_name == nil then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= nil then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if\
    \ string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \"\
    .\") ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\")\
    \ ~= 1 then\n      return nil\n   end\n   if string.find(file_name, \".\") ~=\
    \ 1 then\n      return nil\n   end\n   if string.", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\
    \" then\n    local file_name = string.lower(file_name)\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n      return \"\
    No\"\n    else\n      -- Check that there is only one dot '.'\n      if dot_index\
    \ > 1 then\n        return \"No\"\n      else\n        -- Check that there is\
    \ only one digit ('0'-'9') in the file's name\n        local digits_index = string.find(file_name,\
    \ \"[0-9]\")\n        if digits_index == nil then\n          return \"No\"\n \
    \       else\n          -- Check that there is only one digit ('0'-'9') in the\
    \ file's name\n          if digits_index > 1 then\n            return \"No\"\n\
    \          else\n            -- Check that there is only one letter ('a'-'z' or\
    \ 'A'-'Z') in the file's name\n            local letters_index = string.find(file_name,\
    \ \"[a-zA-Z]\")\n            if letters_index == nil then\n              return\
    \ \"No\"\n            else\n              -- Check that there is only one letter\
    \ ('a'-'z' or 'A'-'Z') in the file's name\n              if letters_index > 1\
    \ then\n                return \"No\"\n              else\n                --\
    \ Check that there is only one letter ('a'-'z' or 'A'-'Z') in the file's name\n\
    \                if letters_index > 1 then\n                  return \"No\"\n\
    \                else\n                  -- Check that there is only one letter\
    \ ('a'-'z' or 'A'-'Z') in the file's name\n                  if letters_index\
    \ > 1 then\n                    return \"No\"\n                  else\n      \
    \              -- Check that there is only one letter ('a'-'z' or 'A'-'Z') in\
    \ the file's name\n                    if letters_index > 1 then\n           \
    \           return \"No\"\n                    else\n                      --\
    \ Check that there is only one letter ('a'-'z' or 'A'-'Z') in the file's name\n\
    \                      if letters_index > 1 then\n                        return\
    \ \"No\"\n                      else\n                        -- Check that there\
    \ is only one letter ('a'-'z' or 'A'-'Z') in the file's name\n               \
    \         if letters_index > 1 then\n                          return \"No\"\n\
    \                        else\n                          -- Check that there is\
    \ only one letter ('a'-'z' or 'A'-'Z') in the file's name\n                  \
    \        return \"Yes\"\n                        end\n                      end\n\
    \                    end\n                  end\n                end\n       \
    \       end\n            end\n          end\n        end\n      end\n    end\n\
    \  end\nend", "  -- Check that the file name contains exactly one dot '.'\n  if\
    \ file_name ~= nil and file_name ~= '' then\n    if string.find(file_name, '.')\
    \ ~= nil then\n      -- Check that the substring before the dot should not be\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \      if string.find(file_name, '.') ~= nil then\n        if string.sub(file_name,1,1)\
    \ ~= nil then\n          if string.sub(file_name,1,1) ~= 'a' then\n          \
    \  if string.sub(file_name,1,1) ~= 'A' then\n              if string.find(string.sub(file_name,1,1),\
    \ '0') ~= nil then\n                if string.find(string.sub(file_name,1,1),\
    \ '9') ~= nil then\n                  return 'No'\n                else\n    \
    \              return 'Yes'\n                end\n              else\n       \
    \         return 'No'\n              end\n            else\n              return\
    \ 'Yes'\n            end\n          else\n            return 'No'\n          end\n\
    \        else\n          return 'No'\n        end\n      else\n        return\
    \ 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n    return 'No'\n\
    \  end\nend", "   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ > 3 then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'a' .. 'z' then\n    \
    \  return nil\n   end\n   if file_name:sub(1, 1) ~= 'A' .. 'Z' then\n      return\
    \ nil\n   end\n   if file_name:sub(2, 3) ~= '.txt' then\n      return nil\n  \
    \ end\n   if file_name:sub(2, 3) ~= '.exe' then\n      return nil\n   end\n  \
    \ if file_name:sub(2, 3) ~= '.dll' then\n      return nil\n   end\n   return 'Yes'\n\
    end", "    local file_name = file_name:gsub(\"^%d+\", \"\"):gsub(\"%.\", \"\"\
    )\n    local dot_index = file_name:find(\".\"):gsub(\"^%d+\", \"\")\n    local\
    \ dot_index = dot_index:gsub(\"%.\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[a-z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[A-Z]\", \"\")\n    local\
    \ dot_index = dot_index:gsub(\"^[a-zA-z]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[0-9]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^.]\", \"\")\n    local\
    \ dot_index = dot_index:gsub(\"^[^0-9]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^a-zA-z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^A-Z]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^0-9A-Z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^a-z]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^0-9]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^a-zA-z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^A-Z]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^0-9A-Z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^a-z]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^A-Za-z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^0-9]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^a-zA-z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^A-Z]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^0-9A-Z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^a-z]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^A-Za-z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^0-9]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^a-zA-z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^A-Z]\", \"\")\n    local dot_index = dot_index:gsub(\"\
    ^[^0-9A-Z]\", \"\")\n    local dot_index = dot_index:gsub(\"^[^a-z]\", \"\")\n\
    \    local dot_index = dot_index:gsub(\"^[^A-Za-z]\", \"\")\n    local dot_index\
    \ = dot_index:gsub(\"^[^0-9]\", \"\")", '  return string.find(file_name, "^%a..")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= nil and string.find(file_name, "%.") ~= nil and string.find(file_name, "%.")
    ~= ', "  -- Check that the file name contains exactly one dot\n  if file_name:sub(1,\
    \ 1) ~= '.' then\n    return 'No'\n  end\n  -- Check that the file name does not\
    \ contain more than three digits\n  if string.find(file_name, '%%d') then\n  \
    \  return 'No'\n  end\n  -- Check that the file name does not contain any non-letter\
    \ characters\n  if string.find(file_name, '[^a-zA-Z]') then\n    return 'No'\n\
    \  end\n  -- Check that the file name does not start with a latin alphapet letter\n\
    \  if string.find(file_name, '%a') then\n    return 'No'\n  end\n  -- Check that\
    \ the file name does not start with a latin alphapet letter\n  if string.find(file_name,\
    \ '%A') then\n    return 'No'\n  end\n  -- Check that the file name does not start\
    \ with a latin alphapet letter\n  if string.find(file_name, '%z') then\n    return\
    \ 'No'\n  end\n  -- Check that the file name does not start with a latin alphapet\
    \ letter\n  if string.find(file_name, '%Z') then\n    return 'No'\n  end\n  --\
    \ Check that the file name does not start with a latin alphapet letter\n  if string.find(file_name,\
    \ '%0') then\n    return 'No'\n  end\n  -- Check that the file name does not start\
    \ with a latin alphapet letter\n  if string.find(file_name, '%9') then\n    return\
    \ 'No'\n  end\n  -- Check that the file name does not start with a latin alphapet\
    \ letter\n  if string.find(file_name, '%A') then\n    return 'No'\n  end\n  --\
    \ Check that the file name does not start with a latin alphapet letter\n  if string.find(file_name,\
    \ '%a') then\n    return 'No'\n  end\n  -- Check that the file name does not start\
    \ with a latin alphapet letter\n  if string.find(file_name, '%z') then\n    return\
    \ 'No'\n  end\n  -- Check that the file name does not start with a latin alphapet\
    \ letter\n  if string.find(file_name, '%Z') then\n    return 'No'\n  end\n  --\
    \ Check that the file name does not start with a latin alphapet letter\n  if string.find(file_name,\
    \ '%0') then\n    return 'No'\n  end\n  -- Check that the file name does not start\
    \ with a latin alphapet letter\n  if string.find(file_name, '%9') then\n    return\
    \ 'No'\n  end\n  -- Check that the file name does not start with a latin alphapet\
    \ letter\n  if string.find(file_name, '%A') then\n    return 'No'\n  end\n  --\
    \ Check that the file name does not start with a latin alphapet letter\n  if string.find(file_name,\
    \ '%a') then\n", "  -- Check that the file name contains exactly one dot '.'\n\
    \  if file_name ~= nil and file_name ~= \"\" then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, \".\") ~= nil and string.sub(file_name,1,1)\
    \ ~= nil then\n        if string.find(string.sub(file_name,1,1), string.letters)\
    \ ~= nil then\n          -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n          if string.find(string.sub(file_name,1,string.find(file_name,\
    \ \".\")),{\"txt\",\"exe\",\"dll\"}) ~= nil then\n            -- Return Yes if\
    \ the file's name is valid\n            return \"Yes\"\n          else\n     \
    \       -- Return No if the file's name is invalid\n            return \"No\"\n\
    \          end\n        else\n          -- Return No if the file's name is invalid\n\
    \          return \"No\"\n        end\n      else\n        -- Return No if the\
    \ file's name is invalid\n        return \"No\"\n      end\n    else\n      --\
    \ Return No if the file's name is invalid\n      return \"No\"\n    end\n  else\n\
    \    -- Return No if the file's name is invalid\n    return \"No\"\n  end\nend",
  "    local file_name = file_name:gsub(\"^%d+\", \"\") -- Remove all digits from\
    \ the string\n    local file_name = file_name:gsub(\"%.\", \"\") -- Remove all\
    \ dots from the string\n    local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\
    \") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    [^A-Za-z]\", \"\") -- Remove all letters from the string\n    local file_name\
    \ = file_name:gsub(\"^[A-Za-z]\", \"\") -- Remove all letters from the string\n\
    \    local file_name = file_name:gsub(\"^.\", \"\") -- Remove all letters from\
    \ the string\n    local file_name = file_name:gsub(\"^%\", \"\") -- Remove all\
    \ letters from the string\n    local file_name = file_name:gsub(\"^%\", \"\")\
    \ -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name:gsub(\"\
    ^%\", \"\") -- Remove all letters from the string\n    local file_name = file_name",
  "  -- Check that the file name contains exactly one dot '.'\n  if file_name ~= nil\
    \ and file_name ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n      return\
    \ false\n    end\n    -- Check that the substring before the dot should not be\
    \ empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if file_name ~= '' then\n      if file_name:sub(1, 1) ~= 'a' then\n     \
    \   return false\n      end\n      if file_name:sub(1, 1) ~= 'b' then\n      \
    \  return false\n      end\n      if file_name:sub(1, 1) ~= 'c' then\n       \
    \ return false\n      end\n      if file_name:sub(1, 1) ~= 'd' then\n        return\
    \ false\n      end\n      if file_name:sub(1, 1) ~= 'e' then\n        return false\n\
    \      end\n      if file_name:sub(1, 1) ~= 'f' then\n        return false\n \
    \     end\n      if file_name:sub(1, 1) ~= 'g' then\n        return false\n  \
    \    end\n      if file_name:sub(1, 1) ~= 'h' then\n        return false\n   \
    \   end\n      if file_name:sub(1, 1) ~= 'i' then\n        return false\n    \
    \  end\n      if file_name:sub(1, 1) ~= 'j' then\n        return false\n     \
    \ end\n      if file_name:sub(1, 1) ~= 'k' then\n        return false\n      end\n\
    \      if file_name:sub(1, 1) ~= 'l' then\n        return false\n      end\n \
    \     if file_name:sub(1, 1) ~= 'm' then\n        return false\n      end\n  \
    \    if file_name:sub(1, 1) ~= 'n' then\n        return false\n      end\n   \
    \   if file_name:sub(1, 1) ~= 'o' then\n        return false\n      end\n    \
    \  if file_name:sub(1, 1) ~= 'p' then\n        return false\n      end\n     \
    \ if file_name:sub(1, 1) ~= 'q' then\n        return false\n      end\n      if\
    \ file_name:sub(1, 1) ~= 'r' then\n        return false\n      end\n      if file_name:sub(1,\
    \ 1) ~= 's' then\n        return false\n      end\n      if file_name:sub(1, 1)\
    \ ~= 't' then\n        return false\n      end\n      if file_name:sub(1, 1) ~=\
    \ 'u' then\n        return false\n      end\n      if file_name:sub(1, 1) ~= 'v'\
    \ then\n        return false\n      end\n      if file_name:sub(1, 1) ~= 'w' then\n\
    \        return false\n      end\n      if file_name:sub(1, 1) ~= 'x' then\n \
    \       return false\n      end", "   if #file_name > 3 then\n      return nil\n\
    \   end\n   if #file_name == 1 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= 'a' then\n\
    \      return nil\n   end\n   if file_name:sub(1, 1) ~= 'z' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= 'Z' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 2) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1, 3) ~= 'txt'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 3) ~= 'exe' then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 3) ~= 'dll' then\n      return\
    \ nil\n   end\n   return 'Yes'\nend", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name ~= \".txt\" then\n    -- Check that the substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name ~= \".txt\" then\n      -- Check that the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n      if file_name ~=\
    \ nil and file_name ~= \"\" and file_name ~= \".\" and file_name ~= \".txt\" then\n\
    \        -- Check that the substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n        if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name ~= \".txt\" then\n          -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n          if file_name\
    \ ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name ~= \".txt\"\
    \ then\n            -- Check that the substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n            if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" and file_name ~= \".txt\" then\n            \
    \  -- Check that the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n              if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name ~= \".txt\" then\n                -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n              \
    \  if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name\
    \ ~= \".txt\" then\n                  -- Check that the substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n                  if file_name\
    \ ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name ~= \".txt\"\
    \ then\n                    -- Check that the substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n                    if file_name ~= nil\
    \ and file_name ~= \"\" and file_name ~= \".\" and file_name ~= \".txt\" then\n\
    \                      -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n                      if file_name ~= nil and\
    \ file_name ~= \"\" and file_name ", '  return string.find(file_name, "^[0-9]")
    ~= nil and string.find(file_name, ".") ~= nil and string.find(file_name, "^[a-zA-Z]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ~= nil and string.find(file_name, "^[^.]")
    ~= nil and string.find(file_name, "^[^.]") ', "   if #file_name > 3 then\n   \
    \   return false\n   end\n   if #file_name < 1 then\n      return false\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '~' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 3) ~= '.' then\n      return false\n \
    \  end\n   if file_name:sub(1, 1) ~= 'a' or file_name:sub(1, 1) ~= 'z' then\n\
    \      return false\n   end\n   if file_name:sub(2, 3) ~= 'exe' or file_name:sub(2,\
    \ 3) ~= 'dll' then\n      return false\n   end\n   return true\nend", "  local\
    \ file_name = file_name:lower()\n  local file_name = string.gsub(file_name, \"\
    \ \", \"\")\n  local file_name = string.gsub(file_name, \":\", \"\")\n  local\
    \ file_name = string.gsub(file_name, \",\", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n", "   if file_name == nil\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\") ~= nil then\n\
    \      if string.find(file_name, \".\") == 1 then\n         if string.find(file_name,\
    \ \".\") == 1 then\n            if string.find(file_name, \".\") == 1 then\n \
    \              if string.find(file_name, \".\") == 1 then\n                  if\
    \ string.find(file_name, \".\") == 1 then\n                     return nil\n \
    \                 end\n               end\n            end\n         end\n   \
    \   end\n   end\n   if string.find(file_name, \".\") == nil then\n      if string.find(file_name,\
    \ \".\") == nil then\n         if string.find(file_name, \".\") == nil then\n\
    \            if string.find(file_name, \".\") == nil then\n               if string.find(file_name,\
    \ \".\") == nil then\n                  if string.find(file_name, \".\") == nil\
    \ then\n                     return nil\n                  end\n             \
    \  end\n            end\n         end\n      end\n   end\n   if string.find(file_name,\
    \ \".\") == nil then\n      if string.find(file_name, \".\") == nil then\n   \
    \      if string.find(file_name, \".\") == nil then\n            if string.find(file_name,\
    \ \".\") == nil then\n               if string.find(file_name, \".\") == nil then\n\
    \                  if string.find(file_name, \".\") == nil then\n            \
    \         return nil\n                  end\n               end\n            end\n\
    \         end\n      end\n   end\n   if string.find(file_name, \".\") == nil then\n\
    \      if string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ nil\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\") == nil then\n\
    \               if string.find(file_name, \".\") == nil then\n               \
    \   if string.find(file_name, \".\") == nil then\n                     return\
    \ nil\n                  end\n               end\n            end\n         end\n\
    \      end\n   end\n   if string.find(file_name, \".\") == nil then\n      if\
    \ string.find(file_name, \".\") == nil then\n         if string.find(file_name,\
    \ \".\") == nil then\n            if string.find(file_name, \".\"", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" then\n    -- Check that the substring before\
    \ the dot should not be empty, and it starts with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name:sub(1, 1) ~= \"\" then\n      -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n      if file_name\
    \ ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1, 1)\
    \ ~= \".\" then\n        -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n        if file_name ~= nil and file_name ~= \"\" and\
    \ file_name ~= \".\" and file_name:sub(1, 1) ~= \".\" and file_name:sub(2, 3)\
    \ ~= \"\" then\n          -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n          if file_name ~= nil and file_name ~=\
    \ \"\" and file_name ~= \".\" and file_name:sub(1, 1) ~= \".\" and file_name:sub(2,\
    \ 3) ~= \".\" and file_name:sub(3, 4) ~= \"\" then\n            -- Check that\
    \ the substring after the dot is one of these: ['txt', 'exe', 'dll']\n       \
    \     if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1,\
    \ 1) ~= \".\" and file_name:sub(2, 3) ~= \".\" and file_name:sub(3, 4) ~= \".\"\
    \ and file_name:sub(4, 5) ~= \"\" then\n              -- Check that the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n              if file_name\
    \ ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1, 1)\
    \ ~= \".\" and file_name:sub(2, 3) ~= \".\" and file_name:sub(3, 4) ~= \".\" and\
    \ file_name:sub(4, 5) ~= \".\" and file_name:sub(5, 6) ~= \"\" then\n        \
    \        -- Check that the substring after the dot is one of these: ['txt', 'exe',\
    \ 'dll']\n                if file_name ~= nil and file_name ~= \"\" and file_name\
    \ ~= \".\" and file_name:sub(1, 1) ~= \".\" and file_name:sub(2, 3) ~= \".\" and\
    \ file_name:sub(3, 4) ~= \".\" and file_name:sub(4, 5) ~= \".\" and file_name:sub(5,\
    \ 6) ~= \".\" and file_name:sub(6, ", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if\
    \ file_name:sub(1, 1) ~= \".\" then\n      return \"No\"\n    end\n    -- Check\
    \ that the substring before the dot is not empty\n    if file_name:sub(1, 1) ~=\
    \ \"\" then\n      -- Check that the substring before the dot starts with a latin\
    \ alphapet letter\n      if file_name:sub(1, 1) ~= string.lower(string.sub(string.lower(file_name),\
    \ 1, 1)) then\n        return \"No\"\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name,\
    \ \"exe\") ~= nil then\n      return \"Yes\"\n    end\n    if string.find(file_name,\
    \ \"dll\") ~= nil then\n      return \"Yes\"\n    end\n    if string.find(file_name,\
    \ \"txt\") ~= nil then\n      return \"Yes\"\n    end\n  end\n  return \"No\"\n\
    end", "   if file_name == nil then\n      return nil\n   end", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) <= 3 then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n     \
    \ return nil\n   end\n   if string.sub(file_name,1,2) ~= 'z' then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,3) ~= 'A' then\n      return nil\n\
    \   end\n   if string.sub(file_name,string.len(file_name),string.len(file_name))\
    \ ~= 'txt' then\n      return nil\n   end\n   if string.sub(file_name,string.len(file_name),string.len(file_name))\
    \ ~= 'exe' then\n      return nil\n   end\n   if string.sub(file_name,string.len(file_name),string.len(file_name))\
    \ ~= 'dll' then\n      return nil\n   end\n   return 'Yes'\nend", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n      return \"No\"\n\
    \    end\n    -- Check that the substring before the dot is not empty, and it\
    \ starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name\
    \ ~= nil and file_name ~= \"\" then\n      if file_name:sub(1, 1) ~= \"\" then\n\
    \        if string.find(file_name, \".\") then\n          if string.find(file_name,\
    \ \".\", 1, true) then\n            if string.find(file_name, \".\", 1, true)\
    \ then\n              if string.find(file_name, \".\", 1, true) then\n       \
    \         if string.find(file_name, \".\", 1, true) then\n                  if\
    \ string.find(file_name, \".\", 1, true) then\n                    if string.find(file_name,\
    \ \".\", 1, true) then\n                      if string.find(file_name, \".\"\
    , 1, true) then\n                        if string.find(file_name, \".\", 1, true)\
    \ then\n                          if string.find(file_name, \".\", 1, true) then\n\
    \                            if string.find(file_name, \".\", 1, true) then\n\
    \                              if string.find(file_name, \".\", 1, true) then\n\
    \                                if string.find(file_name, \".\", 1, true) then\n\
    \                                  return \"No\"\n                           \
    \     end\n                              end\n                            end\n\
    \                          end\n                        end\n                \
    \      end\n                    end\n                  end\n                end\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  return \"Yes\"\nend", "   if file_name == nil then\n      return\
    \ nil\n   end\n   if #file_name > 3 then\n      return nil\n   end\n   if file_name\
    \ ~= string.sub(file_name, 1, 1) then\n      return nil\n   end\n   if string.sub(file_name,\
    \ 1, 1) ~= 'a' then\n      return nil\n   end\n   if string.sub(file_name, 1,\
    \ 1) ~= 'z' then\n      return nil\n   end\n   if string.sub(file_name, 1, 1)\
    \ ~= 'A' then\n      return nil\n   end\n   if string.sub(file_name, 1, 1) ~=\
    \ 'Z' then\n      return nil\n   end\n   if string.sub(file_name, 1, 2) ~= '.'\
    \ then\n      return nil\n   end\n   if string.sub(file_name, 1, 3) ~= '.' then\n\
    \      return nil\n   end\n   if string.sub(file_name, 1, 4) ~= '.' then\n   \
    \   return nil\n   end\n   if string.sub(file_name, 1, 5) ~= '.' then\n      return\
    \ nil\n   end\n   if string.sub(file_name, 1, 6) ~= '.' then\n      return nil\n\
    \   end\n   if string.sub(file_name, 1, 7) ~= '.' then\n      return nil\n   end\n\
    \   if string.sub(file_name, 1, 8) ~= '.' then\n      return nil\n   end\n   if\
    \ string.sub(file_name, 1, 9) ~= '.' then\n      return nil\n   end\n   return\
    \ 'Yes'\nend", "  -- Check that the file name contains exactly one dot '.'\n \
    \ if file_name:sub(1,1) ~= '.' then\n    return 'No'\n  end\n  -- Check that there\
    \ are no more than three digits in the file's name\n  local digits = file_name:sub(1,3)\n\
    \  if digits ~= '' then\n    if tonumber(digits) ~= digits then\n      return\
    \ 'No'\n    end\n  end\n  -- Check that there are no more than three digits in\
    \ the file's name\n  local letters = file_name:sub(1,1)\n  if letters ~= '' then\n\
    \    if tonumber(letters) ~= letters then\n      return 'No'\n    end\n  end\n\
    \  -- Check that there are no more than three digits in the file's name\n  local\
    \ letters = file_name:sub(1,1)\n  if letters ~= '' then\n    if tonumber(letters)\
    \ ~= letters then\n      return 'No'\n    end\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local letters = file_name:sub(1,1)\n\
    \  if letters ~= '' then\n    if tonumber(letters) ~= letters then\n      return\
    \ 'No'\n    end\n  end\n  -- Check that there are no more than three digits in\
    \ the file's name\n  local letters = file_name:sub(1,1)\n  if letters ~= '' then\n\
    \    if tonumber(letters) ~= letters then\n      return 'No'\n    end\n  end\n\
    \  -- Check that there are no more than three digits in the file's name\n  local\
    \ letters = file_name:sub(1,1)\n  if letters ~= '' then\n    if tonumber(letters)\
    \ ~= letters then\n      return 'No'\n    end\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local letters = file_name:sub(1,1)\n\
    \  if letters ~= '' then\n    if tonumber(letters) ~= letters then\n      return\
    \ 'No'\n    end\n  end\n  -- Check that there are no more than three digits in\
    \ the file's name\n  local letters = file_name:sub(1,1)\n  if letters ~= '' then\n\
    \    if tonumber(letters) ~= letters then\n      return 'No'\n    end\n  end\n\
    \  -- Check that there are no more than three digits in the file's name\n  local\
    \ letters = file_name:sub(1,1)\n  if letters ~= '' then\n    if tonumber(letters)\
    \ ~= letters then\n      return 'No'\n    end\n  end\n  -- Check that there are\
    \ no more than three digits in the file's name\n  local letters = file_name:sub(1,1)\n\
    \  if letters ~= '' then\n    if tonumber(", "   if file_name == nil then\n  \
    \    return nil\n   end\n   if string.len(file_name) ~= 3 then\n      return nil\n\
    \   end\n   if string.find(file_name, \".\") ~= 1 then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1) then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,1) ~= 'a' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,1) ~= 'z' then\n      return nil\n   end\n\
    \   if string.sub(file_name,1,2) ~= string.sub(file_name,1,2) then\n      return\
    \ nil\n   end\n   if string.sub(file_name,1,2) ~= 'A' then\n      return nil\n\
    \   end\n   if string.sub(file_name,1,2) ~= 'Z' then\n      return nil\n   end\n\
    \   return 'Yes'\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    local dot_index =\
    \ string.find(file_name, \".\")\n    if dot_index == nil then\n      return \"\
    No\"\n    end\n    -- Check that the substring before the dot is not empty, and\
    \ it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if\
    \ string.sub(file_name,1,1) ~= nil and string.sub(file_name,1,1) ~= \"\" then\n\
    \      local first_letter = string.sub(file_name,1,1)\n      if first_letter ~=\
    \ nil and first_letter ~= \"\" then\n        local letter_index = string.find(first_letter,\
    \ \"a\")\n        if letter_index == nil then\n          return \"No\"\n     \
    \   end\n      end\n    end\n    -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n    local extensions = { \"txt\", \"exe\"\
    , \"dll\" }\n    local extension_index = string.find(file_name, extensions)\n\
    \    if extension_index == nil then\n      return \"No\"\n    end\n  end\n  return\
    \ \"Yes\"\nend", "   if file_name == nil then\n      return nil\n   end\n   if\
    \ string.len(file_name) > 3 then\n      return nil\n   end\n   if string.find(file_name,\
    \ \".\") then\n      return nil\n   end\n   if string.find(file_name, \"..\")\
    \ then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"/\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"\\\\\") then\n      return nil\n\
    \   end\n   if string.find(file_name, \":\") then\n      return nil\n   end\n\
    \   if string.find(file_name, \"<\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \">\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"?\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"*\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"[\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"]\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"{\") then\n      return nil\n   end\n   if string.find(file_name, \"}\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"(\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \")\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"?\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"*\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"(\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \")\") then\n      return nil\n   end\n   if string.find(file_name, \"|\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"/\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"\\\\\") then", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name:sub(1,1) ~= '.' then\n    return 'No'\n\
    \  end\n  -- Check that the file name starts with a latin alphapet letter\n  if\
    \ file_name:sub(1,1) ~= 'a' then\n    return 'No'\n  end\n  -- Check that the\
    \ file name contains only latin alphapet letters and '0'-'9'\n  local count =\
    \ 0\n  for i = 1, #file_name do\n    if file_name:sub(i,i) ~= 'a' then\n     \
    \ count = count + 1\n    end\n  end\n  if count ~= 1 then\n    return 'No'\n \
    \ end\n  -- Check that the file name contains only 'txt', 'exe', 'dll'\n  local\
    \ extension = file_name:sub((#file_name),(#file_name))\n  if extension == 'txt'\
    \ or extension == 'exe' or extension == 'dll' then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "    local file_name = file_name:lower()\n    local dot_index\
    \ = file_name:find(\".\") -- Find the position of the first dot '.'\n    local\
    \ file_name = file_name:sub(1, dot_index) -- Remove the dot '.'\n    local file_name\
    \ = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all the letters after the dot\
    \ '.'\n    local file_name = file_name:gsub(\"[\\.]$\", \"\") -- Remove the dot\
    \ from the end of the string\n    local file_name = file_name:gsub(\"^[a-z_]+\"\
    , \"\") -- Remove all the letters before the dot '.'\n    local file_name = file_name:gsub(\"\
    [\\.]$\", \"\") -- Remove the dot from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all the letters before the dot\
    \ '.'\n    local file_name = file_name:gsub(\"[\\.]$\", \"\") -- Remove the dot\
    \ from the end of the string\n    local file_name = file_name:gsub(\"^[a-z_]+\"\
    , \"\") -- Remove all the letters before the dot '.'\n    local file_name = file_name:gsub(\"\
    [\\.]$\", \"\") -- Remove the dot from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all the letters before the dot\
    \ '.'\n    local file_name = file_name:gsub(\"[\\.]$\", \"\") -- Remove the dot\
    \ from the end of the string\n    local file_name = file_name:gsub(\"^[a-z_]+\"\
    , \"\") -- Remove all the letters before the dot '.'\n    local file_name = file_name:gsub(\"\
    [\\.]$\", \"\") -- Remove the dot from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all the letters before the dot\
    \ '.'\n    local file_name = file_name:gsub(\"[\\.]$\", \"\") -- Remove the dot\
    \ from the end of the string\n    local file_name = file_name:gsub(\"^[a-z_]+\"\
    , \"\") -- Remove all the letters before the dot '.'\n    local file_name = file_name:gsub(\"\
    [\\.]$\", \"\") -- Remove the dot from the end of the string\n    local file_name\
    \ = file_name:gsub(\"^[a-z_]+\", \"\") -- Remove all the letters before the dot\
    \ '.'\n    local file_name = file_name:gsub(\"[\\.]$\", \"\") -- Remove the dot\
    \ from the end of the string\n    local file_name = file_name:gsub(\"^[a-z_]+\"\
    , \"\") -- Remove all the letters before the dot '.'\n    local file_name = file_name:gsub(\"\
    [\\.]", "   if #file_name > 3 then\n      return false\n   end\n   if #file_name\
    \ == 0 then\n      return false\n   end\n   if file_name:sub(1, 1) ~= '\\' then\n\
    \      return false\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return\
    \ false\n   end\n   if file_name:sub(2, 1) ~= '.' then\n      return false\n \
    \  end\n   if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n      return false\n   end\n   if string.find(file_name:sub(2,\
    \ 1), {'txt', 'exe', 'dll'}) == nil then\n      return false\n   end\n   return\
    \ true\nend", "  -- Check that the file name contains exactly one dot '.'\n  if\
    \ file_name ~= nil and file_name ~= \"\" then\n    local dot_index = string.find(file_name,\
    \ \".\")\n    if dot_index == nil then\n      return \"No\"\n    end\n    -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if string.sub(file_name,1,1)\
    \ ~= \"\" then\n      local first_letter = string.sub(file_name,1,1)\n      if\
    \ first_letter ~= string.sub(file_name,1,1) then\n        return \"No\"\n    \
    \  end\n    end\n    -- Check that the substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    local extensions = { \"txt\", \"exe\", \"\
    dll\" }\n    local extension_index = string.find(file_name, \".\")\n    if extension_index\
    \ == nil then\n      return \"No\"\n    end\n    local extension = string.sub(file_name,extension_index+1)\n\
    \    if extension_index == nil then\n      return \"No\"\n    end\n    if extension_index\
    \ > 1 then\n      local extension_length = string.len(extension)\n      if extension_length\
    \ < 2 then\n        return \"No\"\n      end\n      local extension_letter = string.sub(extension,1,1)\n\
    \      if extension_letter ~= string.sub(extension,1,1) then\n        return \"\
    No\"\n      end\n    end\n  end\n  return \"Yes\"\nend", "  -- Check that the\
    \ file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil and string.sub(file_name,1,1) ~= nil then\n        -- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \        if string.find(file_name, \".\") ~= nil and string.find(file_name, \"\
    .\", string.find(file_name, \".\", 1) + 1) ~= nil then\n          -- Check that\
    \ the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \          if string.find(file_name, \".\", string.find(file_name, \".\", 1) +\
    \ 1) ~= nil and string.find(file_name, \".\", string.find(file_name, \".\", 1)\
    \ + 1) ~= nil then\n            -- Check that the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n            if string.find(file_name,\
    \ \".\", string.find(file_name, \".\", 1) + 1) ~= nil and string.find(file_name,\
    \ \".\", string.find(file_name, \".\", 1) + 1) ~= nil then\n              return\
    \ 'Yes'\n            else\n              return 'No'\n            end\n      \
    \    else\n            return 'No'\n          end\n        else\n          return\
    \ 'No'\n        end\n      else\n        return 'No'\n      end\n    else\n  \
    \    return 'No'\n    end\n  else\n    return 'No'\n  end\nend", "  -- Check that\
    \ the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= \"\" then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check\
    \ that the substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil then\n        if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \          if string.find(file_name, \".\", 1, 1) ~= nil then\n            if\
    \ string.find(file_name, \".\", 1, 1) ~= nil then\n              if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                if string.find(file_name, \".\", 1,\
    \ 1) ~= nil then\n                  if string.find(file_name, \".\", 1, 1) ~=\
    \ nil then\n                    if string.find(file_name, \".\", 1, 1) ~= nil\
    \ then\n                      if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                        if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                          if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                            if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                              if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                                if string.find(file_name, \".\", 1, 1) ~= nil\
    \ then\n                                  if string.find(file_name, \".\", 1,\
    \ 1) ~= nil then\n                                    if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                      if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                          if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                            if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                              if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                if\
    \ string.find(file_name, \".\", 1, 1) ~= nil then\n                          \
    \                        if string.find(file_name, \".\", 1, 1) ~= nil then\n\
    \                                                    if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                 \
    \     if string.find(file_name, \".\", 1, 1) ~= nil then\n                   \
    \                                     if string.find(file_name, \".\", 1, 1) ~=\
    \ nil then\n                                                          if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n                                                 \
    \           if string.find(file_name, \".\", 1, 1) ~= nil then\n             \
    \                                                 if string.find(", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if string.len(file_name) > 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"..\") then\n      return nil\n \
    \  end\n   if string.find(file_name, \"%\") then\n      return nil\n   end\n \
    \  if string.find(file_name, \"/\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\\\") then\n      return nil\n   end\n   if string.find(file_name, \":\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"?\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \"<\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \">\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"|\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"&\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"%\") then\n      return nil\n   end\n   if string.find(file_name, \"^\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"-\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"+\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"=\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"~\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"`\") then\n      return nil\n   end\n   if string.find(file_name, \"[\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"]\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"{\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"}\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"|\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \";\") then\n      return nil\n   end\n   if string.find(file_name, \"%\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"=\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"<\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \">\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"`\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"[\") then\n      return nil\n   end\n   if string.find(file_name, \"]", " \
    \  if file_name == nil then\n      return nil\n   end\n   \n   local file_name\
    \ = file_name:lower()\n   \n   if #file_name > 3 then\n      return nil\n   end\n\
    \   \n   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '.' then\n \
    \     return nil\n   end\n   \n   if file_name:sub(1, 1) ~= string.byte(\"a\"\
    ) or file_name:sub(1, 1) ~= string.byte(\"z\") or file_name:sub(1, 1) ~= string.byte(\"\
    A\") or file_name:sub(1, 1) ~= string.byte(\"Z\") then\n      return nil\n   end\n\
    \   \n   if string.find(file_name, \".\") then\n      return nil\n   end\n   \n\
    \   if string.find(file_name, \".\", 1, true) then\n      return nil\n   end\n\
    \   \n   return true\nend", "  -- Check that the file name contains exactly one\
    \ dot '.'\n  if file_name ~= nil and file_name ~= '' then\n    if file_name:sub(1,\
    \ 1) ~= '.' then\n      return 'No'\n    end\n    -- Check that the substring\
    \ before the dot is not empty\n    if file_name:sub(1, 1) ~= '' then\n      --\
    \ Check that the substring before the dot starts with a latin alphapet letter\n\
    \      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1),\
    \ 1, 1)) then\n        return 'No'\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n    if string.find(file_name:sub(2,\
    \ #file_name), 'exe') ~= nil then\n      return 'Yes'\n    end\n    if string.find(file_name:sub(2,\
    \ #file_name), 'dll') ~= nil then\n      return 'Yes'\n    end\n  end\n  return\
    \ 'No'\nend", "   if string.find(file_name, \".\") ~= nil then\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n      local file_name = string.gsub(file_name, \" \", \"\")\n\
    \      local file_name = string.gsub(file_name, \" \", \"\")\n      local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n      local file_name = string.g", " \
    \  if file_name == nil then\n      return nil\n   end\n   if string.len(file_name)\
    \ <= 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \"..\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"%\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"/\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"\\\\\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \":\") then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n\
    \      return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"?\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"*\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\"\") then\n      return nil\n   end\n   if string.find(file_name, \"'\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"?\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"*\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\"\") then\n      return nil\n   end\n   if string.find(file_name, \"'\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"?\") then\n      return nil\n   end\n  \
    \ if string.find(file_name, \"*\") then\n      return nil\n   end\n   if string.find(file_name,\
    \ \"\\\"\") then\n      return nil\n   end\n   if string.find(file_name, \"'\"\
    ) then\n      return nil\n   end\n   if string.find(file_name, \"<\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \">\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \"|\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \"?", "  -- Check that the file name contains\
    \ exactly one dot '.'\n  if file_name ~= nil and file_name ~= '' then\n    if\
    \ string.find(file_name, \".\") ~= nil then\n      -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name, \".\") ~= nil\
    \ then\n        if string.sub(file_name,1,1) ~= string.char(string.byte(\"a\"\
    )) then\n          if string.sub(file_name,1,1) ~= string.char(string.byte(\"\
    A\")) then\n            -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n            if string.find(file_name, \".\"\
    ) ~= nil then\n              if string.find(file_name, \".\") ~= nil then\n  \
    \              if string.find(file_name, \".\") ~= nil then\n                \
    \  if string.find(file_name, \".\") ~= nil then\n                    if string.find(file_name,\
    \ \".\") ~= nil then\n                      if string.find(file_name, \".\") ~=\
    \ nil then\n                        if string.find(file_name, \".\") ~= nil then\n\
    \                          if string.find(file_name, \".\") ~= nil then\n    \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                          return 'Yes'\n                              else\n\
    \                                return 'No'\n                              end\n\
    \                            else\n                              return 'No'\n\
    \                            end\n                          else\n           \
    \                 return 'No'\n                          end\n               \
    \         else\n                          return 'No'\n                      \
    \  end\n                      else\n                        return 'No'\n    \
    \                  end\n                    else\n                      return\
    \ 'No'\n                    end\n                  else\n                    return\
    \ 'No'\n                  end\n                else\n                  return\
    \ 'No'\n                end\n              else\n                return 'No'\n\
    \              end\n            else\n              return 'No'\n            end\n\
    \          else\n            return 'No'\n          end\n        else\n      \
    \    return 'No'\n        end\n      else\n        return 'No'\n      end\n  \
    \  else\n      return 'No'\n    end\n  else\n    return 'No'\n  end\nend", " \
    \   local num_digits = string.len(file_name)\n    local dot_index = string.find(file_name,\
    \ \".\")\n    local dot_string = string.sub(file_name,dot_index+1)\n    local\
    \ dot_string_length = string.len(dot_string)\n    local dot_string_start_index\
    \ = string.find(dot_string, \"a\")\n    local dot_string_end_index = string.find(dot_string,\
    \ \"z\")\n    local dot_string_letter = string.sub(dot_string,dot_string_start_index,dot_string_end_index)\n\
    \    local dot_string_letter_index = string.find(dot_string_letter, \"a\")\n \
    \   local dot_string_letter_length = string.len(dot_string_letter)\n    local\
    \ dot_string_letter_start_index = string.find(dot_string_letter, \"a\")\n    local\
    \ dot_string_letter_end_index = string.find(dot_string_letter, \"z\")\n    local\
    \ dot_string_letter_letter = string.sub(dot_string_letter,dot_string_letter_start_index,dot_string_letter_end_index)\n\
    \    local dot_string_letter_letter_index = string.find(dot_string_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_length = string.len(dot_string_letter_letter)\n\
    \    local dot_string_letter_letter_start_index = string.find(dot_string_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_end_index = string.find(dot_string_letter_letter,\
    \ \"z\")\n    local dot_string_letter_letter_letter = string.sub(dot_string_letter_letter,dot_string_letter_letter_start_index,dot_string_letter_letter_end_index)\n\
    \    local dot_string_letter_letter_letter_index = string.find(dot_string_letter_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_letter_length = string.len(dot_string_letter_letter_letter)\n\
    \    local dot_string_letter_letter_letter_start_index = string.find(dot_string_letter_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_letter_end_index = string.find(dot_string_letter_letter_letter,\
    \ \"z\")\n    local dot_string_letter_letter_letter_letter = string.sub(dot_string_letter_letter_letter,dot_string_letter_letter_letter_start_index,dot_string_letter_letter_letter_end_index)\n\
    \    local dot_string_letter_letter_letter_letter_index = string.find(dot_string_letter_letter_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_letter_letter_length = string.len(dot_string_letter_letter_letter_letter)\n\
    \    local dot_string_letter_letter_letter_letter_start_index = string.find(dot_string_letter_letter_letter_letter,\
    \ \"a\")\n    local dot_string_letter_letter_letter_letter_end_index = string.find(dot_string_letter_letter_letter_letter,\
    \ \"z\")\n    local dot_string_letter_letter_letter_letter_letter = string.sub(dot_string_letter_letter_letter_letter,dot_string_letter_letter_letter_letter_start_index,dot_string_letter_letter_letter_letter_end_index)\n\
    \    local dot_string_letter_letter_letter_letter_letter_index = string.find(dot_string_letter_letter_letter_letter_letter,\
    \ \"a\")\n    local dot_", "   local file_name = file_name:lower()\n   if #file_name\
    \ > 3 then\n      return false\n   end\n   if file_name:sub(1, 1) ~= '\\.' then\n\
    \      return false\n   end\n   if file_name:sub(1, 1) ~= string.byte('A') then\n\
    \      return false\n   end\n   if file_name:sub(2, 2) ~= string.byte('a') then\n\
    \      return false\n   end\n   if file_name:sub(3, 3) ~= string.byte('z') then\n\
    \      return false\n   end\n   if file_name:sub(4, 4) ~= string.byte('A') then\n\
    \      return false\n   end\n   if file_name:sub(5 + 1, 5) ~= string.byte('z')\
    \ then\n      return false\n   end\n   return true\nend", "   if file_name ==\
    \ nil then\n      return nil\n   end\n   if string.len(file_name) ~= 3 then\n\
    \      return nil\n   end\n   if string.find(file_name, \".\") ~= 1 then\n   \
    \   return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 1) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 2) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 3) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 4) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 5) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 6) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 7) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 8) ~= 1\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\", 9) ~= 1\
    \ then\n      return nil\n   end\n   return true\nend", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= ''\
    \ then\n    if string.find(file_name, \".\") ~= nil then\n      -- Check that\
    \ the substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if string.find(file_name,\
    \ \".\") ~= nil and string.sub(file_name,1,1) ~= nil then\n        if string.find(string.lower(string.sub(file_name,1,1)),string.letters)\
    \ ~= nil then\n          -- Check that the substring after the dot should be one\
    \ of these: ['txt', 'exe', 'dll']\n          if string.find(string.lower(string.sub(file_name,1,1)),{'txt','exe','dll'})\
    \ ~= nil then\n            return 'Yes'\n          else\n            return 'No'\n\
    \          end\n        else\n          return 'No'\n        end\n      else\n\
    \        return 'No'\n      end\n    else\n      return 'No'\n    end\n  else\n\
    \    return 'No'\n  end\nend", "   -- Check that the file name contains exactly\
    \ one dot '.'\n   if file_name ~= nil then\n      if string.find(file_name, \"\
    .\") ~= nil then\n         -- Check that the substring before the dot is not empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \         if string.sub(file_name,1,1) ~= nil then\n            if string.find(string.sub(file_name,1,1),\
    \ string.letters) ~= nil then\n               if string.sub(file_name,1,1) ~=\
    \ \"\" then\n                  if string.find(string.sub(file_name,1,1), string.letters)\
    \ ~= nil then\n                     -- Check that the substring after the dot\
    \ is one of these: ['txt', 'exe', 'dll']\n                     if string.find(string.sub(file_name,1,1),\
    \ {\"txt\", \"exe\", \"dll\"}) ~= nil then\n                        -- Return\
    \ Yes if the file's name is valid\n                        return true\n     \
    \                else\n                        -- Return No if the file's name\
    \ is invalid\n                        return false\n                     end\n\
    \                  else\n                     -- Return No if the file's name\
    \ is invalid\n                     return false\n                  end\n     \
    \          else\n                  -- Return No if the file's name is invalid\n\
    \                  return false\n               end\n            else\n      \
    \         -- Return No if the file's name is invalid\n               return false\n\
    \            end\n         else\n            -- Return No if the file's name is\
    \ invalid\n            return false\n         end\n      else\n         -- Return\
    \ No if the file's name is invalid\n         return false\n      end\n   else\n\
    \      -- Return No if the file's name is invalid\n      return false\n   end\n\
    end", "   -- Check that the file name contains exactly one dot '.'\n   if file_name\
    \ ~= nil then\n      if file_name:sub(1, 1) ~= '.' then\n         return 'No'\n\
    \      end\n   end\n   -- Check that the file name starts with a latin alphapet\
    \ letter\n   if file_name ~= nil then\n      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1,\
    \ 1), 1, 1)) then\n         return 'No'\n      end\n   end\n   -- Check that the\
    \ file name contains exactly three digits ('0'-'9')\n   if file_name ~= nil then\n\
    \      if string.find(file_name, \"%0\") ~= nil then\n         return 'No'\n \
    \     end\n   end\n   return 'Yes'\nend", "   if file_name == nil then\n     \
    \ return nil\n   end\n   if #file_name < 3 then\n      return nil\n   end\n  \
    \ if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' .. 'z' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~=\
    \ 'A' .. 'Z' then\n      return nil\n   end\n   if file_name:sub(1, 2) ~= '.'\
    \ then\n      return nil\n   end\n   if file_name:sub(1, 2) ~= 'txt' then\n  \
    \    return nil\n   end\n   if file_name:sub(1, 2) ~= 'exe' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 2) ~= 'dll' then\n      return nil\n   end\n\
    \   return 'Yes'\nend", "  -- Check that the file name contains exactly one dot\n\
    \  if file_name ~= nil and file_name ~= \"\" then\n    if file_name:sub(1, 1)\
    \ ~= \".\" then\n      return \"No\"\n    end\n    -- Check that the substring\
    \ before the dot is not empty\n    if file_name:sub(1, 1) ~= \"\" then\n     \
    \ -- Check that the substring before the dot starts with a latin alphapet letter\n\
    \      if file_name:sub(1, 1) ~= string.lower(string.sub(file_name:sub(1, 1),\
    \ 1, 1)) then\n        return \"No\"\n      end\n    end\n    -- Check that the\
    \ substring after the dot is one of these\n    local extensions = { \"txt\", \"\
    exe\", \"dll\" }\n    local extension = string.lower(string.sub(file_name:sub(1,\
    \ #file_name), #file_name))\n    if extensions ~= nil and extensions ~= \"\" then\n\
    \      for _, ext in ipairs(extensions) do\n        if ext == extension then\n\
    \          return \"Yes\"\n        end\n      end\n    end\n  end\n  return \"\
    No\"\nend", "    local file_name = file_name:gsub(\"^%w+\", \"\")\n    local file_name\
    \ = file_name:gsub(\"%.\", \"\")\n    local file_name = file_name:gsub(\"^[a-z]\"\
    , \"\")\n    local file_name = file_name:gsub(\"^[A-Z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[\\.]\", \"\")\n    local file_name = file_name:gsub(\"^[^\\.]\", \"\")\n   \
    \ local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local file_name = file_name:gsub(\"^[^0-9]\", \"\")\n  \
    \  local file_name = file_name:gsub(\"^[^A-Za-z]\", \"\")\n    local file_name\
    \ = file_name:gsub(\"^[^0-9]\", \"\")\n    local file_name = file_name:gsub(\"\
    ^[^a-z]\", \"\")\n    local ", "    local file_name = file_name:lower()\n    local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \":\", \"\")\n    local file_name = string.gsub(file_name, \",\", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n", "    local file_name = file_name\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local ", "   if string.find(file_name, \".\") ~= nil then\n      if string.find(file_name,\
    \ \".\") == 1 then\n         if string.find(file_name, \" \") ~= nil then\n  \
    \          if string.find(file_name, \" \") == 1 then\n               if string.find(file_name,\
    \ \" \") ~= nil then\n                  if string.find(file_name, \" \") == 1\
    \ then\n                     if string.find(file_name, \" \") == 1 then\n    \
    \                    if string.find(file_name, \" \") == 1 then\n            \
    \               if string.find(file_name, \" \") == 1 then\n                 \
    \             if string.find(file_name, \" \") == 1 then\n                   \
    \              return 'No'\n                              end\n              \
    \             end\n                        end\n                     end\n   \
    \               end\n               end\n            end\n         end\n     \
    \ end\n   end\n   return 'Yes'\nend", "    local file_name = file_name:lower()\n\
    \    local dot_index = file_name:find('.')\n    if dot_index == nil then\n   \
    \     return 'No'\n    end\n    local sub_string = file_name:sub(1, dot_index)\n\
    \    local first_letter = sub_string:sub(1, 1)\n    if first_letter ~= first_letter\
    \ then\n        return 'No'\n    end\n    local extensions = { \n        'txt',\
    \ 'exe', 'dll', 'py', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php',\
    \ 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py',\
    \ 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh',\
    \ 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c',\
    \ 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp',\
    \ 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h',\
    \ 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp',\
    \ 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua',\
    \ 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac',\
    \ 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java',\
    \ 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js',\
    \ 'php', 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php',\
    \ 'py', 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py',\
    \ 'sh', 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh',\
    \ 'c', 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c',\
    \ 'cpp', 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp',\
    \ 'h', 'hpp', 'lua', 'luac', 'java', 'js', 'php', 'py', 'sh', 'c', 'cpp', 'h',\
    \ 'hpp', 'lua', 'luac', '", "  -- Check that the file name contains exactly one\
    \ dot '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ \".\", 1, 1) ~= nil then\n          -- Check that the substring after the dot\
    \ should be one of these: ['txt', 'exe', 'dll']\n          if string.find(file_name,\
    \ \".\", 1, 2) ~= nil then\n            if string.find(file_name, \".\", 1, 3)\
    \ ~= nil then\n              if string.find(file_name, \".\", 1, 4) ~= nil then\n\
    \                if string.find(file_name, \".\", 1, 5) ~= nil then\n        \
    \          if string.find(file_name, \".\", 1, 6) ~= nil then\n              \
    \      if string.find(file_name, \".\", 1, 7) ~= nil then\n                  \
    \    if string.find(file_name, \".\", 1, 8) ~= nil then\n                    \
    \    if string.find(file_name, \".\", 1, 9) ~= nil then\n                    \
    \      if string.find(file_name, \".\", 1, 10) ~= nil then\n                 \
    \           if string.find(file_name, \".\", 1, 11) ~= nil then\n            \
    \                  return \"Yes\"\n                            else\n        \
    \                      return \"No\"\n                            end\n      \
    \                    else\n                            return \"No\"\n       \
    \                   end\n                        else\n                      \
    \    return \"No\"\n                        end\n                      else\n\
    \                        return \"No\"\n                      end\n          \
    \          else\n                      return \"No\"\n                    end\n\
    \                  else\n                    return \"No\"\n                 \
    \ end\n                else\n                  return \"No\"\n               \
    \ end\n              else\n                return \"No\"\n              end\n\
    \            else\n              return \"No\"\n            end\n          else\n\
    \            return \"No\"\n          end\n        else\n          return \"No\"\
    \n        end\n      else\n        return \"No\"\n      end\n    else\n      return\
    \ \"No\"\n    end\n  else\n    return \"No\"\n  end\nend", "    local file_name\
    \ = file_name:lower()\n    local file_name = string.gsub(file_name, \" \", \"\"\
    )\n    local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n    local file_name\
    \ = string.gsub(file_name, \" \", \"\")\n    local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n    local file_name = string.gsub(file_name, \" \", \"\")\n  \
    \  local file_name = string.gsub(file_name, \" \", \"\")\n", "   if #file_name\
    \ > 3 then\n      return false\n   end\n   if #file_name < 1 then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= '\\' or file_name:sub(1, 1) ~= '/'\
    \  then\n      return false\n   end\n   if file_name:sub(1, 2) ~= '.' then\n \
    \     return false\n   end\n   if file_name:sub(1, 3) ~= '' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 4) ~= '' then\n      return false\n  \
    \ end\n   if file_name:sub(1, 5) ~= '' then\n      return false\n   end\n   if\
    \ file_name:sub(1, 6) ~= '' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 7) ~= '' then\n      return false\n   end\n   if file_name:sub(1, 8) ~= '' then\n\
    \      return false\n   end\n   if file_name:sub(1, 9) ~= '' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 10) ~= '' then\n      return false\n \
    \  end\n   if file_name:sub(1, 11) ~= '' then\n      return false\n   end\n  \
    \ if file_name:sub(1, 12) ~= '' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 13) ~= '' then\n      return false\n   end\n   if file_name:sub(1, 14) ~= ''\
    \ then\n      return false\n   end\n   if file_name:sub(1, 15) ~= '' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 16) ~= '' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 17) ~= '' then\n      return false\n \
    \  end\n   if file_name:sub(1, 18) ~= '' then\n      return false\n   end\n  \
    \ if file_name:sub(1, 19) ~= '' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 20) ~= '' then\n      return false\n   end\n   if file_name:sub(1, 21) ~= ''\
    \ then\n      return false\n   end\n   if file_name:sub(1, 22) ~= '' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 23) ~= '' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 24) ~= '' then\n      return false\n \
    \  end\n   if file_name:sub(1, 25) ~= '' then\n      return false\n   end\n  \
    \ if file_name:sub", "   -- Check that the file name contains exactly one dot\
    \ '.'\n   if file_name ~= nil and file_name ~= \"\" and file_name ~= \".\" then\n\
    \      -- Check that the substring before the dot is not empty, and it starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name\
    \ ~= nil and file_name ~= \"\" and file_name ~= \".\" and file_name:sub(1, 1)\
    \ ~= \"\" then\n         -- Check that the substring after the dot is one of these:\
    \ ['txt', 'exe', 'dll']\n         if file_name ~= nil and file_name ~= \"\" and\
    \ file_name ~= \".\" and file_name:sub(1, 1) ~= \".\" and file_name:sub(2, 3)\
    \ ~= \"\" then\n            -- Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n            if file_name ~= nil and file_name\
    \ ~= \"\" and file_name ~= \".\" and file_name:sub(1, 1) ~= \".\" and file_name:sub(2,\
    \ 3) ~= \".\" and file_name:sub(3, 4) ~= \"\" then\n               return \"Yes\"\
    \n            else\n               return \"No\"\n            end\n         else\n\
    \            return \"No\"\n         end\n      else\n         return \"No\"\n\
    \      end\n   else\n      return \"No\"\n   end\nend", "  -- Check that the file\
    \ name contains exactly one dot '.'\n  if file_name ~= nil and file_name ~= \"\
    \" and file_name ~= \".\" then\n    -- Check that the file's name contains exactly\
    \ one dot '.'\n    if file_name ~= \".\" then\n      -- Check that the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z')\n      if file_name ~= \"\" and file_name:sub(1,\
    \ 1) ~= \".\" then\n        -- Check that the substring after the dot should be\
    \ one of these: ['txt', 'exe', 'dll']\n        if file_name:sub(2, 2) ~= \".\"\
    \ and file_name:sub(2, 2) ~= \"exe\" and file_name:sub(2, 2) ~= \"dll\" then\n\
    \          -- Return true\n          return true\n        else\n          -- Return\
    \ false\n          return false\n        end\n      else\n        -- Return false\n\
    \        return false\n      end\n    else\n      -- Return false\n      return\
    \ false\n    end\n  else\n    -- Return false\n    return false\n  end\nend",
  "  local file_name = file_name:lower()\n  local dot_index = string.find(file_name,\
    \ \".\")\n  if dot_index == nil then\n    return \"No\"\n  end\n  local file_name\
    \ = file_name:sub(1, dot_index)\n  local first_letter = string.sub(file_name,1,1)\n\
    \  if first_letter ~= 'a' and first_letter ~= 'A' then\n    return \"No\"\n  end\n\
    \  local extensions = { \"txt\", \"exe\", \"dll\" }\n  local extension_index =\
    \ string.find(file_name, extensions)\n  if extension_index == nil then\n    return\
    \ \"No\"\n  end\n  local extension = file_name:sub(extension_index+1)\n  if extension\
    \ == \"exe\" then\n    return \"No\"\n  end\n  return \"Yes\"\nend", "  -- Check\
    \ that the file name contains exactly one dot '.'\n  if file_name ~= nil and file_name\
    \ ~= '' then\n    if file_name:sub(1, 1) ~= '.' then\n      return nil\n    end\n\
    \    -- Check that the substring before the dot is not empty, and it starts with\
    \ a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    if file_name ~=\
    \ nil and file_name ~= '' then\n      if file_name:sub(1, 1) ~= '.' then\n   \
    \     return nil\n      end\n      -- Check that the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n      if file_name ~= nil and file_name\
    \ ~= '' then\n        if file_name:sub(1, 1) ~= '.' then\n          local extension\
    \ = file_name:sub(2)\n          if extension == 'txt' or extension == 'exe' or\
    \ extension == 'dll' then\n            return true\n          else\n         \
    \   return nil\n          end\n        else\n          return nil\n        end\n\
    \      else\n        return nil\n      end\n    else\n      return nil\n    end\n\
    \  else\n    return nil\n  end\nend", "  local file_name = file_name\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local\
    \ file_name = string.gsub(file_name, \" \", \"\")\n  local file_name = string.gsub(file_name,\
    \ \" \", \"\")\n  local file_name = string.gsub(file_name, \" \", \"\")\n  local ",
  "   if #file_name > 3 then\n      return false\n   end\n   if #file_name == 0 then\n\
    \      return false\n   end\n   if file_name:sub(1, 1) ~= '\\' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= '\\\\' then\n      return false\n\
    \   end\n   if file_name:sub(1, 1) ~= '0' then\n      return false\n   end\n \
    \  if file_name:sub(1, 1) ~= '9' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'a' then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'z'\
    \ then\n      return false\n   end\n   if file_name:sub(1, 1) ~= 'A' then\n  \
    \    return false\n   end\n   if file_name:sub(1, 1) ~= 'Z' then\n      return\
    \ false\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return false\n \
    \  end\n   if file_name:sub(1, 1) ~= 'txt' then\n      return false\n   end\n\
    \   if file_name:sub(1, 1) ~= 'exe' then\n      return false\n   end\n   if file_name:sub(1,\
    \ 1) ~= 'dll' then\n      return false\n   end\n   return true\nend", "   if file_name\
    \ == nil then\n      return nil\n   end\n   if #file_name < 3 then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '.' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= string.upper(string.sub(file_name:sub(1, 1), 1,\
    \ 1)) then\n      return nil\n   end\n   if #file_name > 3 then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   if string.find(file_name, \".\", 1, 1) then\n      return nil\n   end\n\
    \   return true\nend", "    local file_name = file_name:lower()\n    local dot_index\
    \ = string.find(file_name, \".\")\n    if dot_index == nil then\n        return\
    \ false\n    end\n    local file_name = string.sub(file_name, 1, dot_index)\n\
    \    local dot_index = string.find(file_name, \".\")\n    if dot_index == nil\
    \ then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.sub(file_name,\
    \ 1, dot_index)\n    local dot_index = string.find(file_name, \".\")\n    if dot_index\
    \ == nil then\n        return false\n    end\n    local file_name = string.",
  "    local file_name = file_name:lower()\n    local dot_index = file_name:find('.')\n\
    \    local dot_string = file_name:sub(1, dot_index)\n    local dot_string_length\
    \ = dot_string:len()\n    local dot_string_letter = string.sub(dot_string, 1,\
    \ 1)\n    local dot_string_letter_length = string.len(dot_string_letter)\n   \
    \ local dot_string_letter_is_latin_alphabet = string.sub(dot_string_letter, 1,\
    \ 1) == 'a'\n    local dot_string_letter_is_latin_alphabet_length = string.len(dot_string_letter)\n\
    \    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters = dot_string_letter_is_latin_alphabet\
    \ and dot_string_letter_is_latin_alphabet_length >= 1\n    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_length\
    \ = dot_string_letter_is_latin_alphabet_is_one_or_more_letters and dot_string_letter_is_latin_alphabet_length\
    \ >= 1\n    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits\
    \ = dot_string_letter_is_latin_alphabet and dot_string_letter_is_latin_alphabet_is_one_or_more_letters\
    \ and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_length >= 1\n\
    \    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_length\
    \ = dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_length\
    \ >= 1\n    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore\
    \ = dot_string_letter_is_latin_alphabet and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits\
    \ and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_length\
    \ >= 1\n    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore_length\
    \ = dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore\
    \ and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore_length\
    \ >= 1\n    local dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore_or_dash\
    \ = dot_string_letter_is_latin_alphabet and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore\
    \ and dot_string_letter_is_latin_alphabet_is_one_or_more_letters_or_digits_or_underscore_length\
    \ >= 1", "   if string.find(file_name, \"..\") then\n      return \"No\"\n   end\n\
    \   if string.find(file_name, \".\") then\n      if string.find(file_name, \"\
    ..\") then\n         return \"No\"\n      end\n      local last_dot = string.find(file_name,\
    \ \".\")\n      local last_dot_index = string.len(file_name) - last_dot\n    \
    \  local last_dot_index = string.sub(file_name,last_dot_index + 1, last_dot_index)\n\
    \      local last_dot_index = string.sub(file_name,last_dot_index, last_dot_index)\n\
    \      local last_dot_index = string.find(last_dot_index, \"0\")\n      if last_dot_index\
    \ == nil then\n         return \"No\"\n      end\n      if string.len(last_dot_index)\
    \ > 3 then\n         return \"No\"\n      end\n      if string.sub(file_name,1,1)\
    \ ~= 'a' then\n         return \"No\"\n      end\n      if string.sub(file_name,1,1)\
    \ ~= 'z' then\n         return \"No\"\n      end\n      if string.sub(file_name,1,1)\
    \ ~= 'A' then\n         return \"No\"\n      end\n      if string.sub(file_name,1,1)\
    \ ~= 'Z' then\n         return \"No\"\n      end\n   end\n   return \"Yes\"\n\
    end", "   if file_name == nil then\n      return nil\n   end\n   if #file_name\
    \ > 3 then\n      return nil\n   end\n   if string.find(file_name, \".\") then\n\
    \      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.sub(file_name,1,1) ~= string.sub(file_name,1,1)\
    \ then\n      return nil\n   end\n   if string.find(file_name, \".\") then\n \
    \     return nil\n   end\n   if string.find(file_name, \".\") then\n      return\
    \ nil\n   end\n   if string.find(file_name, \".\") then\n      return nil\n  \
    \ end\n   return true\nend", "   if file_name == nil then\n      return nil\n\
    \   end\n   if #file_name > 3 then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\
    0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n \
    \     return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\
    0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n \
    \     return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\
    0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n \
    \     return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\\
    0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n \
    \     return nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return\
    \ nil\n   end\n   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n\
    \   if file_name:sub(1, 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1,\
    \ 1) ~= '\\0' then\n      return nil\n   end\n   if file_name:sub(1, 1) ~", " \
    \  -- Check that the file name contains exactly one dot '.'\n   if file_name ~=\
    \ nil and file_name ~= \"\" and file_name ~= \".\" then\n      -- Check that the\
    \ substring before the dot should not be empty, and it starts with a letter from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n      if file_name ~= \".\" and file_name\
    \ ~= \"\" and file_name:sub(1, 1) ~= \"\" then\n         -- Check that the substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n         if file_name\
    \ ~= \".\" and file_name ~= \"\" and file_name:sub(1, 2) ~= \"exe\" and file_name:sub(1,\
    \ 2) ~= \"dll\" then\n            -- Return Yes if the file's name is valid\n\
    \            return \"Yes\"\n         else\n            -- Return No if the file's\
    \ name is invalid\n            return \"No\"\n         end\n      else\n     \
    \    -- Return No if the file's name is invalid\n         return \"No\"\n    \
    \  end\n   else\n      -- Return No if the file's name is invalid\n      return\
    \ \"No\"\n   end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= \"\" then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, string.sub(file_name,1,1)) == nil\
    \ then\n        -- Check that the substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n        if string.find(file_name, string.sub(file_name,string.find(file_name,\
    \ \".\"),string.find(file_name, \".\")+1)) ~= nil then\n          return \"Yes\"\
    \n        else\n          return \"No\"\n        end\n      else\n        return\
    \ \"No\"\n      end\n    else\n      return \"No\"\n    end\n  else\n    return\
    \ \"No\"\n  end\nend", "  -- Check that the file name contains exactly one dot\
    \ '.'\n  if file_name ~= nil and file_name ~= '' then\n    if string.find(file_name,\
    \ \".\") ~= nil then\n      -- Check that the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n      if string.find(file_name, \".\") ~= nil then\n        if string.find(file_name,\
    \ \".\") ~= nil then\n          if string.find(file_name, \".\") ~= nil then\n\
    \            if string.find(file_name, \".\") ~= nil then\n              if string.find(file_name,\
    \ \".\") ~= nil then\n                if string.find(file_name, \".\") ~= nil\
    \ then\n                  if string.find(file_name, \".\") ~= nil then\n     \
    \               if string.find(file_name, \".\") ~= nil then\n               \
    \       if string.find(file_name, \".\") ~= nil then\n                       \
    \ if string.find(file_name, \".\") ~= nil then\n                          if string.find(file_name,\
    \ \".\") ~= nil then\n                            if string.find(file_name, \"\
    .\") ~= nil then\n                              if string.find(file_name, \".\"\
    ) ~= nil then\n                                if string.find(file_name, \".\"\
    ) ~= nil then\n                                  if string.find(file_name, \"\
    .\") ~= nil then\n                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                      if string.find(file_name,\
    \ \".\") ~= nil then\n                                        if string.find(file_name,\
    \ \".\") ~= nil then\n                                          if string.find(file_name,\
    \ \".\") ~= nil then\n                                            if string.find(file_name,\
    \ \".\") ~= nil then\n                                              if string.find(file_name,\
    \ \".\") ~= nil then\n                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                  if string.find(file_name,\
    \ \".\") ~= nil then\n                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                      if\
    \ string.find(file_name, \".\") ~= nil then\n                                \
    \                        if string.find(file_name, \".\") ~= nil then\n      \
    \                                                    if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \     if string.find(file_name, \".\") ~= nil then\n                         \
    \                                     if string.find(file_name, \".\") ~= nil\
    \ then\n                                                                if string.find(file_name,\
    \ \".\") ~= nil then\n                                                       \
    \           if string.find(file_name, \".\") ~= nil then\n                   \
    \                                                 if string.find(file_name, \"\
    .\") ~= nil then\n                                                           \
    \     ", "  -- Check that the file name contains exactly one dot '.'\n  if file_name\
    \ ~= nil and file_name ~= \"\" then\n    if file_name:sub(1, 1) ~= \".\" then\n\
    \      return \"No\"\n    end\n    -- Check that the substring before the dot\
    \ is not empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(1,\
    \ 1) ~= \"\" then\n        if string.find(string.lower(file_name:sub(1, 1)), \"\
    [a-z_]\") then\n          return \"No\"\n        end\n      end\n    end\n   \
    \ -- Check that the substring after the dot is one of these: ['txt', 'exe', 'dll']\n\
    \    if file_name ~= nil and file_name ~= \"\" then\n      if file_name:sub(-2,\
    \ 2) ~= \".exe\" then\n        return \"No\"\n      end\n      if file_name:sub(-2,\
    \ 2) ~= \".dll\" then\n        return \"No\"\n      end\n    end\n  end\n  return\
    \ \"Yes\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
