name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are two distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
  -- False\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pairs = {}\n  for i = 1, #l do\n    local pair = l[i], l[i\
    \ - 1]\n    if pairs[pair] then\n      return false\n    else\n      pairs[pair]\
    \ = true\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i =\
    \ 1, #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v == 2 then\n      return true\n\
    \    end\n  end\n  return false\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1, #l do\n\
    \    local value = l[i]\n    if pairs[value] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local\
    \ v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v] + 1\n  end\n\
    \  for k, v in pairs do\n    if v > 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    pairs[l[i]]\
    \ = true\n  end\n  for i = 1, #l do\n    if pairs[l[i]] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n\
    \    local value = l[i]\n    if pairs[value] then\n      return false\n    end\n\
    \    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n  for\
    \ i = 1, #l do\n    local value = l[i]\n    if pairs[value] then return false\
    \ end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n      return\
    \ false\n    end\n    pairs[value] = true\n  end\n  return true\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value] = pairs[value]\
    \ or 0\n    pairs[value] = pairs[value] + 1\n  end\n  for key, value in pairs\
    \ do\n    if value == 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local value = l[i]\n    pairs[value]\
    \ = pairs[value] or 0\n    pairs[value] = pairs[value] + 1\n  end\n  for key,\
    \ value in pairs do\n    if value == 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for i = 1, #l do\n    local value\
    \ = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value] = pairs[value]\
    \ + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local zeros = 0\n  for _, value in pairs do\n    zeros = zeros\
    \ + value\n  end\n  return zeros == 0\nend", "  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then return false\
    \ end\n    pairs[value] = true\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for i = 1, #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\
    \ return false end\n    pairs[pair] = true\n  end\n  return true\nend", "  local\
    \ pairs = {}\n  for i = 1, #l do\n    pairs[i] = l[i]\n  end\n  local zeros =\
    \ 0\n  local pair\n  for pair in pairs do\n    zeros = zeros + pair\n  end\n \
    \ if zeros == 0 then\n    return false\n  end\n  local pair\n  for pair in pairs\
    \ do\n    if pair > 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for i = 1, #l do\n    local v = l[i]\n    pairs[v]\
    \ = pairs[v] or 0\n    pairs[v] = pairs[v] + 1\n  end\n  for k, v in pairs do\n\
    \    if v > 1 then\n      return false\n    end\n  end\n  return true\nend", " \
    \ local pairs = {}\n  for i = 1, #l do\n    local pair = l[i], l[i + 1]\n    if\
    \ pairs[pair] then return false end\n    pairs[pair] = true\n  end\n  return true\n\
    end", "  local function helper(l, i, j)\n    if i == j then\n      return false\n\
    \    end\n    if l[i] == 0 then\n      return helper(l, i + 1, j)\n    end\n \
    \   if l[j] == 0 then\n      return helper(l, i, j + 1)\n    end\n    return helper(l,\
    \ i, j) or helper(l, i + 1, j + 1)\n  end\n  return helper(l, 1, #l)\nend", " \
    \ local pairs = {}\n  for i = 1, #l do\n    local pair = l[i], l[i + 1]\n    if\
    \ pairs[pair] then\n      return false\n    end\n    pairs[pair] = true\n  end\n\
    \  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
