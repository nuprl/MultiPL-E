language: lua
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(new_array,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(new_array)\n  else\n \
    \   table.sort(new_array, function(a, b) return b - a end)\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuyjlkrh.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpcuyjlkrh.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n\
    \    result = table.sort(array)\n  else\n    result = table.sort(array, function(a,\
    \ b) return a > b end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s3poqlh.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5s3poqlh.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i] = array[i]\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b) return b - a end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetvtz6uw.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpetvtz6uw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5rb2sbu.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph5rb2sbu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc82wfnl.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpjc82wfnl.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ -1\n      else\n        return 1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f4c2stt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6f4c2stt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, v\
    \ in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp145__oyu.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp145__oyu.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp145__oyu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb18ejrct.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpb18ejrct.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ _, value in ipairs(array) do\n    sum = sum + value\n    if sum % 2 == 1 then\n\
    \      table.insert(new_array, value)\n    else\n      table.insert(new_array,\
    \ -value)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g460vpu.lua:30:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {-2, -4, 3, 0, -1, 5}\nstack traceback:\n\
    \t/tmp/tmp4g460vpu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(left, right)\n      return right - left\n\
    \    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta44ubgj.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpta44ubgj.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  local odd = sum % 2\
    \ == 1\n  if odd then\n    for i = 1, length do\n      array[i] = array[length\
    \ - i - 1]\n    end\n  else\n    for i = 1, length do\n      array[i] = array[length\
    \ - i - 1]\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vh4fhu5.lua:34:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp7vh4fhu5.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpt1cfuv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprpt1cfuv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = table.remove(array, #array)\n  end\n  for i =\
    \ 1, #result do\n    array[i] = result[i - 1]\n  end\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpequomln4.lua:22:\
    \ attempt to get length of a nil value (local 'result')\nstack traceback:\n\t\
    /tmp/tmpequomln4.lua:22: in local 'candidate'\n\t/tmp/tmpequomln4.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kl57vfv.lua:22:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp7kl57vfv.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp7kl57vfv.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return a > b\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9na865jb.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9na865jb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmproja2bni.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmproja2bni.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmproja2bni.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 == 1\n  if odd then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(first, last)\n  \
    \    return last - first\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1xc23dq.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpy1xc23dq.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmproja2bni.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmproja2bni.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmproja2bni.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp\n  while index <= #array do\n    sum = sum + array[index]\n    index =\
    \ index + 1\n  end\n  if sum % 2 == 1 then\n    temp = array[1]\n    array[1]\
    \ = array[#array]\n    array[#array] = temp\n  end\n  return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhm0s4n8.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 0, 1, 2}\nstack traceback:\n\
    \t/tmp/tmprhm0s4n8.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    table.insert(new_array, array[i])\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(new_array)\n  else\n    table.sort(new_array,\
    \ function(x, y)\n      return y > x\n    end)\n  end\n  return new_array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_awm9ic.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpc_awm9ic.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq2x7p1r.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsq2x7p1r.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2r48qz33.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2r48qz33.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n\
    \    result = array\n  else\n    result = table.reverse(array)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc7rbvfep.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpc7rbvfep.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpc7rbvfep.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return a\
    \ > b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse1hgsk5.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpse1hgsk5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a > b then\n        return\
    \ -1\n      elseif a < b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijiaekn0.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpijiaekn0.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjc82wfnl.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmpjc82wfnl.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return b\
    \ - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2025rk71.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2025rk71.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = table.reverse(array)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf50w9t9i.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpf50w9t9i.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpf50w9t9i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqyg9zs7.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmppqyg9zs7.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local results = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    table.insert(results, array[i])\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n    table.sort(results,\
    \ function(a, b) return a > b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xc78m8z.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp1xc78m8z.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if\
    \ a < b then\n        return -1\n      elseif a > b then\n        return 1\n \
    \     else\n        return 0\n      end\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yp0jh4r.lua:39:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9yp0jh4r.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6dqmd7l.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpl6dqmd7l.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j4y92o1.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp4j4y92o1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return a\
    \ > b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpse1hgsk5.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpse1hgsk5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  while index < length do\n    sum = sum + array[index]\n\
    \    index = index + 1\n  end\n  if sum % 2 == 1 then\n    temp = array[#array]\n\
    \    array[#array] = array[#array]\n    array[#array] = temp\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1n3t3or.lua:33:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpv1n3t3or.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqha9iy9.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoqha9iy9.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local result\n  while index < length do\n \
    \   sum = sum + array[index]\n    index = index + 1\n  end\n  if sum % 2 == 1\
    \ then\n    temp = array[1]\n    array[1] = array[length]\n    array[length] =\
    \ temp\n  end\n  result = {}\n  index = 1\n  while index < length do\n    table.insert(result,\
    \ array[index])\n    index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vyahexk.lua:39:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp1vyahexk.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum > 0 then\n      new_array[i]\
    \ = array[i]\n    end\n  end\n  if sum % 2 == 1 then\n    for i = #new_array,\
    \ 1, -1 do\n      table.insert(new_array, new_array[i])\n    end\n  end\n  return\
    \ new_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodtkny1m.lua:32:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpodtkny1m.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfum32mjb.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfum32mjb.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlc8vd92.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpdlc8vd92.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  local i =\
    \ 1\n  while i <= #array do\n    sum = array[i] + sum\n    if sum % 2 == 1 then\n\
    \      result = array[i]\n      array[i] = array[i - 1]\n      array[i - 1] =\
    \ result\n    end\n    i = i + 1\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96i5hit7.lua:31:\
    \ expected: {5}\nactual: {0=5}\nstack traceback:\n\t/tmp/tmp96i5hit7.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local temp2\n  local result\n  local i\n  local\
    \ j\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmszthswe.lua:33: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  local index\n\
    \  for index, value in ipairs(array) do\n    sum = sum + value\n  end\n  if sum\
    \ % 2 == 1 then\n    result = array\n  else\n    result = array:reverse()\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvr9c25e2.lua:21:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpvr9c25e2.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpvr9c25e2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n     \
    \ table.insert(new_array, array[i])\n    else\n      table.insert(new_array, array[i])\n\
    \      table.insert(new_array, array[i])\n    end\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwvbza8.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 4, 3, 0, 1, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp3gwvbza8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_a271q4.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpa_a271q4.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ -1\n      else\n        return 1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f4c2stt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6f4c2stt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return a > b\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhzr19az.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqhzr19az.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return b\
    \ - a; end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvscc3qx8.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvscc3qx8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnb7gcu1.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmphnb7gcu1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  local odd = sum % 2\
    \ == 1\n  if odd then\n    table.sort(array)\n  else\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0qca9i1.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpw0qca9i1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89b3zfki.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp89b3zfki.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(x, y)\n      return y - x\n   \
    \ end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6o_7xq0x.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp6o_7xq0x.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpt1cfuv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprpt1cfuv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return b\
    \ - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2025rk71.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2025rk71.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 == 1\n  if odd then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssexc07_.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpssexc07_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5rb2sbu.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph5rb2sbu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = table.reverse(array)\n  else\n    result = array\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxocystb.lua:18:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmplxocystb.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmplxocystb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(first, last)\n      return last - first\n\
    \    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxwenh9k.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpuxwenh9k.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso98qvh8.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpso98qvh8.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg6_7rti.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpcg6_7rti.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local i = 0\n  local j =\
    \ 1\n  local temp\n  while i <= #array do\n    sum = array[i] + sum\n    i = i\
    \ + 1\n    if sum > 0 then\n      temp = array[i]\n      array[i] = array[j]\n\
    \      array[j] = temp\n      j = j + 1\n    end\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ x > y\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt59kskte.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpt59kskte.lua:17: in local 'candidate'\n\t/tmp/tmpt59kskte.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp001ib055.lua:22:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp001ib055.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp001ib055.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxmgmgtf.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyxmgmgtf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if\
    \ a < b then\n        return -1\n      elseif a > b then\n        return 1\n \
    \     else\n        return 0\n      end\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv226e77.lua:39:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpbv226e77.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local i = 0\n  local j =\
    \ 1\n  local temp\n  local result\n  while i < #array do\n    sum = array[i] +\
    \ sum\n    if sum % 2 == 1 then\n      temp = array[i]\n      array[i] = array[j]\n\
    \      array[j] = temp\n    end\n    i = i + 1\n    j = j + 1\n  end\n  result\
    \ = {}\n  i = 0\n  while i < #array do\n    result[i] = array[i]\n    i = i +\
    \ 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkk3r45r0.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpkk3r45r0.lua:18: in local 'candidate'\n\t/tmp/tmpkk3r45r0.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(left, right)\n      return right - left\n\
    \    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxde2u_d.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmppxde2u_d.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n     \
    \ table.insert(new_array, array[i])\n    else\n      table.insert(new_array, array[i])\n\
    \      table.insert(new_array, array[i])\n    end\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwvbza8.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 4, 3, 0, 1, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp3gwvbza8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ x > y\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumylzssw.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpumylzssw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp\n  local result\n  while index < #array do\n    sum = sum + array[index]\n\
    \    index = index + 1\n  end\n  if sum % 2 == 1 then\n    temp = array[1]\n \
    \   array[1] = array[#array]\n    array[#array] = temp\n  end\n  result = {}\n\
    \  index = 1\n  while index < #array do\n    if array[index] > array[#array] then\n\
    \      temp = array[index]\n      array[index] = array[#array]\n      array[#array]\
    \ = temp\n    end\n    index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcgvv91vz.lua:42:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmpcgvv91vz.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n     \
    \ table.insert(result, array[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe32nzicl.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {3, 0, 5}\nstack traceback:\n\t/tmp/tmpe32nzicl.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = array\n\
    \  for _, value in ipairs(sorted_array) do\n    sum = sum + value\n  end\n  if\
    \ sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh6k0w50.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfh6k0w50.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5rb2sbu.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph5rb2sbu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 == 1\n  local even = sum\
    \ % 2 == 0\n  if odd then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(x, y)\n      return y > x\n    end)\n  end\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopcx7mml.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpopcx7mml.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = {}\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8mtuxwg.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpf8mtuxwg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local temp2\n  local temp3\n  local temp4\n\
    \  local temp5\n  local temp6\n  local temp7\n  local temp8\n  local temp9\n \
    \ local temp10\n  local temp11\n  local temp12\n  local temp13\n  local temp14\n\
    \  local temp15\n  local temp16\n  local temp17\n  local temp18\n  local temp19\n\
    \  local temp20\n  local temp21\n  local temp22\n  local temp23\n  local temp24\n\
    \  local temp25\n  local temp26\n  local temp27\n  local temp28\n  local temp29\n\
    \  local temp30\n  local temp31\n  local temp32\n  local temp33\n  local temp34\n\
    \  local temp35\n  local temp36\n  local temp37\n  local temp38\n  local temp39\n\
    \  local temp40\n  local temp41\n  local temp42\n  local temp43\n  local temp44\n\
    \  local temp45\n  local temp46\n  local temp47\n  local temp48\n  local temp49\n\
    \  local temp50\n  local temp51\n  local temp52\n  local temp53\n  local temp54\n\
    \  local temp55\n  local temp56\n  local temp57\n  local temp58\n  local temp59\n\
    \  local temp60\n  local temp61\n  local temp62\n  local temp63\n  local temp64\n\
    \  local temp65\n  local temp66\n  local temp67\n  local temp68\n  local temp69\n\
    \  local temp70\n  local temp71\n  local temp72\n  local temp73\n  local temp74\n\
    \  local temp75\n  local temp76\n  local temp77\n  local temp78\n  local temp79\n\
    \  local temp80\n  local temp81\n  local temp82\n  local temp83\n  local temp84\n\
    \  local temp85\n  local temp86\n  local temp87\n  local temp88\n  local temp89\n\
    \  local temp90\n  local temp91\n  local temp92\n  local temp93\n  local temp94\n\
    \  local temp95\n  local temp96\n  local temp97\n  local temp98\n  local temp99\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprsofbvf9.lua:128: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv2ujv1v.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplv2ujv1v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(x, y)\n      if x < y then\n  \
    \      return -1\n      else\n        return 1\n      end\n    end)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpe6avpu.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqpe6avpu.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i] = array[i]\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(x, y)\n      return y > x\n    end)\n  end\n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbr1q4tz.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptbr1q4tz.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnb7gcu1.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmphnb7gcu1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = table.reverse(array)\n  else\n    result = array\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqp6lfmbo.lua:18:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpqp6lfmbo.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqp6lfmbo.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ 1\n      else\n        return -1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxdto8i_y.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpxdto8i_y.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local max_sum = 0\n  local\
    \ max_index\n  local max_value\n  for i, v in ipairs(array) do\n    sum = sum\
    \ + v\n    if sum > max_sum then\n      max_sum = sum\n      max_index = i\n \
    \     max_value = v\n    end\n  end\n  if max_sum % 2 == 1 then\n    table.sort(array,\
    \ function(a, b)\n      return a > b\n    end)\n  else\n    table.sort(array,\
    \ function(a, b)\n      return a < b\n    end)\n  end\n  return max_index, max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3zvht397.lua:39:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp3zvht397.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3wzl0h0_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp3wzl0h0_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3wzl0h0_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 ~= 0\n  if odd then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y > x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqz3u4gg7.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqz3u4gg7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result = {}\n  for\
    \ _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n \
    \ end\n  if sum % 2 == 1 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprg0jeocs.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprg0jeocs.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxmgmgtf.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyxmgmgtf.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ x > y\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumylzssw.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpumylzssw.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = table.reverse(array)\n  else\n    result = array\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxocystb.lua:18:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmplxocystb.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmplxocystb.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypq7q9yv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpypq7q9yv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89b3zfki.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp89b3zfki.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7kl57vfv.lua:22:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp7kl57vfv.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp7kl57vfv.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp = 0\n  local result\n  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ l = 1\n  local m = 1\n  local n = #array\n  while i <= n do\n    sum = array[i]\
    \ + sum\n    if sum > 0 then\n      temp = array[i]\n      array[i] = array[j]\n\
    \      array[j] = temp\n      i = i + 1\n      j = j + 1\n    else\n      temp\
    \ = array[i]\n      array[i] = array[k]\n      array[k] = temp\n      i = i +\
    \ 1\n      k = k + 1\n    end\n  end\n  result = array\n  if sum % 2 ~= 0 then\n\
    \    table.sort(result)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqnm24x1.lua:51:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmqnm24x1.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    return table.sort(array)\n  else\n    return table.sort(array, function(x,\
    \ y)\n      return x > y\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrnz4r1c.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvrnz4r1c.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5bm8oy4z.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp5bm8oy4z.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ -1\n      else\n        return 1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f4c2stt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6f4c2stt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpt1cfuv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprpt1cfuv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = array\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(sorted_array)\n  else\n    table.sort(sorted_array, function(v1,\
    \ v2)\n      return v2 < v1\n    end)\n  end\n  return sorted_array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux8j4rz8.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpux8j4rz8.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m2konce.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9m2konce.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ -1\n      else\n        return 1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f4c2stt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6f4c2stt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local temp = 0\n  for i =\
    \ 1, #array do\n    sum = sum + array[i]\n    temp = array[i]\n    array[i] =\
    \ array[i] + sum\n    if sum % 2 == 1 then\n      array[i] = temp\n    end\n \
    \ end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp_ug4n7.lua:30:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 10, 3, 0, 11, 5}\nstack traceback:\n\
    \t/tmp/tmpsp_ug4n7.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = table.sort(array)\n  else\n    result = table.sort(array, function(v1, v2)\n\
    \      return v2 < v1\n    end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpifmtomp4.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpifmtomp4.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1fzfmqa.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpk1fzfmqa.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  local i =\
    \ 1\n  while i <= #array do\n    sum = array[i] + sum\n    if sum > 0 then\n \
    \     result = array[i]\n      array[i] = sum\n      sum = sum - array[i]\n  \
    \  else\n      result = array[i]\n      array[i] = sum\n      sum = sum + array[i]\n\
    \    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9f0a9yl.lua:34:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpg9f0a9yl.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpt1cfuv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprpt1cfuv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3wzl0h0_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp3wzl0h0_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3wzl0h0_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp455rxf66.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp455rxf66.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx0y_zyk5.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpx0y_zyk5.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpx0y_zyk5.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local i = 0\n  local j =\
    \ 1\n  local temp\n  local result\n  while i <= #array do\n    sum = array[i]\
    \ + array[j]\n    if sum % 2 == 1 then\n      temp = array[i]\n      array[i]\
    \ = array[j]\n      array[j] = temp\n    end\n    i = i + 1\n    j = j + 1\n \
    \ end\n  result = {}\n  for i = 1, #array do\n    result[#result + 1] = array[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpref2ickq.lua:18:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpref2ickq.lua:18: in local 'candidate'\n\t/tmp/tmpref2ickq.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local max_sum = 0\n  local\
    \ max_index = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum\
    \ > max_sum then\n      max_sum = sum\n      max_index = i\n    end\n  end\n \
    \ if max_sum % 2 == 1 then\n    table.sort(array, function(a, b)\n      return\
    \ a > b\n    end)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ a < b\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dkb959s.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp9dkb959s.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(x, y)\n      return y - x\n   \
    \ end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck17ag6p.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpck17ag6p.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnb7gcu1.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmphnb7gcu1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i, v\
    \ in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = table.reverse(array)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3vu_vjt.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpl3vu_vjt.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpl3vu_vjt.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5rb2sbu.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph5rb2sbu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted_array = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i] = array[i]\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b) return a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyq2mo5p.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpzyq2mo5p.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local max_sum = 0\n  local\
    \ max_index = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum\
    \ > max_sum then\n      max_sum = sum\n      max_index = i\n    end\n  end\n \
    \ if max_sum % 2 ~= 0 then\n    table.sort(array, function(a, b) return a < b\
    \ end)\n  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n\
    \  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm_wh8fy.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpjm_wh8fy.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr38uescd.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpr38uescd.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m2konce.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp9m2konce.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv2ujv1v.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplv2ujv1v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local temp2\n  local temp3\n  local temp4\n\
    \  local temp5\n  local temp6\n  local temp7\n  local temp8\n  local temp9\n \
    \ local temp10\n  local temp11\n  local temp12\n  local temp13\n  local temp14\n\
    \  local temp15\n  local temp16\n  local temp17\n  local temp18\n  local temp19\n\
    \  local temp20\n  local temp21\n  local temp22\n  local temp23\n  local temp24\n\
    \  local temp25\n  local temp26\n  local temp27\n  local temp28\n  local temp29\n\
    \  local temp30\n  local temp31\n  local temp32\n  local temp33\n  local temp34\n\
    \  local temp35\n  local temp36\n  local temp37\n  local temp38\n  local temp39\n\
    \  local temp40\n  local temp41\n  local temp42\n  local temp43\n  local temp44\n\
    \  local temp45\n  local temp46\n  local temp47\n  local temp48\n  local temp49\n\
    \  local temp50\n  local temp51\n  local temp52\n  local temp53\n  local temp54\n\
    \  local temp55\n  local temp56\n  local temp57\n  local temp58\n  local temp59\n\
    \  local temp60\n  local temp61\n  local temp62\n  local temp63\n  local temp64\n\
    \  local temp65\n  local temp66\n  local temp67\n  local temp68\n  local temp69\n\
    \  local temp70\n  local temp71\n  local temp72\n  local temp73\n  local temp74\n\
    \  local temp75\n  local temp76\n  local temp77\n  local temp78\n  local temp79\n\
    \  local temp80\n  local temp81\n  local temp82\n  local temp83\n  local temp84\n\
    \  local temp85\n  local temp86\n  local temp87\n  local temp88\n  local temp89\n\
    \  local temp90\n  local temp91\n  local temp92\n  local temp93\n  local temp94\n\
    \  local temp95\n  local temp96\n  local temp97\n  local temp98\n  local temp99\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprsofbvf9.lua:128: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rt8kejr.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp1rt8kejr.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n     \
    \ table.insert(new_array, array[i])\n    else\n      table.insert(new_array, array[i])\n\
    \      table.insert(new_array, array[i])\n    end\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwvbza8.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 4, 3, 0, 1, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp3gwvbza8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ _, value in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ==\
    \ 1 then\n    for _, value in ipairs(array) do\n      new_array[#new_array + 1]\
    \ = value\n    end\n  else\n    for _, value in ipairs(array) do\n      new_array[#new_array\
    \ + 1] = value\n    end\n    table.sort(new_array)\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb04t673.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpqb04t673.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local temp2\n  local temp3\n  local temp4\n\
    \  local temp5\n  local temp6\n  local temp7\n  local temp8\n  local temp9\n \
    \ local temp10\n  local temp11\n  local temp12\n  local temp13\n  local temp14\n\
    \  local temp15\n  local temp16\n  local temp17\n  local temp18\n  local temp19\n\
    \  local temp20\n  local temp21\n  local temp22\n  local temp23\n  local temp24\n\
    \  local temp25\n  local temp26\n  local temp27\n  local temp28\n  local temp29\n\
    \  local temp30\n  local temp31\n  local temp32\n  local temp33\n  local temp34\n\
    \  local temp35\n  local temp36\n  local temp37\n  local temp38\n  local temp39\n\
    \  local temp40\n  local temp41\n  local temp42\n  local temp43\n  local temp44\n\
    \  local temp45\n  local temp46\n  local temp47\n  local temp48\n  local temp49\n\
    \  local temp50\n  local temp51\n  local temp52\n  local temp53\n  local temp54\n\
    \  local temp55\n  local temp56\n  local temp57\n  local temp58\n  local temp59\n\
    \  local temp60\n  local temp61\n  local temp62\n  local temp63\n  local temp64\n\
    \  local temp65\n  local temp66\n  local temp67\n  local temp68\n  local temp69\n\
    \  local temp70\n  local temp71\n  local temp72\n  local temp73\n  local temp74\n\
    \  local temp75\n  local temp76\n  local temp77\n  local temp78\n  local temp79\n\
    \  local temp80\n  local temp81\n  local temp82\n  local temp83\n  local temp84\n\
    \  local temp85\n  local temp86\n  local temp87\n  local temp88\n  local temp89\n\
    \  local temp90\n  local temp91\n  local temp92\n  local temp93\n  local temp94\n\
    \  local temp95\n  local temp96\n  local temp97\n  local temp98\n  local temp99\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprsofbvf9.lua:128: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 == 1\n  if odd then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(left, right)\n  \
    \    return left > right\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y78eh2f.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2y78eh2f.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = table.reverse(array)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf50w9t9i.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpf50w9t9i.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpf50w9t9i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sorted = {}\n  for\
    \ _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(sorted,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted)\n  else\n    table.sort(sorted,\
    \ function(a, b) return a > b end)\n  end\n  return sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp697ngcj_.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp697ngcj_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x > y then\n        return\
    \ true\n      else\n        return false\n      end\n    end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzi3w3we.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqzi3w3we.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = table.reverse(array)\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf50w9t9i.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpf50w9t9i.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpf50w9t9i.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = sum % 2 == 1\n  if odd then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y > x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmea8ey5e.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmea8ey5e.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp = 0\n  local result\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy0gmf2gs.lua:29: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqha9iy9.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoqha9iy9.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, v\
    \ in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7ytl7o_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpw7ytl7o_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpw7ytl7o_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcg6_7rti.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpcg6_7rti.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(x, y)\n      if x > y then\n  \
    \      return 1\n      else\n        return -1\n      end\n    end)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg7tnmp4.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpmg7tnmp4.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = table.remove(array, 1, #array - 1)\n  else\n    result = table.remove(array,\
    \ #array + 1)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwtlg4f5.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpgwtlg4f5.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = (sum % 2) == 1\n  if odd then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return b\
    \ - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk0p6kwk.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpkk0p6kwk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(x, y)\n      return y - x\n   \
    \ end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck17ag6p.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpck17ag6p.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if\
    \ a < b then\n        return -1\n      elseif a > b then\n        return 1\n \
    \     else\n        return 0\n      end\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv226e77.lua:39:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpbv226e77.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  local odd = (sum % 2 == 1)\n  if odd then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ x > y\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1cam05x.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt1cam05x.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmproja2bni.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmproja2bni.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmproja2bni.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp\n  while index < #array do\n    sum = sum + array[index]\n    index = index\
    \ + 1\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(a, b) return b - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6muuz2vq.lua:22:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmp6muuz2vq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp6muuz2vq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return a\
    \ > b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvznqf597.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvznqf597.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local max_sum = 0\n  local\
    \ max_index = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum\
    \ > max_sum then\n      max_sum = sum\n      max_index = i\n    end\n  end\n \
    \ if max_sum % 2 == 1 then\n    table.sort(array, function(a, b) return a < b\
    \ end)\n  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n\
    \  return array[max_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5u5q7vmw.lua:33:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5u5q7vmw.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1ewde9_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmpv1ewde9_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpv1ewde9_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  local odd = sum % 2\
    \ == 1\n  if odd then\n    table.sort(array)\n  else\n    table.sort(array, function(a,\
    \ b) return b - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllauj20_.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpllauj20_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n\
    \    result = array\n  else\n    result = array:reverse()\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3wzl0h0_.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp3wzl0h0_.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3wzl0h0_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpt1cfuv.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprpt1cfuv.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlc8vd92.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpdlc8vd92.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local results = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    results[i] = array[i]\n  end\n\
    \  if sum % 2 ~= 0 then\n    table.sort(results, function(a, b) return a < b end)\n\
    \  else\n    table.sort(results, function(a, b) return a > b end)\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_hclplw.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp1_hclplw.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ x > y\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts2h7a7i.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpts2h7a7i.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(left, right)\n      return right\
    \ - left\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuawqoeu.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjuawqoeu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr38uescd.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpr38uescd.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoejm7v08.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoejm7v08.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a > b then\n        return\
    \ true\n      elseif a < b then\n        return false\n      else\n        return\
    \ a\n      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2f69o3yq.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp2f69o3yq.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqha9iy9.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoqha9iy9.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(first, last)\n      return last\
    \ - first\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57g_ntb3.lua:28:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp57g_ntb3.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(left, right)\n\
    \      return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp944a24lo.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp944a24lo.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local max_sum = 0\n  local\
    \ max_index = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum\
    \ > max_sum then\n      max_sum = sum\n      max_index = i\n    end\n  end\n \
    \ if max_sum % 2 == 1 then\n    table.sort(array, function(a, b)\n      return\
    \ a > b\n    end)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ a < b\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dkb959s.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 4, 3, 2, 1, 0}\nstack traceback:\n\
    \t/tmp/tmp9dkb959s.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplv2ujv1v.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplv2ujv1v.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  local temp\n  local result\n  while index < length do\n \
    \   sum = sum + array[index]\n    index = index + 1\n  end\n  if sum % 2 == 1\
    \ then\n    temp = array[#array]\n    array[#array] = array[#array]\n    array[#array]\
    \ = temp\n  end\n  result = {}\n  index = 1\n  while index < length do\n    table.insert(result,\
    \ array[index])\n    index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04o3_qp5.lua:39:\
    \ expected: {5}\nactual: {}\nstack traceback:\n\t/tmp/tmp04o3_qp5.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ length = #array\n  while index < length do\n    sum = sum + array[index]\n \
    \   index = index + 1\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array,\
    \ function(a, b) return a < b end)\n  else\n    return table.sort(array, function(a,\
    \ b) return a > b end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2cnlkyn.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpa2cnlkyn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wfce2so.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_wfce2so.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnb7gcu1.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmphnb7gcu1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result = {}\n  for\
    \ _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n\
    \    for _, v in ipairs(array) do\n      table.insert(result, v)\n    end\n  else\n\
    \    for _, v in ipairs(array) do\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhfgjct0.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpvhfgjct0.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq7y1h03.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpcq7y1h03.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp = 0\n  local length = #array\n  local result\n  while index < length do\n\
    \    sum = sum + array[index]\n    index = index + 1\n  end\n  if sum % 2 ~= 0\
    \ then\n    result = array\n  else\n    result = array\n    table.sort(result,\
    \ function(a, b) return a < b end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptn5wowkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {2, 4, 3, 0, 1, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptn5wowkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local new_array = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n     \
    \ table.insert(new_array, array[i])\n    else\n      table.insert(new_array, array[i])\n\
    \      table.insert(new_array, array[i])\n    end\n  end\n  return new_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gwvbza8.lua:31:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 4, 3, 0, 1, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp3gwvbza8.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y - x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo43xxoya.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpo43xxoya.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b) return a\
    \ < b end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w27iroc.lua:31:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6w27iroc.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local result\n  for i, v\
    \ in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    result\
    \ = array\n  else\n    result = array:reverse()\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp27f6qhac.lua:20:\
    \ attempt to call a nil value (method 'reverse')\nstack traceback:\n\t/tmp/tmp27f6qhac.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp27f6qhac.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5rb2sbu.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph5rb2sbu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqha9iy9.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoqha9iy9.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local sum2 = 0\n  for i =\
    \ 1, #array do\n    sum = sum + array[i]\n    sum2 = sum2 + array[i]\n  end\n\
    \  if sum2 % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(a, b) return b - a end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j1u18y_.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp1j1u18y_.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp\n  local temp2\n  local result\n  while index < #array do\n    sum = sum\
    \ + array[index]\n    index = index + 1\n  end\n  if sum % 2 == 1 then\n    temp\
    \ = array[1]\n    array[1] = array[#array]\n    array[#array] = temp\n  end\n\
    \  index = 1\n  temp2 = array[1]\n  while index < #array do\n    temp2 = temp2\
    \ + array[index]\n    index = index + 1\n  end\n  result = array\n  if temp2 >\
    \ temp then\n    temp = temp2\n  end\n  while index < #array do\n    array[index]\
    \ = array[index - 1]\n    index = index - 1\n  end\n  array[1] = temp\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89s81fa7.lua:33:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp89s81fa7.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmp89s81fa7.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local results = {}\n  for\
    \ i = 1, #array do\n    sum = sum + array[i]\n    table.insert(results, array[i])\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n    table.sort(results,\
    \ function(a, b) return a > b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3dubngq.lua:32:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpi3dubngq.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  for i = 1, #array do\n  \
    \  sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu24r0ndu.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu24r0ndu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800427
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local length = #array\n \
    \ for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y > x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiu_4jgp7.lua:33:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpiu_4jgp7.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = 0\n  local index = 1\n  local\
    \ temp\n  local result\n  local i = 1\n  while i <= #array do\n    sum = array[i]\
    \ + sum\n    if sum > 0 then\n      temp = array[i]\n      array[i] = array[index]\n\
    \      array[index] = temp\n      index = index + 1\n    end\n    i = i + 1\n\
    \  end\n  if sum % 2 == 1 then\n    result = array\n  else\n    result = array\n\
    \    table.sort(result, function(x, y)\n      return y > x\n    end)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpziifhxun.lua:43:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpziifhxun.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659800428
