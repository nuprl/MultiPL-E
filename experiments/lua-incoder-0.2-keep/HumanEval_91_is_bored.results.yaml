language: lua
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"%w+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprcb7hc_m.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprcb7hc_m.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1acyy65.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm1acyy65.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1acyy65.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm1acyy65.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S%.]\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pgnh0kv.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0pgnh0kv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%w\\.\\?\\!]+\") do\n    if w == \"I\" then\n      boredoms\
    \ = boredoms + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp757ewbiz.lua:11: invalid escape sequence near ''"[%w\.''

    '
  stdout: ''
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1acyy65.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm1acyy65.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = {}\n \
    \ for w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      table.insert(boredoms,\
    \ 1)\n    else\n      table.insert(boredoms, 0)\n    end\n  end\n  return table.count(boredoms)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_vw10ae.lua:18:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpw_vw10ae.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpw_vw10ae.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n    local boredoms = 0\n\
    \    for w in S:gmatch(\"[I%!.]+\") do\n        if w == \"I\" then\n         \
    \   boredoms = boredoms + 1\n        end\n    end\n    return boredoms\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_bored\n\
    \    lu.assertEquals(candidate('Hello world'), 0)\n    lu.assertEquals(candidate('Is\
    \ the sky blue?'), 0)\n    lu.assertEquals(candidate('I love It !'), 1)\n    lu.assertEquals(candidate('bIt'),\
    \ 0)\n    lu.assertEquals(candidate('I feel good today. I will be productive.\
    \ will kill It'), 2)\n    lu.assertEquals(candidate('You and I are going for a\
    \ walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zf4fmtp.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6zf4fmtp.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1acyy65.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm1acyy65.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[%S]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9knfmg5.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm9knfmg5.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You'll be given a string of words, and your task is to count the number\n\
    -- of boredoms. A boredom is a sentence that starts with the word \"I\".\n-- Sentences\
    \ are delimited by '.', '?' or '!'.\n-- For example:\n-- >>> is_bored(\"Hello\
    \ world\")\n-- 0\n-- >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n-- 1\nlocal function is_bored(S)\n  local boredoms = 0\n  for\
    \ w in S:gmatch(\"[I%!.]+\") do\n    if w == \"I\" then\n      boredoms = boredoms\
    \ + 1\n    end\n  end\n  return boredoms\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_bored\n    lu.assertEquals(candidate('Hello\
    \ world'), 0)\n    lu.assertEquals(candidate('Is the sky blue?'), 0)\n    lu.assertEquals(candidate('I\
    \ love It !'), 1)\n    lu.assertEquals(candidate('bIt'), 0)\n    lu.assertEquals(candidate('I\
    \ feel good today. I will be productive. will kill It'), 2)\n    lu.assertEquals(candidate('You\
    \ and I are going for a walk'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1acyy65.lua:23:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm1acyy65.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
