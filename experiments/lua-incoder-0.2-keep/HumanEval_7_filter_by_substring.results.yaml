name: HumanEval_7_filter_by_substring
language: lua
results:
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yxrc34s.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3yxrc34s.lua:9: in function 'candidate'\n\t/tmp/tmp3yxrc34s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_nsj5i6.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3_nsj5i6.lua:9: in function 'candidate'\n\t/tmp/tmp3_nsj5i6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdptmisdk.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpdptmisdk.lua:9: in function 'candidate'\n\t/tmp/tmpdptmisdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vi8zycm.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7vi8zycm.lua:9: in function 'candidate'\n\t/tmp/tmp7vi8zycm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p5tmn1n.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp1p5tmn1n.lua:9: in function 'candidate'\n\t/tmp/tmp1p5tmn1n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr85aasyn.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpr85aasyn.lua:9: in function 'candidate'\n\t/tmp/tmpr85aasyn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjs1zkc2y.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpjs1zkc2y.lua:9: in function 'candidate'\n\t/tmp/tmpjs1zkc2y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix03u0mk.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpix03u0mk.lua:9: in function 'candidate'\n\t/tmp/tmpix03u0mk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3igr756u.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3igr756u.lua:9: in function 'candidate'\n\t/tmp/tmp3igr756u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyqlioj1.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpxyqlioj1.lua:9: in function 'candidate'\n\t/tmp/tmpxyqlioj1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf3le6sh.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpkf3le6sh.lua:9: in function 'candidate'\n\t/tmp/tmpkf3le6sh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0gcmmqe.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpr0gcmmqe.lua:9: in function 'candidate'\n\t/tmp/tmpr0gcmmqe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ckwbhsu.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3ckwbhsu.lua:9: in function 'candidate'\n\t/tmp/tmp3ckwbhsu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaehbcbo.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpgaehbcbo.lua:9: in function 'candidate'\n\t/tmp/tmpgaehbcbo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1botpri5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1botpri5.lua:9: in function 'candidate'\n\t/tmp/tmp1botpri5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpati3rroz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpati3rroz.lua:9: in function 'candidate'\n\t/tmp/tmpati3rroz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluxriw5j.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpluxriw5j.lua:9: in function 'candidate'\n\t/tmp/tmpluxriw5j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3sdfuoy.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpo3sdfuoy.lua:9: in function 'candidate'\n\t/tmp/tmpo3sdfuoy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nnx7hmm.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp8nnx7hmm.lua:9: in function 'candidate'\n\t/tmp/tmp8nnx7hmm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81f8zyid.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp81f8zyid.lua:9: in function 'candidate'\n\t/tmp/tmp81f8zyid.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0q49z19.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmph0q49z19.lua:9: in function 'candidate'\n\t/tmp/tmph0q49z19.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpelx00wka.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpelx00wka.lua:9: in function 'candidate'\n\t/tmp/tmpelx00wka.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a5phxlj.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp5a5phxlj.lua:9: in function 'candidate'\n\t/tmp/tmp5a5phxlj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqwh5462.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmptqwh5462.lua:9: in function 'candidate'\n\t/tmp/tmptqwh5462.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_g8ruqr.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm_g8ruqr.lua:9: in function 'candidate'\n\t/tmp/tmpm_g8ruqr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscn91kdn.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpscn91kdn.lua:9: in function 'candidate'\n\t/tmp/tmpscn91kdn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4taeugm.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpi4taeugm.lua:9: in function 'candidate'\n\t/tmp/tmpi4taeugm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0khoqje2.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0khoqje2.lua:9: in function 'candidate'\n\t/tmp/tmp0khoqje2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jqwvy4f.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp0jqwvy4f.lua:9: in function 'candidate'\n\t/tmp/tmp0jqwvy4f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6soerlp.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpf6soerlp.lua:9: in function 'candidate'\n\t/tmp/tmpf6soerlp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztnbpk0_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpztnbpk0_.lua:9: in function 'candidate'\n\t/tmp/tmpztnbpk0_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7k9ehysg.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7k9ehysg.lua:9: in function 'candidate'\n\t/tmp/tmp7k9ehysg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtd_3pjq.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpvtd_3pjq.lua:9: in function 'candidate'\n\t/tmp/tmpvtd_3pjq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeel3vtyz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpeel3vtyz.lua:9: in function 'candidate'\n\t/tmp/tmpeel3vtyz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz3ye9ag.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpjz3ye9ag.lua:9: in function 'candidate'\n\t/tmp/tmpjz3ye9ag.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph59bufsp.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmph59bufsp.lua:9: in function 'candidate'\n\t/tmp/tmph59bufsp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxbba98c.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpnxbba98c.lua:9: in function 'candidate'\n\t/tmp/tmpnxbba98c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq135qtc.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpyq135qtc.lua:9: in function 'candidate'\n\t/tmp/tmpyq135qtc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitmqc5s_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpitmqc5s_.lua:9: in function 'candidate'\n\t/tmp/tmpitmqc5s_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6f41fjtb.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp6f41fjtb.lua:9: in function 'candidate'\n\t/tmp/tmp6f41fjtb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcbmyx48.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpmcbmyx48.lua:9: in function 'candidate'\n\t/tmp/tmpmcbmyx48.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vk_dpl1.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp_vk_dpl1.lua:9: in function 'candidate'\n\t/tmp/tmp_vk_dpl1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0247jx__.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp0247jx__.lua:9: in function 'candidate'\n\t/tmp/tmp0247jx__.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_rcavr5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpj_rcavr5.lua:9: in function 'candidate'\n\t/tmp/tmpj_rcavr5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks24iyqc.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpks24iyqc.lua:9: in function 'candidate'\n\t/tmp/tmpks24iyqc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdokoopah.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpdokoopah.lua:9: in function 'candidate'\n\t/tmp/tmpdokoopah.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1guv8cj_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1guv8cj_.lua:9: in function 'candidate'\n\t/tmp/tmp1guv8cj_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1oatt2j.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm1oatt2j.lua:9: in function 'candidate'\n\t/tmp/tmpm1oatt2j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplou2aw6e.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmplou2aw6e.lua:9: in function 'candidate'\n\t/tmp/tmplou2aw6e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyso4nw3_.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpyso4nw3_.lua:9: in function 'candidate'\n\t/tmp/tmpyso4nw3_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvva1zx_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmppvva1zx_.lua:9: in function 'candidate'\n\t/tmp/tmppvva1zx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0balp279.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp0balp279.lua:9: in function 'candidate'\n\t/tmp/tmp0balp279.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r4a97gd.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7r4a97gd.lua:9: in function 'candidate'\n\t/tmp/tmp7r4a97gd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8_g2enl.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpz8_g2enl.lua:9: in function 'candidate'\n\t/tmp/tmpz8_g2enl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9t0hzh2.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpl9t0hzh2.lua:9: in function 'candidate'\n\t/tmp/tmpl9t0hzh2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf24anp84.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpf24anp84.lua:9: in function 'candidate'\n\t/tmp/tmpf24anp84.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr90y5t03.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpr90y5t03.lua:9: in function 'candidate'\n\t/tmp/tmpr90y5t03.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps35ien0x.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmps35ien0x.lua:9: in function 'candidate'\n\t/tmp/tmps35ien0x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1rgsd01.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm1rgsd01.lua:9: in function 'candidate'\n\t/tmp/tmpm1rgsd01.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gwvm1nt.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp2gwvm1nt.lua:9: in function 'candidate'\n\t/tmp/tmp2gwvm1nt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz46csr72.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpz46csr72.lua:9: in function 'candidate'\n\t/tmp/tmpz46csr72.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfpnqo88.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpgfpnqo88.lua:9: in function 'candidate'\n\t/tmp/tmpgfpnqo88.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02k3k0j8.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp02k3k0j8.lua:9: in function 'candidate'\n\t/tmp/tmp02k3k0j8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppr9zjrxv.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmppr9zjrxv.lua:9: in function 'candidate'\n\t/tmp/tmppr9zjrxv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfg57ba4.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpxfg57ba4.lua:9: in function 'candidate'\n\t/tmp/tmpxfg57ba4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j4hvgt7.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp5j4hvgt7.lua:9: in function 'candidate'\n\t/tmp/tmp5j4hvgt7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk8jpmqmw.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpk8jpmqmw.lua:9: in function 'candidate'\n\t/tmp/tmpk8jpmqmw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglbqxhis.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpglbqxhis.lua:9: in function 'candidate'\n\t/tmp/tmpglbqxhis.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15ix1go5.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp15ix1go5.lua:9: in function 'candidate'\n\t/tmp/tmp15ix1go5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnd78qm2y.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpnd78qm2y.lua:9: in function 'candidate'\n\t/tmp/tmpnd78qm2y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_x_xidx.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp2_x_xidx.lua:9: in function 'candidate'\n\t/tmp/tmp2_x_xidx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnpoxd07.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpbnpoxd07.lua:9: in function 'candidate'\n\t/tmp/tmpbnpoxd07.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fbi17h3.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3fbi17h3.lua:9: in function 'candidate'\n\t/tmp/tmp3fbi17h3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_53d2bq.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpz_53d2bq.lua:9: in function 'candidate'\n\t/tmp/tmpz_53d2bq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriva_bem.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpriva_bem.lua:9: in function 'candidate'\n\t/tmp/tmpriva_bem.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jj9ewrt.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp3jj9ewrt.lua:9: in function 'candidate'\n\t/tmp/tmp3jj9ewrt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggqfagf5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpggqfagf5.lua:9: in function 'candidate'\n\t/tmp/tmpggqfagf5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp02dwvhp.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpp02dwvhp.lua:9: in function 'candidate'\n\t/tmp/tmpp02dwvhp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuvqaadj.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmphuvqaadj.lua:9: in function 'candidate'\n\t/tmp/tmphuvqaadj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kfx0h9a.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp8kfx0h9a.lua:9: in function 'candidate'\n\t/tmp/tmp8kfx0h9a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfeiu5th.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpmfeiu5th.lua:9: in function 'candidate'\n\t/tmp/tmpmfeiu5th.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3_ncwpi.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmph3_ncwpi.lua:9: in function 'candidate'\n\t/tmp/tmph3_ncwpi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnol9tqn.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpcnol9tqn.lua:9: in function 'candidate'\n\t/tmp/tmpcnol9tqn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdi6v4jg.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmppdi6v4jg.lua:9: in function 'candidate'\n\t/tmp/tmppdi6v4jg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyufbdhz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpbyufbdhz.lua:9: in function 'candidate'\n\t/tmp/tmpbyufbdhz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sa80rlb.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp7sa80rlb.lua:9: in function 'candidate'\n\t/tmp/tmp7sa80rlb.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2hxoz6e.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpt2hxoz6e.lua:9: in function 'candidate'\n\t/tmp/tmpt2hxoz6e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma5ytz_a.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpma5ytz_a.lua:9: in function 'candidate'\n\t/tmp/tmpma5ytz_a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_0wolj5.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp8_0wolj5.lua:9: in function 'candidate'\n\t/tmp/tmp8_0wolj5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb010p_k.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpxb010p_k.lua:9: in function 'candidate'\n\t/tmp/tmpxb010p_k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8n0j9m_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm8n0j9m_.lua:9: in function 'candidate'\n\t/tmp/tmpm8n0j9m_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6rqb8hz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpj6rqb8hz.lua:9: in function 'candidate'\n\t/tmp/tmpj6rqb8hz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ix9lxp7.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1ix9lxp7.lua:9: in function 'candidate'\n\t/tmp/tmp1ix9lxp7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f985qez.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp3f985qez.lua:9: in function 'candidate'\n\t/tmp/tmp3f985qez.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoy3qsp0e.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpoy3qsp0e.lua:9: in function 'candidate'\n\t/tmp/tmpoy3qsp0e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc0zlfde.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpzc0zlfde.lua:9: in function 'candidate'\n\t/tmp/tmpzc0zlfde.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsck9oe8l.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpsck9oe8l.lua:9: in function 'candidate'\n\t/tmp/tmpsck9oe8l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8ocgbff.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpy8ocgbff.lua:9: in function 'candidate'\n\t/tmp/tmpy8ocgbff.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rz5g141.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp0rz5g141.lua:9: in function 'candidate'\n\t/tmp/tmp0rz5g141.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyb4nod3k.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpyb4nod3k.lua:9: in function 'candidate'\n\t/tmp/tmpyb4nod3k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mo641ru.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4mo641ru.lua:9: in function 'candidate'\n\t/tmp/tmp4mo641ru.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcp_z091.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpqcp_z091.lua:9: in function 'candidate'\n\t/tmp/tmpqcp_z091.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwi8nby5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptwi8nby5.lua:9: in function 'candidate'\n\t/tmp/tmptwi8nby5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsh1scg1g.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpsh1scg1g.lua:9: in function 'candidate'\n\t/tmp/tmpsh1scg1g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd41_3zw.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpxd41_3zw.lua:9: in function 'candidate'\n\t/tmp/tmpxd41_3zw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n3a0mez.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7n3a0mez.lua:9: in function 'candidate'\n\t/tmp/tmp7n3a0mez.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnabpt2fj.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpnabpt2fj.lua:9: in function 'candidate'\n\t/tmp/tmpnabpt2fj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3v6hnfnl.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp3v6hnfnl.lua:9: in function 'candidate'\n\t/tmp/tmp3v6hnfnl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl492nmno.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpl492nmno.lua:9: in function 'candidate'\n\t/tmp/tmpl492nmno.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7milovir.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7milovir.lua:9: in function 'candidate'\n\t/tmp/tmp7milovir.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaikku_pa.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpaikku_pa.lua:9: in function 'candidate'\n\t/tmp/tmpaikku_pa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphd5arwvm.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmphd5arwvm.lua:9: in function 'candidate'\n\t/tmp/tmphd5arwvm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7b1_fqjt.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp7b1_fqjt.lua:9: in function 'candidate'\n\t/tmp/tmp7b1_fqjt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8k9vuuq.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpm8k9vuuq.lua:9: in function 'candidate'\n\t/tmp/tmpm8k9vuuq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3s3mo7x.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpc3s3mo7x.lua:9: in function 'candidate'\n\t/tmp/tmpc3s3mo7x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtbj_5xd.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpqtbj_5xd.lua:9: in function 'candidate'\n\t/tmp/tmpqtbj_5xd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5klyri9.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpu5klyri9.lua:9: in function 'candidate'\n\t/tmp/tmpu5klyri9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51x3pchr.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp51x3pchr.lua:9: in function 'candidate'\n\t/tmp/tmp51x3pchr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqr91rn74.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpqr91rn74.lua:9: in function 'candidate'\n\t/tmp/tmpqr91rn74.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzonty6d3.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpzonty6d3.lua:9: in function 'candidate'\n\t/tmp/tmpzonty6d3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rilx_f5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp8rilx_f5.lua:9: in function 'candidate'\n\t/tmp/tmp8rilx_f5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mbylef_.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_mbylef_.lua:9: in function 'candidate'\n\t/tmp/tmp_mbylef_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq2k6uwg.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmphq2k6uwg.lua:9: in function 'candidate'\n\t/tmp/tmphq2k6uwg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpv66vho.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpvpv66vho.lua:9: in function 'candidate'\n\t/tmp/tmpvpv66vho.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qoams05.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp_qoams05.lua:9: in function 'candidate'\n\t/tmp/tmp_qoams05.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nseg4c4.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp3nseg4c4.lua:9: in function 'candidate'\n\t/tmp/tmp3nseg4c4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk0k7022x.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpk0k7022x.lua:9: in function 'candidate'\n\t/tmp/tmpk0k7022x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprvyovidx.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmprvyovidx.lua:9: in function 'candidate'\n\t/tmp/tmprvyovidx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexoxw0vn.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpexoxw0vn.lua:9: in function 'candidate'\n\t/tmp/tmpexoxw0vn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      filtered_strings[#filtered_strings\
    \ + 1] = string\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphidvdg5c.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmphidvdg5c.lua:9: in function 'candidate'\n\t/tmp/tmphidvdg5c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw06u8cdh.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpw06u8cdh.lua:9: in function 'candidate'\n\t/tmp/tmpw06u8cdh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjugf35_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpsjugf35_.lua:9: in function 'candidate'\n\t/tmp/tmpsjugf35_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_hlu3vh.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpp_hlu3vh.lua:9: in function 'candidate'\n\t/tmp/tmpp_hlu3vh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet4dsulr.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpet4dsulr.lua:9: in function 'candidate'\n\t/tmp/tmpet4dsulr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpukd0ibxi.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpukd0ibxi.lua:9: in function 'candidate'\n\t/tmp/tmpukd0ibxi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek8seci2.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpek8seci2.lua:9: in function 'candidate'\n\t/tmp/tmpek8seci2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1eqnolnh.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1eqnolnh.lua:9: in function 'candidate'\n\t/tmp/tmp1eqnolnh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqeon5gp.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmphqeon5gp.lua:9: in function 'candidate'\n\t/tmp/tmphqeon5gp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67xukpfs.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp67xukpfs.lua:9: in function 'candidate'\n\t/tmp/tmp67xukpfs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_6vf64t.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmph_6vf64t.lua:9: in function 'candidate'\n\t/tmp/tmph_6vf64t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rg2hvc2.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp4rg2hvc2.lua:9: in function 'candidate'\n\t/tmp/tmp4rg2hvc2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zpnhvck.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp1zpnhvck.lua:9: in function 'candidate'\n\t/tmp/tmp1zpnhvck.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjw5fk15x.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpjw5fk15x.lua:9: in function 'candidate'\n\t/tmp/tmpjw5fk15x.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0og1lmc.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpx0og1lmc.lua:9: in function 'candidate'\n\t/tmp/tmpx0og1lmc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaku93qx.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpuaku93qx.lua:9: in function 'candidate'\n\t/tmp/tmpuaku93qx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0qfz3t4.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpy0qfz3t4.lua:9: in function 'candidate'\n\t/tmp/tmpy0qfz3t4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrk5n1oe.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmphrk5n1oe.lua:9: in function 'candidate'\n\t/tmp/tmphrk5n1oe.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp25slnpju.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp25slnpju.lua:9: in function 'candidate'\n\t/tmp/tmp25slnpju.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zgqv3yd.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp4zgqv3yd.lua:9: in function 'candidate'\n\t/tmp/tmp4zgqv3yd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4pn6y3l.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpo4pn6y3l.lua:9: in function 'candidate'\n\t/tmp/tmpo4pn6y3l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53qq6vl_.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp53qq6vl_.lua:9: in function 'candidate'\n\t/tmp/tmp53qq6vl_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafgdlvae.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpafgdlvae.lua:9: in function 'candidate'\n\t/tmp/tmpafgdlvae.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5101ovcr.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp5101ovcr.lua:9: in function 'candidate'\n\t/tmp/tmp5101ovcr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp278dubmz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp278dubmz.lua:9: in function 'candidate'\n\t/tmp/tmp278dubmz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb174z8z6.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpb174z8z6.lua:9: in function 'candidate'\n\t/tmp/tmpb174z8z6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w584rk7.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp7w584rk7.lua:9: in function 'candidate'\n\t/tmp/tmp7w584rk7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmr2xr6rg.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpmr2xr6rg.lua:9: in function 'candidate'\n\t/tmp/tmpmr2xr6rg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a_l4bji.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp_a_l4bji.lua:9: in function 'candidate'\n\t/tmp/tmp_a_l4bji.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57onco1r.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp57onco1r.lua:9: in function 'candidate'\n\t/tmp/tmp57onco1r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring, 1, true) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_7z6u_5.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpx_7z6u_5.lua:9: in function 'candidate'\n\t/tmp/tmpx_7z6u_5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7p68_ta.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmps7p68_ta.lua:9: in function 'candidate'\n\t/tmp/tmps7p68_ta.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwz1ddxux.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpwz1ddxux.lua:9: in function 'candidate'\n\t/tmp/tmpwz1ddxux.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9_czlvf.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpv9_czlvf.lua:9: in function 'candidate'\n\t/tmp/tmpv9_czlvf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0feq3pz.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpu0feq3pz.lua:9: in function 'candidate'\n\t/tmp/tmpu0feq3pz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0uktaacr.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp0uktaacr.lua:9: in function 'candidate'\n\t/tmp/tmp0uktaacr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnzr16tk.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpmnzr16tk.lua:9: in function 'candidate'\n\t/tmp/tmpmnzr16tk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppydufh2o.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmppydufh2o.lua:9: in function 'candidate'\n\t/tmp/tmppydufh2o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbgkrf3m.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmptbgkrf3m.lua:9: in function 'candidate'\n\t/tmp/tmptbgkrf3m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsg82tfmr.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpsg82tfmr.lua:9: in function 'candidate'\n\t/tmp/tmpsg82tfmr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbt49ze6r.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpbt49ze6r.lua:9: in function 'candidate'\n\t/tmp/tmpbt49ze6r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y48w1m2.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp8y48w1m2.lua:9: in function 'candidate'\n\t/tmp/tmp8y48w1m2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u59u3jy.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp_u59u3jy.lua:9: in function 'candidate'\n\t/tmp/tmp_u59u3jy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgizj8u6g.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpgizj8u6g.lua:9: in function 'candidate'\n\t/tmp/tmpgizj8u6g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsus3lm5.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpdsus3lm5.lua:9: in function 'candidate'\n\t/tmp/tmpdsus3lm5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy10k9p2c.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpy10k9p2c.lua:9: in function 'candidate'\n\t/tmp/tmpy10k9p2c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx71j6na.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpsx71j6na.lua:9: in function 'candidate'\n\t/tmp/tmpsx71j6na.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpdg_k42.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmphpdg_k42.lua:9: in function 'candidate'\n\t/tmp/tmphpdg_k42.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp869640jn.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp869640jn.lua:9: in function 'candidate'\n\t/tmp/tmp869640jn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dq0ihfd.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp6dq0ihfd.lua:9: in function 'candidate'\n\t/tmp/tmp6dq0ihfd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyauk0j21.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpyauk0j21.lua:9: in function 'candidate'\n\t/tmp/tmpyauk0j21.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lxcai5s.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmp9lxcai5s.lua:9: in function 'candidate'\n\t/tmp/tmp9lxcai5s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkchpskfj.lua:9:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpkchpskfj.lua:9: in function 'candidate'\n\t/tmp/tmpkchpskfj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, string in ipairs(strings) do\n   \
    \ if string.find(substring) then\n      table.insert(result, string)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3jjf27g.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpg3jjf27g.lua:9: in function 'candidate'\n\t/tmp/tmpg3jjf27g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local filtered_strings = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      table.insert(filtered_strings,\
    \ string)\n    end\n  end\n  return filtered_strings\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = filter_by_substring\n    lu.assertEquals(candidate({},\
    \ 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe',\
    \ 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfwfg225.lua:9:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpdfwfg225.lua:9: in function 'candidate'\n\t/tmp/tmpdfwfg225.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Filter an input list of strings only for ones that contain given substring\n\
    -- >>> filter_by_substring([], 'a')\n-- []\n-- >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n-- ['abc', 'bacd', 'array']\nlocal function filter_by_substring(strings,\
    \ substring)\n  local result = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(result, str)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = filter_by_substring\n    lu.assertEquals(candidate({}, 'john'),\
    \ {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'}, 'xx'), {'xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx'})\n    lu.assertEquals(candidate({'grunt', 'trumpet', 'prune', 'gruesome'},\
    \ 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: !!int ''
  stderr: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  exit_code: 0
  status: OK
