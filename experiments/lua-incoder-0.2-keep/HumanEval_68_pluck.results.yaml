language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil or smalest_value < arr[i] then\n \
    \               smalest_value, smalest_index = arr[i], i\n            end\n  \
    \      end\n    end\n    if smalest_value == nil then\n        return nil\n  \
    \  end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdomi2zj.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpkdomi2zj.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            if v ~= smalest_value then\n                smalest_value, smalest_index\
    \ = v, 1\n            else\n                smalest_index = smalest_index + 1\n\
    \            end\n        end\n    end\n    if smalest_value == 0 then\n     \
    \   return nil\n    end\n    local index = 2\n    while smalest_value ~= 0 do\n\
    \        if smalest_value % 2 == 0 then\n            smalest_value = smalest_value\
    \ / 2\n        else\n            smalest_value = smalest_value * 3 + 1\n     \
    \   end\n        index = index + 1\n    end\n    return smalest_value, index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    for i = 1, #arr do\n        local value = arr[i]\n        local index\
    \ = i\n        while index > 1 do\n            local parent = math.floor((index\
    \ - 1) / 2)\n            if arr[parent] % 2 == 0 then\n                index =\
    \ parent\n            else\n                break\n            end\n        end\n\
    \        if index == 1 then\n            results[#results + 1] = value\n     \
    \   else\n            local smallest_value = arr[math.floor(index / 2)]\n    \
    \        local smallest_index = index\n            while smallest_index > 1 do\n\
    \                local parent = math.floor((smallest_index - 1) / 2)\n       \
    \         if arr[parent] % 2 == 0 then\n                    smallest_index = parent\n\
    \                else\n                    break\n                end\n      \
    \      end\n            results[#results + 1] = smallest_value, smallest_index\n\
    \        end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfbv6pyq.lua:33:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcfbv6pyq.lua:33: in local 'candidate'\n\t/tmp/tmpcfbv6pyq.lua:61: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local results =\
    \ {}\n  for i = 1, #arr do\n    local value = arr[i]\n    local index = i\n  \
    \  local smallest_value = nil\n    local smallest_index = nil\n    for j = i +\
    \ 1, #arr do\n      if arr[j] % 2 == 0 then\n        if smallest_value == nil\
    \ then\n          smallest_value = value\n          smallest_index = j\n     \
    \   elseif value < smallest_value then\n          smallest_value = value\n   \
    \       smallest_index = j\n        end\n      end\n    end\n    table.insert(results,\
    \ {smallest_value, smallest_index})\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp_cb5zz.lua:52:\
    \ expected: {2, 1}\nactual: {{4, 2}, {}, {}}\nstack traceback:\n\t/tmp/tmpwp_cb5zz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    if\
    \ smalest_index_value == nil then\n        smalest_index_value = smalest_index\n\
    \    end\n    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnp5l0igw.lua:91: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mssg5kc.lua:43:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp_mssg5kc.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_index\n\
    \  for _, node in ipairs(arr) do\n    if smalest_value == 0 then\n      smalest_value\
    \ = node\n      smalest_index = node\n      smalest_node = node\n      smalest_node_index\
    \ = node\n    elseif smalest_value == node then\n      if smalest_index > node\
    \ then\n        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_index\
    \ = smalest_index + 1\n      end\n    else\n      if smalest_index > node then\n\
    \        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_value\
    \ = smalest_value\n        smalest_index = smalest_index + 1\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95lzgr3y.lua:67:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp95lzgr3y.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \        end\n    end\n    if #even_values == 0 then\n        return nil\n   \
    \ end\n    local smallest_value = even_values[1]\n    local smallest_index = #even_values\n\
    \    for i = 1, #even_values do\n        if even_values[i] < smallest_value then\n\
    \            smallest_value = even_values[i]\n            smallest_index = i\n\
    \        end\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m7plbb9.lua:51:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp_m7plbb9.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == 0 then\n        return nil\n\
    \    end\n    local smallest_value_index = 0\n    for i = 1, #arr do\n       \
    \ if arr[i] == smallest_value then\n            smallest_value_index = i\n   \
    \     end\n    end\n    return smallest_value, smallest_value_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hmd6qgu.lua:50:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp2hmd6qgu.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, i, result)\n        if i == #arr then\n            return result\n\
    \        end\n        if arr[i] % 2 == 0 then\n            local smallest_value\
    \ = arr[i]\n            local smallest_index = i\n            for j = i + 1, #arr\
    \ do\n                if arr[j] % 2 == 0 then\n                    if smallest_value\
    \ < arr[j] then\n                        smallest_value = arr[j]\n           \
    \             smallest_index = j\n                    end\n                end\n\
    \            end\n            result[#result + 1] = smallest_value\n         \
    \   result[#result + 1] = smallest_index\n            helper(arr, smallest_index,\
    \ result)\n        end\n    end\n    helper(arr, 1, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_q76gk7.lua:44:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\
    \t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in\
    \ upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t...\n\t/tmp/tmpi_q76gk7.lua:47: in local 'candidate'\n\
    \t/tmp/tmpi_q76gk7.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.210\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local smallest_even_value\n    local smallest_even_node\n\
    \    local result\n    for _, v in ipairs(arr) do\n        if smallest_value ==\
    \ nil then\n            smallest_value = v\n            smallest_index = v\n \
    \           smallest_even_value = v\n            smallest_even_node = v\n    \
    \    elseif smallest_even_value < v then\n            smallest_value = v\n   \
    \         smallest_index = v\n            smallest_even_value = v\n          \
    \  smallest_even_node = v\n        elseif smallest_even_value == v then\n    \
    \        if smallest_index == nil then\n                smallest_index = v\n \
    \           elseif smallest_index > v then\n                smallest_index = v\n\
    \            end\n        end\n    end\n    if smallest_even_value == nil then\n\
    \        result = smallest_even_node\n    else\n        result = {smallest_even_value,\
    \ smallest_index}\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso5rnn8x.lua:62:\
    \ expected: {2, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpso5rnn8x.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_nodes = {}\n    local smalest_node_index\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            if smalest_value == arr[i] then\n\
    \                smalest_node_index = i\n            else\n                smalest_nodes[#smalest_nodes\
    \ + 1] = arr[i]\n            end\n        end\n    end\n    if smalest_node_index\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index,\
    \ smalest_nodes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu5nv339.lua:64:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmppu5nv339.lua:64: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vd7ikkl.lua:43:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp6vd7ikkl.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_value_index = 0\n  local results = {}\n  for i = 1,\
    \ #arr do\n    if arr[i] < min_value then\n      min_value = arr[i]\n      min_value_index\
    \ = i\n    end\n  end\n  results[1] = min_value_index\n  for i = 2, #arr do\n\
    \    if arr[i] < min_value then\n      results[i] = min_value_index\n    elseif\
    \ arr[i] == min_value then\n      results[i] = i\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv0gwxfx.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcv0gwxfx.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpcv0gwxfx.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] > smalest_value then\n            smalest_value =\
    \ arr[i]\n            smalest_index = i\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    for i = 1, #arr do\n        if arr[i]\
    \ == smalest_value then\n            smalest_node = { value = arr[i], index =\
    \ i }\n        end\n    end\n    return smalest_node\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkxw0cis.lua:50:\
    \ expected: {2, 1}\nactual: {index=1, value=4}\nstack traceback:\n\t/tmp/tmpwkxw0cis.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e2pjxk1.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1] = arr[i]\n\
    \            if even[#even] > smalest_value then\n                smalest_value\
    \ = even[#even]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfnfysu1.lua:48:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpqfnfysu1.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node.value = smalest_value\n    smalest_node.index\
    \ = smalest_index\n    return smalest_node\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n8q6cem.lua:53:\
    \ expected: {2, 1}\nactual: {index=1, value=4}\nstack traceback:\n\t/tmp/tmp2n8q6cem.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return []\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc60ernab.lua:29: unexpected symbol near ''[''

    '
  stdout: ''
