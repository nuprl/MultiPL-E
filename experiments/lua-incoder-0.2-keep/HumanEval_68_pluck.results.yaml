language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil or smalest_value < arr[i] then\n \
    \               smalest_value, smalest_index = arr[i], i\n            end\n  \
    \      end\n    end\n    if smalest_value == nil then\n        return nil\n  \
    \  end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdomi2zj.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpkdomi2zj.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            if v ~= smalest_value then\n                smalest_value, smalest_index\
    \ = v, 1\n            else\n                smalest_index = smalest_index + 1\n\
    \            end\n        end\n    end\n    if smalest_value == 0 then\n     \
    \   return nil\n    end\n    local index = 2\n    while smalest_value ~= 0 do\n\
    \        if smalest_value % 2 == 0 then\n            smalest_value = smalest_value\
    \ / 2\n        else\n            smalest_value = smalest_value * 3 + 1\n     \
    \   end\n        index = index + 1\n    end\n    return smalest_value, index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    for i = 1, #arr do\n        local value = arr[i]\n        local index\
    \ = i\n        while index > 1 do\n            local parent = math.floor((index\
    \ - 1) / 2)\n            if arr[parent] % 2 == 0 then\n                index =\
    \ parent\n            else\n                break\n            end\n        end\n\
    \        if index == 1 then\n            results[#results + 1] = value\n     \
    \   else\n            local smallest_value = arr[math.floor(index / 2)]\n    \
    \        local smallest_index = index\n            while smallest_index > 1 do\n\
    \                local parent = math.floor((smallest_index - 1) / 2)\n       \
    \         if arr[parent] % 2 == 0 then\n                    smallest_index = parent\n\
    \                else\n                    break\n                end\n      \
    \      end\n            results[#results + 1] = smallest_value, smallest_index\n\
    \        end\n    end\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfbv6pyq.lua:33:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcfbv6pyq.lua:33: in local 'candidate'\n\t/tmp/tmpcfbv6pyq.lua:61: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local results =\
    \ {}\n  for i = 1, #arr do\n    local value = arr[i]\n    local index = i\n  \
    \  local smallest_value = nil\n    local smallest_index = nil\n    for j = i +\
    \ 1, #arr do\n      if arr[j] % 2 == 0 then\n        if smallest_value == nil\
    \ then\n          smallest_value = value\n          smallest_index = j\n     \
    \   elseif value < smallest_value then\n          smallest_value = value\n   \
    \       smallest_index = j\n        end\n      end\n    end\n    table.insert(results,\
    \ {smallest_value, smallest_index})\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp_cb5zz.lua:52:\
    \ expected: {2, 1}\nactual: {{4, 2}, {}, {}}\nstack traceback:\n\t/tmp/tmpwp_cb5zz.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    if\
    \ smalest_index_value == nil then\n        smalest_index_value = smalest_index\n\
    \    end\n    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value = smalest_index_value\n    local smalest_index_value\
    \ = smalest_index_value\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnp5l0igw.lua:91: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mssg5kc.lua:43:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp_mssg5kc.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_index\n\
    \  for _, node in ipairs(arr) do\n    if smalest_value == 0 then\n      smalest_value\
    \ = node\n      smalest_index = node\n      smalest_node = node\n      smalest_node_index\
    \ = node\n    elseif smalest_value == node then\n      if smalest_index > node\
    \ then\n        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_index\
    \ = smalest_index + 1\n      end\n    else\n      if smalest_index > node then\n\
    \        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_value\
    \ = smalest_value\n        smalest_index = smalest_index + 1\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95lzgr3y.lua:67:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp95lzgr3y.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \        end\n    end\n    if #even_values == 0 then\n        return nil\n   \
    \ end\n    local smallest_value = even_values[1]\n    local smallest_index = #even_values\n\
    \    for i = 1, #even_values do\n        if even_values[i] < smallest_value then\n\
    \            smallest_value = even_values[i]\n            smallest_index = i\n\
    \        end\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m7plbb9.lua:51:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp_m7plbb9.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == 0 then\n        return nil\n\
    \    end\n    local smallest_value_index = 0\n    for i = 1, #arr do\n       \
    \ if arr[i] == smallest_value then\n            smallest_value_index = i\n   \
    \     end\n    end\n    return smallest_value, smallest_value_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hmd6qgu.lua:50:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp2hmd6qgu.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, i, result)\n        if i == #arr then\n            return result\n\
    \        end\n        if arr[i] % 2 == 0 then\n            local smallest_value\
    \ = arr[i]\n            local smallest_index = i\n            for j = i + 1, #arr\
    \ do\n                if arr[j] % 2 == 0 then\n                    if smallest_value\
    \ < arr[j] then\n                        smallest_value = arr[j]\n           \
    \             smallest_index = j\n                    end\n                end\n\
    \            end\n            result[#result + 1] = smallest_value\n         \
    \   result[#result + 1] = smallest_index\n            helper(arr, smallest_index,\
    \ result)\n        end\n    end\n    helper(arr, 1, {})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_q76gk7.lua:44:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\
    \t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in\
    \ upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44: in upvalue 'helper'\n\t/tmp/tmpi_q76gk7.lua:44:\
    \ in upvalue 'helper'\n\t...\n\t/tmp/tmpi_q76gk7.lua:47: in local 'candidate'\n\
    \t/tmp/tmpi_q76gk7.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.210\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local smallest_even_value\n    local smallest_even_node\n\
    \    local result\n    for _, v in ipairs(arr) do\n        if smallest_value ==\
    \ nil then\n            smallest_value = v\n            smallest_index = v\n \
    \           smallest_even_value = v\n            smallest_even_node = v\n    \
    \    elseif smallest_even_value < v then\n            smallest_value = v\n   \
    \         smallest_index = v\n            smallest_even_value = v\n          \
    \  smallest_even_node = v\n        elseif smallest_even_value == v then\n    \
    \        if smallest_index == nil then\n                smallest_index = v\n \
    \           elseif smallest_index > v then\n                smallest_index = v\n\
    \            end\n        end\n    end\n    if smallest_even_value == nil then\n\
    \        result = smallest_even_node\n    else\n        result = {smallest_even_value,\
    \ smallest_index}\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso5rnn8x.lua:62:\
    \ expected: {2, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpso5rnn8x.lua:62:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_nodes = {}\n    local smalest_node_index\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            if smalest_value == arr[i] then\n\
    \                smalest_node_index = i\n            else\n                smalest_nodes[#smalest_nodes\
    \ + 1] = arr[i]\n            end\n        end\n    end\n    if smalest_node_index\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index,\
    \ smalest_nodes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu5nv339.lua:64:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmppu5nv339.lua:64: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vd7ikkl.lua:43:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp6vd7ikkl.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_value_index = 0\n  local results = {}\n  for i = 1,\
    \ #arr do\n    if arr[i] < min_value then\n      min_value = arr[i]\n      min_value_index\
    \ = i\n    end\n  end\n  results[1] = min_value_index\n  for i = 2, #arr do\n\
    \    if arr[i] < min_value then\n      results[i] = min_value_index\n    elseif\
    \ arr[i] == min_value then\n      results[i] = i\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv0gwxfx.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpcv0gwxfx.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpcv0gwxfx.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] > smalest_value then\n            smalest_value =\
    \ arr[i]\n            smalest_index = i\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    for i = 1, #arr do\n        if arr[i]\
    \ == smalest_value then\n            smalest_node = { value = arr[i], index =\
    \ i }\n        end\n    end\n    return smalest_node\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkxw0cis.lua:50:\
    \ expected: {2, 1}\nactual: {index=1, value=4}\nstack traceback:\n\t/tmp/tmpwkxw0cis.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e2pjxk1.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1] = arr[i]\n\
    \            if even[#even] > smalest_value then\n                smalest_value\
    \ = even[#even]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfnfysu1.lua:48:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpqfnfysu1.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node.value = smalest_value\n    smalest_node.index\
    \ = smalest_index\n    return smalest_node\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n8q6cem.lua:53:\
    \ expected: {2, 1}\nactual: {index=1, value=4}\nstack traceback:\n\t/tmp/tmp2n8q6cem.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return []\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc60ernab.lua:29: unexpected symbol near ''[''

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] > smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5fl0odi.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpz5fl0odi.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n        smalest_node = arr[i]\n      elseif\
    \ smalest_value < arr[i] then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n        smalest_node = arr[i]\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  return smalest_node, smalest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxbyvu0j.lua:52:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpaxbyvu0j.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local index = 1\n  local smalest_even_value\
    \ = 0\n  local smalest_even_node\n  local smalest_even_node_index\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_even_value == 0 then\n\
    \        smalest_even_value = arr[i]\n        smalest_even_node = arr[i]\n   \
    \     smalest_even_node_index = i\n      elseif smalest_even_value < arr[i] then\n\
    \        smalest_even_value = arr[i]\n        smalest_even_node = arr[i]\n   \
    \     smalest_even_node_index = i\n      end\n    end\n  end\n  if smalest_even_value\
    \ == 0 then\n    return nil\n  end\n  local smalest_even_node_index = smalest_even_node_index\n\
    \  local smalest_even_node_value = smalest_even_node\n  while smalest_even_node_value\
    \ % 2 == 0 do\n    smalest_even_node_value /= 2\n    smalest_even_node_index =\
    \ smalest_even_node_index - 1\n  end\n  if smalest_even_node_value < smalest_value\
    \ then\n    smalest_value = smalest_even_node_value\n    smalest_index = smalest_even_node_index\n\
    \  end\n  local smalest_node_index = smalest_index\n  local smalest_node_value\
    \ = smalest_even_node\n  while smalest_node_value % 2 == 0 do\n    smalest_node_value\
    \ /= 2\n    smalest_node_index = smalest_node_index - 1\n  end\n  if smalest_node_value\
    \ < smalest_value then\n    smalest_value = smalest_node_value\n    smalest_index\
    \ = smalest_node_index\n  end\n  local smalest_node_index = smalest_index\n  local\
    \ smalest_node_value = smalest_even_node\n  while smalest_node_value % 2 == 0\
    \ do\n    smalest_node_value /= 2\n    smalest_node_index = smalest_node_index\
    \ - 1\n  end\n  if smalest_node_value < smalest_value then\n    smalest_value\
    \ = smalest_node_value\n    smalest_index = smalest_node_index\n  end\n  local\
    \ smalest_node_index = smalest_index\n  local smalest_node_value = smalest_even_node\n\
    \  while sm\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0kvonoa3.lua:52: syntax error near ''/''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_even_value = 0\n    local\
    \ smalest_even_index = 0\n    local smalest_even_index_count = 0\n    local smalest_even_index_count_max\
    \ = 0\n    local smalest_even_index_count_max_index = 0\n    local smalest_even_index_count_max_value\
    \ = 0\n    local smalest_even_index_count_max_value_index = 0\n    local smalest_even_index_count_max_value_count\
    \ = 0\n    local smalest_even_index_count_max_value_count_index = 0\n    local\
    \ smalest_even_index_count_max_value_count_value = 0\n    local smalest_even_index_count_max_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count = 0\n  \
    \  local smalest_even_index_count_max_value_count_value_count_index = 0\n    local\
    \ smalest_even_index_count_max_value_count_value_count_value = 0\n    local smalest_even_index_count_max_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_count\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_count_value\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_count_value_index\
    \ = 0\n    local smalest_even_index_count_max_value_count_value_count_value_count_value_count_value_count_value_count\
    \ = 0\n    local smalest_even\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn0wxdbm7.lua:74: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index2 = nil\n    local\
    \ smalest_index3 = nil\n    local smalest_index4 = nil\n    local smalest_index5\
    \ = nil\n    local smalest_index6 = nil\n    local smalest_index7 = nil\n    local\
    \ smalest_index8 = nil\n    local smalest_index9 = nil\n    local smalest_index10\
    \ = nil\n    local smalest_index11 = nil\n    local smalest_index12 = nil\n  \
    \  local smalest_index13 = nil\n    local smalest_index14 = nil\n    local smalest_index15\
    \ = nil\n    local smalest_index16 = nil\n    local smalest_index17 = nil\n  \
    \  local smalest_index18 = nil\n    local smalest_index19 = nil\n    local smalest_index20\
    \ = nil\n    local smalest_index21 = nil\n    local smalest_index22 = nil\n  \
    \  local smalest_index23 = nil\n    local smalest_index24 = nil\n    local smalest_index25\
    \ = nil\n    local smalest_index26 = nil\n    local smalest_index27 = nil\n  \
    \  local smalest_index28 = nil\n    local smalest_index29 = nil\n    local smalest_index30\
    \ = nil\n    local smalest_index31 = nil\n    local smalest_index32 = nil\n  \
    \  local smalest_index33 = nil\n    local smalest_index34 = nil\n    local smalest_index35\
    \ = nil\n    local smalest_index36 = nil\n    local smalest_index37 = nil\n  \
    \  local smalest_index38 = nil\n    local smalest_index39 = nil\n    local smalest_index40\
    \ = nil\n    local smalest_index41 = nil\n    local smalest_index42 = nil\n  \
    \  local smalest_index43 = nil\n    local smalest_index44 = nil\n    local smalest_index45\
    \ = nil\n    local smalest_index46 = nil\n    local smalest_index47 = nil\n  \
    \  local smalest_index48 = nil\n    local smalest_index49 = nil\n    local smalest_index50\
    \ = nil\n    local smalest_index51 = nil\n    local smalest_index5\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4b8e3ph.lua:94: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens + 1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ pick = evens[#evens]\n    local pick_index = smalest_index\n    local pick_value\
    \ = smalest_value\n    for i = 1, #evens do\n        if evens[i] < pick then\n\
    \            pick = evens[i]\n            pick_index = i\n            pick_value\
    \ = arr[i]\n        end\n    end\n    return [ pick_value, pick_index ]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwuj5yvbp.lua:52: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for i = 1, #arr do\n        if arr[i] % 2 ==\
    \ 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = arr[i]\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_val = arr[i]\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_node, smalest_index, smalest_node_val,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodn8iw30.lua:58:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpodn8iw30.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local index = min_value_index\n    local value = min_value\n\
    \    local result\n    while true do\n        index = index - 1\n        if index\
    \ == -1 then\n            break\n        end\n        if arr[index] % 2 == 0 then\n\
    \            value = arr[index]\n            break\n        end\n    end\n   \
    \ result = {value, index}\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwr1em_m.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzwr1em_m.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpzwr1em_m.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    for i = 2, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda25919m.lua:41:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpda25919m.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] <\
    \ smalest_value then\n      smalest_value = arr[i]\n      smalest_index = i\n\
    \    end\n  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmcdd16xx.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmcdd16xx.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpmcdd16xx.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_idx = min_idx\n\
    \    for idx, value in ipairs(arr) do\n        if value == smalest_value then\n\
    \            smalest_idx = idx\n        end\n    end\n    return smalest_value,\
    \ smalest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_v3_emm.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpe_v3_emm.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpe_v3_emm.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local index\n    local value\n    for index, value\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = value\n            smallest_index = index\n        elseif smallest_value <\
    \ value then\n            smallest_value = value\n            smallest_index =\
    \ index\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzbyz9oa.lua:49:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmphzbyz9oa.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \               smalest_node = arr[i]\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n            end\n        end\n \
    \   end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v4t8qff.lua:52:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp7v4t8qff.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_value_index\
    \ = min_value_index\n    for i = 1, #arr do\n        if arr[i] < smalest_value\
    \ then\n            smalest_value = arr[i]\n            smalest_value_index =\
    \ i\n        end\n    end\n    return smalest_value, smalest_value_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabox19sh.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpabox19sh.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpabox19sh.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  local smalest_node\n  for i = 1, #arr\
    \ do\n    if arr[i] < smalest_value then\n      smalest_value = arr[i]\n     \
    \ smalest_index = i\n      smalest_node = i\n    end\n  end\n  if smalest_value\
    \ == math.inf then\n    return nil\n  end\n  local smalest_node_index = #arr\n\
    \  for i = 1, #arr do\n    if arr[i] == smalest_value then\n      smalest_node_index\
    \ = i\n    end\n  end\n  if smalest_node_index == #arr then\n    return nil\n\
    \  end\n  return smalest_value, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpru90v2lu.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpru90v2lu.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpru90v2lu.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < min_value then\n            min_value = arr[i]\n            min_index = i\n\
    \        end\n    end\n    if min_value == math.inf then\n        return nil\n\
    \    end\n    return min_value, min_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb25hbpnd.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb25hbpnd.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpb25hbpnd.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local index = 1\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smalest_value < node.value\
    \ then\n                smalest_value, smalest_index = node.value, index\n   \
    \         end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrt9_oru.lua:30:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpmrt9_oru.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpmrt9_oru.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    if smalest_value == math.inf then\n\
    \        return nil\n    end\n    local smalest_value_even = smalest_value % 2\n\
    \    local smalest_index_even = smalest_index\n    for i = 1, #arr do\n      \
    \  if arr[i] == smalest_value_even then\n            smalest_index_even = i\n\
    \        end\n    end\n    if smalest_index_even > 0 then\n        return smalest_value,\
    \ smalest_index_even\n    end\n    return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqiapm6zf.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqiapm6zf.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpqiapm6zf.lua:54: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = v\n        smalest_index = i\n      elseif smalest_value < v then\n      \
    \  smalest_value = v\n        smalest_index = i\n      end\n    end\n  end\n \
    \ if smalest_value == 0 then\n    return nil\n  end\n  if smalest_index == 0 then\n\
    \    return smalest_value\n  end\n  local smalest_nodes = {}\n  smalest_nodes[smalest_value]\
    \ = smalest_index\n  local smalest_node_index = 1\n  while smalest_node_index\
    \ <= #smalest_nodes do\n    local smalest_node = smalest_nodes[smalest_node_index]\n\
    \    if smalest_node % 2 == 0 then\n      smalest_nodes[smalest_node_index] =\
    \ smalest_node_index\n      smalest_node_index += 1\n    else\n      smalest_nodes[smalest_node_index]\
    \ = smalest_node_index - 1\n    end\n  end\n  return smalest_nodes[#smalest_nodes]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptn7p4azr.lua:54: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_index2 = 0\n    local smalest_index3\
    \ = 0\n    local smalest_index4 = 0\n    local smalest_index5 = 0\n    local smalest_index6\
    \ = 0\n    local smalest_index7 = 0\n    local smalest_index8 = 0\n    local smalest_index9\
    \ = 0\n    local smalest_index10 = 0\n    local smalest_index11 = 0\n    local\
    \ smalest_index12 = 0\n    local smalest_index13 = 0\n    local smalest_index14\
    \ = 0\n    local smalest_index15 = 0\n    local smalest_index16 = 0\n    local\
    \ smalest_index17 = 0\n    local smalest_index18 = 0\n    local smalest_index19\
    \ = 0\n    local smalest_index20 = 0\n    local smalest_index21 = 0\n    local\
    \ smalest_index22 = 0\n    local smalest_index23 = 0\n    local smalest_index24\
    \ = 0\n    local smalest_index25 = 0\n    local smalest_index26 = 0\n    local\
    \ smalest_index27 = 0\n    local smalest_index28 = 0\n    local smalest_index29\
    \ = 0\n    local smalest_index30 = 0\n    local smalest_index31 = 0\n    local\
    \ smalest_index32 = 0\n    local smalest_index33 = 0\n    local smalest_index34\
    \ = 0\n    local smalest_index35 = 0\n    local smalest_index36 = 0\n    local\
    \ smalest_index37 = 0\n    local smalest_index38 = 0\n    local smalest_index39\
    \ = 0\n    local smalest_index40 = 0\n    local smalest_index41 = 0\n    local\
    \ smalest_index42 = 0\n    local smalest_index43 = 0\n    local smalest_index44\
    \ = 0\n    local smalest_index45 = 0\n    local smalest_index46 = 0\n    local\
    \ smalest_index47 = 0\n    local smalest_index48 = 0\n    local smalest_index49\
    \ = 0\n    local smalest_index50 = 0\n    local smalest_index51 = 0\n    local\
    \ smalest_index52 = 0\n    local smalest_index53 = 0\n    local smalest_index54\
    \ = 0\n    local smalest_index55 = 0\n    local smalest_index56 = 0\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b2nvzom.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_index2 = 0\n    local smalest_index3\
    \ = 0\n    local smalest_index4 = 0\n    local smalest_index5 = 0\n    local smalest_index6\
    \ = 0\n    local smalest_index7 = 0\n    local smalest_index8 = 0\n    local smalest_index9\
    \ = 0\n    local smalest_index10 = 0\n    local smalest_index11 = 0\n    local\
    \ smalest_index12 = 0\n    local smalest_index13 = 0\n    local smalest_index14\
    \ = 0\n    local smalest_index15 = 0\n    local smalest_index16 = 0\n    local\
    \ smalest_index17 = 0\n    local smalest_index18 = 0\n    local smalest_index19\
    \ = 0\n    local smalest_index20 = 0\n    local smalest_index21 = 0\n    local\
    \ smalest_index22 = 0\n    local smalest_index23 = 0\n    local smalest_index24\
    \ = 0\n    local smalest_index25 = 0\n    local smalest_index26 = 0\n    local\
    \ smalest_index27 = 0\n    local smalest_index28 = 0\n    local smalest_index29\
    \ = 0\n    local smalest_index30 = 0\n    local smalest_index31 = 0\n    local\
    \ smalest_index32 = 0\n    local smalest_index33 = 0\n    local smalest_index34\
    \ = 0\n    local smalest_index35 = 0\n    local smalest_index36 = 0\n    local\
    \ smalest_index37 = 0\n    local smalest_index38 = 0\n    local smalest_index39\
    \ = 0\n    local smalest_index40 = 0\n    local smalest_index41 = 0\n    local\
    \ smalest_index42 = 0\n    local smalest_index43 = 0\n    local smalest_index44\
    \ = 0\n    local smalest_index45 = 0\n    local smalest_index46 = 0\n    local\
    \ smalest_index47 = 0\n    local smalest_index48 = 0\n    local smalest_index49\
    \ = 0\n    local smalest_index50 = 0\n    local smalest_index51 = 0\n    local\
    \ smalest_index52 = 0\n    local smalest_index53 = 0\n    local smalest_index54\
    \ = 0\n    local smalest_index55 = 0\n    local smalest_index56 = 0\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b2nvzom.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_index2 = 0\n    local smalest_index3\
    \ = 0\n    local smalest_index4 = 0\n    local smalest_index5 = 0\n    local smalest_index6\
    \ = 0\n    local smalest_index7 = 0\n    local smalest_index8 = 0\n    local smalest_index9\
    \ = 0\n    local smalest_index10 = 0\n    local smalest_index11 = 0\n    local\
    \ smalest_index12 = 0\n    local smalest_index13 = 0\n    local smalest_index14\
    \ = 0\n    local smalest_index15 = 0\n    local smalest_index16 = 0\n    local\
    \ smalest_index17 = 0\n    local smalest_index18 = 0\n    local smalest_index19\
    \ = 0\n    local smalest_index20 = 0\n    local smalest_index21 = 0\n    local\
    \ smalest_index22 = 0\n    local smalest_index23 = 0\n    local smalest_index24\
    \ = 0\n    local smalest_index25 = 0\n    local smalest_index26 = 0\n    local\
    \ smalest_index27 = 0\n    local smalest_index28 = 0\n    local smalest_index29\
    \ = 0\n    local smalest_index30 = 0\n    local smalest_index31 = 0\n    local\
    \ smalest_index32 = 0\n    local smalest_index33 = 0\n    local smalest_index34\
    \ = 0\n    local smalest_index35 = 0\n    local smalest_index36 = 0\n    local\
    \ smalest_index37 = 0\n    local smalest_index38 = 0\n    local smalest_index39\
    \ = 0\n    local smalest_index40 = 0\n    local smalest_index41 = 0\n    local\
    \ smalest_index42 = 0\n    local smalest_index43 = 0\n    local smalest_index44\
    \ = 0\n    local smalest_index45 = 0\n    local smalest_index46 = 0\n    local\
    \ smalest_index47 = 0\n    local smalest_index48 = 0\n    local smalest_index49\
    \ = 0\n    local smalest_index50 = 0\n    local smalest_index51 = 0\n    local\
    \ smalest_index52 = 0\n    local smalest_index53 = 0\n    local smalest_index54\
    \ = 0\n    local smalest_index55 = 0\n    local smalest_index56 = 0\n    \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b2nvzom.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\
    \ = 0\n  local smallest_index = 0\n  local results = {}\n  for i = 1, #arr do\n\
    \    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == 0 then\n    return nil\n  end\n\
    \  local smallest_value_even = smallest_value % 2\n  local smallest_index_even\
    \ = smallest_index\n  local smallest_index_odd = smallest_index + 1\n  for i =\
    \ 1, #arr do\n    if arr[i] < smallest_value_even then\n      smallest_value_even\
    \ = arr[i]\n      smallest_index_even = i\n    elseif arr[i] < smallest_value_even\
    \ then\n      smallest_index_odd = i\n    end\n  end\n  results[1] = smallest_value\n\
    \  results[2] = smallest_index_even\n  results[3] = smallest_index_odd\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwc2y0xu.lua:59:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmprwc2y0xu.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens + 1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ index = #evens\n    local value = evens[index]\n    local index = index - 1\n\
    \    while index > 0 do\n        if evens[index] <= value then\n            value\
    \ = evens[index]\n            index = index - 1\n        else\n            evens[index]\
    \ = evens[#evens]\n            evens[#evens] = value\n            index = #evens\n\
    \        end\n    end\n    return evens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbz4x0w6.lua:61:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcbz4x0w6.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == 0 then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_node = arr[i]\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n                smalest_node =\
    \ arr[i]\n                smalest_node_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qmuisgz.lua:55:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp6qmuisgz.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local smalest_value_node_index\n    local smalest_value_node\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_index\n    local smalest_value_node_index\n\
    \    local smalest_value_node_index\n    local smalest_value_node_index\n    local\
    \ smalest_value_node_index\n    local sm\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx5a5issk.lua:98: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    for\
    \ _, node in ipairs(arr) do\n        if smalest_value == nil then\n          \
    \  if node.value % 2 == 0 then\n                smalest_even_value = node.value\n\
    \                smalest_even_index = node.index\n            else\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \            end\n        elseif node.value % 2 == 0 then\n            if smalest_even_index\
    \ == nil then\n                smalest_even_index = node.index\n             \
    \   smalest_even_value = node.value\n            elseif smalest_even_index < node.index\
    \ then\n                smalest_even_index = node.index\n                smalest_even_value\
    \ = node.value\n            end\n        else\n            if smalest_value <\
    \ node.value then\n                smalest_value = node.value\n              \
    \  smalest_index = node.index\n            end\n        end\n    end\n    if smalest_even_index\
    \ ~= nil then\n        return smalest_value, smalest_even_index\n    else\n  \
    \      return smalest_value, smalest_index\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2dlmwuxz.lua:34:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp2dlmwuxz.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmp2dlmwuxz.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n\
    \  local smalest_value = nil\n  local smalest_index = nil\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      even[#even+1] = arr[i]\n      if smalest_value\
    \ == nil then\n        smalest_value = arr[i]\n        smalest_index = i\n   \
    \   elseif smalest_value < arr[i] then\n        smalest_value = arr[i]\n     \
    \   smalest_index = i\n      end\n    end\n  end\n  if #even == 0 then\n    return\
    \ nil\n  end\n  local index = #even\n  local value = even[1]\n  local new_arr\
    \ = {}\n  for i = 1, #even do\n    if even[i] ~= value then\n      new_arr[#new_arr+1]\
    \ = even[i]\n    end\n  end\n  return new_arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5510w_pu.lua:59:\
    \ expected: {2, 1}\nactual: {2}\nstack traceback:\n\t/tmp/tmp5510w_pu.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local index = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            even[#even+1] = arr[i]\n            index[#index+1] = i\n\
    \        end\n    end\n    local smallest_value = nil\n    local smallest_index\
    \ = nil\n    for i = 1, #even do\n        if smallest_value == nil or even[i]\
    \ < smallest_value then\n            smallest_value = even[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    return smallest_value, index[smallest_index]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60558o2g.lua:52:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp60558o2g.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_node_index = nil\n \
    \   local smalest_node_value = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_index = nil\n    local smalest_node_value\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_value = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_value = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_value = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_value = nil\n    local smalest_node_count = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_value = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_value = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_index = nil\n    local smalest_node_value\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_value = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_value = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_value = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_value = nil\n    local smalest_node_count = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_value = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_value = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_index = nil\n    local smalest_node_value\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_value = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_value = nil\n    local smalest_node_count\
    \ = nil\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29vm3m29.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\n\
    \    local smalest_index\n    local smalest_index2\n    local smalest_index3\n\
    \    local smalest_index4\n    local smalest_index5\n    local smalest_index6\n\
    \    local smalest_index7\n    local smalest_index8\n    local smalest_index9\n\
    \    local smalest_index10\n    local smalest_index11\n    local smalest_index12\n\
    \    local smalest_index13\n    local smalest_index14\n    local smalest_index15\n\
    \    local smalest_index16\n    local smalest_index17\n    local smalest_index18\n\
    \    local smalest_index19\n    local smalest_index20\n    local smalest_index21\n\
    \    local smalest_index22\n    local smalest_index23\n    local smalest_index24\n\
    \    local smalest_index25\n    local smalest_index26\n    local smalest_index27\n\
    \    local smalest_index28\n    local smalest_index29\n    local smalest_index30\n\
    \    local smalest_index31\n    local smalest_index32\n    local smalest_index33\n\
    \    local smalest_index34\n    local smalest_index35\n    local smalest_index36\n\
    \    local smalest_index37\n    local smalest_index38\n    local smalest_index39\n\
    \    local smalest_index40\n    local smalest_index41\n    local smalest_index42\n\
    \    local smalest_index43\n    local smalest_index44\n    local smalest_index45\n\
    \    local smalest_index46\n    local smalest_index47\n    local smalest_index48\n\
    \    local smalest_index49\n    local smalest_index50\n    local smalest_index51\n\
    \    local smalest_index52\n    local smalest_index53\n    local smalest_index54\n\
    \    local smalest_index55\n    local smalest_index56\n    local smalest_index57\n\
    \    local smalest_index58\n    local smalest_index59\n    local smalest_index60\n\
    \    local smalest_index61\n    local smalest_index62\n    local smalest_index63\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_8no0m5m.lua:106: ''end'' expected (to close ''function''
    at line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfvm6xjay.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = nil\n    for _, v in\
    \ ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = v\n            smalest_index = v\n            smalest_even_value = v\n   \
    \         smalest_even_index = v\n        elseif smalest_value == v then\n   \
    \         smalest_even_value = smalest_even_value\n            smalest_even_index\
    \ = smalest_even_index\n            smalest_index = smalest_index\n          \
    \  smalest_value = v\n        elseif smalest_even_value:mod(2) == 0 then\n   \
    \         smalest_even_value = smalest_even_value\n            smalest_even_index\
    \ = smalest_even_index\n            smalest_index = smalest_index\n          \
    \  smalest_value = v\n        else\n            smalest_value = v\n          \
    \  smalest_index = v\n            smalest_even_value = v\n            smalest_even_index\
    \ = v\n        end\n    end\n    if smalest_even_value:mod(2) == 0 then\n    \
    \    return smalest_value, smalest_even_index\n    else\n        return smalest_value,\
    \ smalest_index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk33pgivk.lua:45:\
    \ attempt to index a number value (local 'smalest_even_value')\nstack traceback:\n\
    \t/tmp/tmpk33pgivk.lua:45: in local 'candidate'\n\t/tmp/tmpk33pgivk.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_value_index\
    \ = min_value_index\n    for i = 1, #arr do\n        if arr[i] < smalest_value\
    \ then\n            smalest_value = arr[i]\n            smalest_value_index =\
    \ i\n        end\n    end\n    return smalest_value, smalest_value_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabox19sh.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpabox19sh.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpabox19sh.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value\
    \ = math.inf\n  local min_index = 0\n  for i = 1, #arr do\n    if arr[i] < min_value\
    \ then\n      min_value = arr[i]\n      min_index = i\n    end\n  end\n  return\
    \ min_value, min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpvuqe2x.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwpvuqe2x.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpwpvuqe2x.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1] = arr[i]\n\
    \            if even[#even] < smalest_value then\n                smalest_value\
    \ = even[#even]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even == 0 then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rmv8jzo.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp5rmv8jzo.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local index = 1\n    for _, v in ipairs(arr) do\n\
    \        if v ~= 0 then\n            if v < smalest_value then\n             \
    \   smalest_value, smalest_index = v, index\n            elseif v == smalest_value\
    \ then\n                smalest_index = smalest_index + 1\n            end\n \
    \       end\n        index = index + 1\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnau1tv3.lua:48:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpsnau1tv3.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smallest_value == nil or arr[i] < smallest_value\
    \ then\n                smallest_value = arr[i]\n                smallest_value_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_value_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzm0zptv1.lua:46:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpzm0zptv1.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- pick first even value\n  local\
    \ smallest_value = arr[1]\n  local smallest_index = 1\n  for i = 2, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smallest_value < arr[i] then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      end\n    end\n  end\n  return smallest_value,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k4b5we2.lua:48:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp6k4b5we2.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzs3hh4g.lua:49:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpmzs3hh4g.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even_values\
    \ = {}\n    local smallest_values = {}\n    local smallest_index = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            even_values[#even_values+1]\
    \ = arr[i]\n        else\n            smallest_values[#smallest_values+1] = arr[i]\n\
    \            smallest_index[#smallest_index+1] = i\n        end\n    end\n   \
    \ if #even_values == 0 then\n        return nil\n    end\n    local smallest_value\
    \ = even_values[1]\n    local smallest_index = smallest_values[1]\n    for i =\
    \ 2, #even_values do\n        if even_values[i] < smallest_value then\n      \
    \      smallest_value = even_values[i]\n            smallest_index = smallest_values[i]\n\
    \        end\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjgy4n4hc.lua:55:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpjgy4n4hc.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smalest_value == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29r0lhzy.lua:46:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp29r0lhzy.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local index = 1\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            if arr[i] < smalest_value then\n         \
    \       smalest_value, smalest_index = arr[i], index\n            else\n     \
    \           index = index + 1\n            end\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0az6d7ou.lua:47:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp0az6d7ou.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local even_values = {}\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] =\
    \ arr[i]\n        end\n    end\n    local smallest_value = min(even_values)\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    for i = 1,\
    \ #even_values do\n        if even_values[i] == smallest_value then\n        \
    \    smalest_value = even_values[i]\n            smalest_index = i\n        end\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph85ri_h6.lua:34:\
    \ attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmph85ri_h6.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmph85ri_h6.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_even_value = nil\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpspfnvm4n.lua:93: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    local smalest_node = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value < arr[i] then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           end\n        end\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8ywth9z.lua:56:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpm8ywth9z.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, v in ipairs(arr) do\n\
    \        if v % 2 == 0 then\n            if smalest_value == nil or smalest_value\
    \ < v then\n                smalest_value, smalest_index = v, index\n        \
    \    end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniq1imzb.lua:46:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpniq1imzb.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n                smalest_node_val = node.value\n                smalest_node_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_val, smalest_index, smalest_node_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqoku1ktc.lua:33:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpqoku1ktc.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpqoku1ktc.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mssg5kc.lua:43:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp_mssg5kc.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for _, v in ipairs(arr) do\n  \
    \      if v < smalest_value then\n            smalest_value = v\n            smalest_index\
    \ = v\n        end\n    end\n    if smalest_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value_index = nil\n    for _, v in ipairs(arr)\
    \ do\n        if v == smalest_value then\n            smalest_value_index = v\n\
    \        end\n    end\n    if smalest_value_index == nil then\n        return\
    \ nil\n    end\n    return smalest_value, smalest_value_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmd29tzf.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqmd29tzf.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpqmd29tzf.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = -1\n    local results = {}\n    for\
    \ i = 1, #arr do\n        if arr[i] < min_value then\n            min_value =\
    \ arr[i]\n            min_value_index = i\n        end\n    end\n    if min_value\
    \ == math.inf then\n        return nil\n    end\n    table.insert(results, min_value,\
    \ min_value_index)\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp876x9xe_.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp876x9xe_.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp876x9xe_.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = #arr\n    for i = 1, #arr do\n      \
    \  if arr[i] == smalest_value then\n            smalest_node_index = i\n     \
    \   end\n    end\n    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9a482idy.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9a482idy.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp9a482idy.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    local index\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[index]\
    \ = arr[i]\n            smalest_value = smalest_value or arr[i]\n            smalest_index\
    \ = smalest_index or index\n            index = index + 1\n        end\n    end\n\
    \    if #evens == 0 then\n        return nil\n    end\n    local smalest_even\
    \ = evens[smalest_index]\n    local smalest_even_index = smalest_index\n    for\
    \ i = 1, #evens do\n        if evens[i] == smalest_even then\n            smalest_even_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_even_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwvovakf.lua:55:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmwvovakf.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = 0, 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value == nil then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      else\n        if arr[i] < smalest_value then\n          smalest_value\
    \ = arr[i]\n          smalest_index = i\n        end\n      end\n    end\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9megi29.lua:47:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmph9megi29.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    local index = min_value_index\n    while\
    \ true do\n        if arr[index] % 2 == 0 then\n            results[#results +\
    \ 1] = arr[index]\n        end\n        if index == #arr then\n            break\n\
    \        end\n        index = index + 1\n    end\n    return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumfqhktt.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpumfqhktt.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpumfqhktt.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_val\n\
    \  local smalest_node_index\n  for _, node in ipairs(arr) do\n    if node.value\
    \ % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value = node.value\n\
    \        smalest_index = node.index\n        smalest_node = node\n        smalest_node_val\
    \ = node.value\n        smalest_node_index = node.index\n      elseif smalest_value\
    \ < node.value then\n        smalest_value = node.value\n        smalest_index\
    \ = node.index\n        smalest_node = node\n        smalest_node_val = node.value\n\
    \        smalest_node_index = node.index\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  return smalest_node, smalest_node_val, smalest_node_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt87w1a34.lua:33:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpt87w1a34.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpt87w1a34.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local even_values = {}\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    for _, v in ipairs(arr) do\n\
    \        if even_values[v] then\n            smalest_even_value = v\n        \
    \    smalest_even_index = even_values[v]\n        elseif even_values[v] == nil\
    \ then\n            even_values[v] = true\n            smalest_value = v\n   \
    \         smalest_index = v\n        end\n    end\n    if smalest_even_index ==\
    \ nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\n</cell>\n<text>\nProblem 4\nGiven an array representing a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmlfglvfn.lua:46: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] <\
    \ smalest_value then\n      smalest_value = arr[i]\n      smalest_index = i\n\
    \    end\n  end\n  if smalest_value == math.inf then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl_ohmjs.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgl_ohmjs.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpgl_ohmjs.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local index = 1\n    local smalest_value_found\
    \ = false\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and not smalest_value_found\
    \ then\n            smalest_value = arr[i]\n            smalest_index = index\n\
    \            smalest_value_found = true\n        elseif arr[i] % 2 == 0 and smalest_value_found\
    \ then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = index\n            end\n        end\n\
    \        index = index + 1\n    end\n    if smalest_value_found then\n       \
    \ return smalest_value, smalest_index\n    else\n        return nil\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wj754km.lua:54:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp8wj754km.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local index = 1\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_value_index = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] > 0 then\n            if smallest_value ==\
    \ 0 then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            elseif smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    smallest_value\
    \ = smallest_value / 2\n    smallest_index = smallest_index + 1\n    for i = 1,\
    \ #arr do\n        if arr[i] > 0 then\n            if smallest_value == arr[i]\
    \ then\n                smalest_value = smallest_value\n                smalest_index\
    \ = smallest_index\n                smalest_value_index = index\n            end\n\
    \        end\n        index = index + 1\n    end\n    if smalest_value == 0 then\n\
    \        return nil\n    end\n    smalest_value = smalest_value / 2\n    smalest_index\
    \ = smalest_index + 1\n    if smalest_value == smalest_value_index then\n    \
    \    return smalest_value_index, smalest_index\n    end\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jd38uqg.lua:73:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp9jd38uqg.lua:73:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    local index\
    \ = 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1]\
    \ = arr[i]\n            if evens[#evens] <= smalest_value then\n             \
    \   smalest_value = evens[#evens]\n                smalest_index = index\n   \
    \         end\n        end\n        index = index + 1\n    end\n    if #evens\
    \ == 0 then\n        return nil\n    end\n    if smalest_value == 0 then\n   \
    \     return nil\n    end\n    return smalest_value, smalest_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9hllev6.lua:53:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpo9hllev6.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for _,\
    \ node in ipairs(arr) do\n        if smallest_value < node.value then\n      \
    \      smallest_value = node.value\n            smallest_index = node.index\n\
    \        end\n    end\n    table.insert(results, smallest_value, smallest_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxyyrpqp.lua:31:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpcxyyrpqp.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpcxyyrpqp.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = math.inf\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] <\
    \ smalest_value then\n      smalest_value = arr[i]\n      smalest_index = i\n\
    \    end\n  end\n  if smalest_value == math.inf then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl_ohmjs.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgl_ohmjs.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpgl_ohmjs.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfvm6xjay.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = arr[1]\n  local smallest_even_index = arr[1]\n\
    \  -- Find the smallest index\n  for i = 2, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smallest_even_value < arr[i] then\n        smallest_even_value = arr[i]\n\
    \        smallest_even_index = i\n      end\n    end\n  end\n  -- Return the smallest\
    \ even value and its index\n  return smallest_even_value,smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_enytqui.lua:50:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp_enytqui.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[smalest_value] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #evens == 0 then\n        return nil\n    end\n    local index\
    \ = #evens\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ value = evens[smalest_index]\n    local new_arr = {}\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            new_arr[#new_arr+1] = arr[i]\n \
    \       end\n    end\n    return new_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp81k8n9k.lua:59:\
    \ expected: {2, 1}\nactual: {4, 2}\nstack traceback:\n\t/tmp/tmpp81k8n9k.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = nil\n  local smalest_index = nil\n  for i = 1, #arr do\n    if arr[i] % 2\
    \ == 0 then\n      if smalest_value == nil or arr[i] < smalest_value then\n  \
    \      smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == nil then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp996w7fpk.lua:46:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp996w7fpk.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    local smalest_node_val_index\n    local smalest_node_val_even\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_node_val_even_index\n    local\
    \ smalest_node_val_odd_index\n    local smalest_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp25u2ea8w.lua:92: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n                smalest_node_val = node.value\n                smalest_node_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node_index\n    if smalest_node.value % 2 == 0 then\n        smalest_node_index\
    \ = smalest_node.index\n    else\n        smalest_node_index = smalest_node.index\
    \ + 1\n    end\n    if smalest_node_index == smalest_index then\n        return\
    \ smalest_node_val, smalest_node_index\n    else\n        return smalest_node_val,\
    \ smalest_node_index\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgyjuixae.lua:33:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpgyjuixae.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpgyjuixae.lua:68: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzs3hh4g.lua:49:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpmzs3hh4g.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    for _, v in ipairs(arr) do\n        if smalest_value == nil then\n\
    \            smalest_value = v\n            smalest_index = v\n            smalest_even_value\
    \ = v\n            smalest_even_index = v\n        elseif v < smalest_value then\n\
    \            smalest_value = v\n            smalest_index = v\n            smalest_even_value\
    \ = smalest_even_value\n            smalest_even_index = smalest_even_index\n\
    \        elseif v == smalest_value then\n            if smalest_even_value ==\
    \ nil then\n                smalest_even_value = v\n                smalest_even_index\
    \ = v\n            elseif v < smalest_even_value then\n                smalest_even_value\
    \ = v\n                smalest_even_index = v\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    if\
    \ smalest_even_value == nil then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_even_index == nil then\n        return smalest_value,\
    \ smalest_even_index\n    end\n    if smalest_even_index < smalest_index then\n\
    \        return smalest_value, smalest_even_index\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sb8sjam.lua:69:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp3sb8sjam.lua:69: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \            if even_values[smalest_index] < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if #even_values == 0 then\n        return nil\n    end\n    local\
    \ index = #even_values\n    local value = even_values[index]\n    local new_arr\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ arr[i] < value then\n                value = arr[i]\n                index =\
    \ i\n            end\n        end\n    end\n    new_arr[index] = value\n    return\
    \ new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nu_77ht.lua:59:\
    \ expected: {2, 1}\nactual: {2=2}\nstack traceback:\n\t/tmp/tmp4nu_77ht.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzn20k4h.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpvzn20k4h.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_node_index = nil\n \
    \   local smalest_node = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_index = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_index = nil\n    local smalest_node_val = nil\n    local smalest_node_index\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_index = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_index = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_index = nil\n    local smalest_node_val = nil\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7dqv1y0s.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local index = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            table.insert(even, arr[i])\n            table.insert(index,\
    \ i)\n        end\n    end\n    if #even == 0 then\n        return nil\n    end\n\
    \    local smallest = table.min(even)\n    local smallest_index = index[#index\
    \ + 1]\n    if smallest == 0 then\n        return nil\n    end\n    return smallest,\
    \ smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwu0lhve3.lua:38:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmpwu0lhve3.lua:38:\
    \ in local 'candidate'\n\t/tmp/tmpwu0lhve3.lua:49: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_value_so_far, smalest_index_so_far\
    \ = nil, nil\n    local smalest_value_so_far_index, smalest_index_so_far_index\
    \ = nil, nil\n    local smalest_value_so_far_index_index = nil, nil\n    for i\
    \ = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value > arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    local\
    \ smalest_value_so_far = smalest_value\n    local smalest_index_so_far = smalest_index\n\
    \    local smalest_value_so_far_index = smalest_value\n    local smalest_index_so_far_index\
    \ = smalest_index\n    for i = 1, #arr do\n        if arr[i] > 0 then\n      \
    \      if smalest_value_so_far_index == nil then\n                smalest_value_so_far_index\
    \ = smalest_value\n                smalest_index_so_far_index = smalest_index\n\
    \            elseif smalest_value_so_far_index < smalest_value then\n        \
    \        smalest_value_so_far_index = smalest_value\n                smalest_index_so_far_index\
    \ = smalest_index\n            end\n            if smalest_value == arr[i] then\n\
    \                smalest_value_so_far = smalest_value\n                smalest_index_so_far\
    \ = smalest_index\n            end\n        end\n    end\n    if smalest_value_so_far_index\
    \ == nil then\n        return nil\n    end\n    if smalest_value_so_far_index\
    \ < smalest_value_so_far then\n        return nil\n    end\n    return smalest_value_so_far_index,\
    \ smalest_index_so_far_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavc083pn.lua:76:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpavc083pn.lua:76: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if smalest_value == 0 or smalest_value < arr[i] then\n          \
    \      smalest_value, smalest_index = arr[i], i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lfluwtq.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp2lfluwtq.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtgr2zs4.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqtgr2zs4.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpqtgr2zs4.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n\
    \  local smallest_index\n  local result\n  for i = 1, #arr do\n    if arr[i] >\
    \ 0 then\n      if smallest_value == nil then\n        smallest_value = arr[i]\n\
    \        smallest_index = i\n      elseif smallest_value < arr[i] then\n     \
    \   smallest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  if smallest_value == nil then\n    return nil\n  end\n  local smallest_value_even\
    \ = smallest_value % 2\n  if smallest_value_even ~= 0 then\n    smallest_value\
    \ = smallest_value - smallest_value_even\n  end\n  if smallest_index == nil then\n\
    \    return smallest_value\n  end\n  return smallest_value, smallest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcft1rgi.lua:57:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpgcft1rgi.lua:57: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\n\
    \    local smallest_index\n    local index\n    local value\n    local even_value\n\
    \    local even_index\n    for index, value in ipairs(arr) do\n        if value\
    \ == 0 then\n            even_value = value\n            even_index = index\n\
    \        else\n            if value < 0 then\n                smallest_value =\
    \ value\n                smallest_index = index\n            else\n          \
    \      if smallest_value == nil then\n                    smallest_value = value\n\
    \                    smallest_index = index\n                elseif smallest_value\
    \ < value then\n                    smallest_value = value\n                 \
    \   smallest_index = index\n                end\n            end\n        end\n\
    \    end\n    if smallest_value == nil then\n        return nil\n    end\n   \
    \ if smallest_value == 0 then\n        return smallest_index, even_index\n   \
    \ end\n    if smallest_value < 0 then\n        return nil\n    end\n    return\
    \ smallest_index, even_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gan1li2.lua:67:\
    \ expected: {2, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp0gan1li2.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i]\n                smallest_value_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_value_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    return smallest_value, smallest_value_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg00ev25.lua:49:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpdg00ev25.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local index = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            table.insert(evens, arr[i])\n            table.insert(index,\
    \ i)\n        end\n    end\n    local smallest = table.min(evens)\n    local smallest_index\
    \ = index[#index]\n    if smallest == 0 then\n        return nil\n    end\n  \
    \  return smallest, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5319_j91.lua:35:\
    \ attempt to call a nil value (field 'min')\nstack traceback:\n\t/tmp/tmp5319_j91.lua:35:\
    \ in local 'candidate'\n\t/tmp/tmp5319_j91.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n\
    \    local min_index = nil\n    for i = 1, #arr do\n        if arr[i] ~= 0 and\
    \ arr[i] ~= nil then\n            if min == nil or arr[i] < min then\n       \
    \         min = arr[i]\n                min_index = i\n            end\n     \
    \   end\n    end\n    if min == nil then\n        return nil\n    end\n    return\
    \ min, min_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy5pkaem.lua:46:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpgy5pkaem.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local function\
    \ helper(arr, index, smallest, smallest_index)\n        if index == #arr then\n\
    \            return smallest, smallest_index\n        end\n        if arr[index]\
    \ % 2 == 0 then\n            smallest, smallest_index = helper(arr, index + 1,\
    \ smallest, smallest_index)\n        else\n            smallest, smallest_index\
    \ = helper(arr, index + 1, smallest, index)\n        end\n        return smallest,\
    \ smallest_index\n    end\n    return helper(arr, 1, nil, -1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1z_zdjt.lua:44:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpc1z_zdjt.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    local smalest_even_value = 0\n  \
    \  for i = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_even_value = arr[i]\
    \ % 2\n        end\n    end\n    if smalest_even_value = 0 then\n        return\
    \ smalest_index, smalest_value\n    else\n        local smalest_value_index =\
    \ #arr\n        for i = 2, #arr do\n            if arr[i] < smalest_value then\n\
    \                smalest_value = arr[i]\n                smalest_value_index =\
    \ i\n                smalest_even_value = arr[i] % 2\n            end\n      \
    \  end\n        return smalest_value_index, smalest_value\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6i7a2l53.lua:37: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index2 = nil\n    local\
    \ smalest_index3 = nil\n    local smalest_index4 = nil\n    local smalest_index5\
    \ = nil\n    local smalest_index6 = nil\n    local smalest_index7 = nil\n    local\
    \ smalest_index8 = nil\n    local smalest_index9 = nil\n    local smalest_index10\
    \ = nil\n    local smalest_index11 = nil\n    local smalest_index12 = nil\n  \
    \  local smalest_index13 = nil\n    local smalest_index14 = nil\n    local smalest_index15\
    \ = nil\n    local smalest_index16 = nil\n    local smalest_index17 = nil\n  \
    \  local smalest_index18 = nil\n    local smalest_index19 = nil\n    local smalest_index20\
    \ = nil\n    local smalest_index21 = nil\n    local smalest_index22 = nil\n  \
    \  local smalest_index23 = nil\n    local smalest_index24 = nil\n    local smalest_index25\
    \ = nil\n    local smalest_index26 = nil\n    local smalest_index27 = nil\n  \
    \  local smalest_index28 = nil\n    local smalest_index29 = nil\n    local smalest_index30\
    \ = nil\n    local smalest_index31 = nil\n    local smalest_index32 = nil\n  \
    \  local smalest_index33 = nil\n    local smalest_index34 = nil\n    local smalest_index35\
    \ = nil\n    local smalest_index36 = nil\n    local smalest_index37 = nil\n  \
    \  local smalest_index38 = nil\n    local smalest_index39 = nil\n    local smalest_index40\
    \ = nil\n    local smalest_index41 = nil\n    local smalest_index42 = nil\n  \
    \  local smalest_index43 = nil\n    local smalest_index44 = nil\n    local smalest_index45\
    \ = nil\n    local smalest_index46 = nil\n    local smalest_index47 = nil\n  \
    \  local smalest_index48 = nil\n    local smalest_index49 = nil\n    local smalest_index50\
    \ = nil\n    local smalest_index51 = nil\n    local smalest_index5\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4b8e3ph.lua:94: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value = nil, nil, nil\n    for _, v in ipairs(arr)\
    \ do\n        if smallest_even_value == nil then\n            smallest_even_value\
    \ = v\n            smalest_value = v\n            smalest_index = v\n        elseif\
    \ smallest_even_value < v then\n            smallest_even_value = v\n        \
    \    smalest_value = v\n            smalest_index = v\n        end\n    end\n\
    \    if smallest_even_value == nil then\n        return nil\n    end\n    local\
    \ index = nil\n    for _, v in ipairs(arr) do\n        if v == smallest_even_value\
    \ then\n            index = v\n        end\n    end\n    return smallest_even_value,index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7gqbdl8.lua:54:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpq7gqbdl8.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.min(arr)\n\
    \    local index = #arr\n    local smalest_value = min\n    local smalest_index\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] < min then\n            min =\
    \ arr[i]\n            index = i\n        end\n    end\n    if min % 2 == 0 then\n\
    \        smalest_value = min - 1\n        smalest_index = index\n    end\n   \
    \ local smalest_value_and_index = smalest_value, smalest_index\n    local smalest_value_and_index_2\
    \ = smalest_value, smalest_index\n    for i = 1, #arr do\n        if arr[i] <\
    \ min then\n            smalest_value_and_index_2 = smalest_value_and_index, smalest_index\n\
    \            smalest_value_and_index = smalest_value, smalest_index\n        \
    \    smalest_value = arr[i]\n            smalest_index = i\n        end\n    end\n\
    \    if smalest_value_and_index_2[1] == smalest_value_and_index[1] then\n    \
    \    return smalest_value_and_index_2\n    else\n        return smalest_value_and_index\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkib5ort2.lua:32:\
    \ attempt to compare number with table\nstack traceback:\n\t/tmp/tmpkib5ort2.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpkib5ort2.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = 0\n    local index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75_d5noi.lua:52:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp75_d5noi.lua:52: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_even_value = nil\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\n    local smalest_even_value_index = 0\n    local\
    \ smalest_even_value_index = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpspfnvm4n.lua:93: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    for _, v in ipairs(arr) do\n        if smalest_value == nil then\n\
    \            smalest_value = v\n            smalest_index = v\n            smalest_even_value\
    \ = v\n            smalest_even_index = v\n        elseif smalest_even_value[v]\
    \ ~= nil then\n            if smalest_even_value[v] < smalest_value then\n   \
    \             smalest_value = v\n                smalest_index = v\n         \
    \       smalest_even_value = v\n                smalest_even_index = v\n     \
    \       elseif smalest_even_value[v] == smalest_value then\n                if\
    \ smalest_even_index[v] < smalest_index then\n                    smalest_value\
    \ = v\n                    smalest_index = v\n                    smalest_even_value\
    \ = v\n                    smalest_even_index = v\n                end\n     \
    \       end\n        else\n            smalest_value = v\n            smalest_index\
    \ = v\n            smalest_even_value = v\n            smalest_even_index = v\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfwtu2g8z.lua:36:\
    \ attempt to index a number value (local 'smalest_even_value')\nstack traceback:\n\
    \t/tmp/tmpfwtu2g8z.lua:36: in local 'candidate'\n\t/tmp/tmpfwtu2g8z.lua:66: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index, smalest_index2\n  local smalest_index3 = math.inf\n  local smalest_index4\
    \ = math.inf\n  local smalest_index5 = math.inf\n  local smalest_index6 = math.inf\n\
    \  local smalest_index7 = math.inf\n  local smalest_index8 = math.inf\n  local\
    \ smalest_index9 = math.inf\n  local smalest_index10 = math.inf\n  local smalest_index11\
    \ = math.inf\n  local smalest_index12 = math.inf\n  local smalest_index13 = math.inf\n\
    \  local smalest_index14 = math.inf\n  local smalest_index15 = math.inf\n  local\
    \ smalest_index16 = math.inf\n  local smalest_index17 = math.inf\n  local smalest_index18\
    \ = math.inf\n  local smalest_index19 = math.inf\n  local smalest_index20 = math.inf\n\
    \  local smalest_index21 = math.inf\n  local smalest_index22 = math.inf\n  local\
    \ smalest_index23 = math.inf\n  local smalest_index24 = math.inf\n  local smalest_index25\
    \ = math.inf\n  local smalest_index26 = math.inf\n  local smalest_index27 = math.inf\n\
    \  local smalest_index28 = math.inf\n  local smalest_index29 = math.inf\n  local\
    \ smalest_index30 = math.inf\n  local smalest_index31 = math.inf\n  local smalest_index32\
    \ = math.inf\n  local smalest_index33 = math.inf\n  local smalest_index34 = math.inf\n\
    \  local smalest_index35 = math.inf\n  local smalest_index36 = math.inf\n  local\
    \ smalest_index37 = math.inf\n  local smalest_index38 = math.inf\n  local smalest_index39\
    \ = math.inf\n  local smalest_index40 = math.inf\n  local smalest_index41 = math.inf\n\
    \  local smalest_index42 = math.inf\n  local smalest_index43 = math.inf\n  local\
    \ smalest_index44 = math.inf\n  local smalest_index45 = math.inf\n  local smalest_index46\
    \ = math.inf\n  local smalest_index47 = math.inf\n  local smalest_index48 = math.inf\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjymtumf.lua:89: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_even_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_even_value < arr[i] then\n                smalest_even_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposbg0q9l.lua:49:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmposbg0q9l.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = 0\n    local smallest_index = 0\n    for i\
    \ = 1, #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    table.insert(results,\
    \ smallest_value, smallest_index)\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb34jwm2d.lua:36:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpb34jwm2d.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmpb34jwm2d.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_value_and_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n        end\n    end\n    if smalest_value\
    \ ~= nil then\n        smalest_value_and_index = { smalest_value, smalest_index\
    \ }\n    end\n    return smalest_value_and_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgb9bn4q.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqgb9bn4q.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpqgb9bn4q.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < smallest_value then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        end\n    end\n    if smallest_value\
    \ == math.inf then\n        return nil\n    end\n    local smallest_value_even\
    \ = smallest_value % 2\n    if smallest_value_even ~= 0 then\n        smallest_value\
    \ = smallest_value - smallest_value_even\n    end\n    results[1] = smallest_value\n\
    \    results[2] = smallest_index\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk_j_gwlg.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpk_j_gwlg.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpk_j_gwlg.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smallest_even_value\n    local smalest_value_so_far, smalest_index_so_far,\
    \ smallest_even_value_so_far = arr[1], 1, arr[1]\n    for i = 2, #arr do\n   \
    \     if arr[i] < smalest_value_so_far then\n            smalest_value_so_far,\
    \ smalest_index_so_far, smallest_even_value_so_far = arr[i], i, arr[i]\n     \
    \   elseif arr[i] == smalest_value_so_far then\n            smalest_index_so_far\
    \ = i\n        end\n    end\n    if smallest_even_value_so_far % 2 == 0 then\n\
    \        smallest_even_value = smallest_even_value_so_far\n        smalest_value\
    \ = smalest_value_so_far\n        smalest_index = smalest_index_so_far\n    else\n\
    \        smallest_even_value = smallest_even_value_so_far\n        smalest_value\
    \ = smalest_value_so_far\n        smalest_index = smalest_index_so_far\n    end\n\
    \    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb1zmt08.lua:51:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmphb1zmt08.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local even_values = {}\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            even_values[#even_values+1] = arr[i]\n\
    \        end\n    end\n    if #even_values == 0 then\n        return nil\n   \
    \ end\n    local smallest_value = even_values[1]\n    local smallest_index = 1\n\
    \    for i = 2, #even_values do\n        if even_values[i] < smallest_value then\n\
    \            smallest_value = even_values[i]\n            smallest_index = i\n\
    \        end\n    end\n    return smallest_value, smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8sejjer.lua:51:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpv8sejjer.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7hfk7ayd.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 1\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    local\
    \ smalest_even_value = false\n    local smalest_even_index = 1\n    for i = 2,\
    \ #arr do\n        if arr[i] ~= smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n            smalest_even_value\
    \ = smalest_value % 2 == 0\n            smalest_even_index = smalest_even_index\
    \ + 1\n        end\n        index = index + 1\n    end\n    if smalest_even_index\
    \ == 1 then\n        return smalest_value, smalest_index\n    else\n        return\
    \ smalest_value, smalest_index\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp103m5t_9.lua:51:\
    \ expected: {2, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmp103m5t_9.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = arr[1]\n  local smalest_index = 1\n  local smalest_index2 = 0\n  for i = 2,\
    \ #arr do\n    if arr[i] < smalest_value then\n      smalest_value = arr[i]\n\
    \      smalest_index = i\n      smalest_index2 = i\n    end\n  end\n  if smalest_index2\
    \ == #arr then\n    return smalest_value, smalest_index\n  end\n  local smalest_value2\
    \ = arr[smalest_index2]\n  local smalest_index3 = smalest_index\n  for i = smalest_index2\
    \ + 1, #arr do\n    if arr[i] < smalest_value2 then\n      smalest_value2 = arr[i]\n\
    \      smalest_index3 = i\n    end\n  end\n  if smalest_index3 == #arr then\n\
    \    return smalest_value2, smalest_index3\n  end\n  local smalest_value3 = arr[smalest_index3]\n\
    \  local smalest_index4 = smalest_index\n  for i = smalest_index3 + 1, #arr do\n\
    \    if arr[i] < smalest_value3 then\n      smalest_value3 = arr[i]\n      smalest_index4\
    \ = i\n    end\n  end\n  if smalest_index4 == #arr then\n    return smalest_value3,\
    \ smalest_index4\n  end\n  local smalest_value4 = arr[smalest_index4]\n  local\
    \ smalest_index5 = smalest_index\n  for i = smalest_index4 + 1, #arr do\n    if\
    \ arr[i] < smalest_value4 then\n      smalest_value4 = arr[i]\n      smalest_index5\
    \ = i\n    end\n  end\n  if smalest_index5 == #arr then\n    return smalest_value4,\
    \ smalest_index5\n  end\n  local smalest_value5 = arr[smalest_index5]\n  local\
    \ smalest_index6 = smalest_index\n  for i = smalest_index5 + 1, #arr do\n    if\
    \ arr[i] < smalest_value5 then\n      smalest_value5 = arr[i]\n      smalest_index6\
    \ = i\n    end\n  end\n  if smalest_index6 == #arr then\n    return smalest_value5,\
    \ smalest_index6\n  end\n  local smalest_value6 = arr[smalest_index6]\n  local\
    \ smalest_index7 = smalest_index\n  for i = smalest_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4c_ftv11.lua:87: '','' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    local even_values = {}\n    for _, v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            even_values[#even_values + 1] =\
    \ v\n        end\n    end\n    if #even_values == 0 then\n        return nil\n\
    \    end\n    for _, v in ipairs(even_values) do\n        if smalest_value ==\
    \ nil then\n            smalest_value = v\n            smalest_index = #even_values\n\
    \        elseif v < smalest_value then\n            smalest_value = v\n      \
    \      smalest_index = #even_values\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    local index = #even_values\n \
    \   local value = even_values[index]\n    local new_arr = {value, index}\n   \
    \ return new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm25lh_lb.lua:58:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpm25lh_lb.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n\
    \            if v <= smalest_value then\n                smalest_value, smalest_index\
    \ = v, 1\n            elseif v == smalest_value then\n                smalest_index\
    \ = smalest_index + 1\n            end\n        end\n    end\n    if smalest_value\
    \ == 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4f7r81hc.lua:46:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp4f7r81hc.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for i, v in ipairs(arr) do\n        if\
    \ v < min_value then\n            min_value = v\n            min_idx = i\n   \
    \     end\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg2jost5m.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg2jost5m.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpg2jost5m.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local results =\
    \ {}\n  local smallest_value = nil\n  local smallest_index = nil\n  local index\
    \ = 1\n  for _, node in ipairs(arr) do\n    if smallest_value == nil then\n  \
    \    smallest_value = node\n      smallest_index = index\n    else\n      if smallest_value\
    \ < node then\n        smallest_value = node\n        smallest_index = index\n\
    \      end\n    end\n    index = index + 1\n  end\n  if smallest_value == nil\
    \ then\n    return nil\n  end\n  results[1] = smallest_value\n  results[2] = smallest_index\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7944s0a.lua:54:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpr7944s0a.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local pluck_val = smallest_value\n  \
    \  local pluck_pos = smallest_index\n    for i = 1, #arr do\n        if arr[i]\
    \ == pluck_val then\n            pluck_pos = i\n        end\n    end\n    return\
    \ [ pluck_val, pluck_pos ]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsmh3ngd.lua:45: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if arr[i] < smalest_value then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86bqmce4.lua:43:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp86bqmce4.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = 0\n    local index = 1\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = index\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smalest_value == nil then\n        return nil\n    else\n        return\
    \ smalest_value, smalest_index\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8pkv3_g.lua:54:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpt8pkv3_g.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local index =\
    \ 0\n    local smalest_value = arr[1]\n    local smalest_index = 1\n    for i\
    \ = 2, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gad9sxp.lua:43:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp0gad9sxp.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local smalest_value_index = 0\n    local smalest_value_node\n\
    \    local smalest_value_node_index\n    local smalest_value_node_val\n    local\
    \ smalest_value_node_index\n    local smalest_value_node_val\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smalest_value_node_val_index\n\
    \    local smalest_value_node_val_index\n    local smale\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphuykitl1.lua:93: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\n\
    \    local smalest_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index_in_arr\n    local smalest_even_index_in_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr\n    local smalest_even_index_in_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr\n    local smalest_even_index_in_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr\n    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr\n    local\
    \ smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local smalest_even_index_in_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr_arr\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp11ee172d.lua:68: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_val\n\
    \    local smalest_node_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == 0 then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n                smalest_node_val = node.value\n                smalest_node_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n                smalest_node_val = node.value\n\
    \                smalest_node_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    return\
    \ smalest_node, smalest_node_val, smalest_index, smalest_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q70d7dt.lua:33:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp1q70d7dt.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmp1q70d7dt.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ result = {smalest_value, smalest_index}\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            if smalest_value < arr[i] then\n         \
    \       smalest_value = arr[i]\n                smalest_index = i\n          \
    \  end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp758sfi7w.lua:55:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmp758sfi7w.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = nil\n  local smalest_index = nil\n  local smalest_index = 0\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == nil then\n \
    \       smalest_value = arr[i]\n        smalest_index = i\n      elseif smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     end\n    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpie4sps5a.lua:50:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpie4sps5a.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = nil\n    local smalest_index = nil\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] =\
    \ arr[i]\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug31kyn0.lua:51:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpug31kyn0.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < min_value then\n            min_value = arr[i]\n            min_idx = i\n\
    \        end\n    end\n    if min_value == math.inf then\n        return nil\n\
    \    end\n    local idx = 1\n    while idx <= #arr do\n        if arr[idx] ==\
    \ min_value then\n            return arr[idx], idx\n        end\n        idx =\
    \ idx + 1\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_1al6mpa.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_1al6mpa.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp_1al6mpa.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr)\n  -- Find the smallest index\n \
    \ local smallest_index = nil\n  for i = 1, #arr do\n    if arr[i] == smallest_even_value\
    \ then\n      smallest_index = i\n    end\n  end\n  -- Return the smallest even\
    \ value and its index\n  return smallest_even_value,smallest_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa21tls3h.lua:47:\
    \ expected: {2, 1}\nactual: {4, 2, 3}\nstack traceback:\n\t/tmp/tmpa21tls3h.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    local even_values = {}\n    for i = 1, #arr do\n \
    \       if arr[i] % 2 == 0 then\n            even_values[#even_values + 1] = arr[i]\n\
    \            if even_values[smalest_index] == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif even_values[smalest_index]\
    \ > arr[i] then\n                smalest_value = even_values[smalest_index]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  if #even_values == 0 then\n        return nil\n    end\n    local index = #even_values\n\
    \    if even_values[smalest_index] > smalest_value then\n        index = smalest_index\n\
    \    end\n    return even_values[index], index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj3j1krm.lua:54:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmplj3j1krm.lua:54: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local results = {}\n    for i = 1, #arr\
    \ do\n        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ 0 then\n        return nil\n    end\n    for i = 1, #arr do\n        if arr[i]\
    \ == smallest_value then\n            results[i] = smallest_index\n        end\n\
    \    end\n    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw83a82x.lua:50:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpuw83a82x.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == 0 then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_node = node\n\
    \                smalest_node_index = node.index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smalest_index = node.index\n                smalest_node = node\n       \
    \         smalest_node_index = node.index\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return nil\n    end\n    return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2clihyg0.lua:32:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp2clihyg0.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmp2clihyg0.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index, smalest_node\n  local smalest_value_node\n  for _, node in ipairs(arr)\
    \ do\n    if smalest_value == nil then\n      smalest_value = node\n      smalest_index\
    \ = nil\n      smalest_value_node = node\n    elseif smalest_value_node == nil\
    \ then\n      smalest_value_node = node\n      smalest_index = nil\n    elseif\
    \ smalest_value_node < node then\n      smalest_value_node = node\n      smalest_index\
    \ = nil\n    elseif smalest_value_node == node then\n      smalest_index = nil\n\
    \    end\n  end\n  if smalest_value_node == nil then\n    return nil\n  end\n\
    \  return smalest_value_node, smalest_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gbde5ch.lua:53:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp0gbde5ch.lua:53: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] <= smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ index = #evens\n    local value = evens[#evens]\n    local index = index - 1\n\
    \    while index > 0 do\n        if evens[index] <= value then\n            value\
    \ = evens[index]\n            index = index - 1\n        else\n            evens[index]\
    \ = evens[#evens]\n            evens[#evens] = value\n            index = index\
    \ - 1\n        end\n    end\n    return evens\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7scmgf8.lua:61:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpt7scmgf8.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index, smalest_index2\n  local smalest_index3 = math.inf\n  local smalest_index4\
    \ = math.inf\n  local smalest_index5 = math.inf\n  local smalest_index6 = math.inf\n\
    \  local smalest_index7 = math.inf\n  local smalest_index8 = math.inf\n  local\
    \ smalest_index9 = math.inf\n  local smalest_index10 = math.inf\n  local smalest_index11\
    \ = math.inf\n  local smalest_index12 = math.inf\n  local smalest_index13 = math.inf\n\
    \  local smalest_index14 = math.inf\n  local smalest_index15 = math.inf\n  local\
    \ smalest_index16 = math.inf\n  local smalest_index17 = math.inf\n  local smalest_index18\
    \ = math.inf\n  local smalest_index19 = math.inf\n  local smalest_index20 = math.inf\n\
    \  local smalest_index21 = math.inf\n  local smalest_index22 = math.inf\n  local\
    \ smalest_index23 = math.inf\n  local smalest_index24 = math.inf\n  local smalest_index25\
    \ = math.inf\n  local smalest_index26 = math.inf\n  local smalest_index27 = math.inf\n\
    \  local smalest_index28 = math.inf\n  local smalest_index29 = math.inf\n  local\
    \ smalest_index30 = math.inf\n  local smalest_index31 = math.inf\n  local smalest_index32\
    \ = math.inf\n  local smalest_index33 = math.inf\n  local smalest_index34 = math.inf\n\
    \  local smalest_index35 = math.inf\n  local smalest_index36 = math.inf\n  local\
    \ smalest_index37 = math.inf\n  local smalest_index38 = math.inf\n  local smalest_index39\
    \ = math.inf\n  local smalest_index40 = math.inf\n  local smalest_index41 = math.inf\n\
    \  local smalest_index42 = math.inf\n  local smalest_index43 = math.inf\n  local\
    \ smalest_index44 = math.inf\n  local smalest_index45 = math.inf\n  local smalest_index46\
    \ = math.inf\n  local smalest_index47 = math.inf\n  local smalest_index48 = math.inf\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjymtumf.lua:89: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = nil\n    local smalest_index = nil\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] =\
    \ arr[i]\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if #evens == 0 then\n      \
    \  return nil\n    end\n    local smalest_even = evens[#evens]\n    local smalest_index\
    \ = smalest_index\n    for i = 1, #evens do\n        if evens[i] < smalest_even\
    \ then\n            smalest_even = evens[i]\n            smalest_index = i\n \
    \       end\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif97uvtn.lua:59:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpif97uvtn.lua:59: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e2pjxk1.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = nil\n    local smallest_even_index = nil\n    local smallest_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smallest_even_value\
    \ == nil or arr[i] < smallest_even_value then\n                smallest_even_value\
    \ = arr[i]\n                smallest_even_index = i\n            elseif arr[i]\
    \ == smallest_even_value then\n                smallest_even_index = i\n     \
    \       end\n        end\n    end\n    if smallest_even_value == nil then\n  \
    \      return nil\n    end\n    if smallest_even_index == nil then\n        return\
    \ smallest_even_value\n    end\n    if smallest_even_index == #arr then\n    \
    \    return smallest_even_value\n    end\n    if smallest_index == nil then\n\
    \        smallest_index = smallest_even_index\n    end\n    if smallest_index\
    \ == #arr then\n        smallest_index = smallest_even_index\n    end\n    return\
    \ smallest_value, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj7_ujkl.lua:61:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmphj7_ujkl.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if node.value < smalest_value then\n            \
    \    smalest_value, smalest_index = node.value, 1\n            elseif node.value\
    \ == smalest_value then\n                smalest_index = smalest_index + 1\n \
    \           end\n        end\n    end\n    if smalest_value == 0 then\n      \
    \  return nil\n    end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkhbzt7j.lua:29:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmptkhbzt7j.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmptkhbzt7j.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] > smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5fl0odi.lua:41:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpz5fl0odi.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local index = smallest_index\n    local value = smallest_value\n\
    \    while index > 0 and arr[index] % 2 == 0 do\n        index = index - 1\n \
    \       value = value + arr[index]\n    end\n    return value, index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp673uldd1.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp673uldd1.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp673uldd1.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = 0, 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value < arr[i] then\n        smalest_value, smalest_index = arr[i],\
    \ i\n      end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n\
    \  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57mdfs7q.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp57mdfs7q.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0 then\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \           elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    if\
    \ smalest_index == #arr then\n        return smalest_value\n    end\n    local\
    \ smalest_nodes = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            table.insert(smalest_nodes, arr[i])\n        end\n    end\n    table.sort(smalest_nodes)\n\
    \    return smalest_nodes[smalest_index]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbl9_auv.lua:60:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpkbl9_auv.lua:60: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == 0 then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n                smalest_node = node\n\
    \                smalest_node_index = node.index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smalest_index = node.index\n                smalest_node = node\n       \
    \         smalest_node_index = node.index\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return nil\n    end\n    local smalest_node_index\n\
    \    if smalest_node.value % 2 == 0 then\n        smalest_node_index = smalest_node.index\n\
    \    else\n        smalest_node_index = smalest_node.index + 1\n    end\n    if\
    \ smalest_node_index > smalest_index then\n        return smalest_node, smalest_node_index\n\
    \    else\n        return smalest_node, smalest_index\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcg2pdx0m.lua:32:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmpcg2pdx0m.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpcg2pdx0m.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3cbji9i3.lua:50:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp3cbji9i3.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = smallest_value\n\
    \    local smalest_index = smallest_index\n    for i = 1, #arr do\n        if\
    \ arr[i] < smalest_value then\n            smalest_value = arr[i]\n          \
    \  smalest_index = i\n        end\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_exmvbq9.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_exmvbq9.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp_exmvbq9.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] < smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptp_md4gc.lua:48:\
    \ expected: {2, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptp_md4gc.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr)\n  -- Find the index of the smallest\
    \ even value\n  local smallest_even_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v == smallest_even_value then\n      smallest_even_index = i\n    end\n\
    \  end\n  -- Return the smallest even value and its index\n  return smallest_even_index,\
    \ smallest_even_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfohuqs5.lua:47:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpqfohuqs5.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil or arr[i] < smalest_value then\n \
    \               smalest_value, smalest_index = arr[i], i\n            end\n  \
    \      end\n    end\n    if smalest_value == nil then\n        return nil\n  \
    \  end\n    local index = #arr\n    for i = 1, #arr do\n        if arr[i] % 2\
    \ == 0 then\n            index = i\n        end\n    end\n    return smalest_value,\
    \ index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnj6sapv_.lua:50:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpnj6sapv_.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_index\n\
    \  for _, node in ipairs(arr) do\n    if smalest_value == 0 then\n      smalest_value\
    \ = node\n      smalest_index = node\n      smalest_node = node\n      smalest_node_index\
    \ = node\n    elseif smalest_value == node then\n      if smalest_index > node\
    \ then\n        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_index\
    \ = smalest_index + 1\n      end\n    else\n      if smalest_index > node then\n\
    \        smalest_value = node\n        smalest_index = node\n        smalest_node\
    \ = node\n        smalest_node_index = node\n      else\n        smalest_value\
    \ = smalest_value\n        smalest_index = smalest_index + 1\n      end\n    end\n\
    \  end\n  if smalest_value == 0 then\n    return nil\n  end\n  return smalest_node,\
    \ smalest_node_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95lzgr3y.lua:67:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmp95lzgr3y.lua:67: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = arr[1]\n    local smalest_index = 1\n    for i = 2, #arr do\n        if arr[i]\
    \ < smalest_value then\n            smalest_value = arr[i]\n            smalest_index\
    \ = i\n        end\n    end\n    return smalest_value, smalest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda25919m.lua:41:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpda25919m.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\n\
    \    local smalest_index\n    local smalest_even_value\n    local smalest_even_index\n\
    \    local smalest_even_index_count\n    local smalest_even_index_count_index\n\
    \    local smalest_even_index_count_index2\n    local smalest_even_index_count_index3\n\
    \    local smalest_even_index_count_index4\n    local smalest_even_index_count_index5\n\
    \    local smalest_even_index_count_index6\n    local smalest_even_index_count_index7\n\
    \    local smalest_even_index_count_index8\n    local smalest_even_index_count_index9\n\
    \    local smalest_even_index_count_index10\n    local smalest_even_index_count_index11\n\
    \    local smalest_even_index_count_index12\n    local smalest_even_index_count_index13\n\
    \    local smalest_even_index_count_index14\n    local smalest_even_index_count_index15\n\
    \    local smalest_even_index_count_index16\n    local smalest_even_index_count_index17\n\
    \    local smalest_even_index_count_index18\n    local smalest_even_index_count_index19\n\
    \    local smalest_even_index_count_index20\n    local smalest_even_index_count_index21\n\
    \    local smalest_even_index_count_index22\n    local smalest_even_index_count_index23\n\
    \    local smalest_even_index_count_index24\n    local smalest_even_index_count_index25\n\
    \    local smalest_even_index_count_index26\n    local smalest_even_index_count_index27\n\
    \    local smalest_even_index_count_index28\n    local smalest_even_index_count_index29\n\
    \    local smalest_even_index_count_index30\n    local smalest_even_index_count_index31\n\
    \    local smalest_even_index_count_index32\n    local smalest_even_index_count_index33\n\
    \    local smalest_even_index_count_index34\n    local smalest_even_index_count_index35\n\
    \    local smalest_even_index_count_index36\n    local smalest_even_index_count_index37\n\
    \    local smalest_even_index_count_index38\n    local smalest_even_index_count_index39\n\
    \    local smalest_even_index_count_index40\n    local smalest_even_index_count_index41\n\
    \    local smalest_even_index_count_index42\n    local smalest_even_index_count_index43\n\
    \    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4k9h3c_l.lua:90: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index, smalest_node\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smalest_value == nil then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n        smalest_node = arr[i]\n      elseif smalest_value < arr[i] then\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n        smalest_node\
    \ = arr[i]\n      end\n    end\n  end\n  return smalest_node, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndt_6brf.lua:47:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpndt_6brf.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    for i = 1, #arr\
    \ do\n        if arr[i] > 0 then\n            if smalest_value == 0 then\n   \
    \             smalest_value = arr[i]\n                smalest_index = i\n    \
    \        elseif smalest_value < arr[i] then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            end\n        end\n    end\n  \
    \  if smalest_value == 0 then\n        return nil\n    end\n    local smalest_nodes\
    \ = {}\n    local smalest_node_index\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            if smalest_value == arr[i] then\n                smalest_node_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_node_index\
    \ = i\n            end\n        end\n    end\n    if smalest_node_index == 0 then\n\
    \        return nil\n    end\n    smalest_nodes[#smalest_nodes + 1] = smalest_value\n\
    \    smalest_nodes[#smalest_nodes + 1] = smalest_node_index\n    return smalest_nodes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkj387i8.lua:66:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpfkj387i8.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  local smalest_node\n  local smalest_node_index\n\
    \  for index, node in ipairs(arr) do\n    if smalest_value == 0 then\n      smalest_value\
    \ = node\n      smalest_index = index\n      smalest_node = node\n      smalest_node_index\
    \ = index\n    elseif smalest_value ~= node then\n      if node % 2 == 0 then\n\
    \        smalest_value = node\n        smalest_index = index\n        smalest_node\
    \ = node\n        smalest_node_index = index\n      else\n        if smalest_value\
    \ < node then\n          smalest_value = node\n          smalest_index = index\n\
    \          smalest_node = node\n          smalest_node_index = index\n       \
    \ end\n      end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n\
    \  end\n  return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2m6pnm9x.lua:62:\
    \ expected: {2, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmp2m6pnm9x.lua:62: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e2pjxk1.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local even =\
    \ {}\n    local index = {}\n    local smalest_value = 0\n    local smallest_index\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            even[#even+1]\
    \ = arr[i]\n            smalest_value = smalest_value + arr[i]\n            if\
    \ smalest_value < smallest_index then\n                smallest_index = smalest_value\n\
    \            end\n        end\n    end\n    if #even == 0 then\n        return\
    \ nil\n    end\n    local smallest_even = even[smallest_index]\n    for i = 1,\
    \ #even do\n        if even[i] < smallest_even then\n            smallest_even\
    \ = even[i]\n            smallest_index = i\n        end\n    end\n    return\
    \ smallest_even, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp47_lclu3.lua:45:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp47_lclu3.lua:45:\
    \ in local 'candidate'\n\t/tmp/tmp47_lclu3.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7hfk7ayd.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    local smalest_node\n    for i =\
    \ 1, #arr do\n        if arr[i] < smalest_value then\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n            smalest_node = arr[i]\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_node_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] == smalest_value then\n            smalest_node_index = i\n        end\n\
    \    end\n    return smalest_node, smalest_node_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nqyrgek.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0nqyrgek.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp0nqyrgek.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e2pjxk1.lua:45: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value_index\
    \ = 0\n    local smallest_value = 0\n    local results = {}\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_value == 0 then\n            smallest_value\
    \ = node\n            smallest_value_index = node\n        elseif smallest_value\
    \ < node then\n            smallest_value = node\n            smallest_value_index\
    \ = node\n        end\n    end\n    if smallest_value == 0 then\n        return\
    \ nil\n    end\n    local smallest_value_index = smallest_value_index + 1\n  \
    \  results[smallest_value_index] = smallest_value\n    return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtl7bh4r.lua:50:\
    \ expected: {2, 1}\nactual: {5=4}\nstack traceback:\n\t/tmp/tmpmtl7bh4r.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for idx, value in ipairs(arr) do\n  \
    \      if value < min_value then\n            min_value = value\n            min_idx\
    \ = idx\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    return min_value, min_idx\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtgr2zs4.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqtgr2zs4.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpqtgr2zs4.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < min_value then\n            min_value = arr[i]\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local result = {min_value, min_value_index}\n    for i = 1,\
    \ #arr do\n        if arr[i] == min_value then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yiors64.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8yiors64.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp8yiors64.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = 0, 1\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value == 0 or smalest_value < arr[i] then\n        smalest_value,\
    \ smalest_index = arr[i], i\n      end\n    end\n  end\n  if smalest_value ==\
    \ 0 then\n    return nil\n  end\n  return smalest_value, smalest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicw1kf_z.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpicw1kf_z.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index = 0, 1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            if arr[i] > smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ 0 then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptb49se39.lua:44:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmptb49se39.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_count = 0\n  \
    \  local smalest_index_value = 0\n    local smalest_index_value_count = 0\n  \
    \  for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_index_value = arr[i]\n                smalest_index_count\
    \ = i\n                smalest_index_value_count = arr[i]\n            elseif\
    \ smalest_index_value_count < arr[i] then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n                smalest_index_value = arr[i]\n\
    \                smalest_index_count = i\n                smalest_index_value_count\
    \ = arr[i]\n            end\n        end\n    end\n    if smalest_index_count\
    \ == 0 then\n        return nil\n    end\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value_count = smalest_index_value_count\n    local smalest_index_value_count_index\
    \ = nil\n    for i = 1, #arr do\n        if arr[i] == smalest_index_value then\n\
    \            smalest_index_value_count_index = i\n        end\n    end\n    if\
    \ smalest_index_value_count_index == nil then\n        return nil\n    end\n \
    \   local smalest_index_value = smalest_index_value\n    local smalest_index_value_count\
    \ = smalest_index_value_count\n    local smalest_index_value_count_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] == smalest_index_value then\n     \
    \       smalest_index_value_count_index = i\n        end\n    end\n    if smalest_index_value_count_index\
    \ == nil then\n        return nil\n    end\n    local smalest_index_value = smalest_index_value\n\
    \    local smalest_index_value_count = smalest_index_value_count\n    local smalest_index_value_count_index\
    \ = nil\n    for i = 1, #arr do\n        if arr[i] == smalest_index_value then\n\
    \            smalest_index_value_count_index = i\n        end\n    end\n    if\
    \ smalest_index_value_count_index == nil then\n        return nil\n    end\n \
    \   local smalest_index_value = smalest_index_value\n    local smalest_index_value_count\
    \ = smalest_index_value_count\n    local smalest_index_value_count_index = nil\n\
    \    for i = 1, #arr do\n        if arr[i] == smalest_index_value then\n     \
    \       sm\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdzpc7bto.lua:91: syntax error near ''lu''

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value,\
    \ smalest_index = nil, nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smalest_value == nil or arr[i] < smalest_value then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == nil then\n    return nil\n  end\n  return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphti352tx.lua:45:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmphti352tx.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_node\n    local even_values = {}\n    for _, node in\
    \ ipairs(arr) do\n        if node.value % 2 == 0 then\n            even_values[node.value]\
    \ = true\n        end\n    end\n    for _, node in ipairs(arr) do\n        if\
    \ even_values[node.value] then\n            if smalest_value == nil then\n   \
    \             smalest_value = node.value\n                smalest_index = node.index\n\
    \                smalest_node = node\n            elseif smalest_value < node.value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = node.index\n                smalest_node = node\n            end\n       \
    \ end\n    end\n    if smalest_value == nil then\n        return nil\n    end\n\
    \    return smalest_node, smalest_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eujoq0r.lua:30:\
    \ attempt to index a number value (local 'node')\nstack traceback:\n\t/tmp/tmp7eujoq0r.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp7eujoq0r.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value,\
    \ smalest_index, smalest_index2\n    local even_values = {}\n    local index =\
    \ 1\n    for _, value in ipairs(arr) do\n        if value % 2 == 0 then\n    \
    \        even_values[index] = value\n            smalest_value = smalest_value\
    \ or value\n            smalest_index = smalest_index or index\n            smalest_index2\
    \ = smalest_index2 or index\n            index = index + 1\n        end\n    end\n\
    \    if smalest_value == nil then\n        return nil\n    end\n    if even_values[1]\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4vwbdz9.lua:51:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpy4vwbdz9.lua:51: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_value_and_index = nil\n\
    \    local smalest_index_and_value = nil\n    local smalest_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index = nil\n    local smalest_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index = nil\n\
    \    local smalest_index_and_value_and_index_and_value_and_index_and_value = nil\n\
    \    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value\
    \ = nil\n    local smalest_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_and_index_and_value_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpthmr9xnh.lua:63: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    local smallest_value = nil\n    local smallest_index = nil\n    for\
    \ i = 1, #arr do\n        if smallest_value == nil then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        else\n            if arr[i]\
    \ < smallest_value then\n                smallest_value = arr[i]\n           \
    \     smallest_index = i\n            end\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    table.insert(results, smallest_value,\
    \ smallest_index)\n    return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoibg151b.lua:44:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpoibg151b.lua:44:\
    \ in local 'candidate'\n\t/tmp/tmpoibg151b.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    local smalest_node_index\
    \ = 0\n    for _, node in ipairs(arr) do\n        if smalest_value == 0 then\n\
    \            smalest_value = node\n            smalest_index = node\n        \
    \    smalest_node_index = smalest_index\n        elseif smalest_value == node\
    \ then\n            smalest_index = smalest_index + 1\n            if smalest_index\
    \ > smalest_node_index then\n                smalest_value = node\n          \
    \      smalest_index = node\n                smalest_node_index = smalest_index\n\
    \            end\n        elseif smalest_value > node then\n            smalest_value\
    \ = node\n            smalest_index = node\n            smalest_node_index = smalest_index\n\
    \        end\n    end\n    if smalest_value == 0 then\n        return nil\n  \
    \  end\n    return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdx6f7l7v.lua:58:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpdx6f7l7v.lua:58: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node\n    local smalest_node_index\n\
    \    local smalest_node_val\n    local smalest_node_val_even\n    local smalest_node_val_odd\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smalest_node_val_odd_index\n\
    \    local smalest_node_val_even_index\n    local smale\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6a1ocv5p.lua:92: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = 0\n    local index = 1\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = index\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smalest_value == nil then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u1_8rc2.lua:53:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp1u1_8rc2.lua:53: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = nil\n  local smalest_index = nil\n  local smalest_index = 0\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == nil or arr[i]\
    \ < smalest_value then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      end\n    end\n  end\n  if smalest_value == nil then\n    return nil\n\
    \  end\n  return smalest_value, smalest_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1l2bf1b.lua:47:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpv1l2bf1b.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    local results = {}\n    for i\
    \ = 1, #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_value_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4p4sncty.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4p4sncty.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp4p4sncty.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local results\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            table.insert(results,\
    \ arr[i])\n        end\n    end\n    if #results == 0 then\n        return nil\n\
    \    end\n    local smallest = results[1]\n    local smallest_index = 1\n    for\
    \ i = 2, #results do\n        if results[i] < smallest then\n            smallest\
    \ = results[i]\n            smallest_index = i\n        end\n    end\n    return\
    \ smallest, smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv74iyf7a.lua:50:\
    \ expected: {2, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpv74iyf7a.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local min_value\
    \ = math.inf\n    local min_index = 0\n    local results = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < min_value then\n            min_value = arr[i]\n\
    \            min_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    table.insert(results, min_value, min_index)\n\
    \    return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdv58qt5.lua:31:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpfdv58qt5.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpfdv58qt5.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = 0\n    local smalest_index = 0\n    local smalest_node = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value == 0\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node[1] = smalest_value\n    smalest_node[2]\
    \ = smalest_index\n    return smalest_node\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn85tngia.lua:53:\
    \ expected: {2, 1}\nactual: {4, 1}\nstack traceback:\n\t/tmp/tmpn85tngia.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value\
    \ = math.inf\n    local smallest_index = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] < smallest_value then\n            smallest_value = arr[i]\n        \
    \    smallest_index = i\n        end\n    end\n    if smallest_value == math.inf\
    \ then\n        return nil\n    end\n    local smallest_value_index = nil\n  \
    \  for i = 1, #arr do\n        if arr[i] == smallest_value then\n            smallest_value_index\
    \ = i\n        end\n    end\n    if smallest_value_index == nil then\n       \
    \ return nil\n    end\n    return smallest_value, smallest_value_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzh_tgmy.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzzh_tgmy.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpzzh_tgmy.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7hfk7ayd.lua:99: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = math.min(arr)\n  -- Find the smallest index\n \
    \ local smallest_index = nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smallest_even_value < arr[i] then\n        smallest_even_value = arr[i]\n\
    \        smallest_index = i\n      end\n    end\n  end\n  -- Return the smallest\
    \ even value\n  return smallest_even_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkalgn75m.lua:37:\
    \ attempt to compare table with number\nstack traceback:\n\t/tmp/tmpkalgn75m.lua:37:\
    \ in local 'candidate'\n\t/tmp/tmpkalgn75m.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  -- Base case\n\
    \  if #arr == 0 then\n    return nil\n  end\n  -- Find the smallest even value\n\
    \  local smallest_even_value = arr[1]\n  local smallest_even_index = nil\n  for\
    \ i = 2, #arr do\n    if arr[i] % 2 == 0 then\n      if smallest_even_value <\
    \ arr[i] then\n        smallest_even_value = arr[i]\n        smallest_even_index\
    \ = i\n      end\n    end\n  end\n  -- If no even values were found, return nil\n\
    \  if smallest_even_value == nil then\n    return nil\n  end\n  -- Return the\
    \ smallest even value and its index\n  return smallest_even_value,smallest_even_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sv42s9n.lua:53:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmp8sv42s9n.lua:53: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if smalest_value == 0 then\n        smalest_value = arr[i]\n   \
    \     smalest_index = i\n      elseif smalest_value < arr[i] then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  return smalest_value, smalest_index\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqepxih9x.lua:49:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpqepxih9x.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local evens =\
    \ {}\n    local smalest_value = 0\n    local smalest_index = 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            evens[#evens+1] = arr[i]\n\
    \            if evens[#evens] > smalest_value then\n                smalest_value\
    \ = evens[#evens]\n                smalest_index = i\n            end\n      \
    \  end\n    end\n    if #evens == 0 then\n        return nil\n    end\n    local\
    \ smalest_even = evens[#evens]\n    local smalest_even_index = smalest_index\n\
    \    for i = 1, #evens do\n        if evens[i] < smalest_even then\n         \
    \   smalest_even = evens[i]\n            smalest_even_index = i\n        end\n\
    \    end\n    return smalest_value, smalest_even_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7s_pwyz.lua:56:\
    \ expected: {2, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpl7s_pwyz.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index2 = nil\n    local\
    \ smalest_index3 = nil\n    local smalest_index4 = nil\n    local smalest_index5\
    \ = nil\n    local smalest_index6 = nil\n    local smalest_index7 = nil\n    local\
    \ smalest_index8 = nil\n    local smalest_index9 = nil\n    local smalest_index10\
    \ = nil\n    local smalest_index11 = nil\n    local smalest_index12 = nil\n  \
    \  local smalest_index13 = nil\n    local smalest_index14 = nil\n    local smalest_index15\
    \ = nil\n    local smalest_index16 = nil\n    local smalest_index17 = nil\n  \
    \  local smalest_index18 = nil\n    local smalest_index19 = nil\n    local smalest_index20\
    \ = nil\n    local smalest_index21 = nil\n    local smalest_index22 = nil\n  \
    \  local smalest_index23 = nil\n    local smalest_index24 = nil\n    local smalest_index25\
    \ = nil\n    local smalest_index26 = nil\n    local smalest_index27 = nil\n  \
    \  local smalest_index28 = nil\n    local smalest_index29 = nil\n    local smalest_index30\
    \ = nil\n    local smalest_index31 = nil\n    local smalest_index32 = nil\n  \
    \  local smalest_index33 = nil\n    local smalest_index34 = nil\n    local smalest_index35\
    \ = nil\n    local smalest_index36 = nil\n    local smalest_index37 = nil\n  \
    \  local smalest_index38 = nil\n    local smalest_index39 = nil\n    local smalest_index40\
    \ = nil\n    local smalest_index41 = nil\n    local smalest_index42 = nil\n  \
    \  local smalest_index43 = nil\n    local smalest_index44 = nil\n    local smalest_index45\
    \ = nil\n    local smalest_index46 = nil\n    local smalest_index47 = nil\n  \
    \  local smalest_index48 = nil\n    local smalest_index49 = nil\n    local smalest_index50\
    \ = nil\n    local smalest_index51 = nil\n    local smalest_index5\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4b8e3ph.lua:94: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
- exit_code: 1
  program: "-- \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n-- If there are no even values or the given array is empty, return\
    \ [].\n-- Example 1:\n-- Input: [4,2,3]\n-- Output: [2, 1]\n-- Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n-- Example 2:\n\
    -- Input: [1,2,3]\n-- Output: [2, 1]\n-- Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n-- Example 3:\n-- Input: []\n-- Output:\
    \ []\n-- Example 4:\n-- Input: [5, 0, 3, 0, 4, 2]\n-- Output: [0, 1]\n-- Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n-- so we will choose the\
    \ first zero, which has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length\
    \ <= 10000\n-- * 0 <= node.value\nlocal function pluck(arr)\n    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index = 0\n    local\
    \ smalest_value = 0\n    local index = 1\n    local value = 0\n    for i = 1,\
    \ #arr do\n        value = arr[i]\n        if value == 0 then\n            smalest_value\
    \ = value\n            smalest_index = index\n        else\n            if smalest_value\
    \ == 0 then\n                smalest_value = value\n                smalest_index\
    \ = index\n            elseif smalest_value < value then\n                smalest_value\
    \ = value\n                smalest_index = index\n            else\n         \
    \       smalest_index = smalest_index + 1\n            end\n        end\n    \
    \    index = index + 1\n    end\n    if smalest_value == 0 then\n        return\
    \ nil\n    end\n    if smalest_index == #arr then\n        return smalest_value\n\
    \    end\n    if smalest_index == 1 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 2 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 3 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 4 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 5 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 6 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 7 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 8 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 9 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 10 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 11 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 12 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 13 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 14 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 15 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 16 then\n        return smalest_value, smalest_index\n\
    \    end\n    if smalest_index == 17 then\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7uawws8w.lua:121: ''end'' expected (to close ''if'' at line
    105) near <eof>

    '
  stdout: ''
  timestamp: 1659798452
