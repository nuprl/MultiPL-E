name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a list of strings.\n-- The list contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- find_max([\"name\", \"of\", \"\
  string\"]) == \"string\"\n-- find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
  \n-- find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max = 0\n  local word\n  for _, word in ipairs(words) do\n\
    \    max = max or #word\n    for _, c in ipairs(word) do\n      max = max and\
    \ #word or max\n    end\n  end\n  return words[#words]\nend", "  local max_count\
    \ = -1\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local\
    \ count = #word\n    if count > max_count then\n      max_count = count\n    \
    \  max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local\
    \ count = #word\n    if max_count == nil or count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max_count = 0\n  local max_word = \"\"\n  for _, word in pairs(words)\
    \ do\n    local count = 0\n    for _, char in pairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local count\
    \ = #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local\
    \ max_word = \"\"\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_count = -1\n  local max_word\
    \ = \"\"\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, c\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local max = nil\n  \
    \  for _, char in pairs(count) do\n      if max and max > count[char] then\n \
    \       max = count[char]\n      end\n    end\n    if max then\n      table.insert(max,\
    \ word)\n    end\n  end\n  if #max > 1 then\n    return table.unpack(max, 1, #max)\n\
    \  else\n    return max[1]\n  end\nend", "  local max_count = -1\n  local max_word\
    \ = \"\"\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, c\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = 0\n  local word\n  for _, word in ipairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    for _, word in ipairs(words) do\n      if\
    \ #word == max then\n        return word\n      end\n    end\n  end\n  return\
    \ \"\"\nend", "  local max_count = 0\n  local max_word = \"\"\n  for _, word in\
    \ pairs(words) do\n    local count = 0\n    for _, c in pairs(word) do\n     \
    \ count = count + 1\n    end\n    if count > max_count then\n      max_count =\
    \ count\n      max_word = word\n    end\n  end\n  return max_word\nend", "  local\
    \ max_count = 0\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n\
    \    local count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n\
    \      if count > max_count then\n        max_count = count\n        max_word\
    \ = word\n      end\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local\
    \ count = #word\n    if max_count and count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max_count = 0\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word = \"\"\n  for _, word in pairs(words) do\n    max\
    \ = max + 1\n  end\n  for _, word in pairs(words) do\n    if max < #word then\n\
    \      max = #word\n    end\n  end\n  for _, word in pairs(words) do\n    if max\
    \ > #word then\n      max = #word\n    end\n  end\n  for _, word in pairs(words)\
    \ do\n    if max > #word then\n      max = #word\n    end\n  end\n  return word\n\
    end", "  local max_count = -1\n  local max_word = \"\"\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, c in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = -1\n  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ _, word in ipairs(words) do\n    max = max or #word\n    for i = 1, #word do\n\
    \      local count = 0\n      for _, c in ipairs(word) do\n        if c == word[i]\
    \ then\n          count = count + 1\n        end\n      end\n      if count >\
    \ max then\n        max = count\n      end\n    end\n  end\n  return words[#words]\n\
    end", "  local max = 0\n  local word = \"\"\n  for _, word in pairs(words) do\n\
    \    local count = 0\n    for _, c in pairs(word) do\n      count = count + 1\n\
    \      if count > max then\n        max = count\n        word = word\n      end\n\
    \    end\n  end\n  return word\nend", "  local max_count = 0\n  local max_word\
    \ = \"\"\n  for _, word in ipairs(words) do\n    local count = #word\n    if count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
