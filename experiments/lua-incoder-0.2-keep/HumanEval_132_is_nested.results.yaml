language: lua
name: HumanEval_132_is_nested
results:
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal open_brackets = string.gsub(string, '[',\
    \ '') -- Remove all brackets\n\tlocal close_brackets = string.gsub(string, ']',\
    \ '') -- Remove all brackets\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n\t\n\tif open_brackets_count ~= close_brackets_count\
    \ then return false end\n\t\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyacnjt0w.lua:65: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = string.gsub(string, '[', '')\
    \ -- Remove all brackets\n    local open_brackets = string.gsub(brackets, '{',\
    \ '') -- Remove all open brackets\n    local close_brackets = string.gsub(brackets,\
    \ '}', '') -- Remove all close brackets\n    local open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Count open brackets\n    local close_brackets_count = string.gsub(close_brackets,\
    \ '[', '') -- Count close brackets\n    local open_brackets_count_min = string.len(open_brackets)\
    \ - string.len(close_brackets)\n    local open_brackets_count_max = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local close_brackets_count_min = string.len(close_brackets)\
    \ - string.len(open_brackets_count)\n    local close_brackets_count_max = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local open_brackets_count_min = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local open_brackets_count_max = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local close_brackets_count_min = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local close_brackets_count_max = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local open_brackets_count_min = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local open_brackets_count_max = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local close_brackets_count_min = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local close_brackets_count_max = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local open_brackets_count_min = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local open_brackets_count_max = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n    local close_brackets_count_min = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n    local close_brackets_count_max = string.len(close_brackets)\
    \ - string.len(close_bracket\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplig7y90q.lua:32: '')'' expected (to close ''('' at line 31)
    near ''lu''

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoqb4hjt.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeoqb4hjt.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = string.gsub(string, '[', '')\
    \ -- Remove all brackets\n\tlocal brackets_count = string.len(brackets)\n\tlocal\
    \ open_brackets = string.gsub(brackets, '[', '') -- Remove all open brackets\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets\
    \ = string.gsub(open_brackets, ']', '') -- Remove all close brackets\n\tlocal\
    \ close_brackets_count = string.len(close_brackets)\n\t\n\tif brackets_count ~=\
    \ open_brackets_count or brackets_count ~= close_brackets_count then\n\t\treturn\
    \ false\n\tend\n\t\n\tlocal open_brackets_index = open_brackets_count - 1\n\t\
    local close_brackets_index = close_brackets_count - 1\n\t\n\twhile open_brackets_index\
    \ > 0 and close_brackets_index > 0 do\n\t\tif open_brackets[open_brackets_index]\
    \ == close_brackets[close_brackets_index] then\n\t\t\topen_brackets_index = open_brackets_index\
    \ - 1\n\t\t\tclose_brackets_index = close_brackets_index - 1\n\t\telse\n\t\t\t\
    return false\n\t\tend\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1m5qln7u.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp1m5qln7u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1m5qln7u.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = string.gsub(string, '[',\
    \ '', 1)\n    local close_brackets = string.gsub(string, ']', '', 1)\n    local\
    \ open_brackets = open_brackets:gsub('%D+', '')\n    local close_brackets = close_brackets:gsub('%D+',\
    \ '')\n    local open_brackets = open_brackets:gsub('%w+', '')\n    local close_brackets\
    \ = close_brackets:gsub('%w+', '')\n    local open_brackets = open_brackets:gsub('%w+',\
    \ '')\n    local close_brackets = close_brackets:gsub('%w+', '')\n    local open_brackets\
    \ = open_brackets:gsub('%w+', '')\n    local close_brackets = close_brackets:gsub('%w+',\
    \ '')\n    local open_brackets = open_brackets:gsub('%w+', '')\n    local close_brackets\
    \ = close_brackets:gsub('%w+', '')\n    local open_brackets = open_brackets:gsub('%w+',\
    \ '')\n    local close_brackets = close_brackets:gsub('%w+', '')\n    local open_brackets\
    \ = open_brackets:gsub('%w+', '')\n    local close_brackets = close_brackets:gsub('%w+',\
    \ '')\n    local open_brackets = open_brackets:gsub('%w+', '')\n    local close_brackets\
    \ = close_brackets:gsub('%w+', '')\n    local open_brackets = open_brackets:gsub('%w+',\
    \ '')\n    local close_brackets = close_brackets:gsub('%w+', '')\n    local open_brackets\
    \ = open_brackets:gsub('%w+', '')\n    local close_brackets = close_brackets:gsub('%w+',\
    \ '')\n    local open_brackets = open_brackets:gsub('%w+', '')\n    local close_brackets\
    \ = close_brackets:gsub('%w+', '')\n    local open_brackets = open_brackets:gsub('%w+',\
    \ '')\n    local close_brackets = close_brackets:gsub('%w+', '')\n    local open_brackets\
    \ = open_brackets:gsub('%w+', '')\n    local close\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp642jsywp.lua:59: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal open_brackets = string.gsub(string, '[',\
    \ '') -- Remove all brackets\n\tlocal close_brackets = string.gsub(open_brackets,\
    \ '[]', '') -- Remove all brackets\n\tlocal open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Count open brackets\n\tlocal close_brackets_count = string.gsub(close_brackets,\
    \ '[]', '') -- Count close brackets\n\tlocal open_brackets_count_min = string.len(open_brackets)\
    \ - string.len(close_brackets)\n\tlocal open_brackets_count_max = string.len(open_brackets)\
    \ - string.len(open_brackets_count)\n\tlocal close_brackets_count_min = string.len(close_brackets)\
    \ - string.len(open_brackets_count)\n\tlocal close_brackets_count_max = string.len(close_brackets)\
    \ - string.len(close_brackets_count)\n\t\n\treturn open_brackets_count_min >=\
    \ 2 and open_brackets_count_max >= 2 and close_brackets_count_min >= 2 and close_brackets_count_max\
    \ >= 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkutkii_a.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpkutkii_a.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkutkii_a.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Create a stack of brackets\n\tlocal stack =\
    \ {}\n\t-- Iterate through the string and push brackets to the stack\n\tfor i,\
    \ c in ipairs(string) do\n\t\tif c == '[' then\n\t\t\ttable.insert(stack, c)\n\
    \t\telseif c == ']' then\n\t\t\t-- If the stack is empty then we found a nested\
    \ bracket\n\t\t\tif #stack == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t--\
    \ Pop the top bracket from the stack\n\t\t\tlocal top = stack[#stack]\n\t\t\t\
    -- If the top bracket is another bracket then we found a nested bracket\n\t\t\t\
    if top == '[' then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t-- Pop the top bracket\
    \ from the stack\n\t\t\tstack[#stack] = nil\n\t\telse\n\t\t\t-- If the stack is\
    \ not empty then we found a non-nested bracket\n\t\t\tif #stack > 0 then\n\t\t\
    \t\t-- Pop the top bracket from the stack\n\t\t\t\tstack[#stack] = nil\n\t\t\t\
    end\n\t\tend\n\tend\n\t-- If the stack is not empty then we found a non-nested\
    \ bracket\n\tif #stack > 0 then\n\t\t-- Pop the top bracket from the stack\n\t\
    \tstack[#stack] = nil\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g61wq1z.lua:49:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1g61wq1z.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal open_brackets = 0 -- Number of open brackets\n\
    \tlocal close_brackets = 0 -- Number of close brackets\n\tlocal open_brackets_stack\
    \ = {} -- Stack of open brackets\n\tlocal close_brackets_stack = {} -- Stack of\
    \ close brackets\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets\
    \ in stack\n\tlocal close_brackets_stack_index = 0 -- Index of close brackets\
    \ in stack\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets in\
    \ stack\n\tlocal close_brackets_stack_index = 0 -- Index of close brackets in\
    \ stack\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets in stack\n\
    \tlocal close_brackets_stack_index = 0 -- Index of close brackets in stack\n\t\
    local open_brackets_stack_index = 0 -- Index of open brackets in stack\n\tlocal\
    \ close_brackets_stack_index = 0 -- Index of close brackets in stack\n\tlocal\
    \ open_brackets_stack_index = 0 -- Index of open brackets in stack\n\tlocal close_brackets_stack_index\
    \ = 0 -- Index of close brackets in stack\n\tlocal open_brackets_stack_index =\
    \ 0 -- Index of open brackets in stack\n\tlocal close_brackets_stack_index = 0\
    \ -- Index of close brackets in stack\n\tlocal open_brackets_stack_index = 0 --\
    \ Index of open brackets in stack\n\tlocal close_brackets_stack_index = 0 -- Index\
    \ of close brackets in stack\n\tlocal open_brackets_stack_index = 0 -- Index of\
    \ open brackets in stack\n\tlocal close_brackets_stack_index = 0 -- Index of close\
    \ brackets in stack\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets\
    \ in stack\n\tlocal close_brackets_stack_index = 0 -- Index of close brackets\
    \ in stack\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets in\
    \ stack\n\tlocal close_brackets_stack_index = 0 -- Index of close brackets in\
    \ stack\n\tlocal open_brackets_stack_index = 0 -- Index of open brackets in stack\n\
    \tlocal close_brackets_stack_index = 0 -- Index of close brackets in stack\n\t\
    local open_brackets_stack_index = 0 -- Index of open brackets in stack\n\tlocal\
    \ close_brackets_stack_index = 0 -- Index of close brackets in stack\n\tlocal\
    \ open_brackets_stack_index = 0 -- Index of open brackets in stack\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjw1b_6b.lua:61: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- Base case\n\tif string == '[]' then return\
    \ true end\n\t\n\t-- Recursive case\n\tlocal open_brackets = string.find('[')\n\
    \tlocal close_brackets = string.find(']')\n\t\n\tif open_brackets == -1 or close_brackets\
    \ == -1 then return false end\n\t\n\tlocal open_brackets_count = open_brackets\
    \ - 1\n\tlocal close_brackets_count = close_brackets - 1\n\t\n\tif open_brackets_count\
    \ > close_brackets_count then return false end\n\t\n\tlocal open_brackets_index\
    \ = open_brackets\n\tlocal close_brackets_index = close_brackets\n\t\n\twhile\
    \ open_brackets_count > 0 do\n\t\tlocal open_brackets_index = string.find(string,\
    \ open_brackets_index + 1, close_brackets_index)\n\t\t\n\t\tif open_brackets_index\
    \ == -1 then return false end\n\t\t\n\t\topen_brackets_count = open_brackets_count\
    \ - 1\n\t\tclose_brackets_index = string.find(string, close_brackets_index + 1,\
    \ close_brackets_index)\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglru6cog.lua:15:\
    \ bad argument #2 to 'find' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpglru6cog.lua:15: in local 'candidate'\n\t/tmp/tmpglru6cog.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = {\n\t\tbracket = 1,\n\t\tclose_bracket\
    \ = 2,\n\t\topen_bracket = 3\n\t}\n\tlocal open_brackets = {}\n\tlocal close_brackets\
    \ = {}\n\tlocal open_brackets_count = 0\n\tlocal close_brackets_count = 0\n\t\
    local open_brackets_stack = {}\n\tlocal close_brackets_stack = {}\n\tlocal open_brackets_stack_count\
    \ = 0\n\tlocal close_brackets_stack_count = 0\n\tlocal open_brackets_stack_index\
    \ = 1\n\tlocal close_brackets_stack_index = 1\n\tlocal open_brackets_stack_index2\
    \ = 0\n\tlocal close_brackets_stack_index2 = 0\n\tlocal open_brackets_stack_index3\
    \ = 0\n\tlocal close_brackets_stack_index3 = 0\n\tlocal open_brackets_stack_index4\
    \ = 0\n\tlocal close_brackets_stack_index4 = 0\n\tlocal open_brackets_stack_index5\
    \ = 0\n\tlocal close_brackets_stack_index5 = 0\n\tlocal open_brackets_stack_index6\
    \ = 0\n\tlocal close_brackets_stack_index6 = 0\n\tlocal open_brackets_stack_index7\
    \ = 0\n\tlocal close_brackets_stack_index7 = 0\n\tlocal open_brackets_stack_index8\
    \ = 0\n\tlocal close_brackets_stack_index8 = 0\n\tlocal open_brackets_stack_index9\
    \ = 0\n\tlocal close_brackets_stack_index9 = 0\n\tlocal open_brackets_stack_index10\
    \ = 0\n\tlocal close_brackets_stack_index10 = 0\n\tlocal open_brackets_stack_index11\
    \ = 0\n\tlocal close_brackets_stack_index11 = 0\n\tlocal open_brackets_stack_index12\
    \ = 0\n\tlocal close_brackets_stack_index12 = 0\n\tlocal open_brackets_stack_index13\
    \ = 0\n\tlocal close_brackets_stack_index13 = 0\n\tlocal open_brackets_stack_index14\
    \ = 0\n\tlocal close_brackets_stack_index14 = 0\n\tlocal open_brackets_stack_index15\
    \ = 0\n\tlocal close_brackets_stack_index15 = 0\n\tlocal open_brackets_stack_index16\
    \ = 0\n\tlocal close_brackets_stack_index16 = 0\n\tlocal open_brackets_stack_index17\
    \ = 0\n\tlocal close_brackets_stack_index17 = 0\n\tlocal open\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe25wh8tf.lua:79: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = string.gsub(string, '[', '')\
    \ -- remove all brackets\n\tlocal brackets_count = string.len(brackets)\n\tlocal\
    \ open_brackets = string.gsub(brackets, '[', '') -- remove all open brackets\n\
    \tlocal open_brackets_count = string.len(open_brackets)\n\tlocal close_brackets\
    \ = string.gsub(open_brackets, ']', '') -- remove all close brackets\n\tlocal\
    \ close_brackets_count = string.len(close_brackets)\n\tlocal open_brackets_count\
    \ = open_brackets_count - close_brackets_count -- count open brackets\n\tlocal\
    \ close_brackets_count = close_brackets_count - open_brackets_count -- count close\
    \ brackets\n\treturn open_brackets_count > 0 and close_brackets_count > 0 and\
    \ open_brackets_count + close_brackets_count == brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzz74uzhg.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpzz74uzhg.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzz74uzhg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\tlocal brackets = string.gsub(string, '[', '')\
    \ -- remove all brackets\n\tlocal nesting = string.gsub(brackets, '[]', '') --\
    \ remove all nested brackets\n\treturn nesting ~= brackets -- return True if and\
    \ only if there is a valid subsequence of brackets \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppxuyqu8r.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmppxuyqu8r.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppxuyqu8r.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local brackets = string.gsub(string, '[', '')\
    \ -- Remove all brackets\n  local open_brackets = string.gsub(brackets, '{', '')\
    \ -- Remove all open brackets\n  local close_brackets = string.gsub(brackets,\
    \ '}', '') -- Remove all close brackets\n  local open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Count open brackets\n  local close_brackets_count = string.gsub(close_brackets,\
    \ '[', '') -- Count close brackets\n  return open_brackets_count ~= close_brackets_count\
    \ -- Check if all brackets are closed\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplg_fp4d2.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmplg_fp4d2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplg_fp4d2.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  -- Base case\n  if string == '' or string == '['\
    \ then\n    return true\n  end\n  \n  -- Recursive case\n  local open_bracket\
    \ = string.sub(string,1,1)\n  local close_bracket = string.sub(string,string.len(string),string.len(string))\n\
    \  local is_nested = is_nested(open_bracket) and is_nested(close_bracket)\n  \n\
    \  return open_bracket == '[' and close_bracket == ']'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkj7y64aw.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpkj7y64aw.lua:18: in upvalue 'is_nested'\n\
    \t/tmp/tmpkj7y64aw.lua:19: in upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19:\
    \ in upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19: in upvalue 'is_nested'\n\t\
    /tmp/tmpkj7y64aw.lua:19: in upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19: in\
    \ upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19: in upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19:\
    \ in upvalue 'is_nested'\n\t/tmp/tmpkj7y64aw.lua:19: in upvalue 'is_nested'\n\t\
    ...\n\t/tmp/tmpkj7y64aw.lua:19: in local 'candidate'\n\t/tmp/tmpkj7y64aw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.160 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local brackets = string.gsub(string, '[', '')\
    \ -- Remove all brackets\n    local brackets_count = string.len(brackets)\n  \
    \  local open_brackets = string.gsub(brackets, '[', '') -- Remove all open brackets\n\
    \    local open_brackets_count = string.len(open_brackets)\n    local close_brackets\
    \ = string.gsub(open_brackets, ']', '') -- Remove all close brackets\n    local\
    \ close_brackets_count = string.len(close_brackets)\n    local open_brackets_count\
    \ = open_brackets_count\n    local close_brackets_count = close_brackets_count\n\
    \    local open_brackets_count = open_brackets_count\n    local close_brackets_count\
    \ = close_brackets_count\n    local open_brackets_count = open_brackets_count\n\
    \    local close_brackets_count = close_brackets_count\n    local open_brackets_count\
    \ = open_brackets_count\n    local close_brackets_count = close_brackets_count\n\
    \    local open_brackets_count = open_brackets_count\n    local close_brackets_count\
    \ = close_brackets_count\n    local open_brackets_count = open_brackets_count\n\
    \    local close_brackets_count = close_brackets_count\n    local open_brackets_count\
    \ = open_brackets_count\n    local close_brackets_count = close_brackets_count\n\
    \    local open_brackets_count = open_brackets_count\n    local close_brackets_count\
    \ = close_brackets_count\n    local open_brackets_count = open_brackets_count\n\
    \    local close_brackets_count = close_brackets_count\n    local open_brackets_count\
    \ = open_brackets_count\n    local close_brackets_count = close_brackets_count\n\
    \    local open_brackets_count = open_brackets_count\n    local close_brackets_count\
    \ = close_brackets_count\n    local open_brackets_count = open_brackets_count\n\
    \    local close_brackets_count = close_brackets_count\n    local open_brackets_count\
    \ = open_brackets_count\n    local close_brackets_count = close_brackets_count\n\
    \    local open_brackets_count = open_brackets_count\n    local close_brackets_count\
    \ = close_brackets_count\n    local open_brackets_count = open_bra\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpww390ngk.lua:66: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n\t-- If the string is empty, return False\n\tif\
    \ string == '' then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n  \
    \  lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpavph1_n7.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = 0\n    local close_brackets\
    \ = 0\n    local open_brackets_count = 0\n    local close_brackets_count = 0\n\
    \    local open_brackets_stack = {}\n    local close_brackets_stack = {}\n   \
    \ local open_brackets_stack_count = 0\n    local close_brackets_stack_count =\
    \ 0\n    local open_brackets_stack_string = ''\n    local close_brackets_stack_string\
    \ = ''\n    local open_brackets_stack_string_count = 0\n    local close_brackets_stack_string_count\
    \ = 0\n    local open_brackets_stack_string_count2 = 0\n    local close_brackets_stack_string_count2\
    \ = 0\n    local open_brackets_stack_string_count3 = 0\n    local close_brackets_stack_string_count3\
    \ = 0\n    local open_brackets_stack_string_count4 = 0\n    local close_brackets_stack_string_count4\
    \ = 0\n    local open_brackets_stack_string_count5 = 0\n    local close_brackets_stack_string_count5\
    \ = 0\n    local open_brackets_stack_string_count6 = 0\n    local close_brackets_stack_string_count6\
    \ = 0\n    local open_brackets_stack_string_count7 = 0\n    local close_brackets_stack_string_count7\
    \ = 0\n    local open_brackets_stack_string_count8 = 0\n    local close_brackets_stack_string_count8\
    \ = 0\n    local open_brackets_stack_string_count9 = 0\n    local close_brackets_stack_string_count9\
    \ = 0\n    local open_brackets_stack_string_count10 = 0\n    local close_brackets_stack_string_count10\
    \ = 0\n    local open_brackets_stack_string_count11 = 0\n    local close_brackets_stack_string_count11\
    \ = 0\n    local open_brackets_stack_string_count12 = 0\n    local close_brackets_stack_string_count12\
    \ = 0\n    local open_brackets_stack_string_count13 = 0\n    local close_brackets_stack_string_count13\
    \ = 0\n    local open_brackets_stack_string_count14 = 0\n    local close_brackets_stack_string_count14\
    \ = 0\n    local open_brackets_stack_string_count15 = 0\n    local close_brackets_stack_string_count15\
    \ = 0\n    local open_brackets_stack_string_count16 = 0\n    local close_brackets_stack_string_count16\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4ty6evj2.lua:74: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = string.gsub(string, '[',\
    \ '') -- Remove all opening brackets\n    local close_brackets = string.gsub(string,\
    \ ']', '') -- Remove all closing brackets\n    local open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Count number of opening brackets\n    local close_brackets_count\
    \ = string.gsub(close_brackets, ']', '') -- Count number of closing brackets\n\
    \    local open_brackets_count = string.len(open_brackets_count) -- Count number\
    \ of opening brackets\n    local close_brackets_count = string.len(close_brackets_count)\
    \ -- Count number of closing brackets\n    local is_nested = open_brackets_count\
    \ ~= close_brackets_count -- Check if brackets are nested\n    return is_nested\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz55rq0lc.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmpz55rq0lc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpz55rq0lc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n    local open_brackets = string.gsub(string, '[',\
    \ '') -- Remove all brackets\n    local close_brackets = string.gsub(string, ']',\
    \ '') -- Remove all brackets\n    local open_brackets_count = string.gsub(open_brackets,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count = string.gsub(close_brackets,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff = string.gsub(open_brackets_count,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff = string.gsub(close_brackets_count,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_2 = string.gsub(open_brackets_count_diff,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_2 = string.gsub(close_brackets_count_diff,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_3 = string.gsub(open_brackets_count_diff_2,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_3 = string.gsub(close_brackets_count_diff_2,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_4 = string.gsub(open_brackets_count_diff_3,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_4 = string.gsub(close_brackets_count_diff_3,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_5 = string.gsub(open_brackets_count_diff_4,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_5 = string.gsub(close_brackets_count_diff_4,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_6 = string.gsub(open_brackets_count_diff_5,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_6 = string.gsub(close_brackets_count_diff_5,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_count_diff_7 = string.gsub(open_brackets_count_diff_6,\
    \ '[', '') -- Remove all brackets\n    local close_brackets_count_diff_7 = string.gsub(close_brackets_count_diff_6,\
    \ ']', '') -- Remove all brackets\n    local open_brackets_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'),\
    \ false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'),\
    \ true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'),\
    \ true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'),\
    \ false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'),\
    \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['),\
    \ false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpscirmgdj.lua:50: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Create a function that takes a string as input which contains only\
    \ square brackets.\n-- The function should return True if and only if there is\
    \ a valid subsequence of brackets \n-- where at least one bracket in the subsequence\
    \ is nested.\n-- is_nested('[[]]') \u279E True\n-- is_nested('[]]]]]]][[[[[]')\
    \ \u279E False\n-- is_nested('[][]') \u279E False\n-- is_nested('[]') \u279E False\n\
    -- is_nested('[[][]]') \u279E True\n-- is_nested('[[]][[') \u279E True\nlocal\
    \ function is_nested(string)\n  local open_brackets = string.gsub(string, \"[\"\
    , \"\")\n  local close_brackets = string.gsub(string, \"]\", \"\")\n  local open_brackets_count\
    \ = string.len(open_brackets)\n  local close_brackets_count = string.len(close_brackets)\n\
    \  local open_brackets_count_with_open_brackets = open_brackets_count + open_brackets_count\
    \ - 1\n  local close_brackets_count_with_open_brackets = close_brackets_count\
    \ + close_brackets_count - 1\n  local open_brackets_count_with_close_brackets\
    \ = open_brackets_count + open_brackets_count + close_brackets_count - 1\n  return\
    \ open_brackets_count_with_open_brackets == close_brackets_count_with_open_brackets\
    \ and open_brackets_count_with_close_brackets == close_brackets_count_with_open_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n\
    \    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'),\
    \ false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'),\
    \ false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'),\
    \ false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'),\
    \ false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['),\
    \ true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ogjzahh.lua:11:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp5ogjzahh.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp5ogjzahh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
