language: lua
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn*p + p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmekqtdld.lua:21:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpmekqtdld.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t+p, p)\n  elseif t > 0 then\n    return\
    \ modp(t-p, p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then\n    return 1\n  else\n    return modp(n - nn*p, p)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9oepra2i.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp9oepra2i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then return n end\n  local r = n % p\n  if r == 0 then return n\
    \ end\n  if r > 0 then\n    return modp(nn, p)\n  else\n    return modp(nn - 1,\
    \ p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9v1zvwf.lua:28:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmpw9v1zvwf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqg66g_kt.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqg66g_kt.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpqg66g_kt.lua:16: in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpqg66g_kt.lua:16: in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16: in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16: in upvalue 'modp'\n\t/tmp/tmpqg66g_kt.lua:16:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpqg66g_kt.lua:16: in local 'candidate'\n\t\
    /tmp/tmpqg66g_kt.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.250\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t + p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1oc52een.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmp1oc52een.lua:20: in local 'candidate'\n\t\
    /tmp/tmp1oc52een.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  local q = modp(n /\
    \ p, p)\n  if n % p == 0 then return q else return q + p end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3vmozdd7.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp3vmozdd7.lua:15: in upvalue 'modp'\n\
    \t/tmp/tmp3vmozdd7.lua:15: in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15: in upvalue\
    \ 'modp'\n\t/tmp/tmp3vmozdd7.lua:15: in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15: in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15: in upvalue 'modp'\n\t/tmp/tmp3vmozdd7.lua:15:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmp3vmozdd7.lua:15: in local 'candidate'\n\t\
    /tmp/tmp3vmozdd7.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.200\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local r = n % p\n  if r == 0 then\n    return r\n  else\n\
    \    return modp(r, p) * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgv6tvysx.lua:24:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpgv6tvysx.lua:24: in upvalue 'modp'\n\
    \t/tmp/tmpgv6tvysx.lua:24: in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24: in upvalue\
    \ 'modp'\n\t/tmp/tmpgv6tvysx.lua:24: in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24:\
    \ in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24: in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24:\
    \ in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24: in upvalue 'modp'\n\t/tmp/tmpgv6tvysx.lua:24:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpgv6tvysx.lua:24: in local 'candidate'\n\t\
    /tmp/tmpgv6tvysx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.180\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gr6r82.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpg6gr6r82.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = n *\
    \ n\n  local p2 = p * p\n  if p2 > n2 then return n end\n  if p2 < n2 then return\
    \ p end\n  local r = n % p\n  r = r * p % p\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv06e7a7u.lua:26:\
    \ expected: 2, actual: 101\nstack traceback:\n\t/tmp/tmpv06e7a7u.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local d = n - nn\n  if d <=\
    \ p then\n    return nn\n  else\n    return modp(d, p) + p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjkgm6rm.lua:29:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmpqjkgm6rm.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t * p + p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjaiqrisc.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpjaiqrisc.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmpjaiqrisc.lua:20: in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmpjaiqrisc.lua:20: in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20: in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20: in upvalue 'modp'\n\t/tmp/tmpjaiqrisc.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpjaiqrisc.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpjaiqrisc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7quxvxl.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpg7quxvxl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q * p\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcqdgz52.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpdcqdgz52.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpdcqdgz52.lua:22: in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpdcqdgz52.lua:22: in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22: in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22: in upvalue 'modp'\n\t/tmp/tmpdcqdgz52.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpdcqdgz52.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpdcqdgz52.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local q\n  if\
    \ p == 0 then\n    q = n\n  else\n    q = n % p\n    if q == 0 then\n      q =\
    \ p\n    end\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd_05wi3.lua:29:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpcd_05wi3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t + p, p)\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna0cwba6.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpna0cwba6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 1\n  end\n  if p == n or p == 1 or p == -1 then\n    return 0\n  end\n\
    \  local q = modp(n / p, p)\n  if q * p > n then\n    return q * p\n  end\n  return\
    \ q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovzvrydv.lua:25:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpovzvrydv.lua:25: in upvalue 'modp'\n\
    \t/tmp/tmpovzvrydv.lua:25: in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25: in upvalue\
    \ 'modp'\n\t/tmp/tmpovzvrydv.lua:25: in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25:\
    \ in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25: in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25:\
    \ in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25: in upvalue 'modp'\n\t/tmp/tmpovzvrydv.lua:25:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpovzvrydv.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpovzvrydv.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.260 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp53_aklgx.lua:84: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  if nn >= p then\n    return\
    \ nn\n  end\n  local q = math.floor((p - nn) / p)\n  if q == 0 then\n    return\
    \ nn\n  end\n  if q == 1 then\n    return n + p\n  end\n  return modp(n - p *\
    \ q, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgasu8erc.lua:34:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmpgasu8erc.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4mkws3o.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpd4mkws3o.lua:14: in upvalue 'modp'\n\
    \t/tmp/tmpd4mkws3o.lua:14: in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14: in upvalue\
    \ 'modp'\n\t/tmp/tmpd4mkws3o.lua:14: in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14:\
    \ in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14: in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14:\
    \ in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14: in upvalue 'modp'\n\t/tmp/tmpd4mkws3o.lua:14:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpd4mkws3o.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpd4mkws3o.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.250 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2)\n  local n4 = n2 - n3\n  local\
    \ n5 = math.floor(n4)\n  local n6 = n4 - n5\n  local n7 = math.floor(n6)\n  local\
    \ n8 = n6 - n7\n  local n9 = math.floor(n8)\n  local n10 = n8 - n9\n  local n11\
    \ = math.floor(n10)\n  local n12 = n10 - n11\n  local n13 = math.floor(n12)\n\
    \  local n14 = n12 - n13\n  local n15 = math.floor(n14)\n  local n16 = n14 - n15\n\
    \  local n17 = math.floor(n16)\n  local n18 = n16 - n17\n  local n19 = math.floor(n18)\n\
    \  local n20 = n18 - n19\n  local n21 = math.floor(n20)\n  local n22 = n20 - n21\n\
    \  local n23 = math.floor(n22)\n  local n24 = n22 - n23\n  local n25 = math.floor(n24)\n\
    \  local n26 = n24 - n25\n  local n27 = math.floor(n26)\n  local n28 = n26 - n27\n\
    \  local n29 = math.floor(n28)\n  local n30 = n28 - n29\n  local n31 = math.floor(n30)\n\
    \  local n32 = n30 - n31\n  local n33 = math.floor(n32)\n  local n34 = n32 - n33\n\
    \  local n35 = math.floor(n34)\n  local n36 = n34 - n35\n  local n37 = math.floor(n36)\n\
    \  local n38 = n36 - n37\n  local n39 = math.floor(n38)\n  local n40 = n38 - n39\n\
    \  local n41 = math.floor(n40)\n  local n42 = n40 - n41\n  local n43 = math.floor(n42)\n\
    \  local n44 = n42 - n43\n  local n45 = math.floor(n44)\n  local n46 = n44 - n45\n\
    \  local n47 = math.floor(n46)\n  local n48 = n46 - n47\n  local n49 = math.floor(n48)\n\
    \  local n50 = n48 - n49\n  local n51 = math.floor(n50)\n  local n5\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaoh5bgtk.lua:78: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpla36mvn0.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpla36mvn0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.250 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn == 0 then return 1 end\n  local r = n % p\n  return r + modp(nn, p)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx87c3br3.lua:22:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpx87c3br3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = nn + p - 1\n  if nn < 0 then\n    return 0\n  elseif nn >= p then\n\
    \    return 1\n  else\n    return math.floor((n - nn) / p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwrtcv02.lua:27:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpwwrtcv02.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p < n then return modp(n - p, p) end\n  return modp(n - p, p)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * q + p\n  else\n\
    \    return q * q\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpym750sos.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpym750sos.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpym750sos.lua:16: in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpym750sos.lua:16: in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16: in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16: in upvalue 'modp'\n\t/tmp/tmpym750sos.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpym750sos.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpym750sos.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t + p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1oc52een.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20: in upvalue 'modp'\n\t/tmp/tmp1oc52een.lua:20:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmp1oc52een.lua:20: in local 'candidate'\n\t\
    /tmp/tmp1oc52een.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqy33bh8n.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqy33bh8n.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local p = p or 1\n  local r = math.floor((nn + p - 1) / p)\n  return r * p\
    \ + (nn * p + r - 1) % (p * p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5005g0_7.lua:22:\
    \ expected: 3, actual: 20\nstack traceback:\n\t/tmp/tmp5005g0_7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqf6scxtw.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqf6scxtw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 *\
    \ p\n  return n1 * p + n3 * p + n4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6gr6r82.lua:23:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpg6gr6r82.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local t = modpow(n, p - 1, p) -- t <= p\n  return t % p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsht9pw3q.lua:14:\
    \ attempt to call a nil value (global 'modpow')\nstack traceback:\n\t/tmp/tmpsht9pw3q.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsht9pw3q.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n2 = n *\
    \ n\n  local p2 = p * p\n  if p2 > n2 then\n    return modp(n2, p)\n  elseif p2\
    \ < n2 then\n    return modp(n, p)\n  else\n    return n - (n % p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    return n % p\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphra4q5si.lua:28:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphra4q5si.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    return n % p\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphra4q5si.lua:28:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphra4q5si.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3\n\
    \  local n5 = math.floor(n4 / p)\n  local n6 = n4 - n5\n  return n1 * p + n3 *\
    \ p + n5 * p + n6\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h3xqz9.lua:25:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmp12h3xqz9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t - 1, p) + p\n  else\n    return t\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv61h6bk.lua:24:\
    \ expected: 3, actual: 15\nstack traceback:\n\t/tmp/tmpwv61h6bk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * q\n  else\n\
    \    return q * q + p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kmnq7pt.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp4kmnq7pt.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmp4kmnq7pt.lua:16: in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16: in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16: in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16: in upvalue 'modp'\n\t/tmp/tmp4kmnq7pt.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp4kmnq7pt.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp4kmnq7pt.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  else\n    local r = n % p\n    return r + modp(r + 1, p) if r <\
    \ p else r\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptg7p365j.lua:21: ''end'' expected (to close ''if'' at line
    13) near ''if''

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p == -1 then\n    return -1\n  end\n  local r = 1\n\
    \  while n >= p do\n    r = r * p % n\n    local m = n / p\n    n = m\n  end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xyygfdy.lua:37:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp5xyygfdy.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return t + p\n  else\n    return t\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotnmljd4.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpotnmljd4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t+p, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6f15rax.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpr6f15rax.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == -1 then\n\
    \    return n ^ -1\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * q\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2x5_vbsv.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2x5_vbsv.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmp2x5_vbsv.lua:22: in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22: in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22: in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22: in upvalue 'modp'\n\t/tmp/tmp2x5_vbsv.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp2x5_vbsv.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2x5_vbsv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.210 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  local q = 1\n  while q < n do\n    q = q * p % p\n  end\n\
    \  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  if p == -1 then return\
    \ modp(n * -1, p) end\n  local q = modp(n / p, p)\n  if n % p == 0 then return\
    \ q end\n  return q + modp((n % p) * p, p)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppas5l35x.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmppas5l35x.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmppas5l35x.lua:16: in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmppas5l35x.lua:16: in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16: in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16: in upvalue 'modp'\n\t/tmp/tmppas5l35x.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmppas5l35x.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmppas5l35x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n - p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp193vx3v8.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp193vx3v8.lua:15: in upvalue 'modp'\n\
    \t/tmp/tmp193vx3v8.lua:15: in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15: in upvalue\
    \ 'modp'\n\t/tmp/tmp193vx3v8.lua:15: in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15: in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15: in upvalue 'modp'\n\t/tmp/tmp193vx3v8.lua:15:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp193vx3v8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp193vx3v8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.210 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= p do\n    if n % t == 0 then\n      return t\n    end\n    t = t\
    \ * 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptebmxtxz.lua:26:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmptebmxtxz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n    return 1\n  elseif p ==\
    \ 1 then\n    return n\n  elseif p == 0 then\n    return 0\n  end\n  local t =\
    \ 1\n  local r = 1\n  while n ~= 0 do\n    if n % 2 == 1 then\n      r = r * t\n\
    \    end\n    t = t * p\n    n = n / 2\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r5goqpw.lua:46:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp8r5goqpw.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then\n    return 1\n  elseif nn == 0 then\n    return 0\n  else\n\
    \    return n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfxlu_4t.lua:26:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmptfxlu_4t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 1\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp092leypy.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp092leypy.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmp092leypy.lua:22: in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmp092leypy.lua:22: in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22: in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22: in upvalue 'modp'\n\t/tmp/tmp092leypy.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp092leypy.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp092leypy.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 0 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcnrh38l6.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpcnrh38l6.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpcnrh38l6.lua:16: in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpcnrh38l6.lua:16: in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16: in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16: in upvalue 'modp'\n\t/tmp/tmpcnrh38l6.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpcnrh38l6.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpcnrh38l6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while n > p do\n    t = t * p\n    n = n - 1\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagi0ng8n.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmpagi0ng8n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    elseif n == 1 then\n      return\
    \ p\n    else\n      return n % p\n    end\n  end\n  return f\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdaigdun4.lua:28:\
    \ expected: 3, actual: function: 0x563c6e3024c0\nstack traceback:\n\t/tmp/tmpdaigdun4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  local q = modp(n / p, p)\n  return q * p + n % p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvqemqm9.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpjvqemqm9.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpjvqemqm9.lua:16: in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpjvqemqm9.lua:16: in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16: in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16: in upvalue 'modp'\n\t/tmp/tmpjvqemqm9.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpjvqemqm9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjvqemqm9.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn == n then return n end\n  local d = p - nn\n  if d < 0 then return modp(n\
    \ - nn + d, p) end\n  if d > 0 then return modp(nn, p) end\n  return nn\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkj4py5y.lua:25:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmphkj4py5y.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  if nn == 0 then\n    return\
    \ 1\n  end\n  local dp = p\n  while dp > 1 do\n    dp = dp/2\n  end\n  if dp <\
    \ 1 then\n    return 0\n  end\n  local nn = nn\n  while nn > 0 do\n    if nn %\
    \ p == 0 then\n      return nn\n    end\n    nn = nn/2\n  end\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgrajahp.lua:40:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmptgrajahp.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  if nn < 0 then\n    return modp(-n, p)\n  end\n\
    \  if nn == 0 then\n    return 1\n  end\n  local d = p - n\n  if d < 0 then\n\
    \    return modp(-n, p)\n  end\n  if d == 0 then\n    return nn\n  end\n  local\
    \ t = modp(n / d, p)\n  if n % d == 0 then\n    return t\n  end\n  return t +\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypmx79vb.lua:38:\
    \ expected: 3, actual: 6.5\nstack traceback:\n\t/tmp/tmpypmx79vb.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + p end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3fg2pn0.lua:15:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpt3fg2pn0.lua:15: in upvalue 'modp'\n\
    \t/tmp/tmpt3fg2pn0.lua:15: in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15: in upvalue\
    \ 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15: in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15: in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15:\
    \ in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15: in upvalue 'modp'\n\t/tmp/tmpt3fg2pn0.lua:15:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpt3fg2pn0.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpt3fg2pn0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.190 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3\n\
    \  local n5 = math.floor(n4 / p)\n  local n6 = n4 - n5\n  return n1 * p + n3 *\
    \ p^2 + n5 * p^3 + n6 * p^4\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproyzw47p.lua:25:\
    \ expected: 3, actual: 15.0\nstack traceback:\n\t/tmp/tmproyzw47p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  if p == -1 then return\
    \ modp(n, -p) end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n\
    \  return q * p + modp(n % p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8tos0u4a.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp8tos0u4a.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmp8tos0u4a.lua:16: in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmp8tos0u4a.lua:16: in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16: in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16: in upvalue 'modp'\n\t/tmp/tmp8tos0u4a.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp8tos0u4a.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp8tos0u4a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local function\
    \ f(n)\n    if n == 0 then\n      return 1\n    end\n    if p == 0 then\n    \
    \  return 0\n    end\n    if p == 1 then\n      return n\n    end\n    if p <\
    \ 0 then\n      p = -p\n      n = -n\n    end\n    local r = n % p\n    return\
    \ f(r) + f(p-n)\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6i_abad.lua:28:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpf6i_abad.lua:28: in upvalue 'f'\n\
    \t/tmp/tmpf6i_abad.lua:28: in upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28: in upvalue\
    \ 'f'\n\t/tmp/tmpf6i_abad.lua:28: in upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28: in\
    \ upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28: in upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28:\
    \ in upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28: in upvalue 'f'\n\t/tmp/tmpf6i_abad.lua:28:\
    \ in upvalue 'f'\n\t...\t(skipping 333300 levels)\n\t/tmp/tmpf6i_abad.lua:28:\
    \ in function </tmp/tmpf6i_abad.lua:13>\n\t(...tail calls...)\n\t/tmp/tmpf6i_abad.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.200 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:gsub(\"^0+(.-)$\", \"%1\")\n  local\
    \ pp = pp:gsub(\"^0+(.-)$\", \"%1\")\n  local nn = tonumber(nn)\n  local pp =\
    \ tonumber(pp)\n  if nn == 0 then return 1 end\n  if pp ~= 0 then\n    local r\
    \ = math.floor((pp - nn) / p)\n    return r * p + (nn % p)\n  else\n    return\
    \ nn\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbwihki1.lua:32:\
    \ expected: 2, actual: -919\nstack traceback:\n\t/tmp/tmpgbwihki1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10cii723.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp10cii723.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp10cii723.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == 2 then return n end\n  if p == 3 then return\
    \ n % p end\n  if p == 4 then return n % n % p end\n  if p == 5 then return n\
    \ % n % n % p end\n  if p == 6 then return n % n % n % n % p end\n  if p == 7\
    \ then return n % n % n % n % n % p end\n  if p == 8 then return n % n % n % n\
    \ % n % n % p end\n  if p == 9 then return n % n % n % n % n % n % n % p end\n\
    \  if p == 10 then return n % n % n % n % n % n % n % n % n % p end\n  if p ==\
    \ 11 then return n % n % n % n % n % n % n % n % n % n % p end\n  if p == 12 then\
    \ return n % n % n % n % n % n % n % n % n % n % n % n % p end\n  if p == 13 then\
    \ return n % n % n % n % n % n % n % n % n % n % n % n % n % p end\n  if p ==\
    \ 14 then return n % n % n % n % n % n % n % n % n % n % n % n % n % n % p end\n\
    \  if p == 15 then return n % n % n % n % n % n % n % n % n % n % n % n % n %\
    \ n % n % p end\n  if p == 16 then return n % n % n % n % n % n % n % n % n %\
    \ n % n % n % n % n % n % n % p end\n  if p == 17 then return n % n % n % n %\
    \ n % n % n % n % n % n % n % n % n % n % n % n % n % p end\n  if p == 18 then\
    \ return n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % p\
    \ end\n  if p == 19 then return n % n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % p end\n  if p == 20 then return n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % n % n % n % n % n % p end\n  if p == 21 then return\
    \ n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % p end\n\
    \  if p == 22 then return n % n % n % n % n % n % n % n % n % n % n % n % n %\
    \ n % n % n % n % n % n % p end\n  if p == 23 then return n % n % n % n % n %\
    \ n % n % n % n % n % n % n % n % n % n % n % n % n % p end\n  if p == 24 then\
    \ return n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n % n\
    \ % p end\n  if p == 25 then return n % n % n % n % n % n % n % n % n % n % n\
    \ % n % n % n % n % n % n % n % p end\n  if p == 26 then return n % n % n % n\
    \ % n % n % n % n % n % \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphjr9h7rj.lua:39: ''end'' expected (to close ''if'' at line
    38) near ''=''

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local q\n  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p ==\
    \ -1 then\n    return -n\n  end\n  q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * p + n\n  else\n    return q * p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqcxw_ee.lua:21:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmphqcxw_ee.lua:21: in upvalue 'modp'\n\
    \t/tmp/tmphqcxw_ee.lua:21: in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21: in upvalue\
    \ 'modp'\n\t/tmp/tmphqcxw_ee.lua:21: in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21:\
    \ in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21: in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21:\
    \ in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21: in upvalue 'modp'\n\t/tmp/tmphqcxw_ee.lua:21:\
    \ in upvalue 'modp'\n\t...\t(skipping 249972 levels)\n\t/tmp/tmphqcxw_ee.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmphqcxw_ee.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.160 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  local r = 1\n  while t <= n do\n    r = r * p % t\n    t = t + 1\n  end\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1rm_h8q.lua:25:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpz1rm_h8q.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > p do\n    r = r * p % n\n    n = n / p\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v8g3mh7.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp4v8g3mh7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqy33bh8n.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22: in upvalue 'modp'\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpqy33bh8n.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqy33bh8n.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.240 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnict4dgz.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpnict4dgz.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpnict4dgz.lua:16: in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpnict4dgz.lua:16: in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16: in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16: in upvalue 'modp'\n\t/tmp/tmpnict4dgz.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpnict4dgz.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpnict4dgz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqf6scxtw.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22: in upvalue 'modp'\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpqf6scxtw.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqf6scxtw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvd0gms8.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmplvd0gms8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpla36mvn0.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16: in upvalue 'modp'\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpla36mvn0.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpla36mvn0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.250 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return t + p\n  else\n    return t\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotnmljd4.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpotnmljd4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 or p == 2 then return\
    \ n end\n  if p == 3 then return n % p end\n  if p == n then return p end\n  local\
    \ q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p + p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphazomp2m.lua:26:\
    \ expected: 3, actual: 288083723360539569\nstack traceback:\n\t/tmp/tmphazomp2m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:len() - 1 -- remove sign\n  local pp\
    \ = pp:len() - 1 -- remove sign\n  local nn = tonumber(nn)\n  local pp = tonumber(pp)\n\
    \  if nn == 0 then return 0 end\n  if pp == 0 then return 1 end\n  if nn > pp\
    \ then return modp(n - 1, p) end\n  if nn == pp then return n end\n  return modp(n\
    \ - 1, p) + modp(nn, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4piosf61.lua:29:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp4piosf61.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    return modp(t+p, p)\n  else\n    return t\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6f15rax.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpr6f15rax.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  if p < n then\n    return modp(n - p, p)\n  end\n  return\
    \ modp((n - p) + p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + p\n  else\n\
    \    return q * p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvi0yi6no.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvi0yi6no.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpvi0yi6no.lua:16: in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpvi0yi6no.lua:16: in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16: in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16: in upvalue 'modp'\n\t/tmp/tmpvi0yi6no.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpvi0yi6no.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvi0yi6no.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.190 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local r = n % p\n  if r == 0 then return modp(n, p - 1) end\n  return modp(n,\
    \ p) + r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5e4qbbdz.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp5e4qbbdz.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmp5e4qbbdz.lua:18: in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18: in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18: in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18: in upvalue 'modp'\n\t/tmp/tmp5e4qbbdz.lua:18:\
    \ in upvalue 'modp'\n\t...\t(skipping 249972 levels)\n\t/tmp/tmp5e4qbbdz.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp5e4qbbdz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.210 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p == -1 then return -n end\n  if p == -n then return -p end\n  if p == -2\
    \ then return modp(-n, p) end\n  if p == -3 then return modp(-n, p) end\n  if\
    \ p == -4 then return modp(-n, p) end\n  if p == -5 then return modp(-n, p) end\n\
    \  if p == -6 then return modp(-n, p) end\n  if p == -7 then return modp(-n, p)\
    \ end\n  if p == -8 then return modp(-n, p) end\n  if p == -9 then return modp(-n,\
    \ p) end\n  if p == -10 then return modp(-n, p) end\n  if p == -11 then return\
    \ modp(-n, p) end\n  if p == -12 then return modp(-n, p) end\n  if p == -13 then\
    \ return modp(-n, p) end\n  if p == -14 then return modp(-n, p) end\n  if p ==\
    \ -15 then return modp(-n, p) end\n  if p == -16 then return modp(-n, p) end\n\
    \  if p == -17 then return modp(-n, p) end\n  if p == -18 then return modp(-n,\
    \ p) end\n  if p == -19 then return modp(-n, p) end\n  if p == -20 then return\
    \ modp(-n, p) end\n  if p == -21 then return modp(-n, p) end\n  if p == -22 then\
    \ return modp(-n, p) end\n  if p == -23 then return modp(-n, p) end\n  if p ==\
    \ -24 then return modp(-n, p) end\n  if p == -25 then return modp(-n, p) end\n\
    \  if p == -26 then return modp(-n, p) end\n  if p == -27 then return modp(-n,\
    \ p) end\n  if p == -28 then return modp(-n, p) end\n  if p == -29 then return\
    \ modp(-n, p) end\n  if p == -30 then return modp(-n, p) end\n  if p == -31 then\
    \ return modp(-n, p) end\n  if p == -32 then return modp(-n, p) end\n  if \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3j9u36ss.lua:50: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  local m = math.pow(2, n)\n  if m == 0 then\n\
    \    return 1\n  else\n    return m % p\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44kj350h.lua:36:\
    \ expected: 2, actual: #NaN\nstack traceback:\n\t/tmp/tmp44kj350h.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= n do\n    local r = n % p\n    n, p = p, r\n  end\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqpnsqpq2.lua:12:\
    \ attempt to perform 'n%0'\nstack traceback:\n\t/tmp/tmpqpnsqpq2.lua:12: in local\
    \ 'candidate'\n\t/tmp/tmpqpnsqpq2.lua:24: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local t = modpow(n, p, p)\n  if t < 0 then return t end\n  if\
    \ t > p then return p end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54hjaj2q.lua:14:\
    \ attempt to call a nil value (global 'modpow')\nstack traceback:\n\t/tmp/tmp54hjaj2q.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp54hjaj2q.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- The algorithm\
    \ is based on \"Extended Euclidean algorithm\" by Melissa E. O'Neill,\n  -- see\
    \ http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  -- The algorithm\
    \ is guaranteed to terminate if n is 0 or p is 0.\n  -- The algorithm is also\
    \ guaranteed to terminate if n is 1 or p is 1.\n  -- The algorithm is guaranteed\
    \ to terminate if n is negative or p is negative.\n  -- The algorithm is guaranteed\
    \ to terminate if p is greater than p.\n  -- The algorithm is guaranteed to terminate\
    \ if p is less than p.\n  -- The algorithm is guaranteed to terminate if p is\
    \ equal to p.\n  -- The algorithm is guaranteed to terminate if p is equal to\
    \ 0.\n  -- The algorithm is guaranteed to terminate if n is greater than p.\n\
    \  -- The algorithm is guaranteed to terminate if n is less than p.\n  -- The\
    \ algorithm is guaranteed to terminate if n is equal to p.\n  -- The algorithm\
    \ is guaranteed to terminate if n is equal to 0.\n  -- The algorithm is guaranteed\
    \ to terminate if n is greater than p.\n  -- The algorithm is guaranteed to terminate\
    \ if n is less than p.\n  -- The algorithm is guaranteed to terminate if n is\
    \ equal to p.\n  -- The algorithm is guaranteed to terminate if n is equal to\
    \ 0.\n  -- The algorithm is guaranteed to terminate if n is greater than p.\n\
    \  -- The algorithm is guaranteed to terminate if n is less than p.\n  -- The\
    \ algorithm is guaranteed to terminate if n is equal to p.\n  -- The algorithm\
    \ is guaranteed to terminate if n is equal to 0.\n  -- The algorithm is guaranteed\
    \ to terminate if n is greater than p.\n  -- The algorithm is guaranteed to terminate\
    \ if n is less than p.\n  -- The algorithm is guaranteed to terminate if n is\
    \ equal to p.\n  -- The algorithm is guaranteed to terminate if n is equal to\
    \ 0.\n  -- The algorithm is guaranteed to terminate if n is greater than p.\n\
    \  -- The algorithm is guaranteed to terminate if n is less than p.\n  -- The\
    \ algorithm is guaranteed to terminate if n is equal to p.\n  -- The algorithm\
    \ is guaranteed to terminate if n is equal to 0.\n  -- The algorithm is guaranteed\
    \ to terminate if n is greater than p.\n  -- The algorithm is guaranteed to terminate\
    \ if n is less than p.\n  -- The algorithm is guaranteed to terminate if n is\
    \ equal to p.\n  -- The algorithm is guaranteed to terminate if n is equal to\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphkac7wv5.lua:59: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:sub(1, #nn)\n  local pp = pp:sub(1,\
    \ #pp)\n  local nn = tonumber(nn)\n  local pp = tonumber(pp)\n  if nn == 0 then\
    \ return 0 end\n  if pp == 0 then return 1 end\n  if pp > nn then return modp(pp,\
    \ n) end\n  if pp < nn then return modp(nn, p) end\n  local t = 1\n  local i =\
    \ 1\n  while i <= pp do\n    t = t * n\n    i = i + 1\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 or p == -1 then return n end\n  local m = n % p\n\
    \  if m == 0 then return modp(n / p, p) end\n  return modp(m, p) * p + n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7rb5mkkz.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp7rb5mkkz.lua:17: in upvalue 'modp'\n\
    \t/tmp/tmp7rb5mkkz.lua:17: in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17: in upvalue\
    \ 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17: in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17:\
    \ in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17: in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17:\
    \ in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17: in upvalue 'modp'\n\t/tmp/tmp7rb5mkkz.lua:17:\
    \ in upvalue 'modp'\n\t...\t(skipping 249972 levels)\n\t/tmp/tmp7rb5mkkz.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp7rb5mkkz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.150 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < 0 then\n    return modp((p\
    \ - t), p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800178
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ t\n  else\n    return t * p\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5llb82v.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmps5llb82v.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmps5llb82v.lua:20: in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmps5llb82v.lua:20: in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20: in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20: in upvalue 'modp'\n\t/tmp/tmps5llb82v.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmps5llb82v.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmps5llb82v.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.190 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local nn = nn + 1 -- Make it positive.\n  local r = n % p\n  if r == 0 then\n\
    \    return nn\n  else\n    return modp(nn, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqseug44.lua:26:\
    \ expected: 3, actual: 6\nstack traceback:\n\t/tmp/tmpiqseug44.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == -1 then\n\
    \    return n % p\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n \
    \   return q * q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr1hmzu4o.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpr1hmzu4o.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmpr1hmzu4o.lua:22: in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22: in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22: in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22: in upvalue 'modp'\n\t/tmp/tmpr1hmzu4o.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpr1hmzu4o.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpr1hmzu4o.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.190 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then\n    return modp(-n, p)\n  end\n  local dp = p - n\n  if dp\
    \ < 0 then\n    return modp(-n, p)\n  end\n  if dp == 0 then\n    return 1\n \
    \ end\n  local t = modp(n - nn, p)\n  if t < 0 then\n    return t\n  end\n  return\
    \ t + dp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxb2x7xm.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpdxb2x7xm.lua:13: in upvalue 'modp'\n\
    \t/tmp/tmpdxb2x7xm.lua:24: in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24: in upvalue\
    \ 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24: in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24:\
    \ in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24: in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24:\
    \ in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24: in upvalue 'modp'\n\t/tmp/tmpdxb2x7xm.lua:24:\
    \ in upvalue 'modp'\n\t...\t(skipping 199973 levels)\n\t/tmp/tmpdxb2x7xm.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpdxb2x7xm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.100 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + q\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4slsi6et.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp4slsi6et.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmp4slsi6et.lua:20: in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmp4slsi6et.lua:20: in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20: in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20: in upvalue 'modp'\n\t/tmp/tmp4slsi6et.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp4slsi6et.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp4slsi6et.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + p\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_bstng3.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp9_bstng3.lua:22: in upvalue 'modp'\n\
    \t/tmp/tmp9_bstng3.lua:22: in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22: in upvalue\
    \ 'modp'\n\t/tmp/tmp9_bstng3.lua:22: in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22: in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22:\
    \ in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22: in upvalue 'modp'\n\t/tmp/tmp9_bstng3.lua:22:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp9_bstng3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp9_bstng3.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.150 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\n\
    \    return 1\n  elseif n == 1 then\n    return p\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7csvyj8p.lua:25:\
    \ expected: 3, actual: #Inf\nstack traceback:\n\t/tmp/tmp7csvyj8p.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = 1\n  while q < p do\n    q = q * 2\n  end\n  return\
    \ n % p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_sj95e0.lua:25:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpe_sj95e0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = n %\
    \ p\n  if r == 0 then\n    return 1\n  elseif r < p then\n    return modp(r +\
    \ p, p)\n  else\n    return r\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800179
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local r = n % p\n  if r == 0 then return modp(n, p - 1) end\n  return modp(n,\
    \ p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800179
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t < 0 then\n    t += p\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprz_cf_nk.lua:15: syntax error near ''+''

    '
  stdout: ''
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + p end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptbssuns.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpptbssuns.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmpptbssuns.lua:16: in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmpptbssuns.lua:16: in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16: in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16: in upvalue 'modp'\n\t/tmp/tmpptbssuns.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmpptbssuns.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpptbssuns.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.150 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return n end\n\
    \  if p == n then return p end\n  if p == -1 then return -n end\n  if p == -n\
    \ then return -p end\n  if p == -2 then return modp(-n, p) end\n  if p == -3 then\
    \ return modp(-n, p) end\n  if p == -4 then return modp(-n, p) end\n  if p ==\
    \ -5 then return modp(-n, p) end\n  if p == -6 then return modp(-n, p) end\n \
    \ if p == -7 then return modp(-n, p) end\n  if p == -8 then return modp(-n, p)\
    \ end\n  if p == -9 then return modp(-n, p) end\n  if p == -10 then return modp(-n,\
    \ p) end\n  if p == -11 then return modp(-n, p) end\n  if p == -12 then return\
    \ modp(-n, p) end\n  if p == -13 then return modp(-n, p) end\n  if p == -14 then\
    \ return modp(-n, p) end\n  if p == -15 then return modp(-n, p) end\n  if p ==\
    \ -16 then return modp(-n, p) end\n  if p == -17 then return modp(-n, p) end\n\
    \  if p == -18 then return modp(-n, p) end\n  if p == -19 then return modp(-n,\
    \ p) end\n  if p == -20 then return modp(-n, p) end\n  if p == -21 then return\
    \ modp(-n, p) end\n  if p == -22 then return modp(-n, p) end\n  if p == -23 then\
    \ return modp(-n, p) end\n  if p == -24 then return modp(-n, p) end\n  if p ==\
    \ -25 then return modp(-n, p) end\n  if p == -26 then return modp(-n, p) end\n\
    \  if p == -27 then return modp(-n, p) end\n  if p == -28 then return modp(-n,\
    \ p) end\n  if p == -29 then return modp(-n, p) end\n  if p == -30 then return\
    \ modp(-n, p) end\n  if p == -31 then return modp(-n, p) end\n  if p == -32 then\
    \ return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3e2e__3v.lua:50: ''end'' expected (to close ''if'' at line
    49) near ''=''

    '
  stdout: ''
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return q * p\
    \ + p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10cii723.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\
    \t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue\
    \ 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16: in upvalue 'modp'\n\t/tmp/tmp10cii723.lua:16:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmp10cii723.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp10cii723.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.230 seconds, 0 successes, 1 error\n"
  timestamp: 1659800173
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0qom4cv.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\
    \t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue\
    \ 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18: in upvalue 'modp'\n\t/tmp/tmpa0qom4cv.lua:18:\
    \ in upvalue 'modp'\n\t...\n\t/tmp/tmpa0qom4cv.lua:18: in local 'candidate'\n\t\
    /tmp/tmpa0qom4cv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.220\
    \ seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxoh4a9_.lua:24:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpkxoh4a9_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  if p > n then return modp(n, p - 1) end\n  if p < n then return modp(n, p +\
    \ 1) end\n  return modp(n - p, p)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgml6v3xh.lua:25:\
    \ expected: 2, actual: 1101\nstack traceback:\n\t/tmp/tmpgml6v3xh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  if n < 0 then\n    error('modp: n must be\
    \ positive')\n  end\n  if p == 0 then\n    error('modp: p must be positive')\n\
    \  end\n  if p == 1 then\n    return n\n  end\n  -- Return 2^n modulo p (be aware\
    \ of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n\
    \  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100,\
    \ 101)\n  -- 1\n  local function mod2(n)\n    -- Return 2^n modulo p (be aware\
    \ of numerics).\n    -- >>> mod2(3)\n    -- 3\n    -- >>> mod2(1101)\n    -- 2\n\
    \    -- >>> mod2(0)\n    -- 1\n    -- >>> mod2(3)\n    -- 8\n    -- >>> mod2(100)\n\
    \    -- 1\n    if n < 0 then\n      error('mod2: n must be positive')\n    end\n\
    \    if p == 1 then\n      return n\n    end\n    -- Return 2^n modulo p (be aware\
    \ of numerics).\n    -- >>> mod2(3)\n    -- 3\n    -- >>> mod2(1101)\n    -- 2\n\
    \    -- >>> mod2(0)\n    -- 1\n    -- >>> mod2(3)\n    -- 8\n    -- >>> mod2(100)\n\
    \    -- 1\n    local function mod2(n)\n      -- Return 2^n modulo p (be aware\
    \ of numerics).\n      -- >>> mod2(3)\n      -- 3\n      -- >>> mod2(1101)\n \
    \     -- 2\n      -- >>> mod2(0)\n      -- 1\n      -- >>> mod2(3)\n      -- 8\n\
    \      -- >>> mod2(100)\n      -- 1\n      if n < 0 then\n        error('mod2:\
    \ n must be positive')\n      end\n      if p == 1 then\n        return n\n  \
    \    end\n      -- Return 2^n modulo p (be aware of numerics).\n      -- >>> mod2(3)\n\
    \      -- 3\n      -- >>> mod2(1101)\n      -- 2\n      -- >>> mod2(0)\n     \
    \ -- 1\n      -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyzsojc2g.lua:112: ''end'' expected (to close ''function''
    at line 73) near <eof>

    '
  stdout: ''
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  if pp > 0 then\n    if nn >= pp then\n      return\
    \ modp(n - pp, pp)\n    else\n      return modp(nn, pp)\n    end\n  elseif nn\
    \ < 0 then\n    return modp(-nn, p)\n  else\n    return nn\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpehnrxy5p.lua:15:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpehnrxy5p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpehnrxy5p.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvd0gms8.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmplvd0gms8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  else\n    return q\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvd0gms8.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\
    \t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue\
    \ 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20: in upvalue 'modp'\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in upvalue 'modp'\n\t...\t(skipping 333299 levels)\n\t/tmp/tmplvd0gms8.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmplvd0gms8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.220 seconds, 0 successes, 1 error\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7quxvxl.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpg7quxvxl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800173
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 1\n  end\n  if p < n then\n    return modp(n, p - 1)\n  end\n  return\
    \ modp(n, p - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gaieoqc.lua:31:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp_gaieoqc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = p\n  while q > 0 do\n    if n >= q then return q\n\
    \    else q = q * 2 end\n  end\n  return 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93tthhky.lua:25:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp93tthhky.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local q\n  local\
    \ r = 1\n  while n > 0 do\n    q = n / p\n    r = r * q + n % p\n    n = q\n \
    \ end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjwctu_q.lua:26:\
    \ expected: 3, actual: 4.9406564584125e-324\nstack traceback:\n\t/tmp/tmpyjwctu_q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc_vsssl.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmphc_vsssl.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = tostring(n)\n\
    \  local pp = tostring(p)\n  local nn = nn:gsub(\"^0+(.-)$\", \"%1\")\n  local\
    \ pp = pp:gsub(\"^0+(.-)$\", \"%1\")\n  local nn = tonumber(nn)\n  local pp =\
    \ tonumber(pp)\n  if nn == 0 then return 1 end\n  if pp ~= 0 then\n    if nn <\
    \ pp then return 0 end\n    if nn > pp then return 1 end\n  end\n  local m = math.floor(nn\
    \ / pp)\n  local r = nn % pp\n  return m == 0 and r or modp(m, pp) + r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xcmuxwu.lua:32:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmp1xcmuxwu.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < 0 then\n    return modp(-t,\
    \ p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800179
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while t <= n do\n    if t % p == 0 then\n      return t\n    end\n    t = t\
    \ * 2\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp811f53_g.lua:26:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp811f53_g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800174
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return p end\n\
    \  local r = n % p\n  return modp(r, p)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659800179
