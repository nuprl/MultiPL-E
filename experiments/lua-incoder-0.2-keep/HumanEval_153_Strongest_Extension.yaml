name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    if strongest_extension_strength == 1 then\n    \
    \  return class_name .. '.' .. strongest_extension[1]\n    else\n      local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n      return class_name .. '.' ..\
    \ strongest_extension_sorted[1]\n    end\n  end\nend", "  local strongest = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest, 1)\nend", "   local strongest_extension = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      return class_name\
    \ .. '.' .. strongest_extension[1]\n   end\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extensions[strength] == nil then\n\
    \      strongest_extensions[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest_extensions[#strongest_extensions]\n  if strongest_extension == nil\
    \ then\n    return nil\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  if #strongest_extension\
    \ > 1 then\n    local strongest_extension_strength = #strongest_extension\n  \
    \  for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n        if strongest_extension_strength\
    \ > 1 then\n          strongest_extension_strength = strongest_extension_strength\
    \ - 1\n        end\n        if strongest_extension_strength == 0 then\n      \
    \    table.insert(strongest_extension, extension)\n        end\n      end\n  \
    \  end\n  end\n  return class_name .. '.' .. strongest_extension[1]\nend", " \
    \ local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strength = 0\n\tlocal extension_counter = 0\n\tfor _,\
    \ extension in ipairs(extensions) do\n\t\textension_counter = extension_counter\
    \ + 1\n\t\tlocal extension_class = class_name .. '.' .. extension\n\t\tlocal extension_strength\
    \ = GetExtensionStrength(extension_class)\n\t\tif extension_strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = extension_strength\n\t\t\tstrongest_extension\
    \ = extension_class\n\t\tend\n\tend\n\treturn strongest_extension\nend", "  local\
    \ strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest_extension[strength] ==\
    \ nil then\n      strongest_extension[strength] = extension\n    end\n  end\n\
    \  local strongest_extension_strength = #strongest_extension\n  if strongest_extension_strength\
    \ > 1 then\n    local strongest_extension_strength_sorted = {}\n    for _, extension\
    \ in ipairs(strongest_extension) do\n      table.insert(strongest_extension_strength_sorted,\
    \ extension)\n    end\n    table.sort(strongest_extension_strength_sorted)\n \
    \   strongest_extension_strength = strongest_extension_strength_sorted[1]\n  end\n\
    \  return class_name .. '.' .. strongest_extension[strongest_extension_strength]\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ if #strongest_extension == 1 then\n      return class_name .. '.' .. strongest_extension[1]\n\
    \   else\n      return class_name .. '.' .. strongest_extension[1]\n   end\nend",
  "  local cap_extensions = {}\n  local sm_extensions = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    cap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n    cap_extensions[cap][sm] = cap_extensions[cap][sm]\
    \ or -1\n    sm_extensions[sm] = sm_extensions[sm] or {}\n    sm_extensions[sm][cap]\
    \ = sm_extensions[sm][cap] or -1\n  end\n  local max_cap, min_cap = 1, 1\n  local\
    \ max_sm, min_sm = 1, 1\n  for cap, extensions in pairs(cap_extensions) do\n \
    \   for sm, strength in pairs(extensions) do\n      if strength > 0 then\n   \
    \     if max_cap < cap then\n          max_cap = cap\n        end\n        if\
    \ min_cap > cap then\n          min_cap = cap\n        end\n        if max_sm\
    \ < sm then\n          max_sm = sm\n        end\n        if min_sm > sm then\n\
    \          min_sm = sm\n        end\n      end\n    end\n  end\n  if max_cap ==\
    \ min_cap then\n    return class_name\n  else\n    return class_name .. '.' ..\
    \ max_cap .. '_' .. min_cap\n  end\nend", "  local max_strength = -1\n  local\
    \ max_extension = ''\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))..max_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ < cap_diff then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest, extension)\n\
    \      break\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n\
    \  else\n    local strongest_extension = strongest[1]\n    for _, extension in\
    \ ipairs(strongest) do\n      if extension:sub(1, #strongest_extension) == strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\n  end\nend", "  local max_strength\
    \ = -1\n  local max_extension = ''\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. max_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
