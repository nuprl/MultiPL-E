name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    if strongest_extension_strength == 1 then\n    \
    \  return class_name .. '.' .. strongest_extension[1]\n    else\n      local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n      return class_name .. '.' ..\
    \ strongest_extension_sorted[1]\n    end\n  end\nend", "  local strongest = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest, 1)\nend", "   local strongest_extension = {}\n\
    \   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      return class_name\
    \ .. '.' .. strongest_extension[1]\n   end\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extensions[strength] == nil then\n\
    \      strongest_extensions[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest_extensions[#strongest_extensions]\n  if strongest_extension == nil\
    \ then\n    return nil\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  if #strongest_extension\
    \ > 1 then\n    local strongest_extension_strength = #strongest_extension\n  \
    \  for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n        if strongest_extension_strength\
    \ > 1 then\n          strongest_extension_strength = strongest_extension_strength\
    \ - 1\n        end\n        if strongest_extension_strength == 0 then\n      \
    \    table.insert(strongest_extension, extension)\n        end\n      end\n  \
    \  end\n  end\n  return class_name .. '.' .. strongest_extension[1]\nend", " \
    \ local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strength = 0\n\tlocal extension_counter = 0\n\tfor _,\
    \ extension in ipairs(extensions) do\n\t\textension_counter = extension_counter\
    \ + 1\n\t\tlocal extension_class = class_name .. '.' .. extension\n\t\tlocal extension_strength\
    \ = GetExtensionStrength(extension_class)\n\t\tif extension_strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = extension_strength\n\t\t\tstrongest_extension\
    \ = extension_class\n\t\tend\n\tend\n\treturn strongest_extension\nend", "  local\
    \ strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest_extension[strength] ==\
    \ nil then\n      strongest_extension[strength] = extension\n    end\n  end\n\
    \  local strongest_extension_strength = #strongest_extension\n  if strongest_extension_strength\
    \ > 1 then\n    local strongest_extension_strength_sorted = {}\n    for _, extension\
    \ in ipairs(strongest_extension) do\n      table.insert(strongest_extension_strength_sorted,\
    \ extension)\n    end\n    table.sort(strongest_extension_strength_sorted)\n \
    \   strongest_extension_strength = strongest_extension_strength_sorted[1]\n  end\n\
    \  return class_name .. '.' .. strongest_extension[strongest_extension_strength]\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \         table.insert(strongest_extension, extension)\n      end\n   end\n  \
    \ if #strongest_extension == 1 then\n      return class_name .. '.' .. strongest_extension[1]\n\
    \   else\n      return class_name .. '.' .. strongest_extension[1]\n   end\nend",
  "  local cap_extensions = {}\n  local sm_extensions = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    cap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n    cap_extensions[cap][sm] = cap_extensions[cap][sm]\
    \ or -1\n    sm_extensions[sm] = sm_extensions[sm] or {}\n    sm_extensions[sm][cap]\
    \ = sm_extensions[sm][cap] or -1\n  end\n  local max_cap, min_cap = 1, 1\n  local\
    \ max_sm, min_sm = 1, 1\n  for cap, extensions in pairs(cap_extensions) do\n \
    \   for sm, strength in pairs(extensions) do\n      if strength > 0 then\n   \
    \     if max_cap < cap then\n          max_cap = cap\n        end\n        if\
    \ min_cap > cap then\n          min_cap = cap\n        end\n        if max_sm\
    \ < sm then\n          max_sm = sm\n        end\n        if min_sm > sm then\n\
    \          min_sm = sm\n        end\n      end\n    end\n  end\n  if max_cap ==\
    \ min_cap then\n    return class_name\n  else\n    return class_name .. '.' ..\
    \ max_cap .. '_' .. min_cap\n  end\nend", "  local max_strength = -1\n  local\
    \ max_extension = ''\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))..max_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ < cap_diff then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest, extension)\n\
    \      break\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n\
    \  else\n    local strongest_extension = strongest[1]\n    for _, extension in\
    \ ipairs(strongest) do\n      if extension:sub(1, #strongest_extension) == strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\n  end\nend", "  local max_strength\
    \ = -1\n  local max_extension = ''\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  local max_extension = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local extension_strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if max_strength\
    \ < extension_strength then\n      max_strength = extension_strength\n      max_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(max_extension)) + max_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local cap_extensions = {}\n  local sm_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_cap, min_cap = 1, 1\n  local max_sm, min_sm = 1, 1\n  for cap, extensions\
    \ in pairs(cap_extensions) do\n    for sm, strength in pairs(extensions) do\n\
    \      if strength > max_cap then\n        max_cap = strength\n      end\n   \
    \   if strength < min_cap then\n        min_cap = strength\n      end\n      if\
    \ strength > max_sm then\n        max_sm = strength\n      end\n      if strength\
    \ < min_sm then\n        min_sm = strength\n      end\n    end\n  end\n  if max_cap\
    \ > min_cap then\n    return class_name .. '.' .. string.lower(max_sm)\n  end\n\
    \  if max_sm > min_sm then\n    return class_name .. '.' .. string.upper(max_cap)\n\
    \  end\n  return class_name\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n\
    \    end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest)[1]\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "   local strongest_extension = {}\n   local capitals =\
    \ {}\n   local lowercases = {}\n   for _, extension in ipairs(extensions) do\n\
    \      local capitals_count = capitals[#capitals+1]\n      local lowercases_count\
    \ = lowercases[#lowercases+1]\n      capitals[#capitals+1] = capitals_count\n\
    \      lowercases[#lowercases+1] = lowercases_count\n      local capitals_index\
    \ = #capitals\n      local lowercases_index = #lowercases\n      local capitals_count\
    \ = capitals[capitals_index] - lowercases_count\n      local lowercases_count\
    \ = lowercases[lowercases_index] - capitals_count\n      if capitals_count > lowercases_count\
    \ then\n         strongest_extension[#strongest_extension+1] = extension\n   \
    \   else\n         strongest_extension[#strongest_extension+1] = lowercases[lowercases_index]\n\
    \      end\n   end\n   local strongest_extension_index = #strongest_extension\n\
    \   if strongest_extension_index == 1 then\n      return class_name..'.'..strongest_extension[1]\n\
    \   else\n      local strongest_extension_strength = capitals[strongest_extension_index]\
    \ - lowercases[strongest_extension_index]\n      if strongest_extension_strength\
    \ > 0 then\n         return class_name..'.'..strongest_extension[strongest_extension_index]\n\
    \      else\n         return class_name..'.'..lowercases[strongest_extension_index]\n\
    \      end\n   end\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension)\n  return class_name\
    \ .. '.' .. table.concat(strongest_extension, '.')\nend", "  local strongest_extension\
    \ = {}\n  local cap_counter = 0\n  local sml_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap_counter = cap_counter + #extension:upper()\n\
    \    local sml_counter = sml_counter + #extension:lower()\n  end\n  local strength\
    \ = cap_counter - sml_counter\n  if strength > 0 then\n    for _, extension in\
    \ ipairs(extensions) do\n      if #extension:upper() == strength then\n      \
    \  strongest_extension[#strongest_extension + 1] = extension\n      end\n    end\n\
    \  end\n  if #strongest_extension > 1 then\n    local strongest_extension_strength\
    \ = #strongest_extension\n    for _, extension in ipairs(extensions) do\n    \
    \  if #extension:upper() == strongest_extension_strength then\n        strongest_extension_strength\
    \ = #extension:lower()\n      end\n    end\n    if strongest_extension_strength\
    \ > 1 then\n      local strongest_extension_strength_counter = 0\n      for _,\
    \ extension in ipairs(extensions) do\n        if #extension:upper() == strongest_extension_strength_counter\
    \ then\n          strongest_extension_strength_counter = #extension:lower()\n\
    \        end\n      end\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n      local strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ - 1\n", "  local strongest_extension = nil\n  local max_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local max_strength = -1\n    local max_extension\n    for _, extension\
    \ in ipairs(extensions) do\n        local extension_strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n        if extension_strength\
    \ > max_strength then\n            max_strength = extension_strength\n       \
    \     max_extension = extension\n        end\n    end\n    return class_name ..\
    \ '.' .. max_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local strongest_extension = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      break\n    elseif strength > 0 then\n \
    \     strongest_extension[extension] = strength\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[#strongest_extension]\n  else\n   \
    \ local strongest_extension_strength_sorted = {}\n    for _, extension in ipairs(strongest_extension)\
    \ do\n      table.insert(strongest_extension_strength_sorted, extension)\n   \
    \ end\n    table.sort(strongest_extension_strength_sorted)\n    return class_name\
    \ .. '.' .. strongest_extension_strength_sorted[1]\n  end\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength >= 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif strongest_extension_strength > cap_diff then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return (string.upper(a)\
    \ - string.upper(b)) or (string.lower(a) - string.lower(b)) end)\n\treturn class_name\
    \ .. '.' .. table.concat(strongest_extension, '.')\nend", "   local strongest_extension\
    \ = {}\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength == 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      elseif strength < 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   table.sort(strongest_extension, function(a,\
    \ b) return strength - tonumber(a) - tonumber(b) end)\n   return class_name ..\
    \ '.' .. table.unpack(strongest_extension, 1)\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = nil\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff ~= 0 then\n\t\t\tif strongest_extension_strength == nil\
    \ then\n\t\t\t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension\
    \ = extension\n\t\t\telseif cap_diff > strongest_extension_strength then\n\t\t\
    \t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension = extension\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn string.sub(class_name, 1, #class_name-1) ..\
    \ '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      strongest_extension = extension\n      max_strength = strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      strongest_extension = extension\n      max_strength = strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  local cap_counter = 0\n  local sm_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local cap_counter = cap_counter + cap:len()\n    local sm_counter = sm_counter\
    \ + sm:len()\n    local strength = cap_counter - sm_counter\n    if strength >\
    \ 0 then\n      table.insert(strongest_extension, extension)\n    end\n  end\n\
    \  table.sort(strongest_extension)\n  return class_name .. '.' .. strongest_extension[1]\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\n\
    \    return a.strength < b.strength\n  end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength == 1 then\n    return class_name .. '.' ..\
    \ strongest_extension[1]\n  elseif strongest_extension_strength > 1 then\n   \
    \ local strongest_extension_strength_sorted = table.sort(strongest_extension_strength)\n\
    \    return class_name .. '.' .. strongest_extension_sorted[1]\n  end\nend", " \
    \   local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local cap_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    cap_extensions[#cap_extensions + 1] = extension:upper()\n  end\n  local cap_extensions_count\
    \ = #cap_extensions\n  local cap_extensions_strength = cap_extensions_count\n\
    \  for _, extension in ipairs(extensions) do\n    cap_extensions_strength = cap_extensions_strength\
    \ - #extension:lower()\n  end\n  local cap_extensions_strength_sum = cap_extensions_strength\n\
    \  for _, extension in ipairs(extensions) do\n    cap_extensions_strength_sum\
    \ = cap_extensions_strength_sum + #extension:lower()\n  end\n  local cap_extensions_strength_average\
    \ = cap_extensions_strength_sum / cap_extensions_count\n  local cap_extensions_strength_min\
    \ = cap_extensions_strength\n  for _, extension in ipairs(extensions) do\n   \
    \ cap_extensions_strength_min = cap_extensions_strength_min - #extension:lower()\n\
    \  end\n  local cap_extensions_strength_max = cap_extensions_strength\n  for _,\
    \ extension in ipairs(extensions) do\n    cap_extensions_strength_max = cap_extensions_strength_max\
    \ - #extension:lower()\n  end\n  local cap_extensions_strength_max_index = cap_extensions_strength_max\n\
    \  for _, extension in ipairs(extensions) do\n    cap_extensions_strength_max_index\
    \ = cap_extensions_strength_max_index - 1\n  end\n  local cap_extensions_strength_max_index_value\
    \ = cap_extensions_strength_max\n  for _, extension in ipairs(extensions) do\n\
    \    cap_extensions_strength_max_index_value = cap_extensions_strength_max_index_value\
    \ - #extension:lower()\n  end\n  local cap_extensions_strength_max_index_value_strength\
    \ = cap_extensions_strength_max_index_value\n  for _, extension in ipairs(extensions)\
    \ do\n    cap_extensions_strength_max_index_value_strength = cap_extensions_strength_max_index_value_strength\
    \ - #extension:lower()\n  end\n  local cap_extensions_strength_max_index_value_strength_sum\
    \ = cap_extensions_strength_max_index_value_strength\n  for _, extension in ipairs(extensions)\
    \ do\n    cap_extensions_strength_max_index_value_strength_sum = cap_extensions_strength_max_index_value_strength_sum\
    \ + #extension:lower()\n  end\n  local cap_extensions_strength_max_index_value_strength_",
  "  local strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return a:upper() - b:upper() end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extensions[strength] == nil then\n      strongest_extensions[strength]\
    \ = extension\n    else\n      local first_extension = strongest_extensions[strength]\n\
    \      if #strongest_extensions[strength] > 1 then\n        local index = #strongest_extensions[strength]\
    \ - 1\n        while index > 1 do\n          local next_extension = strongest_extensions[strength\
    \ + 1]\n          if next_extension == first_extension then\n            strongest_extensions[strength]\
    \ = next_extension\n            break\n          else\n            strongest_extensions[strength]\
    \ = next_extension\n            index -= 1\n          end\n        end\n     \
    \ end\n    end\n  end\n  return class_name .. '.' .. table.concat(strongest_extensions,\
    \ '.')\nend", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n\treturn class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "    local strongest = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest,\
    \ extension)\n        end\n    end\n    table.sort(strongest)\n    return class_name\
    \ .. '.' .. table.concat(strongest, ' ')\nend", "  local max_strength = -1\n \
    \ local max_extension = nil\n  for _, extension in ipairs(extensions) do\n   \
    \ local strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - string.len(max_extension)) + max_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local cap_diff = cap - sm\n        if cap_diff > strongest_extension_strength\
    \ then\n            strongest_extension_strength = cap_diff\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\n</cell>\n<text>\nNow let's test your function on the following examples:",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local i = #strongest_extension\n        while i > strength do\n          strongest_extension[i]\
    \ = strongest_extension[i-1]\n          i = i - 1\n        end\n        strongest_extension[strength]\
    \ = extension\n      end\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[strongest_extension_strength]\n  else\n\
    \    local strongest_extension_strength_sorted = {}\n    for _, extension in ipairs(strongest_extension)\
    \ do\n      table.insert(strongest_extension_strength_sorted, extension)\n   \
    \ end\n    table.sort(strongest_extension_strength_sorted)\n    return class_name\
    \ .. '.' .. strongest_extension_strength_sorted[1]\n  end\nend", "    local strongest_extension\
    \ = nil\n    local strongest_extension_strength = -1\n    for _, extension in\
    \ ipairs(extensions) do\n        local cap = string.upper(extension:sub(1, #extension))\n\
    \        local sm = string.lower(extension:sub((#extension) + 1))\n        local\
    \ cap_diff = cap - sm\n        if cap_diff > 0 then\n            if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n                strongest_extension_strength\
    \ = cap_diff\n                strongest_extension = extension\n            end\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest, 1)\nend", "  local cap_extensions = {}\n  local\
    \ sm_extensions = {}\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_strength = -1\n  local max_extension\n  for cap, extensions in pairs(cap_extensions)\
    \ do\n    for sm, strength in pairs(extensions) do\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = cap..'.'..sm\n\
    \      end\n    end\n  end\n  if max_strength > 0 then\n    return max_extension\n\
    \  end\n  local max_strength = -1\n  local max_extension\n  for sm, extensions\
    \ in pairs(sm_extensions) do\n    for cap, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap..'.'..sm\n      end\n    end\n  end\n  if max_strength\
    \ > 0 then\n    return max_extension\n  end\n  return nil\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal max_strength = -1\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength\
    \ then\n\t\t\tmax_strength = strength\n\t\t\tstrongest_extension = extension\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend", "\tlocal\
    \ cap = #class_name:upper()\n\tlocal sm = #class_name:lower()\n\tlocal cap_extensions\
    \ = {}\n\tlocal sm_extensions = {}\n\tfor _, extension in pairs(extensions) do\n\
    \t\tlocal cap_ext = #extension:upper()\n\t\tlocal sm_ext = #extension:lower()\n\
    \t\tif cap_ext > cap then\n\t\t\tcap_extensions[#cap_extensions + 1] = extension\n\
    \t\telseif sm_ext < sm then\n\t\t\tsm_extensions[#sm_extensions + 1] = extension\n\
    \t\telse\n\t\t\tcap_extensions[#cap_extensions + 1] = extension\n\t\t\tsm_extensions[#sm_extensions\
    \ + 1] = extension\n\t\tend\n\tend\n\tlocal strongest_extension = cap_extensions[#cap_extensions]\n\
    \tfor _, extension in pairs(sm_extensions) do\n\t\tif strongest_extension == extension\
    \ then\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn class_name\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n\treturn class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\n\
    \    return a.strength < b.strength\n  end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      -- The extension's name does not contain\
    \ any uppercase letters.\n      -- The extension's name does not contain any lowercase\
    \ letters.\n      -- The extension's name contains only digits. \n      -- The\
    \ extension's name contains only letters.\n      -- The extension's name contains\
    \ only underscores.\n      -- The extension's name contains only periods.\n  \
    \    -- The extension's name contains only colons.\n      -- The extension's name\
    \ contains only semicolons.\n      -- The extension's name contains only dashes.\n\
    \      -- The extension's name contains only slashes.\n      -- The extension's\
    \ name contains only colons and periods.\n      -- The extension's name contains\
    \ only semicolons and dashes.\n      -- The extension's name contains only slashes\
    \ and periods.\n      -- The extension's name contains only colons, periods, underscores,\
    \ \n      -- and dashes.\n      -- The extension's name contains only semicolons,\
    \ dashes, slashes, \n      -- and periods.\n      -- The extension's name contains\
    \ only periods and colons.\n      -- The extension's name contains only periods\
    \ and semicolons.\n      -- The extension's name contains only periods and dashes.\n\
    \      -- The extension's name contains only periods and slashes.\n      -- The\
    \ extension's name contains only periods and colons and slashes.\n      -- The\
    \ extension's name contains only periods and semicolons and dashes.\n      --\
    \ The extension's name contains only periods and dashes and slashes.\n      --\
    \ The extension's name contains only periods and colons and slashes.\n      --\
    \ The extension's name contains only periods and semicolons and dashes.\n    \
    \  -- The extension's name contains only periods and dashes and slashes.\n   \
    \   -- The extension's name contains only periods and colons and slashes.\n  \
    \    -- The extension's name contains only periods and semicolons and dashes.\n\
    \      -- The extension's name contains only periods and dashes and slashes.\n\
    \      -- The extension's name contains only periods and colons and slashes.\n\
    \      -- The extension's name contains only periods and semicolons and dashes.\n\
    \      -- The extension's name contains only periods and dashes and slashes.\n\
    \      -- The extension's name contains only periods and colons and ", "  local\
    \ max_strength = -1\n  local max_extension = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  local capitals = {}\n\
    \  local lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count\
    \ = #capitals\n  local lowercases_count = #lowercases\n  local strength = capitals_count\
    \ - lowercases_count\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local lc = string.lower(extension:sub(1,\
    \ #extension))\n    local diff = math.abs(cap - lc)\n    if diff > strength then\n\
    \      strongest_extension = extension\n      strength = diff\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest =\
    \ {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > 0 then\n      if strongest_extension_strength == -1 or\
    \ cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > 0 then\n      if strongest_extension_strength < cap_diff\
    \ then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)-string.len(strongest_extension)-1)\
    \ .. strongest_extension\nend", "\tlocal strongest = {}\n\tlocal max_strength\
    \ = -1\n\tlocal max_extension\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\
    \treturn string.sub(class_name, 1, #class_name-1) .. '.' .. max_extension\nend",
  "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "   local strongest_extensions = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1, #extension))\n\
    \      local sm = string.lower(extension:sub((#extension) + 1))\n      local strength\
    \ = cap - sm\n      if strongest_extensions[strength] == nil then\n         strongest_extensions[strength]\
    \ = extension\n      else\n         if #strongest_extensions[strength] > 1 then\n\
    \            local i = 1\n            while i <= #strongest_extensions[strength]\
    \ do\n               if i == 1 then\n                  strongest_extensions[strength]\
    \ = strongest_extensions[strength]:sub(1, #strongest_extensions[strength])\n \
    \              else\n                  strongest_extensions[strength] = strongest_extensions[strength]:sub(1,\
    \ #strongest_extensions[strength]) + strongest_extensions[strength]:sub((#strongest_extensions[strength])\
    \ + 1)\n               end\n               i = i + 1\n            end\n      \
    \   end\n      end\n   end\n   if #strongest_extensions > 1 then\n      local\
    \ i = 1\n      while i <= #strongest_extensions do\n         if i == 1 then\n\
    \            strongest_extensions[#strongest_extensions] = strongest_extensions[#strongest_extensions]:sub(1,\
    \ #strongest_extensions[#strongest_extensions])\n         else\n            strongest_extensions[#strongest_extensions]\
    \ = strongest_extensions[#strongest_extensions]:sub(1, #strongest_extensions[#strongest_extensions])\
    \ + strongest_extensions[#strongest_extensions]:sub((#strongest_extensions[#strongest_extensions])\
    \ + 1)\n         end\n         i = i + 1\n      end\n   end\n   return class_name\
    \ .. '.' .. strongest_extensions[1]\nend", "  local strongest_extension = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        local index = #strongest_extension\n        for i = 1, strength do\n\
    \          index = index + 1\n          assert(strongest_extension[index] == nil)\n\
    \          strongest_extension[index] = extension\n        end\n      end\n  \
    \  end\n  end\n  local index = #strongest_extension\n  assert(index > 1)\n  local\
    \ strength = index - 1\n  assert(strongest_extension[strength] == nil)\n  return\
    \ class_name .. '.' .. strongest_extension[strength]\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return a:upper() < b:upper() end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local max_strength = -1\n  local max_extension = \"\"\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local strongest = nil\n  local strongest_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_strength then\n  \
    \    strongest = class_name\n      strongest_strength = strength\n    end\n  end\n\
    \  return strongest\nend", "   local strongest_extension = {}\n   local max_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > max_strength then\n    \
    \     max_strength = strength\n         strongest_extension = extension\n    \
    \  end\n   end\n   return class_name .. '.' .. strongest_extension\nend", "  \
    \ local cap_extensions = {}\n   local sm_extensions = {}\n   for _, extension\
    \ in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,1))\n\
    \      local sm = string.lower(extension:sub(2,2))\n      cap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n      cap_extensions[cap][sm] = cap_extensions[cap][sm]\
    \ or 0\n      cap_extensions[cap][sm] = cap_extensions[cap][sm] + 1\n      sm_extensions[sm]\
    \ = sm_extensions[sm] or {}\n      sm_extensions[sm][cap] = sm_extensions[sm][cap]\
    \ or 0\n      sm_extensions[sm][cap] = sm_extensions[sm][cap] + 1\n   end\n  \
    \ local max_cap_extensions = #cap_extensions[1]\n   local max_sm_extensions =\
    \ #sm_extensions[1]\n   local max_strength = -1\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1,1))\n      local sm = string.lower(extension:sub(2,2))\n\
    \      local strength = cap_extensions[cap][sm] - sm_extensions[sm][cap]\n   \
    \   if strength > max_strength then\n         max_strength = strength\n      \
    \   max_cap_extensions = cap_extensions[cap][sm]\n         max_sm_extensions =\
    \ sm_extensions[sm][cap]\n      end\n   end\n   return class_name .. '.' .. max_cap_extensions\
    \ .. '.' .. max_sm_extensions\nend", "  local strongest_extension = {}\n  local\
    \ capitals = {}\n  local lowercases = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    capitals[#capitals + 1] = string.upper(extension:sub(1, #extension))\n\
    \    lowercases[#lowercases + 1] = string.lower(extension:sub(1, #extension))\n\
    \  end\n  local cap_strength = #capitals\n  local lcl_strength = #lowercases\n\
    \  local strength = cap_strength - lcl_strength\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local lcl\
    \ = string.lower(extension:sub(1, #extension))\n    if cap == lcl then\n     \
    \ -- The extensions are the same, choose the one that comes first in the list\n\
    \      if cap_strength > lcl_strength then\n        strongest_extension[#strongest_extension\
    \ + 1] = extension\n      else\n        strongest_extension[#strongest_extension\
    \ + 1] = extension\n      end\n    else\n      -- The extensions are different,\
    \ choose the one that comes first in the list\n      if cap_strength > lcl_strength\
    \ then\n        strongest_extension[#strongest_extension + 1] = extension\n  \
    \    else\n        strongest_extension[#strongest_extension + 1] = extension\n\
    \      end\n    end\n  end\n  if #strongest_extension > 1 then\n    -- There are\
    \ two or more extensions with the same strength, choose the one that comes first\
    \ in the list\n    strongest_extension[#strongest_extension + 1] = extensions[1]\n\
    \  end\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength == 0 then\n            error(\"The extension\
    \ '\" .. extension .. \"' is not valid.\")\n        end\n        if strongest_extension[strength]\
    \ == nil then\n            strongest_extension[strength] = extension\n       \
    \ elseif strongest_extension[strength] < extension then\n            strongest_extension[strength]\
    \ = extension\n        end\n    end\n    local strongest_extension_strength =\
    \ #strongest_extension\n    if strongest_extension_strength == 1 then\n      \
    \  return class_name .. \".\" .. strongest_extension[strongest_extension_strength]\n\
    \    else\n        local strongest_extension_strength_sorted = {}\n        for\
    \ _, extension in ipairs(strongest_extension) do\n            table.insert(strongest_extension_strength_sorted,\
    \ extension)\n        end\n        table.sort(strongest_extension_strength_sorted)\n\
    \        return class_name .. \".\" .. strongest_extension_strength_sorted[1]\n\
    \    end\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = cap - sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength >= 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for _, extension in ipairs(strongest)\
    \ do\n      if extension > strongest_extension then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local extension_strength = nil\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if extension_strength\
    \ == nil then\n        extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif extension_strength > cap_diff then\n        extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local max_strength\
    \ = -1\n    local max_extension\n    for _, extension in ipairs(strongest_extension)\
    \ do\n      local strength = string.upper(extension:sub(1, #extension)):byte()\
    \ - string.lower(extension:sub((#extension) + 1))\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = extension\n \
    \     end\n    end\n    return class_name .. '.' .. max_extension\n  end\nend",
  "  local cap_extensions = {}\n  local sml_extensions = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sml = string.lower(extension:sub(1, #extension))\n    cap_extensions[cap]\
    \ = cap_extensions[cap] or {}\n    cap_extensions[cap][sml] = cap_extensions[cap][sml]\
    \ or 1\n    sml_extensions[sml] = sml_extensions[sml] or {}\n    sml_extensions[sml][cap]\
    \ = sml_extensions[sml][cap] or 1\n  end\n  local max_cap = #cap_extensions and\
    \ #cap_extensions[#cap_extensions]\n  local max_sml = #sml_extensions and #sml_extensions[#sml_extensions]\n\
    \  if max_cap == 0 or max_sml == 0 then\n    return nil\n  end\n  local max_cap_extensions\
    \ = cap_extensions[max_cap]\n  local max_sml_extensions = sml_extensions[max_sml]\n\
    \  local max_extension = max_cap_extensions[max_sml_extensions]\n  if max_extension\
    \ == nil then\n    return nil\n  end\n  local max_extension_str = class_name ..\
    \ '.' .. max_extension\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sml = string.lower(extension:sub(1,\
    \ #extension))\n    if cap == max_cap and sml == max_sml then\n      return max_extension_str\n\
    \    end\n  end\n  return nil\nend", "  local strongest_extension = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      -- The extension\
    \ is a single letter\n      strongest_extension[extension] = extension\n    elseif\
    \ strength > 0 then\n      -- The extension is a multiple letter\n      strongest_extension[extension]\
    \ = extension\n    end\n  end\n  local max_strength = -1\n  local max_extension\n\
    \  for extension, strength in pairs(strongest_extension) do\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return string.sub(class_name, 1, #class_name-1) .. max_extension\
    \ .. '.' .. class_name\nend", "\tlocal max_strength = -1\n\tlocal max_extension\
    \ = ''\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength\
    \ = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tlocal strongest_extension_strength_pos\
    \ = nil\n\tlocal strongest_extension_strength_pos = 0\n\tlocal strongest_extension_strength_pos_count\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_max = 0\n\tlocal strongest_extension_strength_pos_count_max_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_max_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_max = 0\n\tlocal strongest_extension_strength_pos_count_max_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_max_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal strongest_extension_strength_pos_count_min_pos\
    \ = 0\n\tlocal strongest_extension_strength_pos_count_min_pos_count = 0\n\tlocal\
    \ strongest_extension_strength_pos_count_min = 0\n\tlocal str", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength >= 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension)\n\treturn class_name .. '.'\
    \ .. table.unpack(strongest_extension, 1)\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "\tlocal strongest_extension = {}\n\tlocal max_strength\
    \ = -1\n\tlocal max_extension\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\
    \treturn string.sub(class_name, 1, #class_name-1) .. '.' .. max_extension\nend",
  "  local strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      elseif strength >\
    \ #strongest_extension then\n        strongest_extension = extension\n      end\n\
    \    end\n  end\n  return string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      else\n        if strength > #strongest_extension\
    \ then\n          strongest_extension = extension\n        end\n      end\n  \
    \  end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local max_strength = -1\n  local max_extension\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. max_extension .. '.' .. max_extension\nend", "  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  local cap_counter = 0\n  local sm_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((cap + 1):len()))\n    cap_counter\
    \ = cap_counter + cap\n    sm_counter = sm_counter + sm\n  end\n  local cap_strength\
    \ = cap_counter - sm_counter\n  if cap_strength > 0 then\n    strongest_extension[class_name]\
    \ = extensions[#extensions]\n  else\n    local sm = string.lower(extension:sub((cap_counter\
    \ + 1):len()))\n    strongest_extension[class_name] = extensions[#extensions]\n\
    \  end\n  return strongest_extension\nend", "  local strongest_extension = nil\n\
    \  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      strongest_extension = extension\n      max_strength = strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tlocal extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_diff = cap - sm\n\t\tif cap_diff > extension_strength then\n\t\t\
    \tstrongest_extension_strength = cap_diff\n\t\t\tstrongest_extension = extension\n\
    \t\tend\n\t\textension_strength = extension_strength + cap\n\tend\n\treturn class_name\
    \ .. '.' .. strongest_extension_strength .. '.' .. strongest_extension\nend",
  "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    local strongests = {}\n    for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strongests[strength] == nil then\n\
    \        strongests[strength] = extension\n      end\n    end\n    local strongest_extension\
    \ = strongests[#strongests]\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strength = 0\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    extension_strength = extension_strength\
    \ + cap - sm\n    if extension_strength > strongest_extension_strength then\n\
    \      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "\tlocal strongest = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strongest[strength] == nil then\n\t\t\tstrongest[strength]\
    \ = extension\n\t\telseif strongest[strength] > extension then\n\t\t\tstrongest[strength]\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. table.concat(strongest,\
    \ ' ')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local strongest_extension_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  local max_strength = #strongest_extension\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if max_strength\
    \ > strength then\n        max_strength = strength\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension[max_strength + 1]\nend", " \
    \ local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for i = 2, #strongest do\n   \
    \   if strongest[i] ~= strongest_extension then\n        strongest_extension =\
    \ strongest[i]\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = {}\n    local cap_counter = 0\n    local\
    \ sm_counter = 0\n    for _, extension in ipairs(extensions) do\n        cap_counter\
    \ = cap_counter + #extension:upper()\n        sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    local cap_strength = cap_counter - sm_counter\n    if cap_strength\
    \ == 0 then\n        return class_name\n    end\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap_counter = 0\n        local sm_counter = 0\n        for\
    \ _, letter in ipairs(extension:upper()) do\n            cap_counter = cap_counter\
    \ + 1\n        end\n        for _, letter in ipairs(extension:lower()) do\n  \
    \          sm_counter = sm_counter + 1\n        end\n        local cap_strength\
    \ = cap_counter - sm_counter\n        if cap_strength == 0 then\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension.name = extension\n        strongest_extension.strength\
    \ = strength\n      elseif strength > strongest_extension.strength then\n    \
    \    strongest_extension.name = extension\n        strongest_extension.strength\
    \ = strength\n      end\n    end\n  end\n  if #strongest_extension > 0 then\n\
    \    return class_name .. '.' .. strongest_extension.name\n  end\nend", "  local\
    \ strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        if #strongest_extension > 1 then\n          local first_extension = strongest_extension[1]\n\
    \          if first_extension == nil then\n            strongest_extension[1]\
    \ = extension\n          else\n            local first_cap = string.upper(first_extension:sub(1,\
    \ #first_extension))\n            local first_sm = string.lower(first_extension:sub((#first_extension)\
    \ + 1))\n            local first_strength = cap - first_sm\n            if first_strength\
    \ > 0 then\n              if first_cap > cap then\n                strongest_extension[1]\
    \ = extension\n              elseif first_sm > sm then\n                strongest_extension[1]\
    \ = extension\n              else\n                strongest_extension[1] = first_extension\n\
    \              end\n            end\n          end\n        else\n          strongest_extension[1]\
    \ = extension\n        end\n      end\n    end\n  end\n  return class_name ..\
    \ '.' .. table.concat(strongest_extension, ' ')\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if #strongest_extension == 0 then\n    return class_name\n\
    \  elseif #strongest_extension == 1 then\n    return class_name .. '.' .. strongest_extension[1]\n\
    \  else\n    local strongest_extension_strength_sorted = {}\n    for _, extension\
    \ in ipairs(strongest_extension) do\n      table.insert(strongest_extension_strength_sorted,\
    \ extension)\n    end\n    table.sort(strongest_extension_strength_sorted)\n \
    \   return class_name .. '.' .. strongest_extension_strength_sorted[1]\n  end\n\
    end", "  local strongest_extension = {}\n  local capitals = {}\n  local sms =\
    \ {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals + 1]\
    \ = string.upper(extension:sub(1, #extension))\n    sms[#sms + 1] = string.lower(extension:sub(1,\
    \ #extension))\n  end\n  local capitals_count = #capitals\n  local sms_count =\
    \ #sms\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub(1, #extension))\n  \
    \  local strength = capitals_count-sms_count\n    if capitals_count-sms_count\
    \ > 0 then\n      local index = capitals_count\n      for i = 1, capitals_count-sms_count\
    \ do\n        index = index - 1\n        if capitals[index] == cap then\n    \
    \      capitals_count = capitals_count-1\n          sms_count = sms_count-1\n\
    \          break\n        end\n      end\n    end\n    if capitals_count-sms_count\
    \ > 0 then\n      strongest_extension[#strongest_extension + 1] = class_name ..\
    \ '.' .. cap .. '.' .. sm\n    else\n      strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. sm\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  local strongest_extension_strength_index = #strongest_extension\n\
    \  local strongest_extension_strength_strength = strongest_extension_strength_index\n\
    \  for i = 1, #strongest_extension do\n    local strength = string.upper(strongest_extension[i]:sub(1,\
    \ #strongest_extension[i]))\n    if strength > strongest_extension_strength_strength\
    \ then\n      strongest_extension_strength_strength = strength\n      strongest_extension_strength_index\
    \ = i\n    end\n  end\n  return strongest_extension[strongest_extension_strength_index]\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    local strength = cap - sm\n    if strongest[strength]\
    \ == nil then\n      strongest[strength] = extension\n    end\n  end\n  local\
    \ strongest_extension = strongest[1]\n  if #strongest > 1 then\n    for _, extension\
    \ in ipairs(strongest) do\n      if extension > strongest_extension then\n   \
    \     strongest_extension = extension\n      end\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = {}\n\tlocal cap_counter = 0\n\tlocal sm_counter = 0\n\tfor _, extension in\
    \ ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1, #extension))\n\t\t\
    cap_counter = cap_counter + cap:len()\n\t\tsm_counter = sm_counter + sm:len()\n\
    \tend\n\tlocal cap_fraction = cap_counter / #extensions\n\tlocal sm_fraction =\
    \ sm_counter / #extensions\n\tlocal strength = cap_fraction - sm_fraction\n\t\
    if strength > 0 then\n\t\tstrongest_extension[#strongest_extension + 1] = class_name\
    \ .. '.' .. extensions[#extensions]\n\tend\n\tfor i = #extensions, 1, -1 do\n\t\
    \tlocal cap = string.upper(extensions[i]:sub(1, #extensions[i]))\n\t\tlocal sm\
    \ = string.lower(extensions[i]:sub((#extensions[i]) + 1, #extensions[i]))\n\t\t\
    cap_counter = cap_counter + cap:len()\n\t\tsm_counter = sm_counter + sm:len()\n\
    \tend\n\tcap_fraction = cap_counter / #extensions\n\tsm_fraction = sm_counter\
    \ / #extensions\n\tstrength = cap_fraction - sm_fraction\n\tif strength > 0 then\n\
    \t\tstrongest_extension[#strongest_extension + 1] = class_name .. '.' .. extensions[#extensions]\n\
    \tend\n\tfor i = #extensions, 1, -1 do\n\t\tlocal cap = string.upper(extensions[i]:sub(1,\
    \ #extensions[i]))\n\t\tlocal sm = string.lower(extensions[i]:sub((#extensions[i])\
    \ + 1, #extensions[i]))\n\t\tcap_counter = cap_counter + cap:len()\n\t\tsm_counter\
    \ = sm_counter + sm:len()\n\tend\n\tcap_fraction = cap_counter / #extensions\n\
    \tsm_fraction = sm_counter / #extensions\n\tstrength = cap_fraction - sm_fraction\n\
    \tif strength > 0 then\n\t\tstrongest_extension[#strongest_extension + 1] = class_name\
    \ .. '.' .. extensions[#extensions]\n\tend\n\tfor i = #extensions, 1, -1 do\n\t\
    \tlocal cap = string.upper(extensions[i]:sub(1, #extensions[i]))\n\t\tlocal sm\
    \ = string.lower(extensions[i]:sub((#extensions[i]) + 1, #extensions[i]))\n\t\t\
    cap_counter = cap_counter + cap:len()\n\t\tsm_counter = sm_counter", "  local\
    \ max_strength = -1\n  local max_extension = ''\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local cap_extensions = {}\n  local sm_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_strength = -1\n  local max_extension\n  for cap, extensions in pairs(cap_extensions)\
    \ do\n    for sm, strength in pairs(extensions) do\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = cap..'.'..sm\n\
    \      end\n    end\n  end\n  return max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local cap_extensions\
    \ = {}\n  local sm_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or -1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or -1\n  end\n  local\
    \ max_strength = -1\n  local max_extension\n  for cap, extensions in pairs(cap_extensions)\
    \ do\n    for sm, strength in pairs(extensions) do\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = cap..'.'..sm\n\
    \      end\n    end\n  end\n  if max_strength > 0 then\n    return max_extension\n\
    \  end\n  local max_strength = -1\n  local max_extension\n  for sm, extensions\
    \ in pairs(sm_extensions) do\n    for cap, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap..'.'..sm\n      end\n    end\n  end\n  if max_strength\
    \ > 0 then\n    return max_extension\n  end\n  return nil\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_diff\
    \ = cap - sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  local max_strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal extension_strength = nil\n\t\
    local extension_counter = 0\n\tlocal extension_length = #extensions\n\tfor _,\
    \ extension in ipairs(extensions) do\n\t\textension_counter = extension_counter\
    \ + 1\n\t\textension_strength = extension_counter * extension:len()\n\t\tif extension_strength\
    \ > strongest_extension or strongest_extension == nil then\n\t\t\tstrongest_extension\
    \ = extension\n\t\t\textension_strength = extension_counter\n\t\tend\n\tend\n\t\
    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  local cap_counter = 0\n  local sm_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  cap_counter = cap_counter + cap:len()\n    sm_counter = sm_counter + sm:len()\n\
    \  end\n  local cap_fraction = cap_counter - sm_counter\n  if cap_fraction > 0\
    \ then\n    cap_fraction = cap_fraction / cap_counter\n  else\n    cap_fraction\
    \ = 1\n  end\n  local strongest_extension_strength = cap_fraction\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local cap_length = cap:len()\n    local sm_length = sm:len()\n    local cap_strength\
    \ = cap_length - sm_length\n    if cap_strength > 0 then\n      cap_strength =\
    \ cap_strength / cap_length\n    else\n      cap_strength = 1\n    end\n    if\
    \ cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        local index = #strongest_extension\n        while index > 0 and strongest_extension[index\
    \ - 1] > strength do\n          index = index - 1\n        end\n        strongest_extension[index\
    \ + 1] = extension\n      end\n    end\n  end\n  local index = #strongest_extension\n\
    \  if index == 0 then\n    return class_name\n  else\n    return class_name ..\
    \ '.' .. strongest_extension[index]\n  end\nend", "  local cap_extensions = {}\n\
    \  local sm_extensions = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    cap_extensions[cap] = cap_extensions[cap] or {}\n    cap_extensions[cap][sm]\
    \ = cap_extensions[cap][sm] or 1\n    sm_extensions[sm] = sm_extensions[sm] or\
    \ {}\n    sm_extensions[sm][cap] = sm_extensions[sm][cap] or 1\n  end\n  local\
    \ max_strength = -1\n  local max_extension\n  for cap, extensions in pairs(cap_extensions)\
    \ do\n    for sm, strength in pairs(extensions) do\n      if strength > max_strength\
    \ then\n        max_strength = strength\n        max_extension = cap .. '.' ..\
    \ sm\n      end\n    end\n  end\n  if max_strength > 0 then\n    return max_extension\n\
    \  end\n  local max_strength = 1000\n  local max_extension\n  for sm, extensions\
    \ in pairs(sm_extensions) do\n    for cap, strength in pairs(extensions) do\n\
    \      if strength > max_strength then\n        max_strength = strength\n    \
    \    max_extension = cap .. '.' .. sm\n      end\n    end\n  end\n  if max_strength\
    \ > 0 then\n    return max_extension\n  end\n  return nil\nend", "  local strongest\
    \ = nil\n  local strongest_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_strength then\n      strongest = class_name\n\
    \      strongest_strength = strength\n    end\n  end\n  return strongest\nend",
  "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  local capitals = string.gsub(class_name,\
    \ '[A-Z]', '')\n  local lowercases = string.gsub(class_name, '[a-z]', '')\n  local\
    \ capitals_count = #capitals\n  local lowercases_count = #lowercases\n  local\
    \ strength = capitals_count - lowercases_count\n  for _, extension in ipairs(extensions)\
    \ do\n    local capitals_extension = string.gsub(extension, '[A-Z]', '')\n   \
    \ local lowercases_extension = string.gsub(extension, '[a-z]', '')\n    local\
    \ capitals_extension_count = #capitals_extension\n    local lowercases_extension_count\
    \ = #lowercases_extension\n    local extension_strength = capitals_extension_count\
    \ - lowercases_extension_count\n    if extension_strength > 0 then\n      if extension_strength\
    \ > strength then\n        strength = extension_strength\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength == 1 then\n    return class_name .. '.' ..\
    \ strongest_extension[1]\n  else\n    local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n    if strongest_extension_strength_sorted[1]\
    \ > 0 then\n      return class_name .. '.' .. strongest_extension_sorted[1]\n\
    \    else\n      return class_name .. '.' .. strongest_extension_sorted[2]\n \
    \   end\n  end\nend", "  local strongest_extensions = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b)\n    return a.strength < b.strength\n  end)\n  return class_name .. '.' ..\
    \ strongest_extensions[1].extension\nend", "  local strongest_extensions = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extensions[strength] == nil then\n\
    \      strongest_extensions[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest_extensions[#strongest_extensions]\n  if #strongest_extensions >\
    \ 1 then\n    local strength_order = {}\n    for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      table.insert(strength_order, strength)\n    end\n    table.sort(strength_order)\n\
    \    for _, strength in ipairs(strength_order) do\n      if strength == #strongest_extensions\
    \ then\n        strongest_extension = strongest_extensions[strength]\n       \
    \ break\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "   local strongest_extension = {}\n   for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n         table.insert(strongest_extension,\
    \ extension)\n      end\n   end\n   if #strongest_extension == 1 then\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   else\n      local strongest_extension_strength\
    \ = #strongest_extension\n      local strongest_extension_strength_sorted = {}\n\
    \      for _, strongest_extension in ipairs(strongest_extension) do\n        \
    \ table.insert(strongest_extension_strength_sorted, strongest_extension_strength)\n\
    \      end\n      table.sort(strongest_extension_strength_sorted)\n      return\
    \ class_name .. '.' .. strongest_extension[1]\n   end\nend", "  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. \".\" .. max_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension[strength] == nil then\n\
    \      strongest_extension[strength] = extension\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  local strongest_extension_strength_sorted\
    \ = {}\n  for _, strongest_extension_strength in ipairs(strongest_extension_strength)\
    \ do\n    strongest_extension_strength_sorted[strongest_extension_strength] =\
    \ true\n  end\n  table.sort(strongest_extension_strength_sorted)\n  local strongest_extension_strength_sorted\
    \ = table.concat(strongest_extension_strength_sorted)\n  if strongest_extension_strength_sorted\
    \ ~= strongest_extension_strength then\n    return class_name .. '.' .. strongest_extension_strength_sorted[1]\n\
    \  end\n  return class_name\nend", "  local strongest_extension = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension[strength]\
    \ == nil then\n        strongest_extension[strength] = extension\n      else\n\
    \        local index = #strongest_extension\n        while index > 0 and strongest_extension[index\
    \ - 1] > strength do\n          index = index - 1\n        end\n        strongest_extension[index\
    \ + 1] = extension\n      end\n    end\n  end\n  local index = #strongest_extension\n\
    \  if index == 0 then\n    return class_name\n  else\n    return class_name ..\
    \ '.' .. strongest_extension[index]\n  end\nend", "  local strongest_extension\
    \ = {}\n  local capitals = {}\n  local lowercases = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local capitals_count = capitals[#capitals+1]\n  \
    \  local lowercases_count = lowercases[#lowercases+1]\n    capitals[#capitals+1]\
    \ = capitals_count\n    lowercases[#lowercases+1] = lowercases_count\n    capitals_count[extension:upper()]\
    \ = capitals_count[extension:upper()] or 1\n    lowercases_count[extension:lower()]\
    \ = lowercases_count[extension:lower()] or 1\n    capitals_count[extension:upper()]\
    \ = capitals_count[extension:upper()] - lowercases_count[extension:lower()]\n\
    \    if capitals_count[extension:upper()] > 0 then\n      strongest_extension[extension:lower()]\
    \ = extension\n    end\n  end\n  local max_strength = -1\n  for _, extension in\
    \ ipairs(extensions) do\n    local capitals_count = capitals[#capitals+1]\n  \
    \  local lowercases_count = lowercases[#lowercases+1]\n    capitals[#capitals+1]\
    \ = capitals_count\n    lowercases[#lowercases+1] = lowercases_count\n    capitals_count[extension:upper()]\
    \ = capitals_count[extension:upper()] or 1\n    lowercases_count[extension:lower()]\
    \ = lowercases_count[extension:lower()] or 1\n    capitals_count[extension:upper()]\
    \ = capitals_count[extension:upper()] - lowercases_count[extension:lower()]\n\
    \    if capitals_count[extension:upper()] > max_strength then\n      max_strength\
    \ = capitals_count[extension:upper()]\n      strongest_extension[extension:lower()]\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension[#strongest_extension]\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    cap_counter = cap_counter + cap\n    sm_counter = sm_counter\
    \ + sm\n  end\n  local strength = cap_counter - sm_counter\n  if strength == 0\
    \ then\n    error(\"No extensions found\")\n  elseif strength == 1 then\n    error(\"\
    Only one extension found\")\n  elseif strength > 1 then\n    error(\"Multiple\
    \ extensions found\")\n  end\n  local extension_counter = 0\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local extension_strength = cap - sm\n    if extension_strength == 0 then\n\
    \      error(\"No extensions found\")\n    elseif extension_strength == 1 then\n\
    \      error(\"Only one extension found\")\n    elseif extension_strength > 1\
    \ then\n      error(\"Multiple extensions found\")\n    end\n    local extension_counter\
    \ = extension_counter + 1\n    if extension_counter == strength then\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. \".\" .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension[strength] == nil\
    \ then\n        strongest_extension[strength] = extension\n      else\n      \
    \  local i = 1\n        while i <= strength do\n          strongest_extension[strength]\
    \ = strongest_extension[strength] .. '.' .. extension\n          i = i + 1\n \
    \       end\n      end\n    end\n  end\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local cap_diff = cap - sm\n        if cap_diff > strongest_extension_strength\
    \ then\n            strongest_extension_strength = cap_diff\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength == 0 then\n      -- The extension's name is all\
    \ uppercase\n      strongest_extension = extension\n      break\n    end\n   \
    \ if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ ' ')\nend", "  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n\
    \    end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest)[1]\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength >= 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest_extensions[strength] == nil then\n      strongest_extensions[strength]\
    \ = extension\n    elseif strongest_extensions[strength] < extension then\n  \
    \    strongest_extensions[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest_extensions[#strongest_extensions]\n  if strongest_extension == nil\
    \ then\n    return nil\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = cap - sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return a:upper()\
    \ - b:upper() end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - #max_extension) .. max_extension\nend", "  local\
    \ max_strength = -1\n  local max_extension = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest_extensions = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "   local strongest_extension = nil\n   local strongest_extension_strength\
    \ = -1\n   for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "   local strongest_extension = {}\n  \
    \ for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strongest_extension[strength] == nil\
    \ then\n         strongest_extension[strength] = extension\n      elseif strongest_extension[strength]\
    \ < extension then\n         strongest_extension[strength] = extension\n     \
    \ end\n   end\n   return class_name .. '.' .. table.concat(strongest_extension,\
    \ ' ')\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest)[1]\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n\treturn class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_strength = string.upper(extension) - string.lower(extension)\n\
    \    extension_strengths[extension_strength] = extension\n    if extension_strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = extension_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension_strength .. extension_strengths[strongest_extension_strength]\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest)[1]\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = #extension:upper()\n    local sm =\
    \ #extension:lower()\n    local strength = cap - sm\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      max_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength < b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength == 1 then\n    return class_name .. '.' ..\
    \ strongest_extension[1]\n  end\n  if strongest_extension_strength > 1 then\n\
    \    local strongest_extension_strength_sorted = {}\n    for _, strength in ipairs(strongest_extension_strength)\
    \ do\n      table.insert(strongest_extension_strength_sorted, strength)\n    end\n\
    \    table.sort(strongest_extension_strength_sorted)\n    return class_name ..\
    \ '.' .. strongest_extension_sorted[1]\n  end\nend", "  local strongest = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      -- The extension's\
    \ name is all uppercase letters.\n      -- The extension's strength is 0.\n  \
    \    strongest[extension] = nil\n    elseif strength > 0 then\n      -- The extension's\
    \ name is all uppercase letters.\n      -- The extension's strength is strength.\n\
    \      strongest[extension] = class_name\n    elseif strength < 0 then\n     \
    \ -- The extension's name is all lowercase letters.\n      -- The extension's\
    \ strength is -strength.\n      strongest[extension] = class_name:sub(1, #class_name)\n\
    \    end\n  end\n  local strongest_extension = strongest[#strongest]\n  if strongest_extension\
    \ ~= nil then\n    return strongest_extension\n  end\n  -- There are no extensions\
    \ with the same strength.\n  -- Choose the one that comes first in the list.\n\
    \  local extension = extensions[1]\n  local cap = string.upper(extension:sub(1,\
    \ #extension))\n  local sm = string.lower(extension:sub((#extension) + 1))\n \
    \ local strength = cap - sm\n  if strength == 0 then\n    -- The extension's name\
    \ is all uppercase letters.\n    -- The extension's strength is 0.\n    return\
    \ extension\n  elseif strength > 0 then\n    -- The extension's name is all uppercase\
    \ letters.\n    -- The extension's strength is strength.\n    return extension\n\
    \  elseif strength < 0 then\n    -- The extension's name is all lowercase letters.\n\
    \    -- The extension's strength is -strength.\n    return extension:sub(1, #extension)\n\
    \  end\nend", "  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap_counter\
    \ = cap_counter + #extension:upper()\n    local sm_counter = sm_counter + #extension:lower()\n\
    \  end\n  local cap_strength = cap_counter - sm_counter\n  if cap_strength > 0\
    \ then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n  end\n  if cap_strength\
    \ > 0 then\n    for _, extension in ipairs(extensions) do\n      local cap_counter\
    \ = cap_counter + #extension:upper()\n      local sm_counter = sm_counter + #extension:lower()\n\
    \    end\n    cap_strength = cap_counter - sm_counter\n", "  local max_strength\
    \ = -1\n  local max_extension\n  for _, extension in ipairs(extensions) do\n \
    \   local strength = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1,\
    \ 1))\n    if strength > max_strength then\n      max_strength = strength\n  \
    \    max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      elseif strength >\
    \ #strongest_extension then\n        strongest_extension = extension\n      end\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local extension_strength = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local cap_strength\
    \ = cap - sm\n    if extension_strength == nil then\n      extension_strength\
    \ = cap_strength\n    elseif extension_strength > cap_strength then\n      extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local max_strength = -1\n\
    \  local max_extension\n  for _, extension in ipairs(extensions) do\n    local\
    \ strength = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1,\
    \ 1))\n    if strength > max_strength then\n      max_strength = strength\n  \
    \    max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name)-#max_extension-1) + max_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
