name: HumanEval_105_by_length
language: lua
prompt: "-- Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n-- -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n-- -> reverse arr ->\
  \ [8, 5, 4, 3, 2, 2, 1, 1]\n-- return [\"Eight\", \"Five\", \"Four\", \"Three\"\
  , \"Two\", \"Two\", \"One\", \"One\"]\n-- If the array is empty, return an empty\
  \ array:\n-- arr = []\n-- return []\n-- If the array has any strange number ignore\
  \ it:\n-- arr = [1, -1 , 55] \n-- -> sort arr -> [-1, 1, 55]\n-- -> reverse arr\
  \ -> [55, 1, -1]\n-- return = ['One']\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_arr = {}\n  local reversed_arr = {}\n  local lengths\
    \ = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n    sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    reversed_arr[#reversed_arr + 1] = length\n    table.insert(lengths,\
    \ length)\n  end\n  table.sort(lengths)\n  for i = 1, #lengths do\n    local length\
    \ = lengths[i]\n    local index = #sorted_arr\n    while index > 0 and sorted_arr[index\
    \ - 1] > length do\n      table.insert(sorted_arr, sorted_arr[index])\n      table.remove_by_index(sorted_arr,\
    \ index)\n      index = index - 1\n    end\n    table.insert(reversed_arr, length)\n\
    \  end\n  table.sort(reversed_arr)\n  local index = 1\n  local results = {}\n\
    \  while index <= #reversed_arr do\n    table.insert(results, reversed_arr[index])\n\
    \    index = index + 1\n  end\n  return results\nend", "  local sorted_arr = {}\n\
    \  local reversed_arr = {}\n  local results = {}\n  for i = 1, #arr do\n    local\
    \ length = arr[i]\n    if length == nil then\n      table.insert(sorted_arr, arr[i])\n\
    \    elseif length < 1 then\n      table.insert(sorted_arr, arr[i])\n    elseif\
    \ length < 10 then\n      table.insert(sorted_arr, arr[i])\n    else\n      table.insert(reversed_arr,\
    \ arr[i])\n    end\n  end\n  table.sort(sorted_arr)\n  table.sort(reversed_arr)\n\
    \  for i = 1, #sorted_arr do\n    table.insert(results, reversed_arr[i])\n  end\n\
    \  return results\nend", "  local sorted_arr = arr:sort()\n  local reversed_arr\
    \ = sorted_arr:reverse()\n  local results = {}\n  for i = 1, #reversed_arr do\n\
    \    local num = reversed_arr[i]\n    local name = get_name(num)\n    if name\
    \ then\n      results[i] = name\n    end\n  end\n  return results\nend", "  local\
    \ function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j]\
    \ = tmp\n  end\n  local function sort_by_length(arr)\n    local tmp = {}\n   \
    \ for i = 1, #arr do\n      local length = arr[i]\n      local index = i\n   \
    \   while index <= #arr do\n        if arr[index] < length then\n          swap(arr,\
    \ index, index + 1)\n        end\n        index = index + 1\n      end\n     \
    \ tmp[i] = arr[i]\n    end\n    return tmp\n  end\n  local function reverse_sort_by_length(arr)\n\
    \    local tmp = {}\n    for i = 1, #arr do\n      local length = arr[i]\n   \
    \   local index = i\n      while index <= #arr do\n        if arr[index] > length\
    \ then\n          swap(arr, index, index + 1)\n        end\n        index = index\
    \ + 1\n      end\n      tmp[i] = arr[i]\n    end\n    return tmp\n  end\n  local\
    \ function sort_and_reverse(arr)\n    local tmp = sort_by_length(arr)\n    return\
    \ reverse_sort_by_length(tmp)\n  end\n  local function sort_and_reverse_with_length(arr)\n\
    \    local tmp = sort_by_length(arr)\n    local tmp2 = {}\n    for i = 1, #tmp\
    \ do\n      tmp2[i] = {\n        length = tmp[i].length,\n        element = tmp[i].element\n\
    \      }\n    end\n    return reverse_sort_by_length(tmp2)\n  end\n  local function\
    \ sort_and_reverse_with_length_and_length(arr)\n    local tmp = sort_by_length(arr)\n\
    \    local tmp2 = {}\n    for i = 1, #tmp do\n      tmp2[i] = {\n        length\
    \ = tmp[i].length,\n        element = tmp[i].element,\n        length = tmp[i].length,\n\
    \        element = tmp[i].element\n      }\n    end\n    return reverse_sort_by_length(tmp2)\n\
    \  end\n  local function sort_and_reverse_with_length_and_length_and_length(arr)\n\
    \    local tmp = sort_by_length(arr)\n    local tmp2 = {}\n    for i = 1, #tmp\
    \ do\n      tmp2[i] = {\n        length = tmp[i].length,\n        element = tmp[i].element,\n\
    \        length = tmp[i].length,\n        element = tmp[i].element,\n        length\
    \ = tmp[i].length,\n        element = tmp[i].element\n      }\n    end\n    return\
    \ reverse_sort_by_length(tmp2)\n  end\n  local function sort_and_reverse_with_length_and_length_and_length_and_length(arr)\n\
    \    local tmp = sort_by_length(arr)\n    local tmp2 = {}\n    for i = 1, #tmp\
    \ do\n      tmp2[i] = {\n        length = tmp[i].length,\n        element = tmp[i].element,\n\
    \        length = tmp[i].length,\n        ", "  local arr2 = {}\n  local len =\
    \ #arr\n  for i = 1, len do\n    arr2[#arr2 + 1] = arr[i]\n  end\n  table.sort(arr2,\
    \ function(a, b) return #a > #b end)\n  local i = 0\n  local j = 0\n  local k\
    \ = 0\n  local arr3 = {}\n  while i < len do\n    arr3[k] = arr2[i]\n    i = i\
    \ + 1\n    k = k + 1\n  end\n  local len = #arr3\n  for i = 1, len do\n    arr3[i]\
    \ = arr3[i]..\"-\" .. arr3[len-i-1]\n  end\n  return arr3\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local sorted_arr_len = {}\n  local reversed_arr_len\
    \ = {}\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index = 0\n\
    \  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_len_index\
    \ = 0\n  local reversed_arr_len_index = 0\n  local sorted_arr_index = 0\n  local\
    \ reversed_arr_index = 0\n  local sorted_arr_len_index = 0\n  local reversed_arr_len_index\
    \ = 0\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local sorted_arr_",
  "  local sorted_arr = {}\n  local reversed_arr = {}\n  local length_arr = {}\n \
    \ for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n    table.insert(length_arr,\
    \ length)\n    table.insert(sorted_arr, arr[i])\n    table.insert(reversed_arr,\
    \ arr[i]:reverse())\n  end\n  table.sort(length_arr)\n  for i = 1, #length_arr\
    \ do\n    local length = length_arr[i]\n    local index = math.floor(length /\
    \ 2)\n    local element = sorted_arr[index]\n    sorted_arr[index] = reversed_arr[index]\n\
    \    reversed_arr[index] = element\n  end\n  return sorted_arr\nend", "  local\
    \ arr2 = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    table.insert(lengths, length)\n    table.insert(arr2, arr[i])\n  end\n  table.sort(arr2,\
    \ function(a, b) return lengths[a] < lengths[b] end)\n  local result = {}\n  for\
    \ i = 1, #arr2 do\n    table.insert(result, tostring(arr2[i]))\n  end\n  return\
    \ result\nend", "  local function sort_by_length(arr)\n    local function sort_by_length(arr)\n\
    \      local function sort_by_length(arr)\n        local function sort_by_length(arr)\n\
    \          local function sort_by_length(arr)\n            local function sort_by_length(arr)\n\
    \              local function sort_by_length(arr)\n                local function\
    \ sort_by_length(arr)\n                  local function sort_by_length(arr)\n\
    \                    local function sort_by_length(arr)\n                    \
    \  local function sort_by_length(arr)\n                        local function\
    \ sort_by_length(arr)\n                          local function sort_by_length(arr)\n\
    \                            local function sort_by_length(arr)\n            \
    \                  local function sort_by_length(arr)\n                      \
    \          local function sort_by_length(arr)\n                              \
    \    local function sort_by_length(arr)\n                                    local\
    \ function sort_by_length(arr)\n                                      local function\
    \ sort_by_length(arr)\n                                        local function\
    \ sort_by_length(arr)\n                                          local function\
    \ sort_by_length(arr)\n                                            local function\
    \ sort_by_length(arr)\n                                              local function\
    \ sort_by_length(arr)\n                                                local function\
    \ sort_by_length(arr)\n                                                  local\
    \ function sort_by_length(arr)\n                                             \
    \       local function sort_by_length(arr)\n                                 \
    \                     local function sort_by_length(arr)\n                   \
    \                                     local function sort_by_length(arr)\n   \
    \                                                       local function sort_by_length(arr)\n\
    \                                                            local function sort_by_length(arr)\n\
    \                                                              local function\
    \ sort_by_length(arr)\n                                                      \
    \          local function sort_by_length(arr)\n                              \
    \                                    local function sort_by_length(arr)\n    \
    \                                                                local function\
    \ sort_by_length(arr)\n                                                      \
    \                return arr\n                                                \
    \                end\n                                                       \
    \       end\n                                                            end\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end\n         \
    \                                       end\n                                \
    \              end\n                                            end\n        \
    \                                  end\n                                     \
    \   end\n                                      end\n                         \
    \           end\n                                  end\n                     \
    \           end\n                              end\n                         \
    \   end\n                          end\n                        end\n        \
    \              end\n                    end\n                  end\n         \
    \       end\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\nend", "  local arr2 = {}\n  for i = 1, #arr do\n \
    \   local length = arr[i]\n    if length > 1 then\n      arr2[#arr2 + 1] = arr[i]\n\
    \    end\n  end\n  table.sort(arr2, function(a, b) return #a > #b end)\n  local\
    \ reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n\
    \  end\n  table.sort(reversed, function(a, b) return #a > #b end)\n  local result\
    \ = {}\n  for i = 1, #reversed do\n    local length = reversed[i]\n    if length\
    \ <= 9 then\n      result[#result + 1] = by_length[length]\n    end\n  end\n \
    \ return result\nend", "  local arr2 = {}\n  for i = 1, #arr do\n    local num\
    \ = arr[i]\n    local length = math.floor(math.log(num, 10))\n    local name =\
    \ get_name(length)\n    arr2[length] = name\n  end\n  table.sort(arr2, function(a,\
    \ b) return a < b end)\n  local reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed\
    \ + 1] = arr2[i]\n  end\n  return reversed\nend", "  local sorted_arr = arr:sort()\n\
    \  local reversed_arr = sorted_arr:reverse()\n  local result = {}\n  for i = 1,\
    \ #reversed_arr do\n    table.insert(result, tostring(reversed_arr[i]))\n  end\n\
    \  return result\nend", "  local arr2 = {}\n  for i = 1, #arr do\n    local length\
    \ = arr[i]\n    if length == nil then\n      arr2[i] = nil\n    else\n      arr2[i]\
    \ = by_length(arr:sub(1, length - 1))\n    end\n  end\n  return arr2\nend", " \
    \ local function sort_by_length(arr)\n    local sorted_arr = {}\n    local reversed_arr\
    \ = {}\n    local name_arr = {\n      [1] = \"One\",\n      [2] = \"Two\",\n \
    \     [3] = \"Three\",\n      [4] = \"Four\",\n      [5] = \"Five\",\n      [6]\
    \ = \"Six\",\n      [7] = \"Seven\",\n      [8] = \"Eight\",\n      [9] = \"Nine\"\
    \n    }\n    local length = #arr\n    for i = 1, length do\n      local value\
    \ = arr[i]\n      if value < 1 then\n        table.insert(sorted_arr, value)\n\
    \      elseif value == 1 then\n        table.insert(sorted_arr, value)\n     \
    \ elseif value >= 2 then\n        table.insert(sorted_arr, reversed_arr[value-1])\n\
    \      else\n        table.insert(sorted_arr, name_arr[value-1])\n      end\n\
    \    end\n    return sorted_arr\n  end\n  local sorted_arr = sort_by_length(arr)\n\
    \  local reversed_arr = table.concat(sorted_arr, 1, sorted_arr[1])\n  local length\
    \ = #reversed_arr\n  for i = 1, length do\n    reversed_arr[i] = reversed_arr[i]..name_arr[i]\n\
    \  end\n  return reversed_arr\nend", "  local function swap(arr, i, j)\n    local\
    \ tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local function\
    \ sort(arr)\n    local len = #arr\n    local i = 0\n    local j = 1\n    while\
    \ i < len do\n      if arr[i] < arr[j] then\n        swap(arr, i, j)\n       \
    \ i = i + 1\n      else\n        j = j + 1\n      end\n    end\n  end\n  local\
    \ function reverse(arr)\n    local len = #arr\n    local i = 0\n    local j =\
    \ 1\n    while i < len do\n      swap(arr, i, j)\n      i = i + 1\n      j = j\
    \ + 1\n    end\n  end\n  local function to_array(arr)\n    local ret = {}\n  \
    \  for i = 1, #arr do\n      ret[#ret + 1] = arr[i]\n    end\n    return ret\n\
    \  end\n  local function to_string(arr)\n    local ret = \"\"\n    for i = 1,\
    \ #arr do\n      ret = ret .. arr[i]\n    end\n    return ret\n  end\n  local\
    \ function to_number(arr)\n    local ret = 0\n    for i = 1, #arr do\n      ret\
    \ = ret * 10 + arr[i]\n    end\n    return ret\n  end\n  local function to_char(arr)\n\
    \    local ret = \"\"\n    for i = 1, #arr do\n      ret = ret .. arr[i]\n   \
    \ end\n    return ret\n  end\n  local function to_bool(arr)\n    local ret = 0\n\
    \    for i = 1, #arr do\n      ret = ret + (arr[i] == 1)\n    end\n    return\
    \ ret\n  end\n  local function to_array(arr)\n    local ret = {}\n    for i =\
    \ 1, #arr do\n      ret[#ret + 1] = arr[i]\n    end\n    return ret\n  end\n \
    \ local function to_string(arr)\n    local ret = \"\"\n    for i = 1, #arr do\n\
    \      ret = ret .. arr[i]\n    end\n    return ret\n  end\n  local function to_number(arr)\n\
    \    local ret = 0\n    for i = 1, #arr do\n      ret = ret * 10 + arr[i]\n  \
    \  end\n    return ret\n  end\n  local function to_char(arr)\n    local ret =\
    \ \"\"\n    for i = 1, #arr do\n      ret = ret .. arr[i]\n    end\n    return\
    \ ret\n  end\n  local function to_bool(arr)\n    local ret = 0\n    for i = 1,\
    \ #arr do\n      ret = ret + (arr[i] == 1)\n    end\n    return ret\n  end\n \
    \ local function to_array(arr)\n    local ret = {}\n    for i = 1, #arr do\n \
    \     ret[#ret + ", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ results = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    if length\
    \ == nil then\n      length = i\n    end\n    local index = length\n    if length\
    \ > 9 then\n      index = math.floor(math.log(i) / math.log(10))\n    end\n  \
    \  local digit = math.mod(i, 10)\n    local name = string.format(\"%g\", i)\n\
    \    if index == 1 then\n      table.insert(sorted_arr, name)\n    else\n    \
    \  table.insert(reversed_arr, name)\n    end\n    table.insert(results, name)\n\
    \  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    table.insert(sorted_arr,\
    \ results[i])\n  end\n  return sorted_arr\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    local\
    \ index = #sorted_arr\n    sorted_arr[index] = length\n    reversed_arr[index]\
    \ = arr[i]\n  end\n  table.sort(reversed_arr)\n  local index = 1\n  local results\
    \ = {}\n  for i = 1, #reversed_arr do\n    local length = reversed_arr[i]\n  \
    \  local value = sorted_arr[index]\n    results[#results+1] = values[value]\n\
    \    index = index + 1\n  end\n  return results\nend", "  local sorted_arr = {}\n\
    \  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local\
    \ length = math.floor(math.log10(arr[i]))\n    table.insert(lengths, length)\n\
    \    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(lengths)\n  for i =\
    \ 1, #lengths do\n    local length = lengths[i]\n    local index = math.floor(length\
    \ / 10)\n    local digit = length % 10\n    local digit = digit + 1\n    local\
    \ reversed_digit = reversed_arr[index]\n    reversed_arr[index] = reversed_digit\
    \ * 10 + digit\n  end\n  local results = {}\n  for i = 1, #sorted_arr do\n   \
    \ local index = math.floor(sorted_arr[i] / 10)\n    local digit = sorted_arr[i]\
    \ % 10\n    local reversed_digit = reversed_arr[index]\n    table.insert(results,\
    \ reversed_digit .. \"-\" .. \"One\")\n  end\n  return results\nend", "  local\
    \ sorted_arr = arr:sort()\n  local reversed_arr = sorted_arr:reverse()\n  local\
    \ result = {}\n  for i = 1, #reversed_arr do\n    table.insert(result, string.format(\"\
    %g\", reversed_arr[i]))\n  end\n  return result\nend", "  local function sort(a,\
    \ b)\n    if a < b then\n      return 1\n    elseif b < a then\n      return -1\n\
    \    else\n      return 0\n    end\n  end\n  table.sort(arr, sort)\n  local reversed\
    \ = {}\n  for i = #arr, 1, -1 do\n    reversed[#reversed + 1] = arr[i]\n  end\n\
    \  return reversed\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    lengths[length]\
    \ = lengths[length] + 1\n  end\n  for i = 1, #lengths do\n    sorted_arr[#sorted_arr\
    \ + 1] = i\n  end\n  for i = 1, #arr do\n    local length = arr[i]\n    local\
    \ index = sorted_arr[length - 1]\n    reversed_arr[index] = arr[i]\n  end\n  local\
    \ result = {}\n  for i = 1, #reversed_arr do\n    result[#result + 1] = reversed_arr[i]\n\
    \  end\n  return result\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local names = {}\n  local i = 0\n  local j = 0\n  local length = 0\n\
    \  local max_length = 0\n  local max_value = 0\n  local max_name = ''\n  local\
    \ max_index = 0\n  local max_index2 = 0\n  local max_index3 = 0\n  local max_index4\
    \ = 0\n  local max_index5 = 0\n  local max_index6 = 0\n  local max_index7 = 0\n\
    \  local max_index8 = 0\n  local max_index9 = 0\n  local max_index10 = 0\n  local\
    \ max_index11 = 0\n  local max_index12 = 0\n  local max_index13 = 0\n  local max_index14\
    \ = 0\n  local max_index15 = 0\n  local max_index16 = 0\n  local max_index17 =\
    \ 0\n  local max_index18 = 0\n  local max_index19 = 0\n  local max_index20 = 0\n\
    \  local max_index21 = 0\n  local max_index22 = 0\n  local max_index23 = 0\n \
    \ local max_index24 = 0\n  local max_index25 = 0\n  local max_index26 = 0\n  local\
    \ max_index27 = 0\n  local max_index28 = 0\n  local max_index29 = 0\n  local max_index30\
    \ = 0\n  local max_index31 = 0\n  local max_index32 = 0\n  local max_index33 =\
    \ 0\n  local max_index34 = 0\n  local max_index35 = 0\n  local max_index36 = 0\n\
    \  local max_index37 = 0\n  local max_index38 = 0\n  local max_index39 = 0\n \
    \ local max_index40 = 0\n  local max_index41 = 0\n  local max_index42 = 0\n  local\
    \ max_index43 = 0\n  local max_index44 = 0\n  local max_index45 = 0\n  local max_index46\
    \ = 0\n  local max_index47 = 0\n  local max_index48 = 0\n  local max_index49 =\
    \ 0\n  local max_index50 = 0\n  local max_index51 = 0\n  local max_index52 = 0\n\
    \  local max_index53 = 0\n  local max_index54 = 0\n  local max_index55 = 0\n \
    \ local max_index56 = 0\n  local max_index57 = 0\n  local max_index58 = 0\n  local\
    \ max_index59 = 0\n  local max_index60 = 0\n  local max_index61 = 0\n  local max_index62\
    \ = 0\n  local max_index63 = 0\n  local max_index64 = 0\n  local max_index65 =\
    \ 0\n  local max_index66 = 0\n  ", "  local function compare(a,b)\n    if a <\
    \ b then\n      return -1\n    elseif b < a then\n      return 1\n    else\n \
    \     return 0\n    end\n  end\n  table.sort(arr, compare)\n  local reversed =\
    \ {}\n  for i = 1, #arr do\n    reversed[#reversed + 1] = arr[i]\n  end\n  return\
    \ reversed\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ length_arr = {}\n  for i = 1, #arr do\n    length_arr[i] = #arr[i]\n  end\n\
    \  table.sort(length_arr)\n  for i = 1, #length_arr do\n    local index = length_arr[i]\n\
    \    local value = arr[i]\n    table.insert(sorted_arr, value)\n    table.insert(reversed_arr,\
    \ arr[index])\n  end\n  for i = 1, #reversed_arr do\n    arr[i] = reversed_arr[i]\n\
    \  end\n  return arr\nend", "  local len = #arr\n  if len == 0 then\n    return\
    \ arr\n  end\n  local min = math.min(arr)\n  local max = math.max(arr)\n  local\
    \ mid = math.floor(len / 2)\n  local left = arr[mid]\n  local right = arr[mid+1]\n\
    \  local left_len = #left\n  local right_len = #right\n  local left_min = math.min(left)\n\
    \  local left_max = math.max(left)\n  local right_min = math.min(right)\n  local\
    \ right_max = math.max(right)\n  if left_len > right_len then\n    arr[mid], arr[mid+1]\
    \ = arr[mid+1], arr[mid]\n    by_length(arr)\n  elseif left_len < right_len then\n\
    \    arr[mid], arr[mid+1] = arr[mid+1], arr[mid]\n    by_length(arr)\n  elseif\
    \ left_len == right_len then\n    if left_min < right_min then\n      arr[mid],\
    \ arr[mid+1] = arr[mid+1], arr[mid]\n      by_length(arr)\n    elseif left_max\
    \ > right_max then\n      arr[mid], arr[mid+1] = arr[mid+1], arr[mid]\n      by_length(arr)\n\
    \    end\n  end\n  return arr\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    table.insert(sorted_arr, arr[i])\n    table.insert(reversed_arr, arr[i])\n\
    \    table.insert(lengths, length)\n  end\n  table.sort(reversed_arr)\n  for i\
    \ = 1, #reversed_arr do\n    local length = lengths[i]\n    local index = math.floor((length\
    \ - 1) / 2)\n    local value = reversed_arr[i]\n    local name = lengths[math.floor(index)]\n\
    \    sorted_arr[i] = name\n  end\n  return sorted_arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local names = {}\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  local length = 0\n  local max_length = 0\n  local max_value\
    \ = 0\n  local max_name = ''\n  local max_index = 0\n  local max_index2 = 0\n\
    \  local max_index3 = 0\n  local max_index4 = 0\n  local max_index5 = 0\n  local\
    \ max_index6 = 0\n  local max_index7 = 0\n  local max_index8 = 0\n  local max_index9\
    \ = 0\n  local max_index10 = 0\n  local max_index11 = 0\n  local max_index12 =\
    \ 0\n  local max_index13 = 0\n  local max_index14 = 0\n  local max_index15 = 0\n\
    \  local max_index16 = 0\n  local max_index17 = 0\n  local max_index18 = 0\n \
    \ local max_index19 = 0\n  local max_index20 = 0\n  local max_index21 = 0\n  local\
    \ max_index22 = 0\n  local max_index23 = 0\n  local max_index24 = 0\n  local max_index25\
    \ = 0\n  local max_index26 = 0\n  local max_index27 = 0\n  local max_index28 =\
    \ 0\n  local max_index29 = 0\n  local max_index30 = 0\n  local max_index31 = 0\n\
    \  local max_index32 = 0\n  local max_index33 = 0\n  local max_index34 = 0\n \
    \ local max_index35 = 0\n  local max_index36 = 0\n  local max_index37 = 0\n  local\
    \ max_index38 = 0\n  local max_index39 = 0\n  local max_index40 = 0\n  local max_index41\
    \ = 0\n  local max_index42 = 0\n  local max_index43 = 0\n  local max_index44 =\
    \ 0\n  local max_index45 = 0\n  local max_index46 = 0\n  local max_index47 = 0\n\
    \  local max_index48 = 0\n  local max_index49 = 0\n  local max_index50 = 0\n \
    \ local max_index51 = 0\n  local max_index52 = 0\n  local max_index53 = 0\n  local\
    \ max_index54 = 0\n  local max_index55 = 0\n  local max_index56 = 0\n  local max_index57\
    \ = 0\n  local max_index58 = 0\n  local max_index59 = 0\n  local max_index60 =\
    \ 0\n  local max_index61 = 0\n  local max_index62 = 0\n  local max_index63 = 0\n\
    \  local max_index64 = 0\n  local max_index65 = 0\n  local max_", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local sorted_arr_index = 0\n  local reversed_arr_index\
    \ = 0\n  local length = 0\n  for i = 1, #arr do\n    length = length + 1\n   \
    \ sorted_arr[sorted_arr_index] = arr[i]\n    sorted_arr_index = sorted_arr_index\
    \ + 1\n  end\n  for i = 1, #arr do\n    if arr[i] > 1 then\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n\
    \  for i = 1, #reversed_arr do\n    sorted_arr[sorted_arr_index] = reversed_arr[i]\n\
    \    sorted_arr_index = sorted_arr_index + 1\n  end\n  for i = 1, #sorted_arr\
    \ do\n    sorted_arr[i] = by_name[sorted_arr[i]]\n  end\n  return sorted_arr\n\
    end", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index\
    \ = 0\n  local reversed_arr_index = 0\n  for i = 1, #arr do\n    local length\
    \ = arr[i]\n    if length == nil then\n      sorted_arr[sorted_arr_index] = arr[i]\n\
    \      sorted_arr_index = sorted_arr_index + 1\n    else\n      reversed_arr[reversed_arr_index]\
    \ = length\n      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n\
    \  table.sort(reversed_arr, reverse)\n  local i = 0\n  local j = 0\n  local k\
    \ = 0\n  local l = 0\n  local length = 0\n  local length_index = 0\n  local length_index2\
    \ = 0\n  local length_index3 = 0\n  local length_index4 = 0\n  local length_index5\
    \ = 0\n  local length_index6 = 0\n  local length_index7 = 0\n  local length_index8\
    \ = 0\n  local length_index9 = 0\n  local length_index10 = 0\n  local length_index11\
    \ = 0\n  local length_index12 = 0\n  local length_index13 = 0\n  local length_index14\
    \ = 0\n  local length_index15 = 0\n  local length_index16 = 0\n  local length_index17\
    \ = 0\n  local length_index18 = 0\n  local length_index19 = 0\n  local length_index20\
    \ = 0\n  local length_index21 = 0\n  local length_index22 = 0\n  local length_index23\
    \ = 0\n  local length_index24 = 0\n  local length_index25 = 0\n  local length_index26\
    \ = 0\n  local length_index27 = 0\n  local length_index28 = 0\n  local length_index29\
    \ = 0\n  local length_index30 = 0\n  local length_index31 = 0\n  local length_index32\
    \ = 0\n  local length_index33 = 0\n  local length_index34 = 0\n  local length_index35\
    \ = 0\n  local length_index36 = 0\n  local length_index37 = 0\n  local length_index38\
    \ = 0\n  local length_index39 = 0\n  local length_index40 = 0\n  local length_index41\
    \ = 0\n  local length_index42 = 0\n  local length_index43 = 0\n  local length_index44\
    \ = 0\n  local length_index45 = 0\n  local length_index46 = 0\n  local length_index47\
    \ = 0\n  local length_index48 = 0\n  local length_index49 = 0\n  local length_index50\
    \ = 0\n  local length_index51 = 0\n  local length_index52 = 0\n  local length_index53\
    \ = 0\n  local length_index54 = 0\n  local length_index55 = 0", "  local function\
    \ swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n\
    \  end\n  local function sort(arr)\n    local tmp = {}\n    for i = 1, #arr do\n\
    \      local j = i\n      while j > 1 and arr[j] < arr[j - 1] do\n        swap(arr,\
    \ j, j - 1)\n        j = j - 1\n      end\n      tmp[#tmp + 1] = arr[j]\n    end\n\
    \    return tmp\n  end\n  local function reverse(arr)\n    local tmp = {}\n  \
    \  for i = #arr, 1, -1 do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n\
    \  end\n  local function to_str(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return table.concat(tmp, \" \"\
    )\n  end\n  local function to_int(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return table.concat(tmp, \" \"\
    )\n  end\n  local function to_arr(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function\
    \ to_arr2(arr)\n    local tmp = {}\n    for i = 1, #arr do\n      tmp[#tmp + 1]\
    \ = arr[i]\n    end\n    return tmp\n  end\n  local function to_arr3(arr)\n  \
    \  local tmp = {}\n    for i = 1, #arr do\n      tmp[#tmp + 1] = arr[i]\n    end\n\
    \    return tmp\n  end\n  local function to_arr4(arr)\n    local tmp = {}\n  \
    \  for i = 1, #arr do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n\
    \  end\n  local function to_arr5(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function\
    \ to_arr6(arr)\n    local tmp = {}\n    for i = 1, #arr do\n      tmp[#tmp + 1]\
    \ = arr[i]\n    end\n    return tmp\n  end\n  local function to_arr7(arr)\n  \
    \  local tmp = {}\n    for i = 1, #arr do\n      tmp[#tmp + 1] = arr[i]\n    end\n\
    \    return tmp\n  end\n  local function to_arr8(arr)\n    local tmp = {}\n  \
    \  for i = 1, #arr do\n      tmp[#tmp + 1]", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  local name_arr = {\n    [\"One\"] = 1,\n    [\"Two\"] =\
    \ 2,\n    [\"Three\"] = 3,\n    [\"Four\"] = 4,\n    [\"Five\"] = 5,\n    [\"\
    Six\"] = 6,\n    [\"Seven\"] = 7,\n    [\"Eight\"] = 8,\n    [\"Nine\"] = 9,\n\
    \  }\n  for i = 1, #arr do\n    table.insert(sorted_arr, arr[i])\n    table.insert(reversed_arr,\
    \ arr[i]:reverse())\n  end\n  for i = 1, #sorted_arr do\n    table.insert(reversed_arr,\
    \ name_arr[sorted_arr[i]])\n  end\n  return reversed_arr\nend", "  local new_arr\
    \ = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 1 or num >\
    \ 9 then\n      new_arr[i] = num\n    else\n      local index = math.floor(math.log(num,\
    \ 10))\n      local digit = math.floor(num / math.pow(10, index))\n      new_arr[i]\
    \ = by_length[digit]\n    end\n  end\n  return new_arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local names = {}\n  local max_len = -1\n\
    \  for i = 1, #arr do\n    local len = arr[i]\n    if max_len == -1 or len > max_len\
    \ then\n      max_len = len\n    end\n  end\n  for i = 1, #arr do\n    local len\
    \ = arr[i]\n    if len == 1 then\n      sorted_arr[i] = names[1]\n    elseif len\
    \ == 2 then\n      sorted_arr[i] = names[2]\n    elseif len == 3 then\n      sorted_arr[i]\
    \ = names[3]\n    elseif len == 4 then\n      sorted_arr[i] = names[4]\n    elseif\
    \ len == 5 then\n      sorted_arr[i] = names[5]\n    elseif len == 6 then\n  \
    \    sorted_arr[i] = names[6]\n    elseif len == 7 then\n      sorted_arr[i] =\
    \ names[7]\n    elseif len == 8 then\n      sorted_arr[i] = names[8]\n    elseif\
    \ len == 9 then\n      sorted_arr[i] = names[9]\n    else\n      sorted_arr[i]\
    \ = names[len]\n    end\n  end\n  for i = 1, #arr do\n    reversed_arr[i] = reversed_arr[i]\
    \ or arr[i]\n  end\n  for i = 1, #arr do\n    arr[i] = reversed_arr[i]\n  end\n\
    \  return sorted_arr\nend", "  local sorted_arr = arr:sort()\n  local reversed_arr\
    \ = sorted_arr:reverse()\n  local results = {}\n  for i = 1, #reversed_arr do\n\
    \    local num = reversed_arr[i]\n    local name = numbers[num] or string.format(\"\
    %g\", num)\n    results[i] = name\n  end\n  return results\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local results = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    if length == nil then\n      sorted_arr[i] = nil\n\
    \      reversed_arr[i] = nil\n      results[i] = nil\n    else\n      local sorted_length\
    \ = math.floor(math.log10(length))\n      local reversed_length = math.floor(math.log10(length\
    \ + 1))\n      local reversed_digit = reversed_length - 1\n      local sorted_digit\
    \ = sorted_length - 1\n      local reversed_digit = reversed_length - 1\n    \
    \  local sorted_digit = sorted_length - 1\n      local reversed_digit = reversed_length\
    \ - 1\n      local sorted_digit = sorted_length - 1\n      local reversed_digit\
    \ = reversed_length - 1\n      local sorted_digit = sorted_length - 1\n      local\
    \ reversed_digit = reversed_length - 1\n      local sorted_digit = sorted_length\
    \ - 1\n      local reversed_digit = reversed_length - 1\n      local sorted_digit\
    \ = sorted_length - 1\n      local reversed_digit = reversed_length - 1\n    \
    \  local sorted_digit = sorted_length - 1\n      local reversed_digit = reversed_length\
    \ - 1\n      local sorted_digit = sorted_length - 1\n      local reversed_digit\
    \ = reversed_length - 1\n      local sorted_digit = sorted_length - 1\n      local\
    \ reversed_digit = reversed_length - 1\n      local sorted_digit = sorted_length\
    \ - 1\n      local reversed_digit = reversed_length - 1\n      local sorted_digit\
    \ = sorted_length - 1\n      local reversed_digit = reversed_length - 1\n    \
    \  local sorted_digit = sorted_length - 1\n      local reversed_digit = reversed_length\
    \ - 1\n      local sorted_digit = sorted_length - 1\n      local reversed_digit\
    \ = reversed_length - 1\n      local sorted_digit = sorted_length - 1\n      local\
    \ reversed_digit = reversed_length - 1\n      local sorted_digit = sorted_length\
    \ - 1\n      local reversed_digit = reversed_length - 1\n      local sorted_digit\
    \ = sorted_length - 1\n      local reversed_digit = reversed_length - 1\n    \
    \  local sorted_digit = sorted_length - 1\n      local reversed_digit = reversed_length\
    \ - 1\n      local sorted_digit = sorted_length - 1\n      local reversed_digit\
    \ = reversed_length - 1\n      local sorted_digit = sorted_length - 1\n      local\
    \ reversed_digit = reversed_length - 1\n      local sorted_digit = sorted_length\
    \ - 1\n      local reversed_digit = reversed_length - 1\n      local sorted_digit\
    \ = sorted_length - 1\n      local reversed_digit = reverse", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    table.insert(lengths, length)\n    table.insert(sorted_arr,\
    \ arr[i])\n  end\n  table.sort(lengths)\n  for i = 1, #lengths do\n    table.insert(reversed_arr,\
    \ lengths[i])\n  end\n  for i = 1, #arr do\n    local length = arr[i]\n    local\
    \ index = reversed_arr[length]\n    arr[i] = sorted_arr[index]\n  end\n  return\
    \ arr\nend", "  local arr2 = {}\n  for i = 1, #arr do\n    arr2[#arr2 + 1] = arr[i]\n\
    \  end\n  table.sort(arr2, function(a, b) return #a > #b end)\n  local reversed\
    \ = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n  end\n\
    \  table.sort(reversed, function(a, b) return #a > #b end)\n  local result = {}\n\
    \  for i = 1, #reversed do\n    result[#result + 1] = reversed[i]\n  end\n  return\
    \ result\nend", "  local function swap(arr, i, j)\n    local tmp = arr[i]\n  \
    \  arr[i] = arr[j]\n    arr[j] = tmp\n  end", "  local function swap(arr, i, j)\n\
    \    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end", "  local\
    \ function sort(a, b)\n    if a < b then\n      return 1\n    elseif b < a then\n\
    \      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ sort)\n  local function reverse(array)\n    local new_array = {}\n    for i\
    \ = #array, 1, -1 do\n      table.insert(new_array, array[i])\n    end\n    return\
    \ new_array\n  end\n  local function replace_digit(array)\n    local new_array\
    \ = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array, tostring(array[i]))\n\
    \    end\n    return new_array\n  end\n  local function replace_digit_by_name(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ tostring(array[i]))\n    end\n    return new_array\n  end\n  if #arr == 0 then\n\
    \    return {}\n  elseif #arr == 1 then\n    return replace_digit(arr)\n  else\n\
    \    return replace_digit_by_name(reverse(sort(arr)))\n  end\nend", "  local function\
    \ sort(a, b)\n    if a < b then\n      return 1\n    elseif b < a then\n     \
    \ return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr, sort)\n\
    \  local function reverse(arr, start, end)\n    local n = end - start\n    local\
    \ new_arr = {}\n    for i = start, n do\n      new_arr[i] = arr[i]\n    end\n\
    \    table.sort(new_arr, sort)\n    for i = start, n do\n      arr[i] = new_arr[i]\n\
    \    end\n  end\n  reverse(arr, 1, #arr)\n  return arr\nend", "  local arr2 =\
    \ {}\n  local i = 0\n  while i < #arr do\n    local j = i + 1\n    while j < #arr\
    \ do\n      if arr[i] > arr[j] then\n        arr2[i] = arr[j]\n        arr[j]\
    \ = arr[i]\n      end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return\
    \ arr2\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index\
    \ = 0\n  local reversed_arr_index = 0\n  local length = 0\n  for i = 1, #arr do\n\
    \    length = length + 1\n  end\n  for i = 1, #arr do\n    if arr[i] > 1 then\n\
    \      sorted_arr[sorted_arr_index] = arr[i]\n      sorted_arr_index = sorted_arr_index\
    \ + 1\n    end\n  end\n  for i = 1, #arr do\n    if arr[i] > 1 then\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n\
    \  for i = 1, length do\n    sorted_arr[sorted_arr_index] = reversed_arr[reversed_arr_index]\n\
    \    sorted_arr_index = sorted_arr_index + 1\n    reversed_arr_index = reversed_arr_index\
    \ + 1\n  end\n  return sorted_arr\nend", "  local function swap(arr, i, j)\n \
    \   local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local\
    \ function sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n   \
    \ for i = 1, len do\n      local j = len - 1\n      while j > 0 and arr[j] > arr[j\
    \ + 1] do\n        swap(arr, j, j - 1)\n        j = j - 1\n      end\n      tmp[#tmp\
    \ + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function reverse_sort_by_length(arr)\n\
    \    local tmp = {}\n    local len = #arr\n    for i = 1, len do\n      local\
    \ j = len - 1\n      while j > 0 and arr[j] < arr[j + 1] do\n        swap(arr,\
    \ j, j - 1)\n        j = j - 1\n      end\n      tmp[#tmp + 1] = arr[i]\n    end\n\
    \    return tmp\n  end\n  local function sort_by_length(arr)\n    local tmp =\
    \ {}\n    local len = #arr\n    for i = 1, len do\n      local j = len - 1\n \
    \     while j > 0 and arr[j] > arr[j + 1] do\n        swap(arr, j, j - 1)\n  \
    \      j = j - 1\n      end\n      tmp[#tmp + 1] = arr[i]\n    end\n    return\
    \ tmp\n  end\n  local function reverse_sort_by_length(arr)\n    local tmp = {}\n\
    \    local len = #arr\n    for i = 1, len do\n      local j = len - 1\n      while\
    \ j > 0 and arr[j] < arr[j + 1] do\n        swap(arr, j, j - 1)\n        j = j\
    \ - 1\n      end\n      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n  end\n\
    \  local function sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n\
    \    for i = 1, len do\n      local j = len - 1\n      while j > 0 and arr[j]\
    \ > arr[j + 1] do\n        swap(arr, j, j - 1)\n        j = j - 1\n      end\n\
    \      tmp[#tmp + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function\
    \ reverse_sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n    for\
    \ i = 1, len do\n      local j = len - 1\n      while j > 0 and arr[j] < arr[j\
    \ + 1] do\n        swap(arr, j, j - 1)\n        j = j - 1\n      end\n      tmp[#tmp\
    \ + 1] = arr[i]\n    end\n    return tmp\n  end\n  local function sort_by_length(arr)\n\
    \    local tmp = {}\n", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local sorted_arr_idx = 1\n  local reversed_arr_idx = 1\n  local length = #arr\n\
    \  for i = 1, length do\n    if arr[i] > 9 then\n      sorted_arr[sorted_arr_idx]\
    \ = arr[i]\n      reversed_arr[reversed_arr_idx] = arr[i]\n      sorted_arr_idx\
    \ = sorted_arr_idx + 1\n      reversed_arr_idx = reversed_arr_idx + 1\n    else\n\
    \      reversed_arr[reversed_arr_idx] = arr[i]\n      reversed_arr_idx = reversed_arr_idx\
    \ + 1\n    end\n  end\n  reversed_arr[reversed_arr_idx] = nil\n  sorted_arr[sorted_arr_idx]\
    \ = nil\n  return reversed_arr\nend", "  local function sort(a, b)\n    if a <\
    \ b then\n      return 1\n    elseif b < a then\n      return -1\n    else\n \
    \     return 0\n    end\n  end\n  table.sort(arr, sort)\n  local reversed = {}\n\
    \  for i = #arr, 1, -1 do\n    reversed[#reversed + 1] = arr[i]\n  end\n  return\
    \ reversed\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ names = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 1 or\
    \ num > 9 then\n      table.insert(sorted_arr, num)\n    else\n      table.insert(reversed_arr,\
    \ num)\n      names[#names + 1] = names[#names + 1] or tostring(num)\n    end\n\
    \  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    table.insert(sorted_arr,\
    \ names[reversed_arr[i]])\n  end\n  return sorted_arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local name_arr = {\n    [1] = \"One\",\n\
    \    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] = \"Four\",\n    [5] = \"Five\"\
    ,\n    [6] = \"Six\",\n    [7] = \"Seven\",\n    [8] = \"Eight\",\n    [9] = \"\
    Nine\",\n  }\n  for i = 1, #arr do\n    table.insert(sorted_arr, arr[i])\n   \
    \ table.insert(reversed_arr, arr[i])\n  end\n  table.sort(reversed_arr)\n  for\
    \ i = 1, #reversed_arr do\n    arr[i] = name_arr[reversed_arr[i]]\n  end\n  return\
    \ arr\nend", "  local function sort(a, b)\n    if a < b then\n      return 1\n\
    \    elseif b < a then\n      return -1\n    else\n      return 0\n    end\n \
    \ end\n  table.sort(arr, sort)\n  local function reverse(array)\n    local reversed\
    \ = {}\n    for i = #array, 1, -1 do\n      table.insert(reversed, array[i])\n\
    \    end\n    return reversed\n  end\n  local function to_name(number)\n    local\
    \ names = {\n      [1] = tostring(\"One\"),\n      [2] = tostring(\"Two\"),\n\
    \      [3] = tostring(\"Three\"),\n      [4] = tostring(\"Four\"),\n      [5]\
    \ = tostring(\"Five\"),\n      [6] = tostring(\"Six\"),\n      [7] = tostring(\"\
    Seven\"),\n      [8] = tostring(\"Eight\"),\n      [9] = tostring(\"Nine\"),\n\
    \    }\n    return names[number]\n  end\n  local function to_number(name)\n  \
    \  local names = {\n      [\"One\"] = 1,\n      [\"Two\"] = 2,\n      [\"Three\"\
    ] = 3,\n      [\"Four\"] = 4,\n      [\"Five\"] = 5,\n      [\"Six\"] = 6,\n \
    \     [\"Seven\"] = 7,\n      [\"Eight\"] = 8,\n      [\"Nine\"] = 9,\n    }\n\
    \    return names[name]\n  end\n  local function to_string(array)\n    local str\
    \ = \"\"\n    for i = 1, #array do\n      str = str .. to_name(array[i]) .. \"\
    , \"\n    end\n    return str:sub(1, -2)\n  end\n  return reverse(to_number(to_string(arr)))\n\
    end", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index\
    \ = 0\n  local reversed_arr_index = 0\n  local length = 1\n  local max_index =\
    \ 0\n  local max_value = 0\n  local max_value_index = 0\n  local max_value_length\
    \ = 1\n  for i = 1, #arr do\n    local value = arr[i]\n    if value > max_value\
    \ then\n      max_value = value\n      max_value_index = i\n      max_value_length\
    \ = length\n    end\n    length = length + 1\n  end\n  table.insert(sorted_arr,\
    \ max_value)\n  table.insert(reversed_arr, max_value)\n  table.insert(reversed_arr,\
    \ max_value_index)\n  table.insert(reversed_arr, max_value_length)\n  table.insert(reversed_arr,\
    \ length)\n  table.insert(reversed_arr, max_index)\n  table.insert(reversed_arr,\
    \ max_value_length)\n  table.insert(reversed_arr, max_value_index)\n  table.insert(reversed_arr,\
    \ max_value)\n  for i = 1, #arr do\n    local value = arr[i]\n    local index\
    \ = i\n    local length = length + 1\n    if value > max_value then\n      table.insert(sorted_arr,\
    \ value)\n      table.insert(reversed_arr, value)\n      table.insert(reversed_arr,\
    \ index)\n      table.insert(reversed_arr, length)\n      table.insert(reversed_arr,\
    \ i)\n      table.insert(reversed_arr, length)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, index)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)\n      table.insert(reversed_arr, i)\n      table.insert(reversed_arr,\
    \ value)", "  local sorted_arr = {}\n  local reversed_arr = {}\n  for i = 1, #arr\
    \ do\n    local length = math.floor(math.abs(arr[i]))\n    if length == 0 then\n\
    \      sorted_arr[i] = nil\n    elseif length == 1 then\n      sorted_arr[i] =\
    \ \"One\"\n    elseif length == 2 then\n      sorted_arr[i] = \"Two\"\n    elseif\
    \ length == 3 then\n      sorted_arr[i] = \"Three\"\n    elseif length == 4 then\n\
    \      sorted_arr[i] = \"Four\"\n    elseif length == 5 then\n      sorted_arr[i]\
    \ = \"Five\"\n    elseif length == 6 then\n      sorted_arr[i] = \"Six\"\n   \
    \ elseif length == 7 then\n      sorted_arr[i] = \"Seven\"\n    elseif length\
    \ == 8 then\n      sorted_arr[i] = \"Eight\"\n    elseif length == 9 then\n  \
    \    sorted_arr[i] = \"Nine\"\n    else\n      sorted_arr[i] = \"?\"\n    end\n\
    \    reversed_arr[length] = arr[i]\n  end\n  return sorted_arr, reversed_arr\n\
    end", "  local function sort(a, b)\n    if a < b then\n      return 1\n    elseif\
    \ b < a then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ sort)\n  local function reverse(array)\n    local reversed = {}\n    for i =\
    \ #array, 1, -1 do\n      table.insert(reversed, array[i])\n    end\n    return\
    \ reversed\n  end\n  local function to_name(number)\n    local names = {\n   \
    \   [1] = \"One\",\n      [2] = \"Two\",\n      [3] = \"Three\",\n      [4] =\
    \ \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\",\n      [7] = \"Seven\"\
    ,\n      [8] = \"Eight\",\n      [9] = \"Nine\",\n    }\n    return names[number]\n\
    \  end\n  local function to_number(name)\n    local names = {\n      [\"One\"\
    ] = 1,\n      [\"Two\"] = 2,\n      [\"Three\"] = 3,\n      [\"Four\"] = 4,\n\
    \      [\"Five\"] = 5,\n      [\"Six\"] = 6,\n      [\"Seven\"] = 7,\n      [\"\
    Eight\"] = 8,\n      [\"Nine\"] = 9,\n    }\n    return names[name]\n  end\n \
    \ local function to_number(name)\n    local names = {\n      [\"One\"] = 1,\n\
    \      [\"Two\"] = 2,\n      [\"Three\"] = 3,\n      [\"Four\"] = 4,\n      [\"\
    Five\"] = 5,\n      [\"Six\"] = 6,\n      [\"Seven\"] = 7,\n      [\"Eight\"]\
    \ = 8,\n      [\"Nine\"] = 9,\n    }\n    return names[name]\n  end\n  local function\
    \ to_number(name)\n    local names = {\n      [\"One\"] = 1,\n      [\"Two\"]\
    \ = 2,\n      [\"Three\"] = 3,\n      [\"Four\"] = 4,\n      [\"Five\"] = 5,\n\
    \      [\"Six\"] = 6,\n      [\"Seven\"] = 7,\n      [\"Eight\"] = 8,\n      [\"\
    Nine\"] = 9,\n    }\n    return names[name]\n  end\n  local function to_number(name)\n\
    \    local names = {\n      [\"One\"] = 1,\n      [\"Two\"] = 2,\n      [\"Three\"\
    ] = 3,\n      [\"Four\"] = 4,\n      [\"Five\"] = 5,\n      [\"Six\"] = 6,\n \
    \     [\"Seven\"] = 7,\n      [\"Eight\"] = 8,\n      [\"Nine\"] = 9,\n    }\n\
    \    return names[name]\n  end\n  local function to_number(name)\n    local names\
    \ = {\n      [\"One\"] = 1,\n      [\"Two\"] = 2,\n      [\"Three\"] = 3,\n  \
    \    [\"Four", "  local function sort_by_length(arr)\n    local sorted_arr = {}\n\
    \    local length = #arr\n    for i = 1, length do\n      local value = arr[i]\n\
    \      local index = i\n      while index > 0 and value < arr[index - 1] do\n\
    \        arr[index] = arr[index - 1]\n        index = index - 1\n      end\n \
    \     arr[index] = value\n      sorted_arr[i] = arr[i]\n    end\n    return sorted_arr\n\
    \  end\n  local function reverse_arr(arr)\n    local length = #arr\n    local\
    \ new_arr = {}\n    for i = 1, length do\n      new_arr[i] = arr[length - i -\
    \ 1]\n    end\n    return new_arr\n  end\n  local function replace_digit(arr,\
    \ index, name)\n    arr[index] = name\n  end\n  local function is_empty(arr)\n\
    \    return #arr == 0\n  end\n  local function is_strange(arr)\n    return #arr\
    \ > 0 and arr[1] > 0 and arr[1] < 9\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_sorted(arr)\n\
    \    return #arr > 0 and arr[1] == arr[1]\n  end\n  local function is_reverse(arr)",
  "  local function sort(a, b)\n    if a < b then\n      return 1\n    elseif b <\
    \ a then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ sort)\n  local function reverse(arr, start, end)\n    local tmp\n    for i =\
    \ start, end do\n      tmp = arr[i]\n      arr[i] = arr[end]\n      arr[end] =\
    \ tmp\n    end\n  end\n  reverse(arr, 1, #arr)\n  local function replace_digit(arr,\
    \ start, end)\n    local tmp\n    for i = start, end do\n      tmp = arr[i]\n\
    \      arr[i] = \"One\"\n      arr[end] = \"Nine\"\n    end\n  end\n  replace_digit(arr,\
    \ 1, #arr)\n  return arr\nend", "  local function compare(a, b)\n    if a < b\
    \ then\n      return -1\n    elseif b < a then\n      return 1\n    else\n   \
    \   return 0\n    end\n  end\n  table.sort(arr, compare)\n  local reversed = {}\n\
    \  for i = 1, #arr do\n    reversed[#reversed + 1] = arr[i]\n  end\n  table.sort(reversed,\
    \ compare)\n  local result = {}\n  for i = 1, #reversed do\n    table.insert(result,\
    \ string.format(\"%g\", reversed[i]))\n  end\n  return result\nend", "  local\
    \ function sort_by_length(arr)\n    local sorted_arr = {}\n    local len = #arr\n\
    \    for i = 1, len do\n      local value = arr[i]\n      local pos = math.floor(math.log(value)\
    \ / math.log(10))\n      table.insert(sorted_arr, value)\n      table.insert(sorted_arr,\
    \ len-i)\n      table.insert(sorted_arr, len-i+1)\n      table.insert(sorted_arr,\
    \ len-i+2)\n      table.insert(sorted_arr, len-i+3)\n      table.insert(sorted_arr,\
    \ len-i+4)\n      table.insert(sorted_arr, len-i+5)\n      table.insert(sorted_arr,\
    \ len-i+6)\n      table.insert(sorted_arr, len-i+7)\n      table.insert(sorted_arr,\
    \ len-i+8)\n      table.insert(sorted_arr, len-i+9)\n    end\n    table.sort(sorted_arr)\n\
    \    local reversed_arr = {}\n    for i = 1, len do\n      table.insert(reversed_arr,\
    \ sorted_arr[i])\n    end\n    return reversed_arr\n  end\n  local reversed_arr\
    \ = sort_by_length(arr)\n  local names = {}\n  for i = 1, #reversed_arr do\n \
    \   local value = reversed_arr[i]\n    local pos = math.floor(math.log(value)\
    \ / math.log(10))\n    local name = names[pos]\n    if not name then\n      name\
    \ = string.format(\"One\")\n      names[pos] = name\n    end\n    reversed_arr[i]\
    \ = name\n  end\n  return reversed_arr\nend", "  local function sort(a, b)\n \
    \   if a < b then\n      return 1\n    elseif b < a then\n      return -1\n  \
    \  else\n      return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function\
    \ reverse(a)\n    local b = {}\n    for i = #a, 1, -1 do\n      table.insert(b,\
    \ a[i])\n    end\n    return b\n  end\n  local function replace(a)\n    local\
    \ b = {}\n    for i = 1, 9 do\n      table.insert(b, tostring(a[i]))\n    end\n\
    \    return b\n  end\n  local function to_arr(a)\n    local b = {}\n    for i\
    \ = 1, 9 do\n      table.insert(b, a[i])\n    end\n    return b\n  end\n  local\
    \ function to_str(arr)\n    local b = {}\n    for i = 1, 9 do\n      table.insert(b,\
    \ tostring(arr[i]))\n    end\n    return b\n  end\n  local function to_str_reverse(arr)\n\
    \    local b = {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n\
    \    end\n    return b\n  end\n  local function to_str_sort(arr)\n    local b\
    \ = {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n    for i = 1, 9 do\n      table.insert(b, tostring(arr[i]))\n    end\n\
    \    return b\n  end\n  local function to_str_sort_reverse(arr)\n    local b =\
    \ {}\n", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local name_arr\
    \ = {\n    ['One'] = 1,\n    ['Two'] = 2,\n    ['Three'] = 3,\n    ['Four'] =\
    \ 4,\n    ['Five'] = 5,\n    ['Six'] = 6,\n    ['Seven'] = 7,\n    ['Eight'] =\
    \ 8,\n    ['Nine'] = 9,\n  }\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then\n      sorted_arr[i] = nil\n    elseif length < 1 then\n\
    \      sorted_arr[i] = nil\n    elseif length < 9 then\n      sorted_arr[i] =\
    \ nil\n    else\n      local index = math.floor(length / 10)\n      local digit\
    \ = length % 10\n      local name = name_arr[index]\n      reversed_arr[digit]\
    \ = name\n      sorted_arr[i] = name\n    end\n  end\n  return sorted_arr, reversed_arr\n\
    end", "  local sorted_arr = arr:sort()\n  local reversed_arr = sorted_arr:reverse()\n\
    \  local result = {}\n  for i = 1, #reversed_arr do\n    table.insert(result,\
    \ string.format(\"%g\", reversed_arr[i]))\n  end\n  return result\nend", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  for i = 1, #arr do\n    local\
    \ length = math.floor(math.abs(arr[i]))\n    if length == 0 then\n      sorted_arr[i]\
    \ = nil\n    elseif length == 1 then\n      sorted_arr[i] = \"One\"\n    elseif\
    \ length == 2 then\n      sorted_arr[i] = \"Two\"\n    elseif length == 3 then\n\
    \      sorted_arr[i] = \"Three\"\n    elseif length == 4 then\n      sorted_arr[i]\
    \ = \"Four\"\n    elseif length == 5 then\n      sorted_arr[i] = \"Five\"\n  \
    \  elseif length == 6 then\n      sorted_arr[i] = \"Six\"\n    elseif length ==\
    \ 7 then\n      sorted_arr[i] = \"Seven\"\n    elseif length == 8 then\n     \
    \ sorted_arr[i] = \"Eight\"\n    elseif length == 9 then\n      sorted_arr[i]\
    \ = \"Nine\"\n    else\n      sorted_arr[i] = \"?\"\n    end\n    reversed_arr[length]\
    \ = arr[i]\n  end\n  return table.concat(sorted_arr, \"-\") and table.concat(reversed_arr,\
    \ \"-\")\nend", "  local function sort(a, b)\n    if a < b then\n      return\
    \ 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, sort)\n  local function reverse(a)\n    local b = {}\n\
    \    for i = #a, 1, -1 do\n      table.insert(b, a[i])\n    end\n    return b\n\
    \  end\n  local function replace(a)\n    local b = {}\n    for i = #a, 1, -1 do\n\
    \      table.insert(b, map[a[i]])\n    end\n    return b\n  end\n  local function\
    \ filter(a)\n    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil\
    \ then\n        table.insert(b, a[i])\n      end\n    end\n    return b\n  end\n\
    \  local function filter_by_length(a)\n    local b = {}\n    for i = #a, 1, -1\
    \ do\n      if a[i] ~= nil then\n        table.insert(b, map[a[i]:len() .. a[i]:sub(1,\
    \ 1)])\n      end\n    end\n    return b\n  end\n  local function filter_by_length_and_replace(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil then\n     \
    \   table.insert(b, map[a[i]:len() .. a[i]:sub(1, 1)])\n      end\n    end\n \
    \   return b\n  end\n  local function filter_by_length_and_replace_with_filter(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil then\n     \
    \   table.insert(b, map[a[i]:len() .. a[i]:sub(1, 1)])\n      end\n    end\n \
    \   return b\n  end\n  local function filter_by_length_and_replace_with_filter_and_reverse(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil then\n     \
    \   table.insert(b, map[a[i]:len() .. a[i]:sub(1, 1)])\n      end\n    end\n \
    \   return b\n  end\n  local function filter_by_length_and_replace_with_filter_and_reverse_and_reverse(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil then\n     \
    \   table.insert(b, map[a[i]:len() .. a[i]:sub(1, 1)])\n      end\n    end\n \
    \   return b\n  end\n  local function filter_by_length_and_replace_with_filter_and_reverse_and_reverse_and_reverse(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      if a[i] ~= nil then\n     \
    \   table.insert(b, map[a[i]:len() .. a[i]:sub", "  local function swap(arr, i,\
    \ j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n \
    \ local function sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n\
    \    local i = 0\n    while i < len do\n      local j = len - 1\n      while j\
    \ > i do\n        if arr[j] < arr[j - 1] then\n          swap(arr, j, j - 1)\n\
    \        end\n        j = j - 1\n      end\n      tmp[i] = arr[i]\n      i = i\
    \ + 1\n    end\n    return tmp\n  end\n  local function reverse(arr)\n    local\
    \ tmp = {}\n    local len = #arr\n    local i = 0\n    while i < len do\n    \
    \  tmp[i] = arr[i]\n      i = i + 1\n    end\n    local j = len - 1\n    while\
    \ j > 0 do\n      swap(arr, j, j - 1)\n      j = j - 1\n    end\n    return tmp\n\
    \  end\n  local function replace_digit(arr, index, name)\n    local tmp = {}\n\
    \    local len = #arr\n    local i = 0\n    while i < len do\n      tmp[i] = arr[i]\n\
    \      i = i + 1\n    end\n    local j = len - 1\n    while j > index do\n   \
    \   tmp[j] = name\n      j = j - 1\n    end\n    return tmp\n  end\n  local function\
    \ sort_and_reverse(arr)\n    local tmp = sort_by_length(arr)\n    return reverse(sort_by_length(tmp))\n\
    \  end\n  local function sort_and_replace_digit(arr, index, name)\n    local tmp\
    \ = sort_by_length(arr)\n    return replace_digit(tmp, index, name)\n  end\n \
    \ local function sort_and_replace_digit_reverse(arr, index, name)\n    local tmp\
    \ = sort_by_length(arr)\n    return reverse(sort_and_replace_digit(tmp, index,\
    \ name))\n  end\n  if #arr == 0 then\n    return {}\n  end\n  local tmp = sort_and_replace_digit_reverse(arr,\
    \ 1, \"One\")\n  local len = #tmp\n  local i = 0\n  while i < len do\n    arr[i]\
    \ = tmp[i]\n    i = i + 1\n  end\n  return arr\nend", "  local function sort(a,\
    \ b)\n    if a < b then\n      return 1\n    elseif b < a then\n      return -1\n\
    \    else\n      return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function\
    \ reverse(array)\n    local new_array = {}\n    for i = #array, 1, -1 do\n   \
    \   table.insert(new_array, array[i])\n    end\n    return new_array\n  end\n\
    \  local function replace_digit(array)\n    local new_array = {}\n    for i =\
    \ #array, 1, -1 do\n      table.insert(new_array, map[array[i]])\n    end\n  \
    \  return new_array\n  end\n  local function replace_digit_reverse(array)\n  \
    \  local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    return new_array\n  end\n  local function replace_digit_reverse_with_sort(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    table.sort(new_array)\n    return new_array\n \
    \ end\n  local function replace_digit_reverse_with_sort_with_sort(array)\n   \
    \ local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    table.sort(new_array)\n    table.sort(new_array)\n\
    \    return new_array\n  end\n  local function replace_digit_reverse_with_sort_with_sort_with_sort(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    table.sort(new_array)\n    table.sort(new_array)\n\
    \    table.sort(new_array)\n    return new_array\n  end\n  local function replace_digit_reverse_with_sort_with_sort_with_sort_with_sort(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    table.sort(new_array)\n    table.sort(new_array)\n\
    \    table.sort(new_array)\n    table.sort(new_array)\n    return new_array\n\
    \  end\n  local function replace_digit_reverse_with_sort_with_sort_with_sort_with_sort(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ map[array[i]])\n    end\n    table.sort(new_array)\n    table.sort(new_array)\n\
    \    table.sort(new_array)\n    table.sort(new_array)\n    table.sort(new_array)\n\
    \    return new_array\n  end\n  local function replace_digit_reverse_with_sort_with_sort_with_sort_with_sort_with_sort(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array, ",
  "  local sorted_arr = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for\
    \ i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n    if not\
    \ lengths[length] then\n      lengths[length] = true\n      sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    end\n    reversed_arr[#reversed_arr + 1] = arr[i]\n  end\n\
    \  for i = 1, #sorted_arr do\n    local length = math.floor(math.log10(sorted_arr[i]))\n\
    \    if lengths[length] then\n      sorted_arr[i] = reversed_arr[lengths[length]]\n\
    \      lengths[length] = nil\n    end\n  end\n  return sorted_arr\nend", "  local\
    \ function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j]\
    \ = tmp\n  end\n  local function sort(arr)\n    local tmp\n    local len = #arr\n\
    \    for i = 1, len do\n      tmp = arr[i]\n      for j = i + 1, len do\n    \
    \    if tmp < arr[j] then\n          swap(arr, i, j)\n        end\n      end\n\
    \    end\n    return arr\n  end\n  local function reverse(arr)\n    local tmp\n\
    \    local len = #arr\n    for i = 1, len do\n      tmp = arr[i]\n      for j\
    \ = len - 1, i, -1 do\n        if tmp > arr[j] then\n          swap(arr, j, i)\n\
    \        end\n      end\n    end\n    return arr\n  end\n  local function to_name(num)\n\
    \    local names = {\n      [1] = tostring(\"One\"),\n      [2] = tostring(\"\
    Two\"),\n      [3] = tostring(\"Three\"),\n      [4] = tostring(\"Four\"),\n \
    \     [5] = tostring(\"Five\"),\n      [6] = tostring(\"Six\"),\n      [7] = tostring(\"\
    Seven\"),\n      [8] = tostring(\"Eight\"),\n      [9] = tostring(\"Nine\")\n\
    \    }\n    return names[num]\n  end\n  local function to_num(str)\n    local\
    \ num\n    local names = {\n      [\"One\"] = 1,\n      [\"Two\"] = 2,\n     \
    \ [\"Three\"] = 3,\n      [\"Four\"] = 4,\n      [\"Five\"] = 5,\n      [\"Six\"\
    ] = 6,\n      [\"Seven\"] = 7,\n      [\"Eight\"] = 8,\n      [\"Nine\"] = 9\n\
    \    }\n    for i = 1, #str do\n      local c = str:sub(i, i)\n      if names[c]\
    \ then\n        num = names[c]\n        break\n      end\n    end\n    return\
    \ num\n  end\n  local function to_arr(arr)\n    local arr2 = {}\n    local len\
    \ = #arr\n    for i = 1, len do\n      arr2[i] = to_num(arr[i])\n    end\n   \
    \ return arr2\n  end\n  local function to_arr2(arr)\n    local arr2 = {}\n   \
    \ local len = #arr\n    for i = 1, len do\n      arr2[i] = to_name(arr[i])\n \
    \   end\n    return arr2\n  end\n  local function to_arr3(arr)\n    local arr2\
    \ = {}\n    local len = #arr\n    for i = 1, len do\n      arr2[i] = arr[i]\n\
    \    end\n    return arr2\n  end\n  local function to_arr4(arr)\n    local arr2\
    \ = ", "  local results = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then break end\n    local name = \"\"\n    if length < 10\
    \ then\n      name = \"One\"\n    elseif length < 20 then\n      name = \"Two\"\
    \n    elseif length < 30 then\n      name = \"Three\"\n    elseif length < 40\
    \ then\n      name = \"Four\"\n    elseif length < 50 then\n      name = \"Five\"\
    \n    elseif length < 60 then\n      name = \"Six\"\n    elseif length < 70 then\n\
    \      name = \"Seven\"\n    elseif length < 80 then\n      name = \"Eight\"\n\
    \    elseif length < 90 then\n      name = \"Nine\"\n    end\n    table.insert(results,\
    \ name)\n  end\n  return results\nend", "  local len = #arr\n  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  for i = 1, len do\n    local value = arr[i]\n\
    \    local pos = math.floor(math.log(value) / math.log(10))\n    local digit =\
    \ math.floor((math.log(value) / math.log(10)) - pos * 10)\n    sorted_arr[pos]\
    \ = digit\n    reversed_arr[digit] = value\n  end\n  for i = 1, len do\n    arr[i]\
    \ = reversed_arr[sorted_arr[i]]\n  end\n  return arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length < 1 or length > 9 then\n      -- ignore strange numbers\n     \
    \ continue\n    end\n    local index = math.floor(math.log2(length))\n    local\
    \ digit = math.pow(10, index)\n    local reversed_digit = math.pow(10, #reversed_arr\
    \ + index - 1)\n    local reversed_index = #reversed_arr + index - 1\n    local\
    \ reversed_digit = reversed_digit - digit\n    local reversed_index = reversed_index\
    \ - digit\n    local reversed_digit = reversed_digit * reversed_index\n    local\
    \ reversed_index = reversed_index * digit\n    local reversed_digit = reversed_digit\
    \ + digit\n    local reversed_index = reversed_index + digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reversed_digit + reversed_index\n\
    \    local reversed_index = reversed_index + reversed_digit\n    local reversed_digit\
    \ = reversed_digit + reversed_index\n    local reversed_index = reversed_index\
    \ + reversed_digit\n    local reversed_digit = reverse", "  local sorted_arr =\
    \ {}\n  local reversed_arr = {}\n  local names = {}\n  for i = 1, #arr do\n  \
    \  local length = math.floor(math.abs(arr[i]))\n    if length == 0 then\n    \
    \  table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr, arr[i])\n\
    \    elseif length == 1 then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n      table.insert(names, tostring(arr[i]))\n    elseif length == 2\
    \ then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n      table.insert(names, tostring(arr[i]) .. tostring(arr[i]))\n \
    \   elseif length == 3 then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n      table.insert(names, tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]))\n\
    \    elseif length == 4 then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n      table.insert(names, tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]))\n    elseif length == 5 then\n      table.insert(sorted_arr,\
    \ arr[i])\n      table.insert(reversed_arr, arr[i])\n      table.insert(names,\
    \ tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]))\n    elseif length == 6 then\n      table.insert(sorted_arr,\
    \ arr[i])\n      table.insert(reversed_arr, arr[i])\n      table.insert(names,\
    \ tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]) .. tostring(arr[i]))\n    elseif length == 7 then\n    \
    \  table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr, arr[i])\n\
    \      table.insert(names, tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]))\n\
    \    elseif length == 8 then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n      table.insert(names, tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i]) .. tostring(arr[i])\
    \ .. tostring(arr[i]))\n    elseif length == 9 then\n      table.insert(sorted_arr,\
    \ arr[i])\n      table.insert(reversed_arr, arr[i])\n      table.insert(names,\
    \ to", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local lengths =\
    \ {}\n  for i = 1, #arr do\n    local length = arr[i]\n    table.insert(lengths,\
    \ length)\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(lengths)\n\
    \  for i = 1, #lengths do\n    local length = lengths[i]\n    table.insert(reversed_arr,\
    \ arr[length])\n  end\n  for i = 1, #reversed_arr do\n    table.insert(sorted_arr,\
    \ reversed_arr[i])\n  end\n  return sorted_arr\nend", "  local function swap(arr,\
    \ i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n\
    \  local function sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n\
    \    local i = 0\n    local j = 1\n    while i < len do\n      while i < len and\
    \ arr[i] < arr[j] do\n        i = i + 1\n      end\n      while i < len and arr[i]\
    \ > arr[j] do\n        j = j + 1\n      end\n      if i < len then\n        swap(arr,\
    \ i, j)\n      end\n    end\n    return arr\n  end\n  local function reverse_sort_by_length(arr)\n\
    \    local tmp = {}\n    local len = #arr\n    local i = 0\n    local j = 1\n\
    \    while i < len do\n      while i < len and arr[i] > arr[j] do\n        i =\
    \ i + 1\n      end\n      while i < len and arr[i] < arr[j] do\n        j = j\
    \ + 1\n      end\n      if i < len then\n        swap(arr, i, j)\n      end\n\
    \    end\n    return arr\n  end\n  local function replace_digit(arr, i, name)\n\
    \    local tmp = arr[i]\n    arr[i] = name\n    return tmp\n  end\n  local function\
    \ sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n    local i =\
    \ 0\n    local j = 1\n    while i < len do\n      while i < len and arr[i] < arr[j]\
    \ do\n        i = i + 1\n      end\n      while i < len and arr[i] > arr[j] do\n\
    \        j = j + 1\n      end\n      if i < len then\n        swap(arr, i, j)\n\
    \      end\n    end\n    return arr\n  end\n  local function reverse_sort_by_length(arr)\n\
    \    local tmp = {}\n    local len = #arr\n    local i = 0\n    local j = 1\n\
    \    while i < len do\n      while i < len and arr[i] > arr[j] do\n        i =\
    \ i + 1\n      end\n      while i < len and arr[i] < arr[j] do\n        j = j\
    \ + 1\n      end\n      if i < len then\n        swap(arr, i, j)\n      end\n\
    \    end\n    return arr\n  end\n  local function replace_digit(arr, i, name)\n\
    \    local tmp = arr[i]\n    arr[i] = name\n    return tmp\n  end\n  local function\
    \ sort_by_length(arr)\n    local tmp = {}\n    local len = #arr\n    local i =\
    \ 0\n    local j = 1\n    while i < len do\n      while i < len and arr[i] < arr[j]\
    \ do\n        i = i + 1\n      ", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(lengths)\n  for i = 1, #lengths do\n    table.insert(reversed_arr,\
    \ lengths[i])\n  end\n  for i = 1, #arr do\n    local length = arr[i]\n    local\
    \ index = reversed_arr[length]\n    arr[i] = sorted_arr[index]\n  end\n  return\
    \ arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local names\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n   \
    \ table.insert(reversed_arr, arr[i]:reverse())\n    table.insert(names, string.format(\"\
    %g\", arr[i]))\n  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr\
    \ do\n    arr[i] = reversed_arr[i]\n  end\n  for i = 1, #lengths do\n    local\
    \ length = lengths[i]\n    local name = names[i]\n    local index = #sorted_arr\n\
    \    for j = 1, length do\n      local value = sorted_arr[index][j]\n      table.insert(sorted_arr,\
    \ value)\n      index = index - 1\n    end\n  end\n  return names\nend", "  local\
    \ function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j]\
    \ = tmp\n  end\n  local function reverse(arr)\n    local tmp\n    for i = #arr,\
    \ 1, -1 do\n      tmp = arr[i]\n      arr[i] = arr[#arr]\n      arr[#arr] = tmp\n\
    \    end\n  end\n  local function to_str(arr)\n    local str = \"\"\n    for i\
    \ = 1, #arr do\n      str = str .. arr[i]\n    end\n    return str\n  end\n  local\
    \ function to_int(arr)\n    local str = \"\"\n    for i = 1, #arr do\n      str\
    \ = str .. arr[i]\n    end\n    return tonumber(str)\n  end\n  local function\
    \ to_arr(str)\n    local arr\n    if str ~= \"\" then\n      arr = {}\n      for\
    \ i = 1, #str do\n        arr[i] = tonumber(str:sub(i, i))\n      end\n    end\n\
    \    return arr\n  end\n  local function to_arr2(str)\n    local arr\n    if str\
    \ ~= \"\" then\n      arr = {}\n      for i = 1, #str do\n        arr[i] = tonumber(str:sub(i,\
    \ i))\n      end\n    end\n    return arr\n  end\n  local function to_arr3(str)\n\
    \    local arr\n    if str ~= \"\" then\n      arr = {}\n      for i = 1, #str\
    \ do\n        arr[i] = tonumber(str:sub(i, i))\n      end\n    end\n    return\
    \ arr\n  end\n  local function to_arr4(str)\n    local arr\n    if str ~= \"\"\
    \ then\n      arr = {}\n      for i = 1, #str do\n        arr[i] = tonumber(str:sub(i,\
    \ i))\n      end\n    end\n    return arr\n  end\n  local function to_arr5(str)\n\
    \    local arr\n    if str ~= \"\" then\n      arr = {}\n      for i = 1, #str\
    \ do\n        arr[i] = tonumber(str:sub(i, i))\n      end\n    end\n    return\
    \ arr\n  end\n  local function to_arr6(str)\n    local arr\n    if str ~= \"\"\
    \ then\n      arr = {}\n      for i = 1, #str do\n        arr[i] = tonumber(str:sub(i,\
    \ i))\n      end\n    end\n    return arr\n  end\n  local function to_arr7(str)\n\
    \    local arr\n    if str ~= \"\" then\n      arr = {}\n      for i = 1, #str\
    \ do\n        arr[i] = tonumber(str:sub(i, i))\n      end\n    end\n    return\
    \ arr\n  end\n  local function to_arr8(str)\n    local arr\n", "  local function\
    \ swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n\
    \  end\n  local function sort_by_length(arr)\n    local sorted_arr = {}\n    local\
    \ length = #arr\n    for i = 1, length do\n      local value = arr[i]\n      local\
    \ index = i\n      while index > 0 and value < arr[index - 1] do\n        swap(arr,\
    \ index, index - 1)\n        index = index - 1\n      end\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n    return sorted_arr\n  end\n  local function reverse(arr)\n\
    \    local length = #arr\n    for i = 1, length do\n      local value = arr[i]\n\
    \      local index = i\n      while index > 0 and value > arr[index - 1] do\n\
    \        swap(arr, index, index - 1)\n        index = index - 1\n      end\n \
    \   end\n  end\n  local function replace_digit(arr, index)\n    local value =\
    \ arr[index]\n    local digit = math.floor((value - 1)/10)\n    local name = get_name(digit)\n\
    \    arr[index] = name\n  end\n  local function get_name(index)\n    local name\
    \ = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"}\n    return name[index]\n  end\n  local sorted_arr = sort_by_length(arr)\n\
    \  reverse(sorted_arr)\n  local length = #sorted_arr\n  for i = 1, length do\n\
    \    replace_digit(sorted_arr, i)\n  end\n  return sorted_arr\nend", "  local\
    \ function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j]\
    \ = tmp\n  end\n  local function sort(arr)\n    local len = #arr\n    local tmp\
    \ = {}\n    for i = 1, len do\n      local j = len - 1\n      while j > 0 and\
    \ arr[j] > arr[j + 1] do\n        swap(arr, j, j - 1)\n        j = j - 1\n   \
    \   end\n      tmp[i] = arr[j]\n    end\n    return tmp\n  end\n  local function\
    \ reverse(arr)\n    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n\
    \      tmp[i] = arr[len-i-1]\n    end\n    return tmp\n  end\n  local function\
    \ to_str(arr)\n    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n\
    \      tmp[i] = \"One\"\n    end\n    return tmp\n  end\n  local function to_num(arr)\n\
    \    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      tmp[i]\
    \ = 1\n    end\n    return tmp\n  end\n  local function to_arr(arr)\n    local\
    \ len = #arr\n    local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n\
    \    end\n    return tmp\n  end\n  local function to_arr2(arr)\n    local len\
    \ = #arr\n    local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n \
    \   end\n    return tmp\n  end\n  local function to_arr3(arr)\n    local len =\
    \ #arr\n    local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n   \
    \ end\n    return tmp\n  end\n  local function to_arr4(arr)\n    local len = #arr\n\
    \    local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n    end\n \
    \   return tmp\n  end\n  local function to_arr5(arr)\n    local len = #arr\n \
    \   local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n    end\n  \
    \  return tmp\n  end\n  local function to_arr6(arr)\n    local len = #arr\n  \
    \  local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n    end\n   \
    \ return tmp\n  end\n  local function to_arr7(arr)\n    local len = #arr\n   \
    \ local tmp = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n    end\n    return\
    \ tmp\n  end\n  local function to_arr8(arr)\n    local len = #arr\n    local tmp\
    \ = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n", "  local sorted_arr =\
    \ {}\n  local reverse_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n \
    \   local length = math.floor(math.log10(arr[i]))\n    lengths[length] = lengths[length]\
    \ + 1\n  end\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    if lengths[length] > 1 then\n      sorted_arr[#sorted_arr + 1] = arr[i]\n\
    \      reverse_arr[#reverse_arr + 1] = lengths[length]\n    end\n  end\n  table.sort(sorted_arr,\
    \ reverse)\n  local new_arr = {}\n  for i = 1, #sorted_arr do\n    new_arr[#new_arr\
    \ + 1] = by_length_table[sorted_arr[i]]\n  end\n  return new_arr\nend", "  local\
    \ arr2 = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0 and\
    \ num < 10 then\n      arr2[num] = arr2[ num ] or {}\n      arr2[num][#arr2[num]+1]\
    \ = \"One\"\n    elseif num > 9 and num < 100 then\n      arr2[num] = arr2[ num\
    \ ] or {}\n      arr2[num][#arr2[num]+1] = \"Two\"\n    elseif num > 99 and num\
    \ < 1000 then\n      arr2[num] = arr2[ num ] or {}\n      arr2[num][#arr2[num]+1]\
    \ = \"Three\"\n    elseif num > 999 and num < 10000 then\n      arr2[num] = arr2[\
    \ num ] or {}\n      arr2[num][#arr2[num]+1] = \"Four\"\n    elseif num > 9999\
    \ and num < 100000 then\n      arr2[num] = arr2[ num ] or {}\n      arr2[num][#arr2[num]+1]\
    \ = \"Five\"\n    elseif num > 99999 and num < 1000000 then\n      arr2[num] =\
    \ arr2[ num ] or {}\n      arr2[num][#arr2[num]+1] = \"Six\"\n    elseif num >\
    \ 999999 and num < 10000000 then\n      arr2[num] = arr2[ num ] or {}\n      arr2[num][#arr2[num]+1]\
    \ = \"Seven\"\n    elseif num > 9999999 and num < 100000000 then\n      arr2[num]\
    \ = arr2[ num ] or {}\n      arr2[num][#arr2[num]+1] = \"Eight\"\n    elseif num\
    \ > 99999999 and num < 1000000000 then\n      arr2[num] = arr2[ num ] or {}\n\
    \      arr2[num][#arr2[num]+1] = \"Nine\"\n    end\n  end\n  return arr2\nend",
  "  local arr2 = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    local length\
    \ = math.floor(math.log(num, 10))\n    local digit = math.floor(num / math.pow(10,\
    \ length))\n    arr2[length] = digit\n  end\n  table.sort(arr2, function(a, b)\
    \ return a < b end)\n  local reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed\
    \ + 1] = arr2[i]\n  end\n  table.sort(reversed, function(a, b) return a < b end)\n\
    \  local result = {}\n  for i = 1, #reversed do\n    result[#result + 1] = reversed[i]\n\
    \  end\n  return result\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local length_arr = {}\n  local i = 0\n  local j = 0\n  local k = 0\n\
    \  local length = 0\n  local length_index = 0\n  local length_index2 = 0\n  local\
    \ length_index3 = 0\n  local length_index4 = 0\n  local length_index5 = 0\n  local\
    \ length_index6 = 0\n  local length_index7 = 0\n  local length_index8 = 0\n  local\
    \ length_index9 = 0\n  local length_index10 = 0\n  local length_index11 = 0\n\
    \  local length_index12 = 0\n  local length_index13 = 0\n  local length_index14\
    \ = 0\n  local length_index15 = 0\n  local length_index16 = 0\n  local length_index17\
    \ = 0\n  local length_index18 = 0\n  local length_index19 = 0\n  local length_index20\
    \ = 0\n  local length_index21 = 0\n  local length_index22 = 0\n  local length_index23\
    \ = 0\n  local length_index24 = 0\n  local length_index25 = 0\n  local length_index26\
    \ = 0\n  local length_index27 = 0\n  local length_index28 = 0\n  local length_index29\
    \ = 0\n  local length_index30 = 0\n  local length_index31 = 0\n  local length_index32\
    \ = 0\n  local length_index33 = 0\n  local length_index34 = 0\n  local length_index35\
    \ = 0\n  local length_index36 = 0\n  local length_index37 = 0\n  local length_index38\
    \ = 0\n  local length_index39 = 0\n  local length_index40 = 0\n  local length_index41\
    \ = 0\n  local length_index42 = 0\n  local length_index43 = 0\n  local length_index44\
    \ = 0\n  local length_index45 = 0\n  local length_index46 = 0\n  local length_index47\
    \ = 0\n  local length_index48 = 0\n  local length_index49 = 0\n  local length_index50\
    \ = 0\n  local length_index51 = 0\n  local length_index52 = 0\n  local length_index53\
    \ = 0\n  local length_index54 = 0\n  local length_index55 = 0\n  local length_index56\
    \ = 0\n  local length_index57 = 0\n  local length_index58 = 0\n  local length_index59\
    \ = 0\n  local length_index60 = 0\n  local length_index61 = 0\n  local length_index62\
    \ = 0\n  local length_index63 = 0\n  local length_index64 = 0\n  local length_index65\
    \ = 0\n  local length_index66 = 0\n  local length_index67 = 0\n  local length_index68\
    \ = 0", "  local arr2 = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    local index = #arr2\n    arr2[index] = arr[i]\n    if length > 1 then\n \
    \     index = index + 1\n      arr2[index] = arr[i]\n    end\n  end\n  table.sort(arr2,\
    \ function(a, b) return #a > #b end)\n  local reversed = {}\n  for i = 1, #arr2\
    \ do\n    reversed[#reversed + 1] = arr2[i]\n  end\n  table.sort(reversed, function(a,\
    \ b) return #a > #b end)\n  local result = {}\n  for i = 1, #reversed do\n   \
    \ table.insert(result, string.format(\"%g\", reversed[i]))\n  end\n  return result\n\
    end", "  local arr2 = {}\n  for i = 1, #arr do\n    local num = arr[i]\n    local\
    \ length = math.floor(math.log(num, 10))\n    local digit = math.floor(num / math.pow(10,\
    \ length))\n    arr2[length] = digit\n  end\n  table.sort(arr2, function(a, b)\
    \ return a < b end)\n  local reversed = {}\n  for i = 1, #arr2 do\n    table.insert(reversed,\
    \ arr2[i])\n  end\n  table.sort(reversed, function(a, b) return a < b end)\n \
    \ local result = {}\n  for i = 1, #arr2 do\n    table.insert(result, tostring(arr2[reversed[i]]))\n\
    \  end\n  return result\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    table.insert(sorted_arr, arr[i])\n    table.insert(reversed_arr, arr[i])\n\
    \    table.insert(lengths, length)\n  end\n  table.sort(reversed_arr)\n  for i\
    \ = 1, #reversed_arr do\n    local length = lengths[i]\n    local index = reversed_arr[i]\n\
    \    local name = get_name(index)\n    table.insert(sorted_arr, name)\n  end\n\
    \  return sorted_arr\nend", "  local sorted_arr = {}\n  local reverse_arr = {}\n\
    \  local lengths = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n\
    \    if lengths[length] == nil then\n      lengths[length] = true\n      sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    else\n      reverse_arr[#reverse_arr + 1] = arr[i]\n    end\n\
    \  end\n  for i = 1, #sorted_arr do\n    local length = math.abs(sorted_arr[i])\n\
    \    if lengths[length] == nil then\n      lengths[length] = true\n      sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    end\n  end\n  for i = 1, #reverse_arr do\n    local length\
    \ = math.abs(reverse_arr[i])\n    if lengths[length] == nil then\n      lengths[length]\
    \ = true\n      reverse_arr[#reverse_arr + 1] = arr[i]\n    end\n  end\n  local\
    \ sorted_lengths = #sorted_arr\n  local reverse_lengths = #reverse_arr\n  for\
    \ i = 1, #lengths do\n    if lengths[i] then\n      sorted_lengths = i\n     \
    \ reverse_lengths = i\n    end\n  end\n  local sorted_arr = {}\n  local reverse_arr\
    \ = {}\n  for i = 1, sorted_lengths do\n    sorted_arr[#sorted_arr + 1] = sorted_arr[i]\n\
    \  end\n  for i = 1, reverse_lengths do\n    reverse_arr[#reverse_arr + 1] = reverse_arr[i]\n\
    \  end\n  local sorted_lengths = #sorted_arr\n  local reverse_lengths = #reverse_arr\n\
    \  for i = 1, sorted_lengths do\n    if sorted_arr[i] then\n      sorted_arr[i]\
    \ = \"One\"\n    end\n  end\n  for i = 1, reverse_lengths do\n    if reverse_arr[i]\
    \ then\n      reverse_arr[i] = \"One\"\n    end\n  end\n  return sorted_arr, reverse_arr\n\
    end", "  local function sort(a, b)\n    if a < b then\n      return 1\n    elseif\
    \ b < a then\n      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ sort)\n  local function reverse(array)\n    local new_array = {}\n    for i\
    \ = #array, 1, -1 do\n      table.insert(new_array, array[i])\n    end\n    return\
    \ new_array\n  end\n  local function replace_digit(array)\n    local new_array\
    \ = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array, tostring(array[i]))\n\
    \    end\n    return new_array\n  end\n  local function replace_digit_by_name(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ tostring(array[i]))\n    end\n    return new_array\n  end\n  if #arr == 0 then\n\
    \    return {}\n  end\n  if #arr == 1 then\n    return replace_digit(arr)\n  end\n\
    \  if #arr == 2 then\n    return replace_digit_by_name(arr)\n  end\n  if #arr\
    \ == 3 then\n    return reverse(arr)\n  end\nend", "  local function swap(arr,\
    \ i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n\
    \  local function sort_by_length(arr)\n    local length = #arr\n    local results\
    \ = {}\n    for i = 1, length do\n      local j = length - i\n      local tmp\
    \ = arr[j]\n      arr[j] = arr[i]\n      arr[i] = tmp\n      results[i] = arr[i]\n\
    \    end\n    return results\n  end\n  local function reverse_arr(arr)\n    local\
    \ length = #arr\n    local results = {}\n    for i = 1, length do\n      local\
    \ j = length - i\n      local tmp = arr[j]\n      arr[j] = arr[i]\n      arr[i]\
    \ = tmp\n      results[i] = arr[i]\n    end\n    return results\n  end\n  local\
    \ function replace_digit(arr, i, name)\n    local j = i - 1\n    local tmp = arr[j]\n\
    \    arr[j] = arr[i]\n    arr[i] = tmp\n    arr[i] = name\n  end\n  local function\
    \ sort_by_length(arr)\n    local length = #arr\n    local results = {}\n    for\
    \ i = 1, length do\n      local j = length - i\n      local tmp = arr[j]\n   \
    \   arr[j] = arr[i]\n      arr[i] = tmp\n      results[i] = arr[i]\n    end\n\
    \    return results\n  end\n  local function reverse_arr(arr)\n    local length\
    \ = #arr\n    local results = {}\n    for i = 1, length do\n      local j = length\
    \ - i\n      local tmp = arr[j]\n      arr[j] = arr[i]\n      arr[i] = tmp\n \
    \     results[i] = arr[i]\n    end\n    return results\n  end\n  local function\
    \ replace_digit(arr, i, name)\n    local j = i - 1\n    local tmp = arr[j]\n \
    \   arr[j] = arr[i]\n    arr[i] = tmp\n    arr[i] = name\n  end\n  local function\
    \ sort_by_length(arr)\n    local length = #arr\n    local results = {}\n    for\
    \ i = 1, length do\n      local j = length - i\n      local tmp = arr[j]\n   \
    \   arr[j] = arr[i]\n      arr[i] = tmp\n      results[i] = arr[i]\n    end\n\
    \    return results\n  end\n  local function reverse_arr(arr)\n    local length\
    \ = #arr\n    local results = {}\n    for i = 1, length do\n      local j = length\
    \ - i\n      local tmp = arr[j]\n      arr[j] = arr[i]\n      arr[i] = tmp\n \
    \     results[i] = arr[i]\n    end\n    return results\n  end\n  local function\
    \ replace_digit(arr, i, name)\n    local j = i - 1\n    local tmp = arr[j]\n \
    \   arr[j] = arr[i]\n    arr[i] = tmp\n    arr[i] = name\n", "  local new_arr\
    \ = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    if length == nil\
    \ then\n      new_arr[i] = nil\n    else\n      local index = math.floor(math.log10(length)\
    \ + 1)\n      local digit = math.floor(length / math.pow(10, index))\n      local\
    \ name = string.format(\"%0*d\", index, digit)\n      new_arr[i] = name\n    end\n\
    \  end\n  return new_arr\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local sorted_arr_index = 1\n  local reversed_arr_index = 1\n  local\
    \ length = 1\n  local last_index = 1\n  local last_value = 1\n  local last_value_index\
    \ = 1\n  local last_value_length = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length_index = 1\n  local last_value_length_index\
    \ = 1\n  local last_value_length_index = 1\n  local last_value_length_index =\
    \ 1\n  local last_value_length_index = 1\n  local last_value_length_index = 1\n\
    \  local last_value_length_index = 1\n  local last_value_length_index = 1\n  local\
    \ last_value_length_index = 1\n  local last_value_length", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  for i = 1, #arr do\n    local length = math.floor(math.abs(arr[i])\
    \ / 10)\n    if length == 0 then\n      sorted_arr[i] = arr[i]\n    else\n   \
    \   sorted_arr[i] = arr[length]\n      reversed_arr[length] = arr[i]\n    end\n\
    \  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    sorted_arr[i]\
    \ = reversed_arr[i]\n  end\n  return sorted_arr\nend", "  local function compare(a,\
    \ b)\n    if a < b then return -1 else return a end\n  end\n  table.sort(arr,\
    \ compare)\n  local reversed = {}\n  for i = 1, #arr do\n    reversed[#reversed\
    \ + 1] = arr[i]\n  end\n  table.sort(reversed, compare)\n  local results = {}\n\
    \  for i = 1, #reversed do\n    table.insert(results, reversed[i])\n  end\n  return\
    \ results\nend", "  local function sort(a, b)\n    if a < b then\n      return\
    \ 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n    end\n\
    \  end\n  table.sort(arr, sort)\n  local function reverse(a)\n    local b = {}\n\
    \    for i = #a, 1, -1 do\n      table.insert(b, a[i])\n    end\n    return b\n\
    \  end\n  return reverse(arr)\nend", "  local arr2 = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    if length > 1 then\n      arr2[#arr2 + 1] = arr[i]\n\
    \    end\n  end\n  table.sort(arr2, function(a, b) return #a > #b end)\n  local\
    \ reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n\
    \  end\n  table.sort(reversed, function(a, b) return #a > #b end)\n  local reversed_reversed\
    \ = {}\n  for i = 1, #reversed do\n    reversed_reversed[#reversed_reversed +\
    \ 1] = reversed[i]\n  end\n  table.sort(reversed_reversed, function(a, b) return\
    \ #a > #b end)\n  local reversed_reversed_reversed = {}\n  for i = 1, #reversed_reversed\
    \ do\n    reversed_reversed_reversed[#reversed_reversed_reversed + 1] = reversed_reversed[i]\n\
    \  end\n  table.sort(reversed_reversed_reversed, function(a, b) return #a > #b\
    \ end)\n  local reversed_reversed_reversed_reversed = {}\n  for i = 1, #reversed_reversed_reversed\
    \ do\n    reversed_reversed_reversed_reversed[#reversed_reversed_reversed_reversed\
    \ + 1] = reversed_reversed_reversed[i]\n  end\n  table.sort(reversed_reversed_reversed_reversed,\
    \ function(a, b) return #a > #b end)\n  local reversed_reversed_reversed_reversed_reversed\
    \ = {}\n  for i = 1, #reversed_reversed_reversed_reversed do\n    reversed_reversed_reversed_reversed_reversed[#reversed_reversed_reversed_reversed_reversed\
    \ + 1] = reversed_reversed_reversed_reversed[i]\n  end\n  table.sort(reversed_reversed_reversed_reversed_reversed,\
    \ function(a, b) return #a > #b end)\n  local reversed_reversed_reversed_reversed_reversed_reversed\
    \ = {}\n  for i = 1, #reversed_reversed_reversed_reversed_reversed do\n    reversed_reversed_reversed_reversed_reversed_reversed[#reversed_reversed_reversed_reversed_reversed_reversed\
    \ + 1] = reversed_reversed_reversed_reversed_reversed_reversed[i]\n  end\n  table.sort(reversed_reversed_reversed_reversed_reversed_reversed,\
    \ function(a, b) return #a > #b end)\n  local reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = {}\n  for i = 1, #reversed_reversed_reversed_reversed_reversed_reversed do\n\
    \    reverse", "  local sorted_arr = {}\n  local reversed_arr = {}\n  for i =\
    \ 1, #arr do\n    local length = arr[i]\n    if length <= 9 then\n      sorted_arr[length]\
    \ = arr[i]\n    else\n      local index = math.floor(math.log2(length))\n    \
    \  local digit = math.floor(index / 3)\n      local name = string.format(\"%c\"\
    , arr[i])\n      reversed_arr[digit] = name\n    end\n  end\n  table.sort(reversed_arr)\n\
    \  for i = 1, #reversed_arr do\n    sorted_arr[i] = reversed_arr[i]\n  end\n \
    \ return sorted_arr\nend", "  local function swap(arr, i, j)\n    local tmp =\
    \ arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local function reverse(arr)\n\
    \    local tmp\n    for i = #arr, 1, -1 do\n      tmp = arr[i]\n      arr[i] =\
    \ arr[#arr]\n      arr[#arr] = tmp\n    end\n  end\n  local function to_str(arr)\n\
    \    local str = \"\"\n    for i = 1, #arr do\n      str = str .. arr[i]\n   \
    \ end\n    return str\n  end\n  local function to_int(arr)\n    local str = \"\
    \"\n    for i = 1, #arr do\n      str = str .. arr[i]\n    end\n    return tonumber(str)\n\
    \  end\n  local function to_arr(arr)\n    local arr2 = {}\n    for i = 1, #arr\
    \ do\n      arr2[i] = arr[i]\n    end\n    return arr2\n  end\n  local function\
    \ to_arr2(arr)\n    local arr2 = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n\
    \    end\n    return arr2\n  end\n  local function to_arr3(arr)\n    local arr2\
    \ = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n    end\n    return arr2\n\
    \  end\n  local function to_arr4(arr)\n    local arr2 = {}\n    for i = 1, #arr\
    \ do\n      arr2[i] = arr[i]\n    end\n    return arr2\n  end\n  local function\
    \ to_arr5(arr)\n    local arr2 = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n\
    \    end\n    return arr2\n  end\n  local function to_arr6(arr)\n    local arr2\
    \ = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n    end\n    return arr2\n\
    \  end\n  local function to_arr7(arr)\n    local arr2 = {}\n    for i = 1, #arr\
    \ do\n      arr2[i] = arr[i]\n    end\n    return arr2\n  end\n  local function\
    \ to_arr8(arr)\n    local arr2 = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n\
    \    end\n    return arr2\n  end\n  local function to_arr9(arr)\n    local arr2\
    \ = {}\n    for i = 1, #arr do\n      arr2[i] = arr[i]\n    end\n    return arr2\n\
    \  end\n  local function to_arr10(arr)\n    local arr2 = {}\n    for i = 1, #arr\
    \ do\n      arr2[i] = arr[i]\n    end\n    return arr2", "  local sorted_arr =\
    \ {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n\
    \    local length = math.floor(math.abs(arr[i]))\n    if lengths[length] == nil\
    \ then\n      lengths[length] = true\n      sorted_arr[#sorted_arr+1] = arr[i]\n\
    \    else\n      reversed_arr[#reversed_arr+1] = arr[i]\n    end\n  end\n  for\
    \ i = 1, #sorted_arr do\n    local length = math.floor(math.abs(sorted_arr[i]))\n\
    \    if lengths[length] == nil then\n      lengths[length] = true\n      reversed_arr[#reversed_arr+1]\
    \ = sorted_arr[i]\n    end\n  end\n  for i = 1, #reversed_arr do\n    local length\
    \ = math.floor(math.abs(reversed_arr[i]))\n    if lengths[length] == nil then\n\
    \      lengths[length] = true\n      sorted_arr[#sorted_arr+1] = reversed_arr[i]\n\
    \    end\n  end\n  local result = {}\n  for i = 1, #sorted_arr do\n    result[#result+1]\
    \ = names[i]\n  end\n  return result\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  local index = 1\n  local length = #arr\n  local max_value\
    \ = math.max(arr)\n  local min_value = math.min(arr)\n  local max_index = #arr\n\
    \  local min_index = #arr\n  while index <= max_index do\n    local value = arr[index]\n\
    \    local length = math.floor(math.log(value) / math.log(max_value))\n    local\
    \ index = index + 1\n    local reverse_index = 1\n    while reverse_index <= length\
    \ do\n      reversed_arr[reverse_index] = arr[min_index - reverse_index]\n   \
    \   reverse_index = reverse_index + 1\n    end\n    sorted_arr[index] = value\n\
    \    min_index = min_index - 1\n  end\n  while min_index <= min_value do\n   \
    \ sorted_arr[min_index] = arr[min_index]\n    min_index = min_index + 1\n  end\n\
    \  while reverse_index <= length do\n    sorted_arr[length - reverse_index + 1]\
    \ = reversed_arr[reverse_index]\n    reverse_index = reverse_index + 1\n  end\n\
    \  return sorted_arr\nend", "  local function sort(a, b)\n    if a < b then\n\
    \      return 1\n    elseif b < a then\n      return -1\n    else\n      return\
    \ 0\n    end\n  end\n  table.sort(arr, sort)\n  local function reverse(arr, start,\
    \ end)\n    local function swap(arr, a, b)\n      local tmp = arr[a]\n      arr[a]\
    \ = arr[b]\n      arr[b] = tmp\n    end\n    for i = start, end do\n      swap(arr,\
    \ i, end - 1)\n    end\n  end\n  reverse(arr, 1, #arr)\n  local function to_name(num)\n\
    \    local names = {\n      [1] = \"One\",\n      [2] = \"Two\",\n      [3] =\
    \ \"Three\",\n      [4] = \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\"\
    ,\n      [7] = \"Seven\",\n      [8] = \"Eight\",\n      [9] = \"Nine\",\n   \
    \ }\n    return names[num]\n  end\n  local function to_num(str)\n    local num\
    \ = 0\n    for i = 1, #str do\n      num = num * 10 + tonumber(str[i])\n    end\n\
    \    return num\n  end\n  local function to_arr(arr)\n    local arr2 = {}\n  \
    \  for i = 1, #arr do\n      arr2[i] = to_name(arr[i])\n    end\n    return arr2\n\
    \  end\n  return to_arr(arr)\nend", "  local function sort(a, b)\n    if a < b\
    \ then\n      return 1\n    elseif b < a then\n      return -1\n    else\n   \
    \   return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function reverse(array)\n\
    \    local reversed = {}\n    for i = #array, 1, -1 do\n      table.insert(reversed,\
    \ array[i])\n    end\n    return reversed\n  end\n  local function replace_by_name(array)\n\
    \    local names = {\n      \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"\n    }\n    local index = 1\n    for i =\
    \ #array, 1, -1 do\n      array[i] = names[index]\n      index = index + 1\n \
    \   end\n    return array\n  end\n  return replace_by_name(reverse(array))\nend",
  "  local sorted_arr = {}\n  local reversed_arr = {}\n  local names = {}\n  local\
    \ i = 0\n  local len = #arr\n  for i = 1, len do\n    local value = arr[i]\n \
    \   local length = math.floor(math.log(value, 10))\n    local digit = math.floor(value\
    \ / math.pow(10, length))\n    local name = get_name(digit)\n    sorted_arr[i]\
    \ = name\n    reversed_arr[i] = name\n    names[i] = name\n  end\n  table.sort(reversed_arr)\n\
    \  for i = 1, len do\n    arr[i] = reversed_arr[i]\n  end\n  return arr\nend",
  "  local function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n\
    \    arr[j] = tmp\n  end\n  local function sort(arr)\n    local len = #arr\n \
    \   local half = math.floor(len / 2)\n    local pivot = arr[half]\n    local i\
    \ = half\n    local j = len - half\n    while i < j do\n      while i < j and\
    \ arr[i] < pivot do\n        i = i + 1\n      end\n      while i < j and arr[j]\
    \ > pivot do\n        j = j - 1\n      end\n      if i < j then\n        swap(arr,\
    \ i, j)\n        i = i + 1\n        j = j - 1\n      end\n    end\n    swap(arr,\
    \ half, j)\n    return arr\n  end\n  local function reverse(arr)\n    local len\
    \ = #arr\n    local half = math.floor(len / 2)\n    local pivot = arr[half]\n\
    \    local i = half\n    local j = len - half\n    while i < j do\n      while\
    \ i < j and arr[i] > pivot do\n        i = i + 1\n      end\n      while i < j\
    \ and arr[j] < pivot do\n        j = j - 1\n      end\n      if i < j then\n \
    \       swap(arr, i, j)\n        i = i + 1\n        j = j - 1\n      end\n   \
    \ end\n    swap(arr, half, j)\n    return arr\n  end\n  local function to_array(arr)\n\
    \    local result = {}\n    for i = 1, #arr do\n      table.insert(result, arr[i])\n\
    \    end\n    return result\n  end\n  local function to_string(arr)\n    local\
    \ result = \"\"\n    for i = 1, #arr do\n      result = result .. arr[i] .. \"\
    \ \"\n    end\n    return result\n  end\n  local function to_number(arr)\n   \
    \ local result = 1\n    for i = 1, #arr do\n      result = result * 10 + arr[i]\n\
    \    end\n    return result\n  end\n  local function to_string(arr)\n    local\
    \ result = \"\"\n    for i = 1, #arr do\n      result = result .. arr[i] .. \"\
    \ \"\n    end\n    return result\n  end\n  local function to_number(arr)\n   \
    \ local result = 1\n    for i = 1, #arr do\n      result = result * 10 + arr[i]\n\
    \    end\n    return result\n  end\n  local function to_string(arr)\n    local\
    \ result = \"\"\n    for i = 1, #arr do\n      result = result .. arr[i] .. \"\
    \ \"\n    end\n    return result\n  end\n  local function to_number(arr)\n   \
    \ local result = 1\n    for i = 1, #arr do\n      result = result * 10 + arr[i]\n\
    \    end\n    return result", "  local sorted_arr = {}\n  local reversed_arr =\
    \ {}\n  for i = 1, #arr do\n    local length = arr[i]\n    local index = #sorted_arr\n\
    \    sorted_arr[index] = length\n    reversed_arr[length] = index\n  end\n  table.sort(sorted_arr,\
    \ reverse)\n  local result = {}\n  for i = 1, #sorted_arr do\n    result[reversed_arr[sorted_arr[i]]]\
    \ = arr[i]\n  end\n  return result\nend", "  local len = #arr\n  local sorted\
    \ = {}\n  local reversed = {}\n  for i = 1, len do\n    table.insert(sorted, arr[i])\n\
    \    table.insert(reversed, arr[len-i])\n  end\n  table.sort(sorted, function(a,\
    \ b) return a < b end)\n  table.reverse(reversed)\n  for i = 1, len do\n    arr[i]\
    \ = reversed[i]\n  end\n  return arr\nend", "  local len = #arr\n  local result\
    \ = {}\n  for i = 1, len do\n    local value = arr[i]\n    local index = math.floor(math.log(value)\
    \ / math.log(10))\n    local name = string.format(\"%g\", value)\n    result[index]\
    \ = name\n  end\n  return result\nend", "  local function sort(a, b)\n    if a\
    \ < b then\n      return 1\n    elseif b < a then\n      return -1\n    else\n\
    \      return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function reverse(array)\n\
    \    local reversed = {}\n    for i = #array, 1, -1 do\n      table.insert(reversed,\
    \ array[i])\n    end\n    return reversed\n  end\n  local function replace_by_name(array)\n\
    \    local function replace_by_name_recursive(array, index, name)\n      if index\
    \ == #array then\n        array[index] = name\n      else\n        local value\
    \ = array[index]\n        array[index] = replace_by_name_recursive(array, index\
    \ + 1, name)\n      end\n      return value\n    end\n    return replace_by_name_recursive(array,\
    \ 1, \"One\")\n  end\n  return replace_by_name(arr)\nend", "  local arr2 = {}\n\
    \  local i = 0\n  local j = 0\n  while i < #arr do\n    local value = arr[i]\n\
    \    if value < 1 or value > 9 then\n      arr2[j] = arr[i]\n      j = j + 1\n\
    \    else\n      arr2[j] = by_length_recursive(arr2, value, i + 1)\n    end\n\
    \    i = i + 1\n  end\n  return arr2\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  local names = {}\n  local length = #arr\n  for i = 1, length\
    \ do\n    local value = arr[i]\n    local name = get_name(value)\n    if not name\
    \ then\n      table.insert(sorted_arr, value)\n      table.insert(reversed_arr,\
    \ value)\n    else\n      table.insert(sorted_arr, name)\n      table.insert(reversed_arr,\
    \ name)\n    end\n    table.insert(names, name)\n  end\n  table.sort(sorted_arr)\n\
    \  table.reverse(reversed_arr)\n  for i = 1, length do\n    arr[i] = reversed_arr[i]\n\
    \  end\n  return names\nend", "  local function swap(arr, i, j)\n    local tmp\
    \ = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local function reverse(arr)\n\
    \    local tmp\n    for i = #arr, 1, -1 do\n      tmp = arr[i]\n      arr[i] =\
    \ arr[#arr]\n      arr[#arr] = tmp\n    end\n  end\n  local function to_str(arr)\n\
    \    local str = \"\"\n    for i = 1, #arr do\n      str = str .. arr[i]\n   \
    \ end\n    return str\n  end\n  local function to_int(str)\n    local n = 0\n\
    \    for i = 1, #str do\n      n = n * 10 + str:sub(i, i)\n    end\n    return\
    \ n\n  end\n  local function to_arr(str)\n    local arr = {}\n    for i = 1, #str\
    \ do\n      arr[i] = str:sub(i, i)\n    end\n    return arr\n  end\n  local function\
    \ to_arr_with_length(str)\n    local arr = {}\n    local length = 0\n    for i\
    \ = 1, #str do\n      arr[i] = str:sub(i, i)\n      length = length + 1\n    end\n\
    \    arr[1] = length\n    return arr\n  end\n  local function to_arr_with_length_and_length(str)\n\
    \    local arr = {}\n    local length = 0\n    local length2 = 0\n    for i =\
    \ 1, #str do\n      arr[i] = str:sub(i, i)\n      length = length + 1\n      length2\
    \ = length2 + 1\n    end\n    arr[1] = length\n    arr[2] = length2\n    return\
    \ arr\n  end\n  local function to_arr_with_length_and_length_and_length(str)\n\
    \    local arr = {}\n    local length = 0\n    local length2 = 0\n    local length3\
    \ = 0\n    for i = 1, #str do\n      arr[i] = str:sub(i, i)\n      length = length\
    \ + 1\n      length2 = length2 + 1\n      length3 = length3 + 1\n    end\n   \
    \ arr[1] = length\n    arr[2] = length2\n    arr[3] = length3\n    return arr\n\
    \  end\n  local function to_arr_with_length_and_length_and_length_and_length(str)\n\
    \    local arr = {}\n    local length = 0\n    local length2 = 0\n    local length3\
    \ = 0\n    local length4 = 0\n    for i = 1, #str do\n      arr[i] = str:sub(i,\
    \ i)\n      length = length + 1\n      length2 = length2 + 1\n      length3 =\
    \ length3 + 1\n      length4 = length4 + 1\n    end\n    arr[1] = length\n   \
    \ arr[2] = length2\n    arr[3] = length3\n    arr[4] = length4\n    return arr\n\
    \  end\n  local function to_arr_with_", "  local function sort(a, b)\n    if a\
    \ < b then\n      return 1\n    elseif b < a then\n      return -1\n    else\n\
    \      return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function reverse(arr)\n\
    \    local function swap(a, b)\n      local tmp = a\n      a = b\n      b = tmp\n\
    \    end\n    local function reverse1(arr)\n      local len = #arr\n      for\
    \ i = 1, len do\n        swap(arr[i], arr[len-i])\n      end\n    end\n    local\
    \ function reverse2(arr)\n      local len = #arr\n      for i = 1, len do\n  \
    \      local tmp = arr[i]\n        arr[i] = arr[len-i-1]\n        arr[len-i-1]\
    \ = tmp\n      end\n    end\n    if #arr == 1 then\n      arr[1] = arr[1]\n  \
    \    arr[2] = arr[2]\n      arr[3] = arr[3]\n      arr[4] = arr[4]\n      arr[5]\
    \ = arr[5]\n      arr[6] = arr[6]\n      arr[7] = arr[7]\n      arr[8] = arr[8]\n\
    \      arr[9] = arr[9]\n      arr[10] = arr[10]\n      arr[11] = arr[11]\n   \
    \   arr[12] = arr[12]\n      arr[13] = arr[13]\n      arr[14] = arr[14]\n    \
    \  arr[15] = arr[15]\n      arr[16] = arr[16]\n      arr[17] = arr[17]\n     \
    \ arr[18] = arr[18]\n      arr[19] = arr[19]\n      arr[20] = arr[20]\n      arr[21]\
    \ = arr[21]\n      arr[22] = arr[22]\n      arr[23] = arr[23]\n      arr[24] =\
    \ arr[24]\n      arr[25] = arr[25]\n      arr[26] = arr[26]\n      arr[27] = arr[27]\n\
    \      arr[28] = arr[28]\n      arr[29] = arr[29]\n      arr[30] = arr[30]\n \
    \     arr[31] = arr[31]\n      arr[32] = arr[32]\n      arr[33] = arr[33]\n  \
    \    arr[34] = arr[34]\n      arr[35] = arr[35]\n      arr[36] = arr[36]\n   \
    \   arr[37] = arr[37]\n      arr[38] = arr[38]\n      arr[39] = arr[39]\n    \
    \  arr[40] = arr[40]\n      arr[41] = arr[41]\n      arr[42] = arr[42]\n     \
    \ arr[43] = arr[43]\n      arr[44] = arr[44]\n      arr[45] = arr[45]\n      arr[46]\
    \ = arr[46]\n", "  local arr2 = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then\n      arr2[i] = nil\n    else\n      arr2[i] = \"\
    One\"\n      for j = 1, length do\n        arr2[i] = arr2[i] .. \"Two\"\n    \
    \  end\n    end\n  end\n  return arr2\nend", "  local arr2 = {}\n  for i = 1,\
    \ #arr do\n    local n = arr[i]\n    if n > 9 then\n      arr2[i] = arr[i - 1]\n\
    \    elseif n < 1 then\n      arr2[i] = arr[i - 1]\n    else\n      arr2[i] =\
    \ \"One\"\n    end\n  end\n  return arr2\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  local sorted_arr_index = 0\n  local reversed_arr_index\
    \ = 0\n  local length = 0\n  for i = 1, #arr do\n    length = length + arr[i]\n\
    \  end\n  for i = 1, #arr do\n    if arr[i] <= 9 then\n      sorted_arr[sorted_arr_index]\
    \ = arr[i]\n      sorted_arr_index = sorted_arr_index + 1\n    else\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n\
    \  if sorted_arr_index == 0 then\n    return {}\n  end\n  table.sort(reversed_arr,\
    \ function(a, b)\n    return b - a\n  end)\n  for i = 1, #reversed_arr do\n  \
    \  sorted_arr[sorted_arr_index] = reversed_arr[i]\n    sorted_arr_index = sorted_arr_index\
    \ + 1\n  end\n  return sorted_arr\nend", "  local function swap(arr, i, j)\n \
    \   local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local\
    \ function sort(arr)\n    local tmp = {}\n    local n = #arr\n    for i = 1, n\
    \ do\n      local j = n - 1\n      while j > 0 and arr[j] > arr[j + 1] do\n  \
    \      swap(arr, j, j + 1)\n        j = j - 1\n      end\n      table.insert(tmp,\
    \ arr[i])\n    end\n    return tmp\n  end\n  local function reverse(arr)\n   \
    \ local n = #arr\n    for i = 1, n do\n      local j = n - 1\n      while j >\
    \ 0 and arr[j] < arr[j + 1] do\n        swap(arr, j, j + 1)\n        j = j - 1\n\
    \      end\n    end\n  end\n  local function to_str(arr)\n    local str = \"\"\
    \n    for i = 1, #arr do\n      str = str .. arr[i]\n      if i < #arr then\n\
    \        str = str .. \", \"\n      end\n    end\n    return str\n  end\n  local\
    \ function to_arr(str)\n    local arr = {}\n    for i = 1, #str do\n      table.insert(arr,\
    \ string.sub(str,i,i))\n    end\n    return arr\n  end\n  local function to_arr2(str)\n\
    \    local arr = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr3(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr4(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr5(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr6(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr7(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr8(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      table.insert(arr, string.sub(str,i,i))\n\
    \    end\n    return ", "  local function sort(a, b)\n    if a < b then\n    \
    \  return 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n\
    \    end\n  end\n  table.sort(arr, sort)\n  local function reverse(array)\n  \
    \  local new_array = {}\n    for i = #array, 1, -1 do\n      table.insert(new_array,\
    \ array[i])\n    end\n    return new_array\n  end\n  return reverse(arr)\nend",
  "  local function sort_by_length(arr)\n    local function sort_by_length(arr)\n\
    \      local function sort_by_length(arr)\n        local function sort_by_length(arr)\n\
    \          local function sort_by_length(arr)\n            local function sort_by_length(arr)\n\
    \              local function sort_by_length(arr)\n                local function\
    \ sort_by_length(arr)\n                  local function sort_by_length(arr)\n\
    \                    local function sort_by_length(arr)\n                    \
    \  local function sort_by_length(arr)\n                        local function\
    \ sort_by_length(arr)\n                          local function sort_by_length(arr)\n\
    \                            local function sort_by_length(arr)\n            \
    \                  local function sort_by_length(arr)\n                      \
    \          local function sort_by_length(arr)\n                              \
    \    local function sort_by_length(arr)\n                                    local\
    \ function sort_by_length(arr)\n                                      local function\
    \ sort_by_length(arr)\n                                        local function\
    \ sort_by_length(arr)\n                                          local function\
    \ sort_by_length(arr)\n                                            local function\
    \ sort_by_length(arr)\n                                              local function\
    \ sort_by_length(arr)\n                                                local function\
    \ sort_by_length(arr)\n                                                  local\
    \ function sort_by_length(arr)\n                                             \
    \       local function sort_by_length(arr)\n                                 \
    \                     local function sort_by_length(arr)\n                   \
    \                                     local function sort_by_length(arr)\n   \
    \                                                       local function sort_by_length(arr)\n\
    \                                                            local function sort_by_length(arr)\n\
    \                                                              local function\
    \ sort_by_length(arr)\n                                                      \
    \          local function sort_by_length(arr)\n                              \
    \                                    local function sort_by_length(arr)\n    \
    \                                                                local function\
    \ sort_by_length(arr)\n                                                      \
    \                return arr\n                                                \
    \                end\n                                                       \
    \       end\n                                                            end\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end\n         \
    \                                       end\n                                \
    \              end\n                                            end\n        \
    \                                  end\n                                     \
    \   end\n                                      end\n                         \
    \           end\n                                  end\n                     \
    \           end\n                              end\n                         \
    \   end\n                          end\n                        end\n        \
    \              end\n                    end\n                  end\n         \
    \       end\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\nend\nreturn sort_by_length(arr)\nend", "  local function\
    \ sort_by_length(arr)\n    local function sort_by_length(arr)\n      local function\
    \ sort_by_length(arr)\n        local function sort_by_length(arr)\n          local\
    \ function sort_by_length(arr)\n            local function sort_by_length(arr)\n\
    \              local function sort_by_length(arr)\n                local function\
    \ sort_by_length(arr)\n                  local function sort_by_length(arr)\n\
    \                    local function sort_by_length(arr)\n                    \
    \  local function sort_by_length(arr)\n                        local function\
    \ sort_by_length(arr)\n                          local function sort_by_length(arr)\n\
    \                            local function sort_by_length(arr)\n            \
    \                  local function sort_by_length(arr)\n                      \
    \          local function sort_by_length(arr)\n                              \
    \    local function sort_by_length(arr)\n                                    local\
    \ function sort_by_length(arr)\n                                      local function\
    \ sort_by_length(arr)\n                                        local function\
    \ sort_by_length(arr)\n                                          local function\
    \ sort_by_length(arr)\n                                            local function\
    \ sort_by_length(arr)\n                                              local function\
    \ sort_by_length(arr)\n                                                local function\
    \ sort_by_length(arr)\n                                                  local\
    \ function sort_by_length(arr)\n                                             \
    \       local function sort_by_length(arr)\n                                 \
    \                     local function sort_by_length(arr)\n                   \
    \                                     local function sort_by_length(arr)\n   \
    \                                                       local function sort_by_length(arr)\n\
    \                                                            local function sort_by_length(arr)\n\
    \                                                              local function\
    \ sort_by_length(arr)\n                                                      \
    \          local function sort_by_length(arr)\n                              \
    \                                    local function sort_by_length(arr)\n    \
    \                                                                local function\
    \ sort_by_length(arr)\n                                                      \
    \                return arr\n                                                \
    \                end\n                                                       \
    \       end\n                                                            end\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end\n         \
    \                                       end\n                                \
    \              end\n                                            end\n        \
    \                                  end\n                                     \
    \   end\n                                      end\n                         \
    \           end\n                                  end\n                     \
    \           end\n                              end\n                         \
    \   end\n                          end\n                        end\n        \
    \              end\n                    end\n                  end\n         \
    \       end\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n  end\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local names = {}\n  local length = #arr\n  for i = 1, length do\n  \
    \  local value = arr[i]\n    local name = get_name(value)\n    if name then\n\
    \      table.insert(sorted_arr, name)\n      table.insert(reversed_arr, value)\n\
    \      table.insert(names, name)\n    end\n  end\n  if #sorted_arr == 0 then\n\
    \    return {}\n  end\n  table.sort(reversed_arr)\n  local index = 1\n  local\
    \ results = {}\n  while index <= #reversed_arr do\n    local value = reversed_arr[index]\n\
    \    local name = names[index]\n    table.insert(results, name)\n    index = index\
    \ + 1\n  end\n  return results\nend", "  local function sort(a, b)\n    if a <\
    \ b then\n      return 1\n    elseif b < a then\n      return -1\n    else\n \
    \     return 0\n    end\n  end\n  table.sort(arr, sort)\n  local function reverse(a)\n\
    \    local b = {}\n    for i = #a, 1, -1 do\n      table.insert(b, a[i])\n   \
    \ end\n    return b\n  end\n  local function replace(a)\n    local b = {}\n  \
    \  for i = 1, 10 do\n      table.insert(b, tostring(i))\n    end\n    for i =\
    \ 1, 10 do\n      local c = tostring(i)\n      local d = tostring(a[i])\n    \
    \  if c == d then\n        table.insert(b, tostring(a[i]))\n      else\n     \
    \   table.insert(b, c)\n      end\n    end\n    return b\n  end\n  local function\
    \ to_array(b)\n    local a = {}\n    for i = 1, 10 do\n      table.insert(a, tostring(i))\n\
    \    end\n    for i = 1, 10 do\n      local c = tostring(i)\n      local d = tostring(b[i])\n\
    \      if c == d then\n        table.insert(a, tostring(b[i]))\n      else\n \
    \       table.insert(a, c)\n      end\n    end\n    return a\n  end\n  local function\
    \ to_string(a)\n    local b = {}\n    for i = 1, 10 do\n      table.insert(b,\
    \ tostring(i))\n    end\n    for i = 1, 10 do\n      local c = tostring(i)\n \
    \     local d = tostring(a[i])\n      if c == d then\n        table.insert(b,\
    \ tostring(a[i]))\n      else\n        table.insert(b, c)\n      end\n    end\n\
    \    return table.concat(to_array(b), \"\")\n  end\n  return to_string(to_array(reverse(replace(sort(arr)))))\
    \ \nend", "  local function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i]\
    \ = arr[j]\n    arr[j] = tmp\n  end\n  local function sort_by_length(arr)\n  \
    \  local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local j\
    \ = len - 1\n      while j > 0 and arr[j] > arr[j + 1] do\n        swap(arr, j,\
    \ j - 1)\n        j = j - 1\n      end\n      tmp[i] = arr[j]\n    end\n    return\
    \ tmp\n  end\n  local function reverse_sort_by_length(arr)\n    local len = #arr\n\
    \    local tmp = {}\n    for i = 1, len do\n      local j = len - 1\n      while\
    \ j > 0 and arr[j] < arr[j + 1] do\n        swap(arr, j, j - 1)\n        j = j\
    \ - 1\n      end\n      tmp[i] = arr[j]\n    end\n    return tmp\n  end\n  local\
    \ function replace_digit(arr, i, name)\n    local j = i\n    while j > 0 and arr[j]\
    \ < arr[j - 1] do\n      swap(arr, j, j - 1)\n      j = j - 1\n    end\n    arr[j]\
    \ = name\n  end\n  local function sort_and_reverse(arr)\n    local tmp = sort_by_length(arr)\n\
    \    local len = #tmp\n    for i = 1, len do\n      replace_digit(tmp, i, arr[i])\n\
    \    end\n    return reverse_sort_by_length(tmp)\n  end\n  if #arr == 0 then\n\
    \    return {}\n  end\n  if #arr == 1 then\n    return arr\n  end\n  if #arr ==\
    \ 2 then\n    return arr\n  end\n  if #arr == 3 then\n    return arr\n  end\n\
    \  if #arr > 3 then\n    return sort_and_reverse(arr)\n  end\nend", "  local new_arr\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    local name = get_name(length)\n    if not lengths[length] then\n      lengths[length]\
    \ = name\n    end\n    new_arr[i] = name\n  end\n  table.sort(new_arr, function(a,\
    \ b) return lengths[a] < lengths[b] end)\n  local reversed = {}\n  for i = 1,\
    \ #new_arr do\n    reversed[#reversed + 1] = new_arr[i]\n  end\n  return reversed\n\
    end", "  local arr2 = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n\
    \    if length <= 9 then\n      arr2[length] = arr[i]\n    end\n  end\n  table.sort(arr2,\
    \ function(a, b) return a < b end)\n  local reversed = {}\n  for i = 1, #arr2\
    \ do\n    reversed[#reversed + 1] = arr2[i]\n  end\n  table.sort(reversed, function(a,\
    \ b) return a < b end)\n  local result = {}\n  for i = 1, #reversed do\n    table.insert(result,\
    \ string.format(\"%g\", reversed[i]))\n  end\n  return result\nend", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index = 0\n \
    \ local reversed_arr_index = 0\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then\n      sorted_arr[sorted_arr_index] = arr[i]\n    \
    \  reversed_arr[reversed_arr_index] = arr[i]\n      sorted_arr_index = sorted_arr_index\
    \ + 1\n      reversed_arr_index = reversed_arr_index + 1\n    else\n      local\
    \ index = length\n      while index <= 9 do\n        local digit = math.floor((index\
    \ - 1) / 10)\n        local name = string.format(\"%g\", math.floor((index - 1)\
    \ % 10))\n        local value = string.format(\"%g\", arr[i])\n        local new_value\
    \ = string.format(\"%g\", math.floor((value * (10^digit))/10^digit))\n       \
    \ local new_name = string.format(\"%g\", math.floor((value * 10^digit)/10^digit))\n\
    \        local new_length = length + digit\n        local new_arr = {new_value,\
    \ new_name, new_length}\n        table.insert(sorted_arr, new_arr)\n        table.insert(reversed_arr,\
    \ new_arr)\n        index = index + 1\n      end\n    end\n  end\n  return sorted_arr,\
    \ reversed_arr\nend", "  local function swap(arr, i, j)\n    local tmp = arr[i]\n\
    \    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local function sort_by_length(arr)\n\
    \    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local\
    \ j = len - i\n      swap(arr, j, j)\n    end\n    return arr\n  end\n  local\
    \ function reverse_arr(arr)\n    local len = #arr\n    local tmp = {}\n    for\
    \ i = 1, len do\n      local j = len - i\n      swap(arr, j, j)\n    end\n   \
    \ return arr\n  end\n  local function replace_digit(arr, i, name)\n    local j\
    \ = i - 1\n    while j >= 0 and arr[j] > 0 do\n      arr[j] = name\n      j =\
    \ j - 1\n    end\n  end\n  local function sort_arr(arr)\n    local len = #arr\n\
    \    local tmp = {}\n    for i = 1, len do\n      local j = len - i\n      swap(arr,\
    \ j, j)\n    end\n    return arr\n  end\n  local function sort_arr_reverse(arr)\n\
    \    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local\
    \ j = len - i\n      swap(arr, j, j)\n    end\n    return arr\n  end\n  local\
    \ function sort_arr_reverse_replace(arr)\n    local len = #arr\n    local tmp\
    \ = {}\n    for i = 1, len do\n      local j = len - i\n      swap(arr, j, j)\n\
    \    end\n    return arr\n  end\n  local function sort_arr_reverse_replace_reverse(arr)\n\
    \    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local\
    \ j = len - i\n      swap(arr, j, j)\n    end\n    return arr\n  end\n  local\
    \ function sort_arr_reverse_replace_reverse_replace(arr)\n    local len = #arr\n\
    \    local tmp = {}\n    for i = 1, len do\n      local j = len - i\n      swap(arr,\
    \ j, j)\n    end\n    return arr\n  end\n  local function sort_arr_reverse_replace_reverse_replace_reverse(arr)\n\
    \    local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local\
    \ j = len - i\n      swap(arr, j, j)\n    end\n    return arr\n  end\n  local\
    \ function sort_arr_reverse_replace_reverse_replace_reverse_replace(arr)\n   \
    \ local len = #arr\n    local tmp = {}\n    for i = 1, len do\n      local j =\
    \ len - i\n      swap(arr, j, j)\n    end\n    return arr\n  end\n  local function\
    \ sort_arr_reverse_re", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local sorted_arr_size = #arr\n  local reversed_arr_size = #reversed_arr\n \
    \ for i = 1, sorted_arr_size do\n    local element = arr[i]\n    local length\
    \ = #element\n    if length == 1 then\n      sorted_arr[#sorted_arr + 1] = element\n\
    \    elseif length == 2 then\n      reversed_arr[#reversed_arr + 1] = element\n\
    \    elseif length == 3 then\n      reversed_arr[#reversed_arr + 1] = element\n\
    \      reversed_arr[#reversed_arr + 1] = element\n    elseif length == 4 then\n\
    \      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n    elseif\
    \ length == 5 then\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n    elseif length == 6 then\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n    elseif\
    \ length == 7 then\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n    elseif\
    \ length == 8 then\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n      reversed_arr[#reversed_arr\
    \ + 1] = element\n      reversed_arr[#reversed_arr + 1] = element\n    elseif\
    \ length == 9 then\n      reversed_arr[#reversed_arr + 1] = element\n", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i =\
    \ 1, #arr do\n    local length = arr[i]\n    if lengths[length] == nil then\n\
    \      sorted_arr[#sorted_arr + 1] = arr[i]\n      reversed_arr[#reversed_arr\
    \ + 1] = length\n      lengths[length] = true\n    end\n  end\n  for i = 1, #sorted_arr\
    \ do\n    arr[#arr + 1] = sorted_arr[i]\n  end\n  for i = 1, #reversed_arr do\n\
    \    arr[#arr + 1] = reversed_arr[i]\n  end\n  return arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n\
    \    local length = math.abs(arr[i])\n    table.insert(lengths, length)\n    table.insert(sorted_arr,\
    \ arr[i])\n  end\n  table.sort(lengths)\n  for i = 1, #lengths do\n    table.insert(reversed_arr,\
    \ lengths[i])\n  end\n  for i = 1, #sorted_arr do\n    local index = reversed_arr[i]\n\
    \    sorted_arr[i] = arr[index]\n  end\n  return sorted_arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local results = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    if length == nil then\n      length = arr[i]\n\
    \    end\n    local index = math.floor(math.log2(length))\n    local digit = math.pow(10,\
    \ index)\n    local digits = math.floor(length / digit)\n    local remainder =\
    \ length % digit\n    local reversed_digit = digit - remainder\n    local reversed_index\
    \ = index - remainder\n    local reversed_digits = digits - remainder\n    local\
    \ reversed_digits_str = string.format(\"%0d\", reversed_digits)\n    local reversed_digits_index\
    \ = reversed_index - remainder\n    local reversed_digits_str = string.format(\"\
    %0d\", reversed_digits_index)\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_digits_str = reversed_digits_str\
    \ .. reversed_digits_str\n    local reversed_", "  local function sort_by_length(arr)\n\
    \    local sorted_arr = {}\n    local reversed_arr = {}\n    local length_map\
    \ = {}\n    for i = 1, #arr do\n      local length = arr[i]\n      if length ==\
    \ nil then\n        length = arr[i]\n      end\n      length_map[length] = true\n\
    \    end\n    for i = 1, #arr do\n      local length = arr[i]\n      if not length_map[length]\
    \ then\n        sorted_arr[#sorted_arr + 1] = length\n      else\n        reversed_arr[#reversed_arr\
    \ + 1] = length\n      end\n    end\n    table.sort(reversed_arr)\n    for i =\
    \ 1, #reversed_arr do\n      sorted_arr[#sorted_arr + 1] = reversed_arr[i]\n \
    \   end\n    return sorted_arr\n  end\n  local sorted_arr = sort_by_length(arr)\n\
    \  local reversed_arr = {}\n  for i = 1, #sorted_arr do\n    reversed_arr[#reversed_arr\
    \ + 1] = sorted_arr[i]\n  end\n  table.sort(reversed_arr)\n  local result = {}\n\
    \  for i = 1, #reversed_arr do\n    result[#result + 1] = reversed_arr[i]\n  end\n\
    \  return result\nend", "  local function sort(a, b)\n    if a < b then\n    \
    \  return 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n\
    \    end\n  end\n  table.sort(arr, sort)\n  local function reverse(arr)\n    local\
    \ new_arr = {}\n    for i = #arr, 1, -1 do\n      new_arr[i] = arr[i]\n    end\n\
    \    return new_arr\n  end\n  local function replace_digit(arr)\n    local new_arr\
    \ = {}\n    for i = #arr, 1, -1 do\n      new_arr[i] = map[arr[i]]\n    end\n\
    \    return new_arr\n  end\n  if #arr == 0 then\n    return {}\n  end\n  local\
    \ new_arr = reverse(sort(arr))\n  local new_arr = replace_digit(new_arr)\n  return\
    \ new_arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ lengths = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    if not lengths[length] then\n      lengths[length] = true\n      sorted_arr[#sorted_arr\
    \ + 1] = arr[i]\n    end\n    reversed_arr[#reversed_arr + 1] = arr[i]\n  end\n\
    \  for i = 1, #sorted_arr do\n    local length = math.floor(math.log10(sorted_arr[i]))\n\
    \    if lengths[length] then\n      sorted_arr[i] = reversed_arr[lengths[length]]\n\
    \      lengths[length] = nil\n    end\n  end\n  return sorted_arr\nend", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i =\
    \ 1, #arr do\n    local length = arr[i]\n    table.insert(sorted_arr, arr[i])\n\
    \    table.insert(reversed_arr, arr[i])\n    table.insert(lengths, length)\n \
    \ end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    local length\
    \ = lengths[i]\n    local index = math.floor((length - 1) / 2)\n    local value\
    \ = reversed_arr[i]\n    local name = lengths[math.floor(index)]\n    sorted_arr[i]\
    \ = name\n  end\n  return sorted_arr\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n\
    \    if length < 10 then\n      sorted_arr[length] = arr[i]\n    elseif length\
    \ < 100 then\n      reversed_arr[length] = arr[i]\n    end\n  end\n  table.sort(sorted_arr)\n\
    \  table.sort(reversed_arr)\n  local result = {}\n  for i = 1, #sorted_arr do\n\
    \    result[#result + 1] = reversed_arr[sorted_arr[i]]\n  end\n  return result\n\
    end", "  local results = {}\n  local len = #arr\n  local i = 0\n  while i < len\
    \ do\n    local value = arr[i]\n    local j = i + 1\n    while j < len do\n  \
    \    local value2 = arr[j]\n      if value < value2 then\n        local tmp =\
    \ value\n        value = value2\n        value2 = tmp\n      end\n      j = j\
    \ + 1\n    end\n    results[i] = value\n    i = i + 1\n  end\n  return results\n\
    end", "  local sorted_arr = {}\n  local reverse_arr = {}\n  local lengths = {}\n\
    \  for i = 1, #arr do\n    local length = arr[i]\n    table.insert(sorted_arr,\
    \ arr[i])\n    table.insert(reverse_arr, arr[i])\n    table.insert(lengths, length)\n\
    \  end\n  table.sort(sorted_arr)\n  table.reverse(reverse_arr)\n  for i = 1, #sorted_arr\
    \ do\n    local length = lengths[i]\n    local index = math.floor((length - 1)\
    \ / 2)\n    local value = reverse_arr[i]\n    local name = lengths[math.floor(index)]\n\
    \    local new_name = name .. value\n    table.insert(sorted_arr, new_name)\n\
    \  end\n  return sorted_arr\nend", "  local arr2 = {}\n  for i = 1, #arr do\n\
    \    if arr[i] > 9 then\n      arr2[i] = \"Nine\"\n    elseif arr[i] < 1 then\n\
    \      arr2[i] = \"One\"\n    else\n      arr2[i] = \"Two\"\n    end\n  end\n\
    \  return arr2\nend", "  local arr2 = {}\n  for i = 1, #arr do\n    local num\
    \ = arr[i]\n    if num > 0 and num <= 9 then\n      arr2[#arr2 + 1] = num\n  \
    \  end\n  end\n  table.sort(arr2, function(a, b) return a < b end)\n  local reversed\
    \ = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n  end\n\
    \  table.sort(reversed, function(a, b) return a < b end)\n  local result = {}\n\
    \  for i = 1, #reversed do\n    table.insert(result, tostring(tostring(reversed[i])))\n\
    \  end\n  return result\nend", "  local arr2 = {}\n  for i = 1, #arr do\n    arr2[#arr2\
    \ + 1] = arr[i]\n  end\n  table.sort(arr2, function(a, b) return #a > #b end)\n\
    \  local reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n\
    \  end\n  table.sort(reversed, function(a, b) return #a > #b end)\n  local result\
    \ = {}\n  for i = 1, #reversed do\n    result[#result + 1] = reversed[i]\n  end\n\
    \  return result\nend", "  local sorted_arr = {}\n  local reverse_arr = {}\n \
    \ local names = {}\n  local max_len = -1\n  local min_len = 1000000000\n  local\
    \ max_val = -1\n  local min_val = 1000000000\n  for i = 1, #arr do\n    local\
    \ val = arr[i]\n    if val < min_val then\n      min_val = val\n    end\n    if\
    \ val > max_val then\n      max_val = val\n    end\n    if val > min_len then\n\
    \      table.insert(sorted_arr, val)\n      table.insert(reverse_arr, val)\n \
    \     table.insert(names, tostring(val))\n    end\n  end\n  table.sort(sorted_arr)\n\
    \  table.sort(reverse_arr)\n  for i = 1, #sorted_arr do\n    local val = sorted_arr[i]\n\
    \    local name = tostring(val)\n    local reverse = reverse_arr[i]\n    if reverse\
    \ < min_len then\n      table.insert(sorted_arr, val)\n      table.insert(reverse_arr,\
    \ val)\n      table.insert(names, name)\n    end\n  end\n  table.sort(sorted_arr)\n\
    \  table.sort(reverse_arr)\n  for i = 1, #sorted_arr do\n    local val = sorted_arr[i]\n\
    \    local name = tostring(val)\n    local reverse = reverse_arr[i]\n    if reverse\
    \ < min_len then\n      table.insert(sorted_arr, val)\n      table.insert(reverse_arr,\
    \ val)\n      table.insert(names, name)\n    end\n  end\n  return names\nend",
  "  local sorted_arr = {}\n  local reverse_arr = {}\n  local results = {}\n  for\
    \ i = 1, #arr do\n    local length = arr[i]\n    local index = #sorted_arr\n \
    \   sorted_arr[index] = arr[i]\n    if length > 1 then\n      local index2 = #reverse_arr\n\
    \      reverse_arr[index2] = length\n      local index3 = #results\n      results[index3]\
    \ = arr[i]\n      index3 = index3 + 1\n      local index4 = index3\n      while\
    \ index4 <= #sorted_arr do\n        local length = sorted_arr[index4]\n      \
    \  local index5 = #reverse_arr\n        reverse_arr[index5] = length\n       \
    \ index5 = index5 + 1\n        index4 = index5\n      end\n    end\n  end\n  for\
    \ i = 1, #sorted_arr do\n    local length = sorted_arr[i]\n    local index2 =\
    \ reverse_arr[i]\n    local index3 = results[i]\n    local index4 = index3\n \
    \   while index4 <= index2 do\n      local length = sorted_arr[index4]\n     \
    \ local index5 = reverse_arr[index4]\n      local index6 = results[index4]\n \
    \     local index7 = index6\n      while index7 <= index5 do\n        local length\
    \ = sorted_arr[index7]\n        local index8 = reverse_arr[index7]\n        local\
    \ index9 = results[index7]\n        results[index8] = arr[index9]\n        index9\
    \ = index9 + 1\n        index7 = index8\n      end\n      index4 = index4 + 1\n\
    \    end\n  end\n  return results\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n    if length\
    \ <= 9 then\n      table.insert(sorted_arr, arr[i])\n    else\n      table.insert(reversed_arr,\
    \ arr[i])\n    end\n  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr\
    \ do\n    table.insert(sorted_arr, reversed_arr[i])\n  end\n  return sorted_arr\n\
    end", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_size\
    \ = #arr\n  local reversed_arr_size = #reversed_arr\n  for i = 1, sorted_arr_size\
    \ do\n    local element = arr[i]\n    local length = #element\n    if length ==\
    \ 1 then\n      sorted_arr[#sorted_arr + 1] = element\n    else\n      local pos\
    \ = 1\n      while pos <= length do\n        local pos = pos + 1\n        local\
    \ element = arr[pos]\n        local length = #element\n        if length == 1\
    \ then\n          sorted_arr[#sorted_arr + 1] = element\n        else\n      \
    \    local pos = 1\n          while pos <= length do\n            local pos =\
    \ pos + 1\n            local element = arr[pos]\n            local length = #element\n\
    \            if length == 1 then\n              sorted_arr[#sorted_arr + 1] =\
    \ element\n            else\n              local pos = 1\n              while\
    \ pos <= length do\n                local pos = pos + 1\n                local\
    \ element = arr[pos]\n                local length = #element\n              \
    \  if length == 1 then\n                  sorted_arr[#sorted_arr + 1] = element\n\
    \                else\n                  local pos = 1\n                  while\
    \ pos <= length do\n                    local pos = pos + 1\n                \
    \    local element = arr[pos]\n                    local length = #element\n \
    \                   if length == 1 then\n                      sorted_arr[#sorted_arr\
    \ + 1] = element\n                    else\n                      local pos =\
    \ 1\n                      while pos <= length do\n                        local\
    \ pos = pos + 1\n                        local element = arr[pos]\n          \
    \              local length = #element\n                        if length == 1\
    \ then\n                          sorted_arr[#sorted_arr + 1] = element\n    \
    \                    else\n                          local pos = 1\n         \
    \                 while pos <= length do\n                            local pos\
    \ = pos + 1\n                            local element = arr[pos]\n          \
    \                  local length = #element\n                            if length\
    \ == 1 then\n                              sorted_arr[#sorted_arr + 1] = element\n\
    \                            else\n                              local pos = 1\n\
    \                              while pos <= length do\n                      \
    \          local pos = pos + 1\n                                local element\
    \ = arr[pos]\n                                local length = #element\n      \
    \                          if length == 1 then\n                             \
    \     sorted_arr[#sorted_arr + 1] = element\n                                else\n\
    \                                  local pos = 1\n                           \
    \       while pos <= length do\n                                    local pos\
    \ = pos + 1\n                                    local element = arr[pos]\n  \
    \                                  local length = #element\n                 \
    \                   if length == 1 then\n                                    \
    \  sorted_arr[#sorted_arr + 1] = element\n                                   \
    \ else\n                                      local pos = 1\n                \
    \                      while pos <= length do\n                              \
    \          local pos = pos + 1\n                                        local\
    \ element = arr[pos]\n                                        local length = #element\n\
    \                                        if length == 1 then\n               \
    \                           sorted_arr[#sorted_arr + 1] = element\n          \
    \                              else\n                                        \
    \  ", "  local new_arr = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then\n      new_arr[i] = nil\n    elseif length < 10 then\n\
    \      new_arr[i] = \"One\"\n    elseif length < 20 then\n      new_arr[i] = \"\
    Two\"\n    elseif length < 30 then\n      new_arr[i] = \"Three\"\n    elseif length\
    \ < 40 then\n      new_arr[i] = \"Four\"\n    elseif length < 50 then\n      new_arr[i]\
    \ = \"Five\"\n    elseif length < 60 then\n      new_arr[i] = \"Six\"\n    elseif\
    \ length < 70 then\n      new_arr[i] = \"Seven\"\n    elseif length < 80 then\n\
    \      new_arr[i] = \"Eight\"\n    elseif length < 90 then\n      new_arr[i] =\
    \ \"Nine\"\n    else\n      new_arr[i] = \"Ten\"\n    end\n  end\n  return new_arr\n\
    end", "  local len = #arr\n  if len == 0 then\n    return arr\n  end\n  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  local i = 0\n  local j = 0\n \
    \ while i < len do\n    local value = arr[i]\n    local length = math.floor(math.log(value,\
    \ 10))\n    local digit = math.floor(value / math.pow(10, length))\n    sorted_arr[j]\
    \ = digit\n    reversed_arr[length] = digit\n    i = i + 1\n    j = j + 1\n  end\n\
    \  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    arr[i] = reversed_arr[i]\n\
    \  end\n  return arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local lengths = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    lengths[length] = lengths[length] + 1\n  end\n  for i = 1, #lengths do\n\
    \    sorted_arr[#sorted_arr + 1] = i\n  end\n  for i = 1, #arr do\n    local length\
    \ = math.floor(math.log10(arr[i]))\n    local index = sorted_arr[length - 1]\n\
    \    reversed_arr[#reversed_arr + 1] = arr[i]\n    sorted_arr[index] = i\n  end\n\
    \  for i = 1, #reversed_arr do\n    arr[reversed_arr[i]] = i\n  end\n  return\
    \ arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local name_arr\
    \ = {\n    [1] = \"One\",\n    [2] = \"Two\",\n    [3] = \"Three\",\n    [4] =\
    \ \"Four\",\n    [5] = \"Five\",\n    [6] = \"Six\",\n    [7] = \"Seven\",\n \
    \   [8] = \"Eight\",\n    [9] = \"Nine\",\n  }\n  for i = 1, #arr do\n    table.insert(sorted_arr,\
    \ arr[i])\n    table.insert(reversed_arr, arr[i]:reverse())\n  end\n  for i =\
    \ 1, #sorted_arr do\n    sorted_arr[i] = name_arr[sorted_arr[i]]\n  end\n  for\
    \ i = 1, #reversed_arr do\n    reversed_arr[i] = name_arr.reversed_arr[i]\n  end\n\
    \  return reversed_arr\nend", "  local function sort_by_length(arr)\n    local\
    \ sorted_arr = {}\n    local i = 0\n    while i < #arr do\n      local value =\
    \ arr[i]\n      local length = math.floor(math.log(value) / math.log(10))\n  \
    \    local digit = math.floor((math.log(value) / math.log(10)) - length * math.log(10))\n\
    \      sorted_arr[length] = arr[digit]\n      arr[digit] = value\n      i = i\
    \ + 1\n    end\n    return sorted_arr\n  end\n  local function reverse_arr(arr)\n\
    \    local i = 0\n    while i < #arr do\n      local value = arr[i]\n      local\
    \ length = math.floor(math.log(value) / math.log(10))\n      local digit = math.floor((math.log(value)\
    \ / math.log(10)) - length * math.log(10))\n      arr[digit] = value\n      i\
    \ = i + 1\n    end\n    return arr\n  end\n  local function replace_digit(arr)\n\
    \    local i = 0\n    while i < #arr do\n      local value = arr[i]\n      local\
    \ length = math.floor(math.log(value) / math.log(10))\n      local digit = math.floor((math.log(value)\
    \ / math.log(10)) - length * math.log(10))\n      arr[digit] = arr[length]\n \
    \     arr[length] = value\n      i = i + 1\n    end\n    return arr\n  end\n \
    \ if #arr == 0 then\n    return {}\n  end\n  if #arr == 1 then\n    return {\"\
    One\"}\n  end\n  if #arr == 2 then\n    return {\"One\", \"Two\"}\n  end\n  if\
    \ #arr == 3 then\n    return {\"One\", \"Two\", \"Three\"}\n  end\n  if #arr ==\
    \ 4 then\n    return {\"One\", \"Two\", \"Three\", \"Four\"}\n  end\n  if #arr\
    \ == 5 then\n    return {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"}\n  end\n\
    \  if #arr == 6 then\n    return {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"}\n  end\n  if #arr == 7 then\n    return {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\"}\n  end\n  if #arr == 8 then\n    return\
    \ {\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    }\n  end\n  if #arr == 9 or #arr == 10 then\n    return {\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n  end\n\
    \  local sorted_arr = sort_by_length(arr)\n  local reversed_arr = reverse_arr(sorted_arr)\n\
    \  return replace_digit(reversed_arr)\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n\
    \    local digit = math.pow(10, length)\n    local name = string.format(\"%g\"\
    , arr[i])\n    local index = math.floor(arr[i] / digit)\n    local value = arr[i]\
    \ % digit\n    sorted_arr[index] = name\n    reversed_arr[index] = value\n  end\n\
    \  for i = 1, #sorted_arr do\n    sorted_arr[i] = reversed_arr[i]\n  end\n  return\
    \ sorted_arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    table.insert(sorted_arr,\
    \ arr[i])\n    table.insert(reversed_arr, arr[i])\n    table.insert(lengths, length)\n\
    \  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    local length\
    \ = lengths[i]\n    local index = reversed_arr[i]\n    local name = get_name(index)\n\
    \    local value = get_value(index)\n    table.insert(sorted_arr, name)\n    table.insert(reversed_arr,\
    \ value)\n  end\n  return sorted_arr\nend", "  local function swap(arr, i, j)\n\
    \    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local\
    \ function sort(arr)\n    local len = #arr\n    local tmp = {}\n    for i = 1,\
    \ len do\n      local j = len - 1\n      while j > 0 and arr[j] > arr[j + 1] do\n\
    \        swap(arr, j, j - 1)\n        j = j - 1\n      end\n    end\n    return\
    \ arr\n  end\n  local function reverse(arr)\n    local len = #arr\n    local tmp\
    \ = {}\n    for i = 1, len do\n      tmp[i] = arr[i]\n    end\n    for i = 1,\
    \ len do\n      swap(tmp, len - i - 1, i)\n    end\n    return tmp\n  end\n  local\
    \ function to_str(arr)\n    local str = \"\"\n    for i = 1, #arr do\n      str\
    \ = str .. arr[i]\n    end\n    return str\n  end\n  local function to_arr(str)\n\
    \    local arr = {}\n    for i = 1, #str do\n      arr[i] = str:sub(i, i)\n  \
    \  end\n    return arr\n  end\n  local function to_num(str)\n    local num = 0\n\
    \    for i = 1, #str do\n      num = num * 10 + str:sub(i, i)\n    end\n    return\
    \ num\n  end\n  local function to_int(str)\n    local num = 0\n    for i = 1,\
    \ #str do\n      num = num * 10 + str:sub(i, i)\n    end\n    return num\n  end\n\
    \  local function to_bool(str)\n    local num = 0\n    for i = 1, #str do\n  \
    \    num = num * 10 + str:sub(i, i)\n    end\n    return num\n  end\n  local function\
    \ to_list(str)\n    local arr = []\n    for i = 1, #str do\n      arr[i] = str:sub(i,\
    \ i)\n    end\n    return arr\n  end\n  local function to_set(str)\n    local\
    \ set = {}\n    for i = 1, #str do\n      set[str:sub(i, i)] = true\n    end\n\
    \    return set\n  end\n  local function to_map(str)\n    local map = {}\n   \
    \ for i = 1, #str do\n      map[str:sub(i, i)] = true\n    end\n    return map\n\
    \  end\n  local function to_array(str)\n    local arr = []\n    for i = 1, #str\
    \ do\n      arr[i] = str:sub(i, i)\n    end\n    return arr\n  end\n  local function\
    \ to_object(str)\n    local map = {}\n    for i = 1, #str do\n      map[str:sub(i,\
    \ i)] = true\n    end\n    return map\n  end\n  local function to_set(str)\n \
    \   local set = {}\n", "  local function sort(a, b)\n    if a < b then\n     \
    \ return 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n\
    \    end\n  end\n  table.sort(arr, sort)\n  local function reverse(arr)\n    local\
    \ function reverse(arr, start, end)\n      local tmp\n      local i = start\n\
    \      while i < end do\n        tmp = arr[i]\n        arr[i] = arr[end]\n   \
    \     arr[end] = tmp\n        i = i + 1\n        end = end - 1\n      end\n  \
    \  end\n    local function swap(arr, a, b)\n      local tmp = arr[a]\n      arr[a]\
    \ = arr[b]\n      arr[b] = tmp\n    end\n    local function swap_reverse(arr,\
    \ a, b)\n      local tmp = arr[a]\n      arr[a] = arr[b]\n      arr[b] = tmp\n\
    \      reverse(arr, a, b)\n    end\n    local function swap_reverse_reverse(arr,\
    \ a, b)\n      local tmp = arr[a]\n      arr[a] = arr[b]\n      arr[b] = tmp\n\
    \      reverse(arr, a, b)\n      reverse(arr, b, a)\n    end\n    local function\
    \ swap_reverse_reverse_reverse(arr, a, b)\n      local tmp = arr[a]\n      arr[a]\
    \ = arr[b]\n      arr[b] = tmp\n      reverse(arr, a, b)\n      reverse(arr, b,\
    \ a)\n      reverse(arr, b, a)\n      reverse(arr, a, b)\n    end\n    local function\
    \ swap_reverse_reverse_reverse_reverse(arr, a, b)\n      local tmp = arr[a]\n\
    \      arr[a] = arr[b]\n      arr[b] = tmp\n      reverse(arr, a, b)\n      reverse(arr,\
    \ b, a)\n      reverse(arr, b, a)\n      reverse(arr, b, a)\n      reverse(arr,\
    \ a, b)\n    end\n    local function swap_reverse_reverse_reverse_reverse_reverse(arr,\
    \ a, b)\n      local tmp = arr[a]\n      arr[a] = arr[b]\n      arr[b] = tmp\n\
    \      reverse(arr, a, b)\n      reverse(arr, b, a)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)\n      reverse(arr, b, a)\n\
    \      reverse(arr, b, a)\n      reverse(arr, a, b)", "  local sorted_arr = {}\n\
    \  local reversed_arr = {}\n  local length_arr = {}\n  for i = 1, #arr do\n  \
    \  local length = math.abs(arr[i])\n    length_arr[length] = true\n  end\n  for\
    \ i = 1, #arr do\n    local length = math.abs(arr[i])\n    if length_arr[length]\
    \ then\n      table.insert(sorted_arr, arr[i])\n      table.insert(reversed_arr,\
    \ arr[i])\n    end\n  end\n  for i = 1, #sorted_arr do\n    table.insert(reversed_arr,\
    \ sorted_arr[i])\n  end\n  table.sort(reversed_arr)\n  local result = {}\n  for\
    \ i = 1, #reversed_arr do\n    table.insert(result, string.format(\"%g\", reversed_arr[i]))\n\
    \  end\n  return result\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local length_arr = {}\n  for i = 1, #arr do\n    length_arr[i] = #arr[i]\n\
    \  end\n  table.sort(length_arr)\n  for i = 1, #length_arr do\n    local index\
    \ = length_arr[i]\n    table.insert(sorted_arr, arr[index])\n    table.insert(reversed_arr,\
    \ arr[index])\n  end\n  for i = 1, #arr do\n    arr[i] = reversed_arr[i]\n  end\n\
    \  return arr\nend", "  local sorted_arr = {}\n  local reverse_arr = {}\n  local\
    \ lengths = {}\n  for i = 1, #arr do\n    local length = math.abs(arr[i])\n  \
    \  table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(lengths)\n  for i = 1, #lengths do\n    local length = lengths[i]\n\
    \    local index = math.floor(length / 10)\n    local digit = length % 10\n  \
    \  local name = string.format(\"%g\", sorted_arr[index])\n    reverse_arr[length]\
    \ = name\n    sorted_arr[index] = name\n  end\n  local new_arr = {}\n  for i =\
    \ 1, #arr do\n    table.insert(new_arr, arr[i])\n  end\n  for i = 1, #sorted_arr\
    \ do\n    table.insert(new_arr, sorted_arr[i])\n  end\n  for i = 1, #reverse_arr\
    \ do\n    table.insert(new_arr, reverse_arr[i])\n  end\n  return new_arr\nend",
  "  local arr2 = {}\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 and\
    \ n < 10 then\n      arr2[#arr2 + 1] = arr[i]\n    end\n  end\n  table.sort(arr2,\
    \ function(a, b) return #a > #b end)\n  local new_arr = {}\n  for i = 1, #arr2\
    \ do\n    local n = arr2[i]\n    if n > 0 and n < 10 then\n      new_arr[#new_arr\
    \ + 1] = names[n]\n    end\n  end\n  return new_arr\nend", "  local new_arr =\
    \ {}\n  for i = 1, #arr do\n    local length = arr[i]\n    if length == nil then\n\
    \      new_arr[i] = nil\n    elseif length < 1 or length > 9 then\n      new_arr[i]\
    \ = nil\n    else\n      local index = math.floor(math.log2(length))\n      local\
    \ digit = math.pow(10, index)\n      local name = string.format(\"%g\", digit)\n\
    \      new_arr[i] = name\n    end\n  end\n  return new_arr\nend", "  local sorted_arr\
    \ = {}\n  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n\
    \    local length = arr[i]\n    if lengths[length] == nil then\n      lengths[length]\
    \ = 1\n    else\n      lengths[length] = lengths[length] + 1\n    end\n  end\n\
    \  for i = 1, 9 do\n    local length = i\n    if lengths[length] == nil then\n\
    \      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil then\n      lengths[length] = 1\n    else\n      lengths[length] = lengths[length]\
    \ + 1\n    end\n  end\n  for i = 1, 9 do\n    local length = i\n    if lengths[length]\
    \ == nil ", "  local function sort(a, b)\n    if a < b then\n      return 1\n\
    \    elseif b < a then\n      return -1\n    else\n      return 0\n    end\n \
    \ end\n  table.sort(arr, sort)\n  local function reverse(arr, start, end)\n  \
    \  local tmp\n    for i = start, end do\n      tmp = arr[i]\n      arr[i] = arr[end]\n\
    \      arr[end] = tmp\n    end\n  end\n  reverse(arr, 1, #arr)\n  local function\
    \ to_name(num)\n    local names = {\n      [1] = tostring(1),\n      [2] = tostring(2),\n\
    \      [3] = tostring(3),\n      [4] = tostring(4),\n      [5] = tostring(5),\n\
    \      [6] = tostring(6),\n      [7] = tostring(7),\n      [8] = tostring(8),\n\
    \      [9] = tostring(9),\n    }\n    return names[num]\n  end\n  local function\
    \ to_num(str)\n    local num = 0\n    for i = 1, #str do\n      num = num * 10\
    \ + tonumber(str[i])\n    end\n    return num\n  end\n  local function to_arr(arr)\n\
    \    local arr2 = {}\n    for i = 1, #arr do\n      arr2[i] = to_num(arr[i])\n\
    \    end\n    return arr2\n  end\n  local function to_str(arr)\n    local str\
    \ = \"\"\n    for i = 1, #arr do\n      str = str .. to_name(arr[i])\n    end\n\
    \    return str\n  end\n  return to_arr(arr)\nend", "  local function swap(arr,\
    \ i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n\
    \  local function sort_by_length(arr)\n    local length = #arr\n    local tmp\
    \ = {}\n    for i = 1, length do\n      local value = arr[i]\n      local j =\
    \ length - i - 1\n      while j > 0 and value < arr[j] do\n        swap(arr, j,\
    \ j-1)\n        j = j - 1\n      end\n      tmp[value] = arr[i]\n    end\n   \
    \ return tmp\n  end\n  local function reverse_sort_by_length(arr)\n    local length\
    \ = #arr\n    local tmp = {}\n    for i = 1, length do\n      local value = arr[i]\n\
    \      local j = length - i - 1\n      while j > 0 and value > arr[j] do\n   \
    \     swap(arr, j, j-1)\n        j = j - 1\n      end\n      tmp[value] = arr[i]\n\
    \    end\n    return tmp\n  end\n  local function replace_digit(arr, i, name)\n\
    \    local value = arr[i]\n    arr[i] = name\n    local j = i - 1\n    while j\
    \ > 0 and value < arr[j] do\n      swap(arr, j, j-1)\n      j = j - 1\n    end\n\
    \  end\n  local function replace_digit_reverse(arr, i, name)\n    local value\
    \ = arr[i]\n    arr[i] = name\n    local j = i - 1\n    while j > 0 and value\
    \ > arr[j] do\n      swap(arr, j, j-1)\n      j = j - 1\n    end\n  end\n  local\
    \ function sort_by_length(arr)\n    local length = #arr\n    local tmp = {}\n\
    \    for i = 1, length do\n      local value = arr[i]\n      local j = length\
    \ - i - 1\n      while j > 0 and value < arr[j] do\n        swap(arr, j, j-1)\n\
    \        j = j - 1\n      end\n      tmp[value] = arr[i]\n    end\n    return\
    \ tmp\n  end\n  local function reverse_sort_by_length(arr)\n    local length =\
    \ #arr\n    local tmp = {}\n    for i = 1, length do\n      local value = arr[i]\n\
    \      local j = length - i - 1\n      while j > 0 and value > arr[j] do\n   \
    \     swap(arr, j, j-1)\n        j = j - 1\n      end\n      tmp[value] = arr[i]\n\
    \    end\n    return tmp\n  end\n  local function replace_digit(arr, i, name)\n\
    \    local value = arr[i]\n    arr[i] = name\n    local j = i - 1\n    while j\
    \ > 0 and value < arr[j] do\n      swap(arr, j, j-1)\n      j = j - 1\n    end\n\
    \  end\n", "  local function sort(a, b)\n    if a < b then\n      return 1\n \
    \   elseif b < a then\n      return -1\n    else\n      return 0\n    end\n  end\n\
    \  table.sort(arr, sort)\n  local function reverse(array)\n    local reversed\
    \ = {}\n    for i = #array, 1, -1 do\n      table.insert(reversed, array[i])\n\
    \    end\n    return reversed\n  end\n  local function replace_digit(array, index)\n\
    \    local digit = array[index]\n    local name = {\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    local index\
    \ = index - 1\n    local new_name = name[digit]\n    array[index] = new_name\n\
    \    return array\n  end\n  local function replace_digits(array)\n    local new_array\
    \ = {}\n    for i = 1, #array do\n      new_array = replace_digit(new_array, i)\n\
    \    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_reverse(array)\n\
    \    local new_array = {}\n    for i = #array, 1, -1 do\n      new_array = replace_digit(new_array,\
    \ i)\n    end\n    return new_array\n  end\n  local function replace_digits_",
  "  local len = #arr\n  local sorted_arr = {}\n  local reversed_arr = {}\n  local\
    \ i = 0\n  local j = 0\n  while i < len do\n    local value = arr[i]\n    local\
    \ length = math.floor(math.log(value, 10))\n    local digit = math.floor(value\
    \ / math.pow(10, length))\n    local name = get_name(digit)\n    sorted_arr[j]\
    \ = name\n    reversed_arr[j] = digit\n    i = i + 1\n    j = j + 1\n  end\n \
    \ reversed_arr[j] = nil\n  return sorted_arr, reversed_arr\nend", "  local sorted_arr\
    \ = arr:sort()\n  local reversed_arr = sorted_arr:reverse()\n  local results =\
    \ {}\n  for i = 1, #reversed_arr do\n    local num = reversed_arr[i]\n    local\
    \ name = \"\"\n    if num == 1 then\n      name = \"One\"\n    elseif num == 2\
    \ then\n      name = \"Two\"\n    elseif num == 3 then\n      name = \"Three\"\
    \n    elseif num == 4 then\n      name = \"Four\"\n    elseif num == 5 then\n\
    \      name = \"Five\"\n    elseif num == 6 then\n      name = \"Six\"\n    elseif\
    \ num == 7 then\n      name = \"Seven\"\n    elseif num == 8 then\n      name\
    \ = \"Eight\"\n    elseif num == 9 then\n      name = \"Nine\"\n    end\n    results[i]\
    \ = name\n  end\n  return results\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    if length > 1 then\n\
    \      sorted_arr[i] = arr[i]\n      reversed_arr[length] = arr[i]\n    end\n\
    \  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n    sorted_arr[i]\
    \ = reversed_arr[i]\n  end\n  return sorted_arr\nend", "  local arr2 = {}\n  for\
    \ i = 1, #arr do\n    local num = arr[i]\n    local length = math.floor(math.log(num,\
    \ 10))\n    local digit = math.floor(num / math.pow(10, length))\n    arr2[length]\
    \ = digit\n  end\n  table.sort(arr2, function(a, b) return a < b end)\n  local\
    \ reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed + 1] = arr2[i]\n\
    \  end\n  table.sort(reversed, function(a, b) return a < b end)\n  local result\
    \ = {}\n  for i = 1, #reversed do\n    result[#result + 1] = reversed[i]\n  end\n\
    \  return result\nend", "  local function sort_by_length(arr)\n    local sorted_arr\
    \ = {}\n    local length = #arr\n    for i = 1, length do\n      local value =\
    \ arr[i]\n      local pos = math.floor(math.log(value) / math.log(10))\n     \
    \ sorted_arr[pos] = value\n    end\n    table.sort(sorted_arr, function(a, b)\
    \ return a < b end)\n    local reversed_arr = {}\n    for i = 1, length do\n \
    \     reversed_arr[i] = sorted_arr[i]\n    end\n    return reversed_arr\n  end\n\
    \  local function replace_digit(arr, index, value)\n    arr[index] = value\n \
    \ end\n  local function replace_digit_by_name(arr, index, value)\n    arr[index]\
    \ = name[value]\n  end\n  local function replace_digit_by_index(arr, index, value)\n\
    \    arr[index] = value\n  end\n  local function replace_digit_by_index(arr, index,\
    \ value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n  local function replace_digit_by_index(arr,\
    \ index, value)\n    arr[index] = value\n  end\n", "  local sorted_arr = {}\n\
    \  local reversed_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local\
    \ length = math.floor(math.log10(arr[i]))\n    lengths[length] = lengths[length]\
    \ or {}\n    lengths[length][arr[i]] = true\n  end\n  for i = 1, #lengths do\n\
    \    sorted_arr[i] = i\n    for j = 1, #lengths[i] do\n      reversed_arr[lengths[i][j]]\
    \ = j\n    end\n  end\n  local sorted_arr_length = #sorted_arr\n  local reversed_arr_length\
    \ = #reversed_arr\n  local results = {}\n  for i = 1, reversed_arr_length do\n\
    \    local length = sorted_arr_length\n    if reversed_arr[i] > sorted_arr_length\
    \ then\n      length = reversed_arr[i]\n    end\n    results[#results+1] = lengths[length][sorted_arr[length]]\n\
    \  end\n  return results\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local\
    \ length = 0\n  for i = 1, #arr do\n    length = length + arr[i]\n  end\n  length\
    \ = length / 10\n  for i = 1, #arr do\n    local index = math.floor(arr[i]/length)\n\
    \    local value = arr[i]%length\n    sorted_arr[sorted_arr_index] = value\n \
    \   reversed_arr[reversed_arr_index] = value\n    sorted_arr_index = sorted_arr_index\
    \ + 1\n    reversed_arr_index = reversed_arr_index + 1\n  end\n  local sorted_arr_length\
    \ = #sorted_arr\n  local reversed_arr_length = #reversed_arr\n  for i = 1, sorted_arr_length\
    \ do\n    sorted_arr[i] = sorted_arr[i]\n  end\n  for i = 1, reversed_arr_length\
    \ do\n    reversed_arr[i] = reversed_arr[i]\n  end\n  return sorted_arr, reversed_arr\n\
    end", "  local function sort_by_length(arr)\n    local sorted_arr = {}\n    local\
    \ last_index = 0\n    local last_value = 0\n    for index, value in ipairs(arr)\
    \ do\n      if last_value == 0 then\n        last_value = value\n        last_index\
    \ = index\n      else\n        if last_value < value then\n          table.insert(sorted_arr,\
    \ last_value)\n          last_value = value\n          last_index = index\n  \
    \      else\n          table.insert(sorted_arr, value)\n        end\n      end\n\
    \    end\n    if last_value ~= 0 then\n      table.insert(sorted_arr, last_value)\n\
    \    end\n    return sorted_arr\n  end\n  return sort_by_length(arr)\nend", " \
    \ local results = {}\n  for i = 1, #arr do\n    local length = arr[i]\n    local\
    \ index = length\n    while index > 0 do\n      local digit = math.floor(index\
    \ / 10)\n      local name = digits[digit]\n      table.insert(results, name)\n\
    \      index = index - 10 * digit\n    end\n  end\n  return results\nend", " \
    \ local function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n\
    \    arr[j] = tmp\n  end\n  local function reverse(arr)\n    local i = #arr\n\
    \    while i > 1 do\n      swap(arr, i, #arr-1)\n      i = i-1\n    end\n  end\n\
    \  reverse(arr)\n  local function to_str(arr)\n    local str = \"\"\n    for i\
    \ = 1, #arr do\n      str = str .. arr[i]\n    end\n    return str\n  end\n  local\
    \ function to_num(str)\n    local num = 0\n    for i = 1, #str do\n      num =\
    \ num * 10 + tonumber(str:sub(i,i))\n    end\n    return num\n  end\n  local function\
    \ to_arr(str)\n    local arr = {}\n    for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr2(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n    end\n\
    \    return arr\n  end\n  local function to_arr3(str)\n    local arr = {}\n  \
    \  for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n    end\n    return\
    \ arr\n  end\n  local function to_arr4(str)\n    local arr = {}\n    for i = 1,\
    \ #str do\n      arr[i] = tonumber(str:sub(i,i))\n    end\n    return arr\n  end\n\
    \  local function to_arr5(str)\n    local arr = {}\n    for i = 1, #str do\n \
    \     arr[i] = tonumber(str:sub(i,i))\n    end\n    return arr\n  end\n  local\
    \ function to_arr6(str)\n    local arr = {}\n    for i = 1, #str do\n      arr[i]\
    \ = tonumber(str:sub(i,i))\n    end\n    return arr\n  end\n  local function to_arr7(str)\n\
    \    local arr = {}\n    for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n\
    \    end\n    return arr\n  end\n  local function to_arr8(str)\n    local arr\
    \ = {}\n    for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n    end\n\
    \    return arr\n  end\n  local function to_arr9(str)\n    local arr = {}\n  \
    \  for i = 1, #str do\n      arr[i] = tonumber(str:sub(i,i))\n    end\n    return\
    \ arr\n  end\n  local function to_arr10(str)\n    local arr = {}\n    for i =\
    \ 1, #str do\n      arr[i] = ton", "  local function compare(a,b)\n    if a <\
    \ b then\n      return -1\n    elseif b < a then\n      return 1\n    else\n \
    \     return 0\n    end\n  end\n  table.sort(arr, compare)\n  local function reverse(arr)\n\
    \    local function swap(a,b)\n      local tmp = a\n      a = b\n      b = tmp\n\
    \    end\n    local function reverse_recursive(arr)\n      local function helper(arr)\n\
    \        local n = #arr\n        if n == 1 then\n          swap(arr[1], arr[n])\n\
    \        else\n          helper(arr[1:n-1])\n          swap(arr[1], arr[n])\n\
    \          helper(arr[n+1:])\n        end\n      end\n      helper(arr)\n    end\n\
    \    reverse_recursive(arr)\n  end\n  reverse(arr)\n  local function to_name(num)\n\
    \    local names = {\n      [1] = \"One\",\n      [2] = \"Two\",\n      [3] =\
    \ \"Three\",\n      [4] = \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\"\
    ,\n      [7] = \"Seven\",\n      [8] = \"Eight\",\n      [9] = \"Nine\",\n   \
    \ }\n    return names[num]\n  end\n  local function to_num(str)\n    local num\
    \ = 0\n    for i = 1, #str do\n      num = num * 10 + tonumber(string.sub(str,\
    \ i, i))\n    end\n    return num\n  end\n  local function to_arr(arr)\n    local\
    \ arr2 = {}\n    for i = 1, #arr do\n      arr2[i] = to_name(arr[i])\n    end\n\
    \    return arr2\n  end\n  return to_arr(arr)\nend", "  local sorted_arr = {}\n\
    \  local reversed_arr = {}\n  local results = {}\n  local lengths = {}\n  local\
    \ max_length = 0\n  for i = 1, #arr do\n    local length = arr[i]\n    if lengths[length]\
    \ == nil then\n      lengths[length] = true\n      sorted_arr[#sorted_arr + 1]\
    \ = arr[i]\n      reversed_arr[#reversed_arr + 1] = length\n      if length >\
    \ max_length then\n        max_length = length\n      end\n    end\n  end\n  for\
    \ i = 1, #sorted_arr do\n    local length = reversed_arr[i]\n    local name =\
    \ \"\"\n    if lengths[length] then\n      name = results[length]\n    end\n \
    \   results[length] = name .. sorted_arr[i]\n  end\n  return results\nend", " \
    \ local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index =\
    \ 0\n  local reversed_arr_index = 0\n  local length = 0\n  for i = 1, #arr do\n\
    \    length = length + 1\n  end\n  for i = 1, #arr do\n    if arr[i] > 0 then\n\
    \      sorted_arr[sorted_arr_index] = arr[i]\n      sorted_arr_index = sorted_arr_index\
    \ + 1\n    end\n  end\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n\
    \  for i = 1, #sorted_arr do\n    sorted_arr[i] = \"One\"\n  end\n  for i = 1,\
    \ #reversed_arr do\n    reversed_arr[i] = \"One\"\n  end\n  for i = 1, #sorted_arr\
    \ do\n    sorted_arr[i] = \"Two\"\n  end\n  for i = 1, #reversed_arr do\n    reversed_arr[i]\
    \ = \"Two\"\n  end\n  for i = 1, #sorted_arr do\n    sorted_arr[i] = \"Three\"\
    \n  end\n  for i = 1, #reversed_arr do\n    reversed_arr[i] = \"Three\"\n  end\n\
    \  for i = 1, #sorted_arr do\n    sorted_arr[i] = \"Four\"\n  end\n  for i = 1,\
    \ #reversed_arr do\n    reversed_arr[i] = \"Four\"\n  end\n  for i = 1, #sorted_arr\
    \ do\n    sorted_arr[i] = \"Five\"\n  end\n  for i = 1, #reversed_arr do\n   \
    \ reversed_arr[i] = \"Five\"\n  end\n  for i = 1, #sorted_arr do\n    sorted_arr[i]\
    \ = \"Six\"\n  end\n  for i = 1, #reversed_arr do\n    reversed_arr[i] = \"Six\"\
    \n  end\n  for i = 1, #sorted_arr do\n    sorted_arr[i] = \"Seven\"\n  end\n \
    \ for i = 1, #reversed_arr do\n    reversed_arr[i] = \"Seven\"\n  end\n  for i\
    \ = 1, #sorted_arr do\n    sorted_arr[i] = \"Eight\"\n  end\n  for i = 1, #reversed_arr\
    \ do\n    reversed_arr[i] = \"Eight\"\n  end\n  for i = 1, #sorted_arr do\n  \
    \  sorted_arr[i] = \"Nine\"\n  end\n  for i = 1, #reversed_arr do\n    reversed_arr[i]\
    \ = \"Nine\"\n  end\n  for i = 1, #sorted_arr do\n    sorted_arr[i] = \"", " \
    \ local sorted_arr = {}\n  local reversed_arr = {}\n  local sorted_arr_index =\
    \ 1\n  local reversed_arr_index = 1\n  for i = 1, #arr do\n    if arr[i] > 9 then\n\
    \      sorted_arr[sorted_arr_index] = arr[i]\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      sorted_arr_index += 1\n      reversed_arr_index += 1\n    elseif\
    \ arr[i] < 1 then\n      sorted_arr[sorted_arr_index] = arr[i]\n      reversed_arr[reversed_arr_index]\
    \ = arr[i]\n      sorted_arr_index += 1\n      reversed_arr_index += 1\n    else\n\
    \      reversed_arr[reversed_arr_index] = arr[i]\n      reversed_arr_index +=\
    \ 1\n    end\n  end\n  table.sort(reversed_arr)\n  for i = 1, #reversed_arr do\n\
    \    sorted_arr[sorted_arr_index] = reversed_arr[i]\n    sorted_arr_index += 1\n\
    \  end\n  return sorted_arr\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local length_map = {}\n  local length_arr = {}\n  local i = 0\n  local\
    \ j = 0\n  local length = 0\n  local max_length = 0\n  local max_length_index\
    \ = 0\n  local max_value = 0\n  local max_value_index = 0\n  local max_value_length\
    \ = 0\n  local max_value_length_index = 0\n  local max_value_length_value = 0\n\
    \  local max_value_length_value_index = 0\n  local max_value_length_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value_index = 0\n  local max_value_length_value_value_value\
    \ = 0\n  local max_value_length_value_value", "  local function swap(arr, i, j)\n\
    \    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n  local\
    \ function sort_by_length(arr)\n    local tmp = {}\n    for i = 1, #arr do\n \
    \     local j = i\n      while j > 1 and arr[j] < arr[j-1] do\n        swap(arr,\
    \ j, j-1)\n        j = j - 1\n      end\n      tmp[i] = arr[j]\n    end\n    return\
    \ tmp\n  end\n  local function reverse_arr(arr)\n    local tmp = {}\n    for i\
    \ = #arr, 1, -1 do\n      tmp[#tmp+1] = arr[i]\n    end\n    return tmp\n  end\n\
    \  local function replace_digit(arr)\n    local tmp = {}\n    for i = 1, #arr\
    \ do\n      tmp[i] = \"One\"\n      if arr[i] > 9 then\n        local j = i\n\
    \        while j > 1 and arr[j] > 9 then\n          swap(arr, j, j-1)\n      \
    \    j = j - 1\n        end\n        tmp[i] = \"Nine\"\n      end\n    end\n \
    \   return tmp\n  end\n  if #arr == 0 then\n    return {}\n  end\n  local tmp\
    \ = sort_by_length(arr)\n  local reversed = reverse_arr(tmp)\n  return replace_digit(reversed)\n\
    end", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local length = #arr\n\
    \  for i = 1, length do\n    local value = arr[i]\n    local index = math.floor(math.log(value)\
    \ / math.log(10))\n    local digit = math.floor((math.log(value) / math.log(10))\
    \ * 10)\n    local name = digits[digit]\n    sorted_arr[index] = name\n    reversed_arr[name]\
    \ = value\n  end\n  table.sort(reversed_arr)\n  for i = 1, length do\n    arr[i]\
    \ = reversed_arr[i]\n  end\n  return arr\nend", "  local results = {}\n  for i\
    \ = 1, #arr do\n    local length = arr[i]\n    if length > 1 then\n      local\
    \ index = math.floor(math.log2(length))\n      local digit = math.floor(index\
    \ / 2)\n      local name = string.format(\"%c%c\", digit, index - digit)\n   \
    \   table.insert(results, name)\n    end\n  end\n  return results\nend", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  for i = 1, #arr do\n    local\
    \ length = arr[i]\n    if length == nil then\n      sorted_arr[i] = nil\n    \
    \  reversed_arr[i] = nil\n    else\n      local sorted_length = math.floor(math.log10(length)\
    \ + 1)\n      local reversed_length = math.floor(math.log10(length) - 1) + 1\n\
    \      local digit = math.floor(length / math.pow(10, reversed_length))\n    \
    \  local digits = math.floor(length / math.pow(10, reversed_length))\n      local\
    \ reversed_digit = math.floor(digit / math.pow(10, reversed_length))\n      local\
    \ reversed_digits = math.floor(digits / math.pow(10, reversed_length))\n     \
    \ local reversed_digit_name = reversed_digits[reversed_digit]\n      local reversed_digits_name\
    \ = reversed_digits[reversed_digits]\n      local reversed_digit_name_index =\
    \ reversed_digits[reversed_digit]\n      local reversed_digits_name_index = reversed_digits[reversed_digits]\n\
    \      local reversed_digit_name_index = reversed_digits[reversed_digit]\n   \
    \   local reversed_digits_name_index = reversed_digits[reversed_digits]\n    \
    \  local reversed_digit_name_index = reversed_digits[reversed_digit]\n      local\
    \ reversed_digits_name_index = reversed_digits[reversed_digits]\n      local reversed_digit_name_index\
    \ = reversed_digits[reversed_digit]\n      local reversed_digits_name_index =\
    \ reversed_digits[reversed_digits]\n      local reversed_digit_name_index = reversed_digits[reversed_digit]\n\
    \      local reversed_digits_name_index = reversed_digits[reversed_digits]\n \
    \     local reversed_digit_name_index = reversed_digits[reversed_digit]\n    \
    \  local reversed_digits_name_index = reversed_digits[reversed_digits]\n     \
    \ local reversed_digit_name_index = reversed_digits[reversed_digit]\n      local\
    \ reversed_digits_name_index = reversed_digits[reversed_digits]\n      local reversed_digit_name_index\
    \ = reversed_digits[reversed_digit]\n      local reversed_digits_name_index =\
    \ reversed_digits[reversed_digits]\n      local reversed_digit_name_index = reversed_digits[reversed_digit]\n\
    \      local reversed_digits_name_index = reversed_digits[reversed_digits]\n \
    \     local reversed_digit_name_index = reversed_digits[reversed_digit]\n    \
    \  local reversed_digits_name_index = reversed_digits[reversed_digits]\n     \
    \ local reversed_digit_name", "  local sorted_arr = {}\n  local reversed_arr =\
    \ {}\n  local results = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    if length == nil then\n      length = arr[i]\n    end\n    if length < 1\
    \ or length > 9 then\n      -- ignore strange numbers\n      continue\n    end\n\
    \    table.insert(sorted_arr, arr[i])\n    table.insert(reversed_arr, arr[i])\n\
    \  end\n  table.sort(sorted_arr)\n  table.sort(reversed_arr)\n  for i = 1, #sorted_arr\
    \ do\n    local length = sorted_arr[i]\n    if length == nil then\n      length\
    \ = sorted_arr[i]\n    end\n    local index = reversed_arr[i - 1]\n    local name\
    \ = results[index]\n    if name == nil then\n      name = One\n    end\n    results[index]\
    \ = name\n  end\n  return results\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length = arr[i]\n\
    \    table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(lengths)\n  for i = 1, #lengths do\n    local length = lengths[i]\n\
    \    local index = math.floor(math.random() * length)\n    table.insert(reversed_arr,\
    \ arr[index])\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(reversed_arr)\n\
    \  for i = 1, #reversed_arr do\n    table.insert(sorted_arr, reversed_arr[i])\n\
    \  end\n  return sorted_arr\nend", "  local arr2 = {}\n  local i = 0\n  for i\
    \ = 1, #arr do\n    local value = arr[i]\n    local length = math.floor(math.log10(value))\n\
    \    local digit = math.floor((value - math.floor(value))/math.pow(10, length))\n\
    \    arr2[length] = arr2[length] .. by_digit(digit)\n  end\n  return arr2\nend",
  "  local new_arr = {}\n  for i = 1, #arr do\n    if arr[i] > 9 then\n      new_arr[i]\
    \ = arr[#arr]\n      arr[#arr] = arr[i]\n    end\n  end\n  for i = 1, #arr do\n\
    \    new_arr[i] = \"One\"\n  end\n  return new_arr\nend", "  local function swap(arr,\
    \ i, j)\n    local tmp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = tmp\n  end\n\
    \  local function sort_by_length(arr)\n    local length = #arr\n    local tmp\
    \ = {}\n    for i = 1, length do\n      local value = arr[i]\n      local j =\
    \ length - 1\n      while j > 0 and value < arr[j] do\n        swap(arr, j, j-1)\n\
    \        j = j - 1\n      end\n      tmp[value] = arr[i]\n    end\n    return\
    \ tmp\n  end\n  local function reverse_sort_by_length(arr)\n    local length =\
    \ #arr\n    local tmp = {}\n    for i = 1, length do\n      local value = arr[i]\n\
    \      local j = length - 1\n      while j > 0 and value > arr[j] do\n       \
    \ swap(arr, j, j-1)\n        j = j - 1\n      end\n      tmp[value] = arr[i]\n\
    \    end\n    return tmp\n  end\n  local function replace_digit(arr, index, name)\n\
    \    local value = arr[index]\n    arr[index] = name\n    return value\n  end\n\
    \  local function sort_and_reverse(arr)\n    local length = #arr\n    local tmp\
    \ = {}\n    for i = 1, length do\n      local value = arr[i]\n      local j =\
    \ length - 1\n      while j > 0 and value < arr[j] do\n        swap(arr, j, j-1)\n\
    \        j = j - 1\n      end\n      tmp[value] = arr[i]\n    end\n    return\
    \ reverse_sort_by_length(tmp)\n  end\n  local function sort_and_replace_digit(arr)\n\
    \    local length = #arr\n    local tmp = {}\n    for i = 1, length do\n     \
    \ local value = arr[i]\n      local j = length - 1\n      while j > 0 and value\
    \ < arr[j] do\n        swap(arr, j, j-1)\n        j = j - 1\n      end\n     \
    \ tmp[value] = arr[i]\n    end\n    return replace_digit(tmp, length, \"One\"\
    )\n  end\n  local function sort_and_replace_digit_and_reverse(arr)\n    local\
    \ length = #arr\n    local tmp = {}\n    for i = 1, length do\n      local value\
    \ = arr[i]\n      local j = length - 1\n      while j > 0 and value < arr[j] do\n\
    \        swap(arr, j, j-1)\n        j = j - 1\n      end\n      tmp[value] = arr[i]\n\
    \    end\n    return replace_digit(tmp, length, \"One\")\n  end\n  if #arr ==\
    \ 0 then\n    return {}\n  end\n  if #arr == 1 then\n    return replace_digit(arr,\
    \ 1, \"One\")\n  end\n  if #arr == 2 then\n    return ", "  local arr2 = {}\n\
    \  local arr3 = {}\n  local arr4 = {}\n  local arr5 = {}\n  local arr6 = {}\n\
    \  local arr7 = {}\n  local arr8 = {}\n  local arr9 = {}\n  local arr10 = {}\n\
    \  local arr11 = {}\n  local arr12 = {}\n  local arr13 = {}\n  local arr14 = {}\n\
    \  local arr15 = {}\n  local arr16 = {}\n  local arr17 = {}\n  local arr18 = {}\n\
    \  local arr19 = {}\n  local arr20 = {}\n  local arr21 = {}\n  local arr22 = {}\n\
    \  local arr23 = {}\n  local arr24 = {}\n  local arr25 = {}\n  local arr26 = {}\n\
    \  local arr27 = {}\n  local arr28 = {}\n  local arr29 = {}\n  local arr30 = {}\n\
    \  local arr31 = {}\n  local arr32 = {}\n  local arr33 = {}\n  local arr34 = {}\n\
    \  local arr35 = {}\n  local arr36 = {}\n  local arr37 = {}\n  local arr38 = {}\n\
    \  local arr39 = {}\n  local arr40 = {}\n  local arr41 = {}\n  local arr42 = {}\n\
    \  local arr43 = {}\n  local arr44 = {}\n  local arr45 = {}\n  local arr46 = {}\n\
    \  local arr47 = {}\n  local arr48 = {}\n  local arr49 = {}\n  local arr50 = {}\n\
    \  local arr51 = {}\n  local arr52 = {}\n  local arr53 = {}\n  local arr54 = {}\n\
    \  local arr55 = {}\n  local arr56 = {}\n  local arr57 = {}\n  local arr58 = {}\n\
    \  local arr59 = {}\n  local arr60 = {}\n  local arr61 = {}\n  local arr62 = {}\n\
    \  local arr63 = {}\n  local arr64 = {}\n  local arr65 = {}\n  local arr66 = {}\n\
    \  local arr67 = {}\n  local arr68 = {}\n  local arr69 = {}\n  local arr70 = {}\n\
    \  local arr71 = {}\n  local arr72 = {}\n  local arr73 = {}\n  local arr74 = {}\n\
    \  local arr75 = {}\n  local arr76 = {}\n  local arr77 = {}\n  local arr78 = {}\n\
    \  local arr79 = {}\n  local arr80 = {}\n  local arr81 = {}\n  local arr82 = {}\n\
    \  local arr83 = {}\n", "  local function sort(a, b)\n    if a < b then\n    \
    \  return 1\n    elseif b < a then\n      return -1\n    else\n      return 0\n\
    \    end\n  end\n  table.sort(arr, sort)\n  local function reverse(arr)\n    local\
    \ function swap(a, b)\n      local t = a\n      a = b\n      b = t\n    end\n\
    \    local function reverse1(arr)\n      local n = #arr\n      for i = 1, n do\n\
    \        swap(arr[i], arr[n - i - 1])\n      end\n    end\n    local function\
    \ reverse2(arr)\n      local n = #arr\n      for i = 1, n do\n        local t\
    \ = arr[i]\n        arr[i] = arr[n - i - 1]\n        arr[n - i - 1] = arr[i]\n\
    \        arr[i] = t\n      end\n    end\n    if #arr == 0 then\n      return arr\n\
    \    end\n    if #arr == 1 then\n      return arr\n    end\n    if #arr == 2 then\n\
    \      reverse1(arr)\n      return arr\n    end\n    if #arr == 3 then\n     \
    \ reverse2(arr)\n      return arr\n    end\n  end\n  reverse(arr)\n  local function\
    \ to_name(num)\n    if num < 10 then\n      return \"One\"\n    elseif num < 20\
    \ then\n      return \"Two\"\n    elseif num < 30 then\n      return \"Three\"\
    \n    elseif num < 40 then\n      return \"Four\"\n    elseif num < 50 then\n\
    \      return \"Five\"\n    elseif num < 60 then\n      return \"Six\"\n    elseif\
    \ num < 70 then\n      return \"Seven\"\n    elseif num < 80 then\n      return\
    \ \"Eight\"\n    elseif num < 90 then\n      return \"Nine\"\n    else\n     \
    \ return \"?\"\n    end\n  end\n  local function to_num(str)\n    local num =\
    \ tonumber(str)\n    if num == nil then\n      return nil\n    end\n    return\
    \ num\n  end\n  local function to_arr(arr)\n    local arr2 = {}\n    for i = 1,\
    \ #arr do\n      arr2[i] = to_num(arr[i])\n    end\n    return arr2\n  end\n \
    \ local function to_arr2(arr)\n    local arr2 = {}\n    for i = 1, #arr do\n \
    \     arr2[i] = to_name(arr[i])\n    end\n    return arr2\n  end\n  return to_arr2(to_arr(arr))\n\
    end", "  local function swap(arr, i, j)\n    local tmp = arr[i]\n    arr[i] =\
    \ arr[j]\n    arr[j] = tmp\n  end\n  local function reverse(arr)\n    local tmp\n\
    \    for i = #arr, 1, -1 do\n      tmp = arr[i]\n      arr[i] = arr[#arr]\n  \
    \    arr[#arr] = tmp\n    end\n  end\n  local function sort_and_reverse(arr)\n\
    \    local tmp\n    for i = 1, #arr do\n      local j = i\n      while j > 0 and\
    \ arr[j] < arr[j - 1] do\n        swap(arr, j, j - 1)\n        j = j - 1\n   \
    \   end\n    end\n    reverse(arr)\n  end\n  if #arr == 0 then\n    return {}\n\
    \  end\n  sort_and_reverse(arr)\n  local names = {}\n  for i = 1, #arr do\n  \
    \  local n = arr[i]\n    if n > 9 then\n      n = math.floor(n/10) + 1 .. \"-\"\
    \ .. math.floor(n/10) + 9\n    end\n    table.insert(names, n)\n  end\n  return\
    \ names\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local lengths\
    \ = {}\n  for i = 1, #arr do\n    local length = math.floor(math.abs(arr[i]))\n\
    \    table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(lengths)\n  for i = 1, #lengths do\n    table.insert(reversed_arr,\
    \ lengths[i])\n  end\n  for i = 1, #arr do\n    local length = math.floor(math.abs(arr[i]))\n\
    \    local index = reversed_arr[length]\n    arr[i] = sorted_arr[index]\n  end\n\
    \  return arr\nend", "  local arr2 = {}\n  local lengths = {}\n  for i = 1, #arr\
    \ do\n    local length = math.floor(math.log10(arr[i]))\n    if not lengths[length]\
    \ then\n      lengths[length] = true\n      arr2[#arr2 + 1] = length\n    end\n\
    \  end\n  table.sort(arr2, function(a, b)\n    return arr[a] < arr[b]\n  end)\n\
    \  for i = 1, #arr2 do\n    local length = arr2[i]\n    arr[i] = \"One\"\n   \
    \ for j = 1, length do\n      arr[i] = arr[i] .. \"Two\"\n    end\n    arr[i]\
    \ = arr[i] .. \"Nine\"\n  end\n  return arr\nend", "  local function sort_by_length(arr)\n\
    \    local sorted_arr = {}\n    for i = 1, #arr do\n      local length = arr[i]\n\
    \      local index = #sorted_arr\n      while index > 0 and sorted_arr[index -\
    \ 1] > length do\n        sorted_arr[index] = sorted_arr[index - 1]\n        index\
    \ = index - 1\n      end\n      sorted_arr[index] = length\n    end\n    return\
    \ sorted_arr\n  end\n  local function reverse_arr(arr)\n    local reversed_arr\
    \ = {}\n    for i = #arr, 1, -1 do\n      reversed_arr[i] = arr[i]\n    end\n\
    \    return reversed_arr\n  end\n  local function replace_digit(arr)\n    local\
    \ new_arr = {}\n    for i = 1, #arr do\n      local digit = arr[i]\n      local\
    \ index = #new_arr\n      while index > 0 and new_arr[index - 1] > digit do\n\
    \        new_arr[index] = new_arr[index - 1]\n        index = index - 1\n    \
    \  end\n      new_arr[index] = digit\n    end\n    return new_arr\n  end\n  local\
    \ function sort_and_reverse(arr)\n    local sorted_arr = sort_by_length(arr)\n\
    \    return reverse_arr(sorted_arr)\n  end\n  local function remove_strange_number(arr)\n\
    \    local new_arr = {}\n    for i = 1, #arr do\n      local digit = arr[i]\n\
    \      local index = #new_arr\n      while index > 0 and new_arr[index - 1] ==\
    \ digit do\n        index = index - 1\n      end\n      if index > 0 then\n  \
    \      new_arr[index] = digit\n      end\n    end\n    return new_arr\n  end\n\
    \  local function remove_empty(arr)\n    local new_arr = {}\n    for i = 1, #arr\
    \ do\n      local digit = arr[i]\n      local index = #new_arr\n      while index\
    \ > 0 and new_arr[index - 1] == digit do\n        index = index - 1\n      end\n\
    \      if index > 0 then\n        new_arr[index] = digit\n      end\n    end\n\
    \    return new_arr\n  end\n  local function remove_none(arr)\n    local new_arr\
    \ = {}\n    for i = 1, #arr do\n      local digit = arr[i]\n      local index\
    \ = #new_arr\n      while index > 0 and new_arr[index - 1] == digit do\n     \
    \   index = index - 1\n      end\n      if index > 0 then\n        new_arr[index]\
    \ = digit\n      end\n    end\n    return new_arr\n  end\n  local function remove_digit(arr)\n\
    \    local new_arr = {}\n    for i = 1, #arr do\n      local digit = arr[i]\n\
    \      local index = #new_arr\n      while index > 0 and new_arr[index - 1] ==\
    \ digit do", "  local sorted_arr = {}\n  local reverse_arr = {}\n  local sorted_arr_size\
    \ = #arr\n  local reverse_arr_size = #reverse_arr\n  for i = 1, sorted_arr_size\
    \ do\n    local element = arr[i]\n    if element >= 1 and element <= 9 then\n\
    \      table.insert(sorted_arr, element)\n    else\n      table.insert(reverse_arr,\
    \ element)\n    end\n  end\n  for i = 1, reverse_arr_size do\n    local element\
    \ = reverse_arr[i]\n    table.insert(sorted_arr, element)\n  end\n  return sorted_arr\n\
    end", "  local sorted_arr = {}\n  local reversed_arr = {}\n  local lengths = {}\n\
    \  for i = 1, #arr do\n    local length = math.floor(math.log10(arr[i]))\n   \
    \ table.insert(lengths, length)\n    table.insert(sorted_arr, arr[i])\n  end\n\
    \  table.sort(lengths, function(a, b) return a < b end)\n  for i = 1, #lengths\
    \ do\n    local length = lengths[i]\n    local index = math.floor(length / 10)\n\
    \    local digit = length % 10\n    local digit = digit + 1\n    local reversed_digit\
    \ = reversed_arr[digit]\n    if reversed_digit == nil then\n      reversed_arr[digit]\
    \ = index\n    else\n      reversed_arr[digit] = reversed_digit * 10 + index\n\
    \    end\n  end\n  for i = 1, #sorted_arr do\n    local index = reversed_arr[i]\n\
    \    sorted_arr[i] = \"One\"\n    if index == nil then\n      sorted_arr[i] =\
    \ \"Nine\"\n    else\n      sorted_arr[i] = \"Two\"\n      if index == 9 then\n\
    \        sorted_arr[i] = \"Nine\"\n      elseif index == 10 then\n        sorted_arr[i]\
    \ = \"Ten\"\n      elseif index == 11 then\n        sorted_arr[i] = \"Eleven\"\
    \n      elseif index == 12 then\n        sorted_arr[i] = \"Twelve\"\n      elseif\
    \ index == 13 then\n        sorted_arr[i] = \"Thirteen\"\n      elseif index ==\
    \ 14 then\n        sorted_arr[i] = \"Fourteen\"\n      elseif index == 15 then\n\
    \        sorted_arr[i] = \"Fifteen\"\n      elseif index == 16 then\n        sorted_arr[i]\
    \ = \"Sixteen\"\n      elseif index == 17 then\n        sorted_arr[i] = \"Seventeen\"\
    \n      elseif index == 18 then\n        sorted_arr[i] = \"Eighteen\"\n      elseif\
    \ index == 19 then\n        sorted_arr[i] = \"Nineteen\"\n      end\n    end\n\
    \  end\n  return sorted_arr\nend", "  local function sort_by_length(arr)\n   \
    \ local sorted_arr = {}\n    local reversed_arr = {}\n    local name_arr = {\n\
    \      [1] = \"One\",\n      [2] = \"Two\",\n      [3] = \"Three\",\n      [4]\
    \ = \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\",\n      [7] = \"Seven\"\
    ,\n      [8] = \"Eight\",\n      [9] = \"Nine\",\n    }\n    for i = 1, #arr do\n\
    \      local num = arr[i]\n      if num > 9 then\n        num = num - 10\n   \
    \   elseif num < 1 then\n        num = num + 10\n      end\n      table.insert(sorted_arr,\
    \ num)\n      table.insert(reversed_arr, num * 10)\n    end\n    table.sort(reversed_arr)\n\
    \    for i = 1, #reversed_arr do\n      table.insert(sorted_arr, reversed_arr[i])\n\
    \    end\n    table.sort(sorted_arr)\n    for i = 1, #sorted_arr do\n      table.insert(reversed_arr,\
    \ name_arr[sorted_arr[i]])\n    end\n    return reversed_arr\n  end\n  return\
    \ sort_by_length(arr)\nend", "  local sorted_arr = arr:sort()\n  local reversed_arr\
    \ = sorted_arr:reverse()\n  local results = {}\n  for i = 1, #reversed_arr do\n\
    \    local num = reversed_arr[i]\n    local name = get_name(num)\n    if name\
    \ then\n      results[i] = name\n    end\n  end\n  return results\nend", "  local\
    \ function sort(a, b)\n    if a < b then\n      return 1\n    elseif b < a then\n\
    \      return -1\n    else\n      return 0\n    end\n  end\n  table.sort(arr,\
    \ sort)\n  local function reverse(array)\n    local reversed = {}\n    for i =\
    \ #array, 1, -1 do\n      table.insert(reversed, array[i])\n    end\n    return\
    \ reversed\n  end\n  local function to_name(number)\n    local names = {\n   \
    \   [1] = tostring(1),\n      [2] = tostring(2),\n      [3] = tostring(3),\n \
    \     [4] = tostring(4),\n      [5] = tostring(5),\n      [6] = tostring(6),\n\
    \      [7] = tostring(7),\n      [8] = tostring(8),\n      [9] = tostring(9)\n\
    \    }\n    return names[number]\n  end\n  local function to_number(name)\n  \
    \  local names = {\n      [1] = \"One\",\n      [2] = \"Two\",\n      [3] = \"\
    Three\",\n      [4] = \"Four\",\n      [5] = \"Five\",\n      [6] = \"Six\",\n\
    \      [7] = \"Seven\",\n      [8] = \"Eight\",\n      [9] = \"Nine\"\n    }\n\
    \    return names[name]\n  end\n  local function to_array(array)\n    local arrays\
    \ = {}\n    for i = 1, #array do\n      table.insert(arrays, to_number(to_name(array[i])))\n\
    \    end\n    return arrays\n  end\n  local function to_string(array)\n    local\
    \ strings = {}\n    for i = 1, #array do\n      table.insert(strings, tostring(to_name(array[i])))\n\
    \    end\n    return strings\n  end\n  local function to_number(array)\n    local\
    \ numbers = {}\n    for i = 1, #array do\n      table.insert(numbers, array[i])\n\
    \    end\n    return numbers\n  end\n  local function to_string(array)\n    local\
    \ strings = {}\n    for i = 1, #array do\n      table.insert(strings, tostring(array[i]))\n\
    \    end\n    return strings\n  end\n  local function to_array(array)\n    local\
    \ arrays = {}\n    for i = 1, #array do\n      table.insert(arrays, array[i])\n\
    \    end\n    return arrays\n  end\n  local function to_string(array)\n    local\
    \ strings = {}\n    for i = 1, #array do\n      table.insert(strings, tostring(array[i]))\n\
    \    end\n    return strings\n  end\n  local function to_number(array)\n    local\
    \ numbers = {}\n    for i = 1, #array do\n      table.insert(numbers, array[i])\n\
    \    end\n    return numbers\n  end\n  local function to_string(array)\n    local\
    \ strings = {}\n    for i = 1, #array do\n      table.insert(strings, tostring(array",
  "  local new_arr = {}\n  local lengths = {}\n  for i = 1, #arr do\n    local length\
    \ = math.abs(arr[i])\n    if lengths[length] == nil then\n      lengths[length]\
    \ = true\n      new_arr[#new_arr + 1] = arr[i]\n    end\n  end\n  local lengths_sorted\
    \ = {}\n  for i = 1, #lengths do\n    table.insert(lengths_sorted, i)\n  end\n\
    \  table.sort(lengths_sorted)\n  for i = 1, #lengths_sorted do\n    local length\
    \ = lengths_sorted[i]\n    local index = #new_arr\n    while index > 0 and length\
    \ < math.abs(new_arr[index - 1]) do\n      table.insert(new_arr, new_arr[index\
    \ - 1])\n      index = index - 1\n    end\n  end\n  return new_arr\nend", "  local\
    \ sorted_arr = {}\n  local reversed_arr = {}\n  for i = 1, #arr do\n    local\
    \ length = arr[i]\n    if length == nil then\n      length = arr[i]\n    end\n\
    \    local index = #sorted_arr\n    table.insert(sorted_arr, length)\n    table.insert(reversed_arr,\
    \ length)\n  end\n  table.sort(sorted_arr)\n  table.reverse(reversed_arr)\n  for\
    \ i = 1, #sorted_arr do\n    local length = sorted_arr[i]\n    local index = #reversed_arr\n\
    \    table.insert(reversed_arr, length)\n    table.insert(reversed_arr, index)\n\
    \  end\n  local result = {}\n  for i = 1, #reversed_arr do\n    table.insert(result,\
    \ arr[i])\n  end\n  return result\nend", "  local arr2 = {}\n  for i = 1, #arr\
    \ do\n    arr2[#arr2 + 1] = arr[i]\n  end\n  table.sort(arr2, function(a, b) return\
    \ #a > #b end)\n  local reversed = {}\n  for i = 1, #arr2 do\n    reversed[#reversed\
    \ + 1] = arr2[i]\n  end\n  table.sort(reversed, function(a, b) return #a > #b\
    \ end)\n  local result = {}\n  for i = 1, #reversed do\n    result[#result + 1]\
    \ = reversed[i]\n  end\n  return result\nend", "  local sorted_arr = {}\n  local\
    \ reversed_arr = {}\n  local length_arr = {}\n  for i = 1, #arr do\n    local\
    \ length = arr[i]\n    table.insert(length_arr, length)\n    table.insert(sorted_arr,\
    \ arr[i])\n    table.insert(reversed_arr, arr[i]:reverse())\n  end\n  table.sort(length_arr)\n\
    \  for i = 1, #length_arr do\n    local length = length_arr[i]\n    local index\
    \ = #sorted_arr\n    for j = 1, length do\n      table.insert(sorted_arr, arr[index])\n\
    \      index = index - 1\n    end\n  end\n  table.sort(reversed_arr)\n  for i\
    \ = 1, #reversed_arr do\n    table.insert(sorted_arr, reversed_arr[i])\n  end\n\
    \  return sorted_arr\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local lengths = {}\n  for i = 1, #arr do\n    local length = math.floor(math.abs(arr[i]))\n\
    \    lengths[length] = lengths[length] + 1\n  end\n  for i = 1, #lengths do\n\
    \    sorted_arr[#sorted_arr + 1] = i\n  end\n  for i = 1, #arr do\n    local length\
    \ = math.floor(math.abs(arr[i]))\n    local index = sorted_arr[length]\n    reversed_arr[index]\
    \ = arr[i]\n    sorted_arr[length] = index\n  end\n  local result = {}\n  for\
    \ i = 1, #reversed_arr do\n    result[#result + 1] = reversed_arr[i]\n  end\n\
    \  return result\nend", "  local sorted_arr = {}\n  local reversed_arr = {}\n\
    \  local sorted_arr_index = 0\n  local reversed_arr_index = 0\n  local length\
    \ = 0\n  for i = 1, #arr do\n    length = length + 1\n  end\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 then\n      sorted_arr[sorted_arr_index] = arr[i]\n  \
    \    sorted_arr_index = sorted_arr_index + 1\n    end\n  end\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 then\n      reversed_arr[reversed_arr_index] = arr[i]\n\
    \      reversed_arr_index = reversed_arr_index + 1\n    end\n  end\n  for i =\
    \ 1, length do\n    sorted_arr[sorted_arr_index] = reversed_arr[reversed_arr_index]\n\
    \    sorted_arr_index = sorted_arr_index + 1\n    reversed_arr_index = reversed_arr_index\
    \ + 1\n  end\n  return sorted_arr\nend", "  local sorted_arr = {}\n  local reversed_arr\
    \ = {}\n  local i = 0\n  local j = 0\n  while i < #arr do\n    local value = arr[i]\n\
    \    i = i + 1\n    if value < 1 then\n      -- ignore negative numbers\n    \
    \  continue\n    end\n    local length = math.floor(math.log(value, 10))\n   \
    \ local digit = math.floor(value / math.pow(10, length))\n    sorted_arr[j] =\
    \ digit\n    reversed_arr[length] = digit\n    j = j + 1\n  end\n  table.sort(reversed_arr)\n\
    \  local new_arr = {}\n  for i = 1, #reversed_arr do\n    new_arr[i] = reversed_arr[i]\n\
    \  end\n  return new_arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
