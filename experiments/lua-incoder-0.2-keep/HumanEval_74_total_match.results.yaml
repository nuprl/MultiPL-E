language: lua
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    if len1 == len2 then\n  \
    \      return lst1\n    end\n    local lst3 = {}\n    for i = 1, len1 do\n   \
    \     local j = 1\n        while j < len2 do\n            if lst1[i] > lst2[j]\
    \ then\n                lst3[#lst3 + 1] = lst1[i]\n                i = i + 1\n\
    \                break\n            else\n                j = j + 1\n        \
    \    end\n        end\n    end\n    return lst3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1sildow.lua:36:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpi1sildow.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nj26n5c.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1nj26n5c.lua:15: in local 'candidate'\n\t/tmp/tmp1nj26n5c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total_len = 0\n  for _, v in ipairs(lst1) do\n    total_len = total_len\
    \ + #v\n  end\n  for _, v in ipairs(lst2) do\n    total_len = total_len + #v\n\
    \  end\n  if total_len == 0 then\n    return lst1\n  else\n    return lst2\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp784qioba.lua:30:\
    \ expected: {\"hi\", \"admin\"}\nactual: {\"hi\", \"hi\", \"admin\", \"project\"\
    }\nstack traceback:\n\t/tmp/tmp784qioba.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        if lst1[i] ~= lst2[i] then\n            count = count\
    \ + 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n \
    \   end\n    return lst1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wtr_pdo.lua:29:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp3wtr_pdo.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count = 0\n    for _, v in pairs(lst1) do\n        if v ~= lst2[1]\
    \ then\n            count = count + 1\n        end\n    end\n    return lst1[1]\
    \ if count == lst1[1] else lst1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmjpx0cbm.lua:17: ''end'' expected (to close ''function'' at
    line 10) near ''if''

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        total = total + lst2[i]\n    end\n    if len1 == len2 then\n   \
    \     return lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjo5r900.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcjo5r900.lua:15: in local 'candidate'\n\t/tmp/tmpcjo5r900.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nj26n5c.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1nj26n5c.lua:15: in local 'candidate'\n\t/tmp/tmp1nj26n5c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz46vd1s.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpfz46vd1s.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local count = 0\n    for\
    \ i = 1, len1 do\n        count = count + #lst1[i]\n    end\n    for i = 1, len2\
    \ do\n        count = count + #lst2[i]\n    end\n    if len1 == len2 then\n  \
    \      return lst1\n    elseif len1 > len2 then\n        local temp = lst1\n \
    \       lst1 = lst2\n        lst2 = temp\n    end\n    local temp = {}\n    for\
    \ i = 1, len1 do\n        table.insert(temp, lst1[i])\n    end\n    for i = 1,\
    \ len2 do\n        table.insert(temp, lst2[i])\n    end\n    return temp\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhek7o9e.lua:41:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpnhek7o9e.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 < len2 then\n    return lst2\n  else\n    local i = 1\n\
    \    local j = 1\n    local total = 0\n    while i < len1 and j < len2 do\n  \
    \    if lst1[i] < lst2[j] then\n        total = total + 1\n        i = i + 1\n\
    \      else\n        total = total + 1\n        j = j + 1\n      end\n    end\n\
    \    if i == len1 then\n      return lst2\n    elseif j == len2 then\n      return\
    \ lst1\n    else\n      return lst1\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r9zwiog.lua:44:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp9r9zwiog.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  local count = 0\n  for i = 1, len1\
    \ do\n    count = count + #lst1[i]\n  end\n  for i = 1, len2 do\n    count = count\
    \ + #lst2[i]\n  end\n  if len1 == len2 then\n    return lst1\n  else\n    return\
    \ lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr78_211p.lua:31:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpr78_211p.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1nj26n5c.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmp1nj26n5c.lua:15: in local 'candidate'\n\t/tmp/tmp1nj26n5c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len1 = 0\n    local\
    \ len2 = 0\n    local i = 0\n    local j = 0\n    local total = 0\n    while i\
    \ < len1 and j < len2 do\n        if lst1[i] < lst2[j] then\n            total\
    \ = total + 1\n            i = i + 1\n        else\n            total = total\
    \ + 1\n            j = j + 1\n        end\n    end\n    if i == len1 then\n  \
    \      return lst1\n    elseif j == len2 then\n        return lst2\n    else\n\
    \        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45tieb3w.lua:40:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp45tieb3w.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxr2gtgta.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpxr2gtgta.lua:15: in local 'candidate'\n\t/tmp/tmpxr2gtgta.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len3 = len1 + len2\n\
    \    local lst3 = {}\n    for i = 1, len3 do\n        lst3[i] = 0\n    end\n \
    \   for i = 1, len1 do\n        lst3[lst1[i]] = lst3[lst1[i]] + 1\n    end\n \
    \   for i = 1, len2 do\n        lst3[lst2[i]] = lst3[lst2[i]] + 1\n    end\n \
    \   for i = 1, len3 do\n        if lst3[i] < len2 then\n            return lst1\n\
    \        end\n    end\n    return lst2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9sbg4qu.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpy9sbg4qu.lua:19: in local 'candidate'\n\t/tmp/tmpy9sbg4qu.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len = 0\n    for i\
    \ = 1, len1 do\n        len = len + lst1[i]\n    end\n    for i = 1, len2 do\n\
    \        len = len + lst2[i]\n    end\n    if len == len1 then\n        return\
    \ lst1\n    elseif len == len2 then\n        return lst2\n    else\n        return\
    \ nil\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxr2gtgta.lua:15:\
    \ attempt to perform arithmetic on a string value (field '?')\nstack traceback:\n\
    \t/tmp/tmpxr2gtgta.lua:15: in local 'candidate'\n\t/tmp/tmpxr2gtgta.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n    return\
    \ lst1\n  elseif len1 > len2 then\n    return lst2\n  else\n    return lst1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz46vd1s.lua:26:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpfz46vd1s.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local total = 0\n    for\
    \ i = 1, len1 do\n        total = total + string.len(lst1[i])\n    end\n    for\
    \ i = 1, len2 do\n        total = total + string.len(lst2[i])\n    end\n    if\
    \ total == len1 then\n        return lst1\n    elseif total == len2 then\n   \
    \     return lst2\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tfy0pm9.lua:33:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp2tfy0pm9.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1, len2 = #lst1, #lst2\n    local i, j, k\n    local total = 0\n\
    \    for i = 1, len1 do\n        local len = 0\n        for j = 1, len2 do\n \
    \           if lst1[i] ~= lst2[j] then\n                len = len + 1\n      \
    \      end\n        end\n        if len > 0 then\n            total = total +\
    \ 1\n        end\n    end\n    if len1 == len2 then\n        return lst1\n   \
    \ end\n    for i = 1, len1 do\n        local len = 0\n        for j = 1, len2\
    \ do\n            if lst1[i] ~= lst2[j] then\n                len = len + 1\n\
    \            end\n        end\n        if len > 0 then\n            total = total\
    \ + 1\n        end\n    end\n    return lst1\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w3x6t3n.lua:46:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmp7w3x6t3n.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = #lst1\n    local len2 = #lst2\n    local len\n    if len1 ==\
    \ len2 then\n        len = len1\n    else\n        len = len1\n    end\n    local\
    \ i = 1\n    local j = 1\n    local total = 0\n    while i <= len and j <= len2\
    \ do\n        if lst1[i] < lst2[j] then\n            total = total + 1\n     \
    \       i = i + 1\n        else\n            total = total + 1\n            j\
    \ = j + 1\n        end\n    end\n    if i == len then\n        return lst1\n \
    \   elseif j == len2 then\n        return lst2\n    else\n        return lst1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnvler8t.lua:44:\
    \ expected: {\"hi\", \"hi\"}\nactual: {\"hi\", \"admin\"}\nstack traceback:\n\t\
    /tmp/tmpgnvler8t.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
