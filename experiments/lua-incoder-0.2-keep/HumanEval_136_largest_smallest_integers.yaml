name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n-- largest_smallest_integers([])\
  \ == (None, None)\n-- largest_smallest_integers([0]) == (None, None)\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_negative = nil\n  local min_positive = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n       \
    \ max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n \
    \         max_negative = lst[i]\n        end\n      end\n    elseif lst[i] > 0\
    \ then\n      if min_positive == nil then\n        min_positive = lst[i]\n   \
    \   else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\n  return nil\n\
    end", "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local smallest = lst[1]\n  local largest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  return (largest, smallest)\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\n  return nil\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  end\n  return nil\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ largest, smallest\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive < i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  local min_value = nil\n  local max_value = nil\n  for _, value\
    \ in ipairs(lst) do\n    if min_value == nil then\n      min_value = value\n \
    \     max_value = value\n    elseif value < min_value then\n      min_value =\
    \ value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \  end\n  if min_value == nil then\n    return (None, None)\n  end\n  return (min_value,\
    \ max_value)\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if smallest == nil then\n        smallest, largest = value,\
    \ value\n      else\n        largest, smallest = value, value\n      end\n   \
    \ elseif smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value > smallest then\n      largest, smallest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return nil, largest\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local smallest = nil\n  local largest = nil\n  for _, value in ipairs(lst) do\n\
    \    if value < 0 then\n      if smallest ~= nil then\n        largest = smallest\n\
    \      end\n      smallest = value\n    elseif smallest == nil then\n      largest\
    \ = value\n    elseif value > smallest then\n      largest = value\n    end\n\
    \  end\n  if smallest ~= nil and smallest > largest then\n    return (smallest,\
    \ largest)\n  elseif smallest ~= nil and smallest == largest then\n    return\
    \ (smallest, smallest)\n  else\n    return (None, None)\n  end\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local negative_integers,\
    \ positive_integers = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      if negative_integers ~= nil then\n        negative_integers\
    \ = negative_integers or value\n      else\n        negative_integers = value\n\
    \      end\n    elseif value > 0 then\n      if positive_integers ~= nil then\n\
    \        positive_integers = positive_integers or value\n      else\n        positive_integers\
    \ = value\n      end\n    end\n  end\n  return negative_integers, positive_integers\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < 0 then\n      if largest == nil then\n        largest = lst[i]\n      else\n\
    \        largest = largest, lst[i]\n      end\n    elseif lst[i] > 0 then\n  \
    \    if smallest == nil then\n        smallest = lst[i]\n      else\n        smallest\
    \ = smallest, lst[i]\n      end\n    end\n  end\n  return largest, smallest\n\
    end", "  local positive, negative = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > 0 then\n      positive = lst[i]\n    elseif lst[i] < 0 then\n      negative\
    \ = lst[i]\n    end\n  end\n  return positive, negative\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n      largest\
    \ = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0 then\n  \
    \  return (None, None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return (largest, smallest)\nend", "  local min_value = nil\n  local max_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if min_value == nil then\n    \
    \  min_value = value\n      max_value = value\n    else\n      if value < min_value\
    \ then\n        min_value = value\n      elseif value > max_value then\n     \
    \   max_value = value\n      end\n    end\n  end\n  if min_value == nil then\n\
    \    return (None, None)\n  else\n    return (min_value, max_value)\n  end\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if\
    \ lst[i] < 0 then\n      if max_negative == nil then\n        max_negative = lst[i]\n\
    \      else\n        if max_negative > lst[i] then\n          max_negative = lst[i]\n\
    \        end\n      end\n    elseif lst[i] > 0 then\n      if min_positive ==\
    \ nil then\n        min_positive = lst[i]\n      else\n        if min_positive\
    \ < lst[i] then\n          min_positive = lst[i]\n        end\n      end\n   \
    \ end\n  end\n  if max_negative and min_positive then\n    return (max_negative,\
    \ min_positive)\n  end\n  return nil\nend", "  local smallest = nil\n  local largest\
    \ = nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if v < smallest then\n\
    \      largest = v\n    elseif v > largest then\n      smallest = v\n    end\n\
    \  end\n  if smallest == nil then\n    return (largest, largest)\n  elseif largest\
    \ == nil then\n    return (smallest, smallest)\n  end\n  return (largest, smallest)\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    elseif lst[i] > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        if min_positive <\
    \ i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  end\n  return nil\nend", "  if #lst == 0 then\n    return (None,\
    \ None)\n  end\n  local smallest = lst[1]\n  local largest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return\
    \ (largest, smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n \
    \ end\n  local smallest = lst[1]\n  local largest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return (largest,\
    \ smallest)\nend", "  local max_negative = nil\n  local min_positive = nil\n \
    \ for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = i\n      else\n        if max_negative > i then\n    \
    \      max_negative = i\n        end\n      end\n    elseif lst[i] > 0 then\n\
    \      if min_positive == nil then\n        min_positive = i\n      else\n   \
    \     if min_positive < i then\n          min_positive = i\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return (max_negative, min_positive)\n  end\n  return nil\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        largest = smallest\n\
    \        smallest = lst[i]\n      end\n    elseif lst[i] > 0 then\n      if largest\
    \ == nil then\n        largest = lst[i]\n      else\n        largest = largest\n\
    \        smallest = lst[i]\n      end\n    end\n  end\n  if smallest == nil then\n\
    \    return (None, None)\n  elseif largest == nil then\n    return (smallest,\
    \ None)\n  else\n    return (largest, smallest)\n  end\nend", "  local min_value\
    \ = nil\n  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value\
    \ == nil then\n      min_value = value\n      max_value = value\n    else\n  \
    \    if value < min_value then\n        min_value = value\n      elseif value\
    \ > max_value then\n        max_value = value\n      end\n    end\n  end\n  if\
    \ min_value == nil then\n    return (None, None)\n  else\n    return (min_value,\
    \ max_value)\n  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    return\
    \ smallest, nil\n  elseif smallest == nil then\n    return largest, nil\n  else\n\
    \    return largest, smallest\n  end\nend", "  if #lst == 0 then\n    return (None,\
    \ None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ (largest, smallest)\nend", "  local smallest, largest = nil, nil\n  for i =\
    \ 1, #lst do\n    local v = lst[i]\n    if v < smallest then\n      smallest =\
    \ v\n    end\n    if v > largest then\n      largest = v\n    end\n  end\n  if\
    \ smallest == nil then\n    return largest\n  else\n    return smallest, largest\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n  \
    \  local num = lst[i]\n    if num < 0 then\n      if largest == nil then\n   \
    \     largest = num\n      else\n        largest = largest * 10 + num\n      end\n\
    \    elseif num > 0 then\n      if smallest == nil then\n        smallest = num\n\
    \      else\n        smallest = smallest * 10 + num\n      end\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = nil, nil\n  for\
    \ _, v in ipairs(lst) do\n    if v ~= nil then\n      if smallest == nil then\n\
    \        smallest, largest = v, v\n      elseif v < smallest then\n        smallest,\
    \ largest = v, v\n      end\n    end\n  end\n  return smallest, largest\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        largest = lst[i]\n\
    \      end\n    elseif lst[i] > 0 then\n      if largest == nil then\n       \
    \ largest = lst[i]\n      else\n        if largest < lst[i] then\n          largest\
    \ = lst[i]\n        end\n      end\n    end\n  end\n  if smallest == nil and largest\
    \ == nil then\n    return nil\n  end\n  return largest, smallest\nend", "  local\
    \ smallest = nil\n  local largest = nil\n  for i = 1, #lst do\n    local value\
    \ = lst[i]\n    if value < 0 then\n      if smallest == nil then\n        smallest\
    \ = value\n      else\n        smallest = math.min(smallest, value)\n      end\n\
    \    elseif value > 0 then\n      if largest == nil then\n        largest = value\n\
    \      else\n        largest = math.max(largest, value)\n      end\n    end\n\
    \  end\n  if smallest ~= nil and largest ~= nil then\n    return (smallest, largest)\n\
    \  end\n  return nil\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    local num = lst[i]\n\
    \    if num < smallest then\n      smallest = num\n    end\n    if num > largest\
    \ then\n      largest = num\n    end\n  end\n  if smallest == nil and largest\
    \ == nil then\n    return nil\n  end\n  return smallest, largest\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local max_negative = #lst\n  local\
    \ min_positive = #lst\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      max_negative\
    \ = i\n    elseif lst[i] > 0 then\n      min_positive = i\n    end\n  end\n  if\
    \ max_negative < min_positive then\n    return (None, None)\n  end\n  return (lst[max_negative],\
    \ lst[min_positive])\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local negative_integers, positive_integers = nil, nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      negative_integers = lst[i]\n    elseif lst[i]\
    \ > 0 then\n      positive_integers = lst[i]\n    end\n  end\n  if negative_integers\
    \ ~= nil and positive_integers ~= nil then\n    return negative_integers, positive_integers\n\
    \  else\n    return nil, nil\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < smallest then\n      smallest = v\n\
    \    end\n    if v > largest then\n      largest = v\n    end\n  end\n  if smallest\
    \ == nil then\n    return nil\n  end\n  return largest, smallest\nend", "  if\
    \ #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil\n  elseif\
    \ largest == nil then\n    return smallest\n  else\n    return largest, smallest\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n  \
    \      max_negative = i\n      else\n        if max_negative < i then\n      \
    \    max_negative = i\n        end\n      end\n    elseif lst[i] > 0 then\n  \
    \    if min_positive == nil then\n        min_positive = i\n      else\n     \
    \   if min_positive > i then\n          min_positive = i\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ (max_negative, min_positive)\n  end\n  return nil\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if max_negative == nil then\n        max_negative = value\n\
    \      else\n        if max_negative > value then\n          max_negative = value\n\
    \        end\n      end\n    elseif value > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = value\n      else\n        if min_positive < value\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  end\n  return nil\nend", "  local smallest, largest = nil,\
    \ nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest\n  else\n    return smallest, largest\n\
    \  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = i\n      else\n        largest\
    \ = largest\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n\
    \        smallest = i\n      else\n        smallest = smallest\n      end\n  \
    \  end\n  end\n  if largest ~= nil and smallest ~= nil then\n    return (largest,\
    \ smallest)\n  else\n    return nil\n  end\nend", "  local largest, smallest =\
    \ nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = lst[i]\n      else\n        largest = largest *\
    \ 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil\
    \ then\n        smallest = lst[i]\n      else\n        smallest = smallest * 10\
    \ + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend", "  if\
    \ #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  if #lst ==\
    \ 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    else\n      if min_positive == nil then\n        min_positive = v\n\
    \      else\n        if v < min_positive then\n          min_positive = v\n  \
    \      end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = lst[i]\n      else\n        largest\
    \ = largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        smallest = smallest\
    \ * 10 + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n\
    \      if smallest == nil then\n        smallest, largest = value, value\n   \
    \   else\n        largest, smallest = value, value\n      end\n    elseif smallest\
    \ == nil then\n      smallest, largest = value, value\n    elseif value > smallest\
    \ then\n      largest, smallest = value, value\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      if largest == nil then\n        largest = lst[i]\n\
    \      else\n        largest = largest * 10 + lst[i]\n      end\n    elseif lst[i]\
    \ > 0 then\n      if smallest == nil then\n        smallest = lst[i]\n      else\n\
    \        smallest = smallest * 10 + lst[i]\n      end\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        max_negative = max_negative\
    \ > v ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ nil, largest\n  end\n  return smallest, largest\nend", "  local max_negative,\
    \ min_positive = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n    \
    \  if max_negative == nil then\n        max_negative = i\n      else\n       \
    \ if max_negative < i then\n          max_negative = i\n        end\n      end\n\
    \    elseif lst[i] > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = i\n      else\n        if min_positive > i then\n          min_positive =\
    \ i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest <\
    \ lst[i] then\n      largest = lst[i]\n    end\n    if smallest > lst[i] then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if max_negative < v then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if min_positive > v then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  end\n  return nil\nend", "  local max_negative, min_positive = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = i\n      else\n        max_negative = max_negative > i\
    \ ? max_negative : i\n      end\n    elseif lst[i] > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        min_positive = min_positive\
    \ < i ? min_positive : i\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  return\
    \ max_negative, min_positive\nend", "  if #lst == 0 then\n    return (None, None)\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest,\
    \ smallest)\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n\
    \    local value = lst[i]\n    if value < 0 then\n      if smallest == nil then\n\
    \        smallest, largest = value, value\n      else\n        largest, smallest\
    \ = value, value\n      end\n    elseif smallest ~= nil then\n      largest, smallest\
    \ = smallest, value\n    end\n  end\n  return smallest, largest\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local smallest = lst[1]\n  local\
    \ largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n    \
    \  smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0 then\n  \
    \  return (None, None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return (largest, smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest,\
    \ smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local min_val =\
    \ nil\n  local max_val = nil\n  for i = 1, #lst do\n    local val = lst[i]\n \
    \   if val < 0 then\n      if min_val == nil then\n        min_val = val\n   \
    \   else\n        min_val = val\n      end\n    elseif val > 0 then\n      if\
    \ max_val == nil then\n        max_val = val\n      else\n        max_val = val\n\
    \      end\n    end\n  end\n  if min_val == nil and max_val == nil then\n    return\
    \ (None, None)\n  elseif min_val == nil then\n    return (max_val, None)\n  elseif\
    \ max_val == nil then\n    return (min_val, None)\n  else\n    return (min_val,\
    \ max_val)\n  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst) do\n  \
    \  if v < smallest then\n      smallest = v\n    end\n    if v > largest then\n\
    \      largest = v\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil, nil\n  end\n  return smallest, largest\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local max_negative = #lst\n  local min_positive\
    \ = #lst\n  for i = #lst - 1, 1, -1 do\n    if lst[i] < 0 then\n      max_negative\
    \ = i\n    elseif lst[i] > 0 then\n      min_positive = i\n    end\n  end\n  if\
    \ max_negative > min_positive then\n    return (lst[max_negative], lst[min_positive])\n\
    \  else\n    return (None, None)\n  end\nend", "  local max_negative = nil\n \
    \ local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n   \
    \   if max_negative == nil then\n        max_negative = i\n      else\n      \
    \  if max_negative < i then\n          max_negative = i\n        end\n      end\n\
    \    else\n      if min_positive == nil then\n        min_positive = i\n     \
    \ else\n        if min_positive > i then\n          min_positive = i\n       \
    \ end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return (max_negative, min_positive)\n  else\n    return (None,\
    \ None)\n  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n \
    \ local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n  \
    \  if largest < lst[i] then\n      largest = lst[i]\n    end\n    if smallest\
    \ > lst[i] then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  else\n    return nil\n  end\nend", "  local largest, smallest = nil, nil\n\
    \  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0 then\n      if largest\
    \ == nil then\n        largest = x\n      else\n        largest = largest * 10\
    \ + x\n      end\n    elseif x > 0 then\n      if smallest == nil then\n     \
    \   smallest = x\n      else\n        smallest = smallest * 10 + x\n      end\n\
    \    end\n  end\n  return largest, smallest\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  local\
    \ min_value = math.min(lst)\n  local max_value = math.max(lst)\n  if min_value\
    \ == max_value then\n    return (min_value, max_value)\n  else\n    return largest_smallest_integers(lst)\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest == nil\
    \ and largest == nil then\n    return nil\n  end\n  return smallest, largest\n\
    end", "  local smallest = nil\n  local largest = nil\n  for i = 1, #lst do\n \
    \   local x = lst[i]\n    if x < 0 then\n      if smallest == nil then\n     \
    \   smallest = x\n      else\n        largest = x\n      end\n    elseif x > 0\
    \ then\n      if largest == nil then\n        largest = x\n      else\n      \
    \  if largest < x then\n          largest = x\n        end\n      end\n    end\n\
    \  end\n  if smallest ~= nil and largest ~= nil then\n    return (largest, smallest)\n\
    \  end\n  return nil\nend", "  local positive, negative = nil, nil\n  for _, v\
    \ in ipairs(lst) do\n    if v < 0 then\n      if negative ~= nil then\n      \
    \  return nil, negative\n      else\n        negative = v\n      end\n    elseif\
    \ v > 0 then\n      if positive ~= nil then\n        return nil, positive\n  \
    \    else\n        positive = v\n      end\n    end\n  end\n  return positive,\
    \ negative\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local smallest, largest\
    \ = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n    \
    \  smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = i\n      else\n        largest = largest\n     \
    \ end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest\
    \ = i\n      else\n        smallest = smallest\n      end\n    end\n  end\n  if\
    \ largest ~= nil and smallest ~= nil then\n    return largest, smallest\n  end\n\
    \  return nil, nil\nend", "  local smallest = nil\n  local largest = nil\n  for\
    \ i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil and largest == nil then\n    return nil\n  end\n  return\
    \ largest, smallest\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative < i\
    \ then\n          max_negative = i\n        end\n      end\n    elseif lst[i]\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = i\n    \
    \  else\n        if min_positive > i then\n          min_positive = i\n      \
    \  end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return (max_negative, min_positive)\n  end\n  return nil\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if max_negative < v then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if min_positive > v then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return largest, smallest\n\
    end", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n  \
    \  if v < 0 then\n      if largest == nil then\n        largest = v\n      else\n\
    \        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n      if\
    \ smallest == nil then\n        smallest = v\n      else\n        smallest = smallest\
    \ * 10 + v\n      end\n    end\n  end\n  return largest, smallest\nend", "  if\
    \ #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if\
    \ largest == nil then\n        largest = lst[i]\n      else\n        largest =\
    \ largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        smallest = smallest\
    \ * 10 + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      largest = lst[i]\n    elseif lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  if smallest == nil and largest == nil then\n    return nil\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest, largest\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then\n    return nil, nil\n  end\n  local smallest,\
    \ largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n      largest\
    \ = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = lst[i]\n      else\n        largest = largest *\
    \ 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil\
    \ then\n        smallest = lst[i]\n      else\n        smallest = smallest * 10\
    \ + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil, nil\n  end\n  return smallest, largest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if v > max_negative then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if v > max_negative then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if\
    \ lst[i] < 0 then\n      if max_negative == nil then\n        max_negative = i\n\
    \      else\n        if max_negative < i then\n          max_negative = i\n  \
    \      end\n      end\n    else\n      if min_positive == nil then\n        min_positive\
    \ = i\n      else\n        if min_positive > i then\n          min_positive =\
    \ i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n  \
    \      max_negative = i\n      else\n        if max_negative > i then\n      \
    \    max_negative = i\n        end\n      end\n    else\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        if min_positive <\
    \ i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  else\n    return nil\n  end\nend", "  if #lst == 0 then\n \
    \   return nil, nil\n  end\n  local smallest, largest = lst[1], lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local positive, negative = nil, nil\n  for\
    \ i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n    elseif\
    \ lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  return negative,\
    \ positive\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = i\n      else\n        largest\
    \ = largest\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n\
    \        smallest = i\n      else\n        smallest = smallest\n      end\n  \
    \  end\n  end\n  if largest ~= nil and smallest ~= nil then\n    return (largest,\
    \ smallest)\n  end\n  return nil\nend", "  if #lst == 0 then\n    return (None,\
    \ None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ (largest, smallest)\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        max_negative = max_negative\
    \ > v ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local min_value = nil\n  local max_value = nil\n  for _, value in ipairs(lst)\
    \ do\n    if min_value == nil then\n      min_value = value\n      max_value =\
    \ value\n    elseif value < min_value then\n      min_value = value\n    elseif\
    \ value > max_value then\n      max_value = value\n    end\n  end\n  if min_value\
    \ == nil then\n    return (None, None)\n  elseif max_value == nil then\n    return\
    \ (min_value, min_value)\n  else\n    return (min_value, max_value)\n  end\nend",
  "  local max_negative, min_positive = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < 0 then\n      if max_negative == nil then\n        max_negative = i\n    \
    \  else\n        if max_negative < i then\n          max_negative = i\n      \
    \  end\n      end\n    end\n    if lst[i] > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = i\n      else\n        if min_positive > i then\n\
    \          min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return max_negative, min_positive\n\
    \  else\n    return nil, nil\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = i\n      else\n        if max_negative >\
    \ i then\n          max_negative = i\n        end\n      end\n    elseif lst[i]\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = i\n    \
    \  else\n        if min_positive < i then\n          min_positive = i\n      \
    \  end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  local negative, positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if negative == nil then\n        negative = v\n\
    \      else\n        negative = math.max(negative, v)\n      end\n    elseif v\
    \ > 0 then\n      if positive == nil then\n        positive = v\n      else\n\
    \        positive = math.min(positive, v)\n      end\n    end\n  end\n  return\
    \ negative, positive\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local\
    \ min_value = nil\n  local max_value = nil\n  for _, value in ipairs(lst) do\n\
    \    if min_value == nil then\n      min_value = value\n      max_value = value\n\
    \    elseif value < min_value then\n      min_value = value\n    elseif value\
    \ > max_value then\n      max_value = value\n    end\n  end\n  if min_value ==\
    \ nil then\n    return (None, None)\n  elseif max_value == nil then\n    return\
    \ (min_value, min_value)\n  else\n    return (min_value, max_value)\n  end\nend",
  "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if v < smallest\
    \ then\n      smallest = v\n    end\n    if v > largest then\n      largest =\
    \ v\n    end\n  end\n  if smallest == nil and largest == nil then\n    return\
    \ nil\n  end\n  return smallest, largest\nend", "  local negative_integers = nil\n\
    \  local positive_integers = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      negative_integers = lst[i]\n    elseif lst[i] > 0 then\n      positive_integers\
    \ = lst[i]\n    end\n  end\n  if negative_integers ~= nil and positive_integers\
    \ ~= nil then\n    return (negative_integers, positive_integers)\n  else\n   \
    \ return (None, None)\n  end\nend", "  local largest, smallest = nil, nil\n  for\
    \ i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    elseif\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  if largest\
    \ == nil then\n    return (None, None)\n  end\n  return (largest, smallest)\n\
    end", "  local largest, smallest = nil, nil -- The largest and smallest integers\n\
    \  for i = 1, #lst do\n    local num = lst[i]\n    if num < 0 then\n      if largest\
    \ == nil then\n        largest = num\n      else\n        largest = largest *\
    \ 10 + num\n      end\n    elseif num > 0 then\n      if smallest == nil then\n\
    \        smallest = num\n      else\n        smallest = smallest * 10 + num\n\
    \      end\n    end\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if max_negative == nil then\n        max_negative = value\n\
    \      else\n        if value > max_negative then\n          max_negative = value\n\
    \        end\n      end\n    elseif value > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  end\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative > i\
    \ then\n          max_negative = i\n        end\n      end\n    else\n      if\
    \ min_positive == nil then\n        min_positive = i\n      else\n        if min_positive\
    \ < i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  end\n  return nil\nend", "  if #lst == 0 then\n    return (None,\
    \ None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ (largest, smallest)\nend", "  local positive, negative = {}, {}\n  for i = 1,\
    \ #lst do\n    if lst[i] > 0 then\n      table.insert(positive, lst[i])\n    elseif\
    \ lst[i] < 0 then\n      table.insert(negative, -lst[i])\n    end\n  end\n  if\
    \ #positive > 0 and #negative > 0 then\n    return table.max(positive), table.min(negative)\n\
    \  elseif #positive > 0 then\n    return table.max(positive), nil\n  elseif #negative\
    \ > 0 then\n    return nil, table.min(negative)\n  else\n    return nil, nil\n\
    \  end\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  if\
    \ #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0\
    \ then\n      if smallest == nil then\n        smallest = x\n      else\n    \
    \    largest = x\n      end\n    elseif x > 0 then\n      if largest == nil then\n\
    \        largest = x\n      else\n        if smallest > largest then\n       \
    \   smallest, largest = largest, x\n        else\n          largest = x\n    \
    \    end\n      end\n    end\n  end\n  return smallest, largest\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive < i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\n  return nil\n\
    end", "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil,\
    \ nil\n  end\n  return largest, smallest\nend", "  local smallest, largest = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if smallest\
    \ == nil then\n        smallest, largest = value, value\n      else\n        largest,\
    \ smallest = value, value\n      end\n    elseif smallest == nil then\n      smallest,\
    \ largest = value, value\n    elseif value > smallest then\n      largest, smallest\
    \ = value, value\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    local x = lst[i]\n    if x < 0\
    \ then\n      if smallest == nil then\n        smallest, largest = x, x\n    \
    \  else\n        smallest, largest = smallest, x\n      end\n    elseif x > 0\
    \ then\n      if largest == nil then\n        smallest, largest = x, x\n     \
    \ else\n        largest, smallest = largest, x\n      end\n    end\n  end\n  if\
    \ smallest == nil then\n    return (None, None)\n  end\n  if largest == nil then\n\
    \    return (smallest, largest)\n  end\n  return (largest, smallest)\nend", " \
    \ if #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest\
    \ = nil\n  local largest = nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local positive, negative\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n\
    \    elseif lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  if positive\
    \ ~= nil and negative ~= nil then\n    return negative, positive\n  end\n  return\
    \ nil, nil\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local\
    \ min_value = math.min(lst)\n  local max_value = math.max(lst)\n  if min_value\
    \ == max_value then\n    return nil\n  elseif min_value < 0 then\n    return max_value,\
    \ min_value\n  else\n    return min_value, max_value\n  end\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0 then\n  \
    \  return (None, None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return (largest, smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n\
    \  end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] >\
    \ largest then\n      largest = lst[i]\n    end\n  end\n  return (smallest, largest)\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > largest then largest = lst[i] end\n    if lst[i] < smallest then smallest\
    \ = lst[i] end\n  end\n  return largest, smallest\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  if smallest == nil then\n    return nil, largest\n  end\n  return\
    \ smallest, largest\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = lst[i]\n      else\n        if max_negative < lst[i] then\n          max_negative\
    \ = lst[i]\n        end\n      end\n    elseif lst[i] > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = lst[i]\n      else\n        if min_positive\
    \ > lst[i] then\n          min_positive = lst[i]\n        end\n      end\n   \
    \ end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ (max_negative, min_positive)\n  end\n  return nil\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest\
    \ == nil then\n        largest = v\n      else\n        largest = largest * 10\
    \ + v\n      end\n    elseif v > 0 then\n      if smallest == nil then\n     \
    \   smallest = v\n      else\n        smallest = smallest * 10 + v\n      end\n\
    \    end\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ nil, nil\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil then\n\
    \        max_negative = value\n      else\n        if value > max_negative then\n\
    \          max_negative = value\n        end\n      end\n    elseif value == 0\
    \ then\n      if min_positive == nil then\n        min_positive = value\n    \
    \  else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    local v = lst[i]\n \
    \   if v < smallest then\n      smallest = v\n    end\n    if v > largest then\n\
    \      largest = v\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return smallest, largest\nend", "  local positive, negative\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n\
    \    elseif lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  if positive\
    \ ~= nil and negative ~= nil then\n    return negative, positive\n  end\n  return\
    \ nil, nil\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  if\
    \ #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if v > max_negative then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < 0 then\n      if largest == nil then\n        largest = lst[i]\n\
    \      else\n        largest = largest, lst[i]\n      end\n    elseif lst[i] >\
    \ 0 then\n      if smallest == nil then\n        smallest = lst[i]\n      else\n\
    \        smallest = smallest, lst[i]\n      end\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if v > max_negative then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ v < min_positive then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  return max_negative, min_positive\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = lst[i]\n      else\n\
    \        if max_negative > lst[i] then\n          max_negative = lst[i]\n    \
    \    end\n      end\n    elseif lst[i] > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = lst[i]\n      else\n        if min_positive < lst[i]\
    \ then\n          min_positive = lst[i]\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return (max_negative,\
    \ min_positive)\n  end\n  return nil\nend", "  local largest, smallest = nil,\
    \ nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n\
    \        largest = lst[i]\n      else\n        largest = largest, lst[i]\n   \
    \   end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest\
    \ = lst[i]\n      else\n        smallest = smallest, lst[i]\n      end\n    end\n\
    \  end\n  return largest, smallest\nend", "  local largest, smallest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if largest == nil then\n    return (None, None)\n  end\n  if smallest == nil\
    \ then\n    return (largest, largest)\n  end\n  return (largest, smallest)\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n    return\
    \ nil\n  end\n  return largest, smallest\nend", "  local positive, negative =\
    \ nil, nil\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n\
    \    elseif lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  if positive\
    \ ~= nil and negative ~= nil then\n    return negative, positive\n  end\n  return\
    \ nil, nil\nend", "  local smallest = nil\n  local largest = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest\
    \ == nil then\n    return (largest, largest)\n  elseif largest == nil then\n \
    \   return (smallest, smallest)\n  else\n    return (largest, smallest)\n  end\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    else\n      if min_positive == nil then\n        min_positive = i\n\
    \      else\n        if min_positive < i then\n          min_positive = i\n  \
    \      end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0 then\n  \
    \  return (None, None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return (largest, smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest,\
    \ smallest)\nend", "  local max_negative = nil\n  local min_positive = nil\n \
    \ for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if v > max_negative then\n\
    \          max_negative = v\n        end\n      end\n    elseif v > 0 then\n \
    \     if min_positive == nil then\n        min_positive = v\n      else\n    \
    \    if v < min_positive then\n          min_positive = v\n        end\n     \
    \ end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return (max_negative, min_positive)\n  else\n    return nil\n  end\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = v\n      else\n        if v < min_positive then\n       \
    \   min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  else\n    return nil\n  end\nend", "  if #lst == 0 then\n    return (None,\
    \ None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ (largest, smallest)\nend", "  local largest, smallest = nil, nil\n  for i =\
    \ 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  if\
    \ largest == nil and smallest == nil then\n    return nil\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  if #lst == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    local num = lst[i]\n    if num\
    \ < smallest then\n      smallest = num\n    end\n    if num > largest then\n\
    \      largest = num\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  if #lst ==\
    \ 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  local positive, negative\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n\
    \    elseif lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  return\
    \ positive, negative\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return (max_negative, min_positive)\n  end\n  return nil\nend", "  local\
    \ min_value = nil\n  local max_value = nil\n  for i = 1, #lst do\n    if min_value\
    \ == nil then\n      min_value = lst[i]\n      max_value = lst[i]\n    else\n\
    \      if lst[i] < min_value then\n        min_value = lst[i]\n      end\n   \
    \   if lst[i] > max_value then\n        max_value = lst[i]\n      end\n    end\n\
    \  end\n  if min_value == nil then\n    return (None, None)\n  end\n  return (max_value,\
    \ min_value)\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = i\n      else\n        largest\
    \ = largest\n      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n\
    \        smallest = i\n      else\n        smallest = smallest\n      end\n  \
    \  end\n  end\n  if largest ~= nil and smallest ~= nil then\n    return largest,\
    \ smallest\n  else\n    return nil, nil\n  end\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  return smallest, largest\nend", "  local smallest, largest =\
    \ nil, nil\n  for i = 1, #lst do\n    local v = lst[i]\n    if v < smallest then\n\
    \      smallest = v\n    end\n    if v > largest then\n      largest = v\n   \
    \ end\n  end\n  if smallest == nil then\n    return (None, None)\n  end\n  return\
    \ (largest, smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n \
    \ end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest,\
    \ smallest)\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ smallest = lst[1]\n  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  return\
    \ max_negative, min_positive\nend", "  local smallest = nil\n  local largest =\
    \ nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    elseif lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  if\
    \ smallest == nil then\n    return (largest, largest)\n  elseif largest == nil\
    \ then\n    return (smallest, smallest)\n  end\n  return (largest, smallest)\n\
    end", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n  \
    \  if v < 0 then\n      if largest == nil then\n        largest = v\n      else\n\
    \        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n      if\
    \ smallest == nil then\n        smallest = v\n      else\n        smallest = smallest\
    \ * 10 + v\n      end\n    end\n  end\n  return largest, smallest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
