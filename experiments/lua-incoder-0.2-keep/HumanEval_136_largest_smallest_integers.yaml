name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n-- largest_smallest_integers([])\
  \ == (None, None)\n-- largest_smallest_integers([0]) == (None, None)\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_negative = nil\n  local min_positive = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n       \
    \ max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n \
    \         max_negative = lst[i]\n        end\n      end\n    elseif lst[i] > 0\
    \ then\n      if min_positive == nil then\n        min_positive = lst[i]\n   \
    \   else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\n  return nil\n\
    end", "  if #lst == 0 then\n    return nil, nil\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local smallest = lst[1]\n  local largest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  return (largest, smallest)\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  end\n  return nil\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return (max_negative, min_positive)\n\
    \  end\n  return nil\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ largest, smallest\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive < i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return (max_negative, min_positive)\n  else\n    return nil\n\
    \  end\nend", "  local min_value = nil\n  local max_value = nil\n  for _, value\
    \ in ipairs(lst) do\n    if min_value == nil then\n      min_value = value\n \
    \     max_value = value\n    elseif value < min_value then\n      min_value =\
    \ value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \  end\n  if min_value == nil then\n    return (None, None)\n  end\n  return (min_value,\
    \ max_value)\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if smallest == nil then\n        smallest, largest = value,\
    \ value\n      else\n        largest, smallest = value, value\n      end\n   \
    \ elseif smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value > smallest then\n      largest, smallest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return nil, largest\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then\n    return (None, None)\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return (largest, smallest)\nend",
  "  local smallest = nil\n  local largest = nil\n  for _, value in ipairs(lst) do\n\
    \    if value < 0 then\n      if smallest ~= nil then\n        largest = smallest\n\
    \      end\n      smallest = value\n    elseif smallest == nil then\n      largest\
    \ = value\n    elseif value > smallest then\n      largest = value\n    end\n\
    \  end\n  if smallest ~= nil and smallest > largest then\n    return (smallest,\
    \ largest)\n  elseif smallest ~= nil and smallest == largest then\n    return\
    \ (smallest, smallest)\n  else\n    return (None, None)\n  end\nend", "  if #lst\
    \ == 0 then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return (largest, smallest)\nend", "  local negative_integers,\
    \ positive_integers = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      if negative_integers ~= nil then\n        negative_integers\
    \ = negative_integers or value\n      else\n        negative_integers = value\n\
    \      end\n    elseif value > 0 then\n      if positive_integers ~= nil then\n\
    \        positive_integers = positive_integers or value\n      else\n        positive_integers\
    \ = value\n      end\n    end\n  end\n  return negative_integers, positive_integers\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < 0 then\n      if largest == nil then\n        largest = lst[i]\n      else\n\
    \        largest = largest, lst[i]\n      end\n    elseif lst[i] > 0 then\n  \
    \    if smallest == nil then\n        smallest = lst[i]\n      else\n        smallest\
    \ = smallest, lst[i]\n      end\n    end\n  end\n  return largest, smallest\n\
    end", "  local positive, negative = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > 0 then\n      positive = lst[i]\n    elseif lst[i] < 0 then\n      negative\
    \ = lst[i]\n    end\n  end\n  return positive, negative\nend", "  if #lst == 0\
    \ then\n    return (None, None)\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n      largest\
    \ = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest = lst[i]\n\
    \    end\n  end\n  return (largest, smallest)\nend", "  if #lst == 0 then\n  \
    \  return (None, None)\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return (largest, smallest)\nend", "  local min_value = nil\n  local max_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if min_value == nil then\n    \
    \  min_value = value\n      max_value = value\n    else\n      if value < min_value\
    \ then\n        min_value = value\n      elseif value > max_value then\n     \
    \   max_value = value\n      end\n    end\n  end\n  if min_value == nil then\n\
    \    return (None, None)\n  else\n    return (min_value, max_value)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
