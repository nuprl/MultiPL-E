language: lua
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n  if n < 3 then\
    \ return n end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bfoaqlc.lua:22:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3bfoaqlc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  end\n  if n\
    \ < 3 then\n    return n\n  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_4dr180.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk_4dr180.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tqy8oiq.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3tqy8oiq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n ==\
    \ 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tqy8oiq.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3tqy8oiq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  end\n  if n\
    \ == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18fpics8.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp18fpics8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 3\
    \ then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_2ysa5e.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3_2ysa5e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5caxqchc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5caxqchc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n  if n == 0 then\
    \ return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31enie7b.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp31enie7b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5caxqchc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5caxqchc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 3\
    \ then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_2ysa5e.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3_2ysa5e.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  elseif n < 2 then\n    return 0\n  else\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvcs9lw3.lua:30:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmptvcs9lw3.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5caxqchc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5caxqchc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 2\
    \ then\n    return n\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgw2dg548.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgw2dg548.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  end\n  if n\
    \ < 3 then\n    return n\n  end\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_4dr180.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpk_4dr180.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5caxqchc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5caxqchc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  elseif n < 1\
    \ then\n    return 1\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5caxqchc.lua:26:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5caxqchc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then return 0 end\n  if n == 0 then\
    \ return 0 end\n  if n == 1 then return 1 end\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fibfib\n    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1),\
    \ 0)\n    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8),\
    \ 24)\n    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12),\
    \ 274)\n    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31enie7b.lua:24:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp31enie7b.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n < 0 then\n    return 0\n  end\n  if n\
    \ == 0 then\n    return 0\n  end\n  if n == 1 then\n    return 1\n  end\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18fpics8.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp18fpics8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 0\n  elseif n == 2 then\n    return 1\n  else\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fibfib\n    lu.assertEquals(candidate(2),\
    \ 1)\n    lu.assertEquals(candidate(1), 0)\n    lu.assertEquals(candidate(5),\
    \ 4)\n    lu.assertEquals(candidate(8), 24)\n    lu.assertEquals(candidate(10),\
    \ 81)\n    lu.assertEquals(candidate(12), 274)\n    lu.assertEquals(candidate(14),\
    \ 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- The FibFib number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n-- fibfib(0) == 0\n-- fibfib(1) == 0\n\
    -- fibfib(2) == 1\n-- fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    -- Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n-- >>> fibfib(1)\n-- 0\n-- >>> fibfib(5)\n-- 4\n-- >>> fibfib(8)\n\
    -- 24\nlocal function fibfib(n)\n  if n == 0 then\n    return 0\n  elseif n ==\
    \ 1 then\n    return 1\n  elseif n == 2 then\n    return 1\n  elseif n == 3 then\n\
    \    return 2\n  else\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fibfib\n\
    \    lu.assertEquals(candidate(2), 1)\n    lu.assertEquals(candidate(1), 0)\n\
    \    lu.assertEquals(candidate(5), 4)\n    lu.assertEquals(candidate(8), 24)\n\
    \    lu.assertEquals(candidate(10), 81)\n    lu.assertEquals(candidate(12), 274)\n\
    \    lu.assertEquals(candidate(14), 927)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9fn73ao.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpj9fn73ao.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
