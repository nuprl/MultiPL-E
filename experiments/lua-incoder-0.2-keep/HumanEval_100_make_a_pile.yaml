name: HumanEval_100_make_a_pile
language: lua
prompt: "-- Given a positive integer n, you have to make a pile of n levels of stones.\n\
  -- The first level has n stones.\n-- The number of stones in the next level is:\n\
  -- - the next odd number if n is odd.\n-- - the next even number if n is even.\n\
  -- Return the number of stones in each level in a list, where element at index\n\
  -- i represents the number of stones in the level (i+1).\n-- Examples:\n-- >>> make_a_pile(3)\n\
  -- [3, 5, 7]\nlocal function make_a_pile(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
  \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
  \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
  \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
  \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pile = {}\n  local next_odd\n  local next_even\n  if n then\n\
    \    if n % 2 == 0 then\n      next_even = n / 2\n    else\n      next_odd = math.floor(n/2)\n\
    \    end\n    for i = 1, n do\n      pile[i] = next_odd\n      next_odd = next_odd\
    \ + 1\n      if next_odd % 2 == 0 then\n        next_even = next_even + 1\n  \
    \    end\n    end\n  end\n  return pile\nend", "  if n == 0 then\n    return {}\n\
    \  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd = math.floor(n/2)\n    local next_even = n - next_odd\n    pile[1]\
    \ = next_odd\n    if next_even > 0 then\n      pile[2] = next_even\n    end\n\
    \    return pile\n  end\nend", "  local pile = {}\n  for i = 1, n do\n    if i\
    \ % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1]\
    \ = pile[i]\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ level = 1\n  while n ~= 0 do\n    pile[level] = n\n    level = level + 1\n \
    \   n = math.floor(n/2)\n  end\n  return pile\nend", "  local pile = {}\n  for\
    \ i = 1, n do\n    if n % 2 == 0 then\n      pile[i] = n\n      n = math.floor(n/2)\n\
    \    else\n      pile[i] = n + 1\n      n = math.floor(n/2) + 1\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n\
    \    if math.mod(n, 2) == 1 then\n      n = math.floor(n/2)\n    else\n      n\
    \ = math.ceil(n/2)\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local nlevels = math.floor(n/2) + 1\n  for i = 1, nlevels do\n    local nstones\
    \ = math.floor(n/2) + 1\n    if n % 2 == 0 then\n      nstones = nstones + 1\n\
    \    end\n    pile[i] = nstones\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i]\
    \ = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n\
    \      pile[i] = (n / 2) + 1\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n % 2 == 0 then\n    next_odd = n\n    next_even = n + 1\n \
    \ else\n    next_odd = n + 1\n    next_even = n\n  end\n  for i = 1, next_odd\
    \ do\n    table.insert(pile, i)\n  end\n  for i = 1, next_even do\n    table.insert(pile,\
    \ i + 1)\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n    else\n      pile[i] = (i - 1) + ((i - 1) % 2)\n    end\n    i = i +\
    \ 1\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n and n % 2 == 0 then\n    next_odd = n\n  else\n    next_even\
    \ = n\n  end\n  local i = 1\n  while i <= n do\n    pile[i] = next_odd\n    next_odd\
    \ = next_odd + 1\n    if next_odd % 2 == 0 then\n      next_even = next_even +\
    \ 1\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n\
    \  if n % 2 == 1 then\n    pile[#pile+1] = math.floor(n/2)\n  end\n  return pile\n\
    end", "  local pile = {}\n  local level = 1\n  while n >= level do\n    pile[level]\
    \ = n\n    n = math.floor(n/2)\n    level = level + 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n    else\n      pile[i] = n % 2 == 0 and n / 2 or n / 2\n    end\n  end\n\
    \  return pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n\
    \    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n\
    \  else\n    return make_a_pile(n-1) + make_a_pile(n-2) + make_a_pile(n-3)\n \
    \ end\nend", "  local pile = {}\n  local next_odd\n  if n and n % 2 == 1 then\n\
    \    next_odd = n\n  else\n    next_odd = n / 2\n  end\n  local next_even = next_odd\
    \ * 2\n  for i = 1, next_even do\n    pile[i] = next_odd\n    next_odd = next_odd\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for level = 1, nlevels do\n    local nstones = math.floor(n/level)\n\
    \    if nstones % 2 == 0 then\n      pile[level] = nstones\n    end\n  end\n \
    \ return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n <= 0 then\n    return pile\n  end\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_even = n\n  end\n  local i = 1\n  while i <= next_odd\
    \ do\n    pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n\
    \    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = n % 2 == 0 and n / 2 or n / 2\n    n = n / 2\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  if n % 2\
    \ == 0 then\n    next_odd = n\n  else\n    next_odd = n - 1\n  end\n  for i =\
    \ 1, next_odd do\n    table.insert(pile, i)\n  end\n  local next_even\n  if n\
    \ % 2 == 1 then\n    next_even = n\n  else\n    next_even = n - 2\n  end\n  for\
    \ i = 1, next_even do\n    table.insert(pile, i + 1)\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  if n and n % 2 == 0 then\n    next_odd =\
    \ n\n  else\n    next_odd = n + 1\n  end\n  local next_even\n  if n and n % 2\
    \ == 1 then\n    next_even = n\n  else\n    next_even = n + 1\n  end\n  local\
    \ i = 1\n  while i <= next_odd do\n    pile[i] = i\n    i = i + 1\n  end\n  i\
    \ = 1\n  while i <= next_even do\n    pile[i] = i\n    i = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n    next_odd = n\n\
    \  else\n    next_even = n\n  end\n  local i = 1\n  while i <= next_odd do\n \
    \   pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n  \
    \  pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  local next_even\n  if n then\n    if n % 2 == 0 then\n  \
    \    next_odd = n\n      next_even = n - 1\n    else\n      next_odd = n + 1\n\
    \      next_even = n\n    end\n  else\n    next_odd = 1\n    next_even = 1\n \
    \ end\n  repeat\n    pile[#pile+1] = next_odd\n    next_odd = next_odd + 1\n \
    \ until next_odd > next_even\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n  else\n\
    \    next_even = n\n  end\n  local i = 1\n  while i <= n do\n    pile[i] = next_odd\n\
    \    next_odd = next_odd + 1\n    if next_odd > n then\n      next_odd = n\n \
    \   end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n    pile[i] = next_even\n\
    \    next_even = next_even + 1\n    if next_even > n then\n      next_even = n\n\
    \    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  if n and n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd\
    \ = n / 2\n  end\n  for i = 1, next_odd do\n    pile[i] = n\n  end\n  if next_odd\
    \ % 2 == 0 then\n    pile[next_odd] = n - 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i + math.floor((n\
    \ - i) / 2)\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  local next_even\n  if n and n % 2 == 0 then\n    next_odd = n\n  else\n   \
    \ next_even = n\n  end\n  repeat\n    local n = next_odd\n    if n then\n    \
    \  next_odd = next_odd + 1\n    else\n      n = next_even\n      if n then\n \
    \       next_even = next_even + 1\n      else\n        break\n      end\n    end\n\
    \    table.insert(pile, n)\n  until n\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n\
    \      i = i + 1\n    else\n      pile[i] = 2 * n\n      i = i + 1\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_odd = n\n      next_even = n\
    \ - 1\n    else\n      next_odd = n + 1\n      next_even = n\n    end\n  else\n\
    \    next_odd = 1\n    next_even = 1\n  end\n  local i = 1\n  while i <= next_odd\
    \ do\n    pile[i] = i\n    i = i + 1\n  end\n  i = 1\n  while i <= next_even do\n\
    \    pile[i] = i\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  local next_even\n  if n and n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_even = n\n  end\n  while next_odd do\n    table.insert(pile,\
    \ next_odd)\n    next_odd = next_odd + 1\n  end\n  while next_even do\n    table.insert(pile,\
    \ next_even)\n    next_even = next_even + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n % 2 == 1 then\n\
    \    pile[#pile+1] = math.floor(n/2)\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local nlevels = math.floor(n/2) + 1\n  for i = 1, nlevels do\n    pile[i]\
    \ = (i == nlevels and n%2 == 0 and n or i+1)\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = i\n      i = i + 1\n    else\n      pile[i] = pile[i - 2] + 2\n      i = i\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd_n\n\
    \  local next_even_n\n  if n then\n    if n % 2 == 0 then\n      next_odd_n =\
    \ next_even_n = n\n    else\n      next_odd_n = next_even_n = n - 1\n    end\n\
    \  else\n    next_odd_n = 1\n    next_even_n = 1\n  end\n  local i = 1\n  while\
    \ i <= next_odd_n do\n    pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while\
    \ i <= next_even_n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n    else\n      pile[i] = (math.floor(n/2) + 1)\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n\
    \ ~= 0 then\n      n = math.floor((n + 1) / 2)\n    else\n      n = n + 1\n  \
    \  end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    if i % 2 == 1 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = (math.floor(n/2) + 1)\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ * 2 + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = (i + 1) * (i + 1)\n  end\n  return pile\nend", "  local pile =\
    \ {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n \
    \ end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n\
    \ do\n    pile[i] = i\n    i = 2 * i\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n\
    \      pile[i] = n + math.floor((n - i) / 2)\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    pile[i]\
    \ = n\n    n = n - 1\n  end\n  for i = 1, next_odd do\n    pile[i] = n\n    n\
    \ = n - 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = (i + 1) % (2 * n) + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = (i + 1) * (i + 1) -- odd or even\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n ~= 0 then\n    if n\
    \ % 2 == 1 then\n      pile[#pile+1] = math.floor(n/2)\n    else\n      pile[#pile+1]\
    \ = math.floor(n/2)+1\n    end\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = (i + 1) % (2 * n) + 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n ~=\
    \ 0 then\n    if n % 2 == 1 then\n      pile[#pile+1] = math.floor(n/2)\n    else\n\
    \      pile[#pile+1] = math.floor(n/2) + 1\n    end\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ * 2 + 1\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = 2 * i\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd = n + 1\n  else\n\
    \    next_odd = n\n  end\n  local next_even\n  if n % 2 == 1 then\n    next_even\
    \ = n + 1\n  else\n    next_even = n\n  end\n  for i = 1, next_odd do\n    pile[i]\
    \ = i\n  end\n  for i = 1, next_even do\n    pile[i] = i + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n % 2 == 1 then\n   \
    \ next_odd = n + 1\n  else\n    next_odd = n\n  end\n  for i = 1, next_odd do\n\
    \    table.insert(pile, i)\n  end\n  local next_even\n  if n % 2 == 0 then\n \
    \   next_even = n + 1\n  else\n    next_even = n\n  end\n  for i = 1, next_even\
    \ do\n    table.insert(pile, i)\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n      n = math.floor(n/2)\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels\
    \ = math.floor(n/2) + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n %\
    \ 2 == 0 then\n      n = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n % 2 == 0 then\n    \
    \  n = n/2\n    else\n      n = n*3 + 1\n    end\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0 then\n\
    \    next_odd = n\n  else\n    next_even = n\n  end\n  while n ~= 0 do\n    local\
    \ next_level = next_odd or next_even\n    pile[#pile+1] = next_level\n    if next_odd\
    \ % 2 == 0 then\n      next_odd = next_odd / 2\n    else\n      next_even = next_even\
    \ / 2\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n\
    \  if n % 2 == 0 then\n    next_odd = n + 1\n  else\n    next_odd = n\n  end\n\
    \  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n  if next_odd % 2\
    \ == 0 then\n    table.insert(pile, next_odd / 2)\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n then\n    next_odd = next_even\n    if n % 2 == 0 then\n \
    \     next_even = next_even + 1\n    end\n    pile[1] = n\n    for i = 2, n do\n\
    \      pile[i] = pile[i - 1] + next_odd\n      if i % 2 == 0 then\n        pile[i]\
    \ = pile[i] + next_even\n      end\n    end\n  end\n  return pile\nend", "  if\
    \ n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n  elseif n\
    \ % 2 == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n  else\n    return\
    \ make_a_pile(n-1) + make_a_pile(n-2) + make_a_pile(n-3)\n  end\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2)\
    \ + 1)\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local level\
    \ = 1\n  while n >= level do\n    pile[level] = n\n    n = math.floor(n/2)\n \
    \   level = level + 1\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n\
    \      if n ~= 1 then\n        pile[i] = pile[i] + (n % 2 == 0 and 1 or 0)\n \
    \     end\n      n = math.floor(n/2)\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0 then\n\
    \    next_odd = n\n  else\n    next_even = n\n  end\n  repeat\n    pile[#pile+1]\
    \ = next_odd\n    next_odd = next_odd + 1\n  until next_odd > next_even\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % 2\
    \ == 0 and i + 1 or i\n  end\n  return pile\nend", "  local pile = {}\n  for i\
    \ = 1, n do\n    pile[i] = (i + 1) % 2 == 0 and i or i + 1\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n ~=\
    \ 0 then\n    local odd = math.floor(n/2) + 1\n    local even = n - odd\n    pile[odd]\
    \ = odd\n    pile[even] = even\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd\n  if n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd\
    \ = n + 1\n  end\n  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n\
    \  if next_odd % 2 == 1 then\n    table.insert(pile, next_odd + 1)\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i %\
    \ 2 == 1 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2) +\
    \ 1)\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n\
    \    else\n      pile[i] = (i - 1) + ((i - 1) % 2)\n    end\n    i = i + 1\n \
    \ end\n  return pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1\
    \ then\n    return { n }\n  elseif n % 2 == 0 then\n    return make_a_pile(n-1)\
    \ + make_a_pile(n-2)\n  else\n    return make_a_pile(n-1) + make_a_pile(n-2)\n\
    \  end\nend", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n   \
    \ next_odd = n + 1\n  else\n    next_odd = n\n  end\n  for i = 1, next_odd do\n\
    \    table.insert(pile, i)\n  end\n  local next_even\n  if n % 2 == 1 then\n \
    \   next_even = n + 1\n  else\n    next_even = n\n  end\n  for i = 1, next_even\
    \ do\n    table.insert(pile, i)\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local level = 1\n  while n >= level do\n    pile[level] = n\n    level = level\
    \ + 1 -- Increment level\n    local next_level = level + 1 -- Increment level\n\
    \    if next_level <= n then\n      level = next_level -- Increment level\n  \
    \  end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd, next_even\n  if n and n % 2 == 0 then\n \
    \   next_odd = n\n  elseif n and n % 2 == 1 then\n    next_even = n\n  else\n\
    \    return pile\n  end\n  local i = 1\n  while i <= next_odd do\n    pile[i]\
    \ = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n    pile[i] =\
    \ i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n  local i\
    \ = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i]\
    \ = i\n    i = i * 2\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  if n % 2 == 0 then\n    next_odd = n\n  else\n    next_odd = n +\
    \ 1\n  end\n  local next_even\n  if n % 2 == 1 then\n    next_even = n\n  else\n\
    \    next_even = n + 1\n  end\n  for i = 1, next_odd do\n    pile[i] = n\n   \
    \ n = n - 1\n  end\n  for i = 1, next_even do\n    pile[i] = n\n    n = n - 1\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n and n % 2 == 0 then\n    next_odd = n\n  else\n    next_even = n\n  end\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = next_odd\n    if next_even %\
    \ 2 == 0 then\n      next_even = next_even / 2\n    else\n      next_even = next_even\
    \ + 1\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local nlevels = math.floor(n/2) + 1\n  for level = 1, nlevels do\n    local\
    \ nstones = math.floor(n/level)\n    if nstones % 2 == 0 then\n      pile[level]\
    \ = nstones\n    else\n      pile[level] = nstones + 1\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      pile[i] = n + 1\n    else\n      pile[i] = n\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n  if n\
    \ <= 0 then\n    return pile\n  end\n  if n % 2 == 0 then\n    next_even = n /\
    \ 2\n  else\n    next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    pile[i\
    \ + 1] = pile[i] + 1\n  end\n  for i = 1, next_even do\n    pile[i + 1] = pile[i]\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n%2 == 0 then\n    next_odd = n\n    next_even = n - 1\n  else\n\
    \    next_odd = n + 1\n    next_even = n\n  end\n  for i = 1, next_odd do\n  \
    \  table.insert(pile, i)\n  end\n  for i = 1, next_even do\n    table.insert(pile,\
    \ i+1)\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local\
    \ next_even\n  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n   \
    \ -- even\n    next_even = n / 2\n  else\n    -- odd\n    next_odd = math.floor(n/2)\n\
    \  end\n  for i = 1, next_odd do\n    table.insert(pile, next_odd)\n  end\n  for\
    \ i = 1, next_even do\n    table.insert(pile, next_even)\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n and n % 2 == 1 then\n    next_odd\
    \ = n + 1\n  else\n    next_odd = n\n  end\n  local next_even\n  if n and n %\
    \ 2 == 0 then\n    next_even = n + 1\n  else\n    next_even = n\n  end\n  local\
    \ i = 1\n  while i <= next_odd do\n    pile[i] = i\n    i = i + 2\n  end\n  i\
    \ = next_even\n  while i <= next_even do\n    pile[i] = i\n    i = i + 2\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2)\
    \ + 1)\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local next_odd = math.floor(n/2) + 1\n  local next_even = math.floor(n/2) +\
    \ 2\n  local last_odd = next_odd - 1\n  local last_even = next_even - 1\n  local\
    \ last_odd_even = next_odd * 2\n  local last_odd_odd = next_odd * 3\n  local last_even\
    \ = next_even - 1\n  local last_odd_even = next_odd * 2\n  local last_odd_odd\
    \ = next_odd * 3\n  local last_odd_even = next_odd * 4\n  local last_odd_odd =\
    \ next_odd * 5\n  local last_even = next_even - 1\n  local last_odd_even = next_odd\
    \ * 2\n  local last_odd_odd = next_odd * 3\n  local last_odd_even = next_odd *\
    \ 4\n  local last_odd_odd = next_odd * 5\n  local last_odd_even = next_odd * 6\n\
    \  local last_odd_odd = next_odd * 7\n  local last_even = next_even - 1\n  local\
    \ last_odd_even = next_odd * 2\n  local last_odd_odd = next_odd * 3\n  local last_odd_even\
    \ = next_odd * 4\n  local last_odd_odd = next_odd * 5\n  local last_odd_even =\
    \ next_odd * 6\n  local last_odd_odd = next_odd * 7\n  local last_odd_even = next_odd\
    \ * 8\n  local last_odd_odd = next_odd * 9\n  local last_even = next_even - 1\n\
    \  local last_odd_even = next_odd * 2\n  local last_odd_odd = next_odd * 3\n \
    \ local last_odd_even = next_odd * 4\n  local last_odd_odd = next_odd * 5\n  local\
    \ last_odd_even = next_odd * 6\n  local last_odd_odd = next_odd * 7\n  local last_odd_even\
    \ = next_odd * 8\n  local last_odd_odd = next_odd * 9\n  local last_odd_even =\
    \ next_odd * 10\n  local last_odd_odd = next_odd * 11\n  local last_even = next_even\
    \ - 1\n  local last_odd_even = next_odd * 2\n  local last_odd_odd = next_odd *\
    \ 3\n  local last_odd_even = next_odd * 4\n  local last_odd_odd = next_odd * 5\n\
    \  local last_odd_even = next_odd * 6", "  local pile = {}\n  local next_odd =\
    \ next_even = 1\n  for i = 1, n do\n    pile[i] = next_odd\n    if next_odd %\
    \ 2 == 0 then\n      next_even = next_even + 1\n    end\n    next_odd = next_even\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = n + math.floor((i\
    \ - 1) / 2)\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  local i = 1\n\
    \  repeat\n    next_odd = next_odd or math.floor(n/2) + 1\n    next_even = next_even\
    \ or math.floor(n/2) - 1 \n    pile[i] = next_odd\n    pile[#pile + 1] = next_even\n\
    \    n = n - next_odd - next_even\n    i = i + 1\n  until n == 0\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_odd = n + 1\n  end\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i)\n  end\n  if next_odd % 2 == 0 then\n    table.insert(pile, next_odd / 2)\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = i\n  end\n  if n % 2 == 1 then\n    pile[#pile+1] = math.floor(n/2)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n\
    \    if n ~= 0 then\n      n = math.floor((n + 1) / 2)\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n   \
    \ next_odd = n\n  else\n    next_odd = n + 1\n  end\n  for i = 1, next_odd do\n\
    \    pile[i] = n\n    n = n - 1\n  end\n  for i = 1, next_odd do\n    pile[i]\
    \ = n\n    n = n - 1\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = n\n    i = i * 2 + 1\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i]\
    \ = n\n    i = i + (n % 2 == 0 and 1 or 2)\n    n = n / 2\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i\
    \ + 1] = pile[i] + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n\
    \  return pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n\
    \    return {1}\n  else\n    local pile = {}\n    local next_odd\n    local next_even\n\
    \    if n % 2 == 0 then\n      next_even = n - 1\n    else\n      next_odd = n\
    \ - 1\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n      if i % 2\
    \ == 0 then\n        next_odd = next_even + 1\n      else\n        next_even =\
    \ next_even + 1\n      end\n    end\n    return pile\n  end\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n <= 0 then\n    return pile\n\
    \  elseif n == 2 then\n    pile[1] = 1\n    return pile\n  elseif n == 3 then\n\
    \    pile[1] = 1\n    pile[2] = 1\n    return pile\n  elseif n % 2 == 0 then\n\
    \    next_even = n / 2\n    pile[1] = next_even\n    pile[2] = next_even + 1\n\
    \    return pile\n  else\n    next_odd = math.floor(n/2)\n    pile[1] = next_odd\n\
    \    pile[2] = next_odd + 2\n    return pile\n  end\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    pile[i] = n\n    if n % 2 == 0 then\n      pile[i] = pile[i]\
    \ + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    pile[i] = i\n    i = 2 * i\n  end\n  return pile\nend",
  "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n % 2 == 1 then\n\
    \      pile[i] = pile[i] + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = i\n      i = i + 1\n    else\n      pile[i] = i + 2\n      i = i + 1\n   \
    \ end\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n % 2 == 0 and n / 2 or n\n    n\
    \ = math.floor(n/2)\n  end\n  return pile\nend", "  local pile = {}\n  for i =\
    \ 1, n do\n    if i % 2 == 1 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = 2 * n\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels\
    \ = math.floor(n/2) + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n %\
    \ 2 == 0 then\n      n = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n%2 == 0 then\n      n\
    \ = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n    end\n  end\n \
    \ return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n\
    \    if n ~= 0 then\n      n = math.floor(n/2)\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0\
    \ then\n    next_odd = n\n    next_even = n - 1\n  else\n    next_odd = n + 1\n\
    \    next_even = n\n  end\n  local i = 1\n  while i <= next_odd do\n    pile[i]\
    \ = i\n    i = i + 1\n  end\n  i = 1\n  while i <= next_even do\n    pile[i] =\
    \ i\n    i = i + 1\n  end\n  return pile\nend", "  local pile = {}\n  local i\
    \ = 1\n  while i <= n do\n    if i % 2 == 1 then\n      pile[i] = i\n      i =\
    \ i + 1\n    else\n      pile[i] = i + 2\n      i = i + 1\n    end\n  end\n  return\
    \ pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i %\
    \ 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2) +\
    \ 1)\n    end\n    i = i + 1\n  end\n  return pile\nend", "  if n == 0 then\n\
    \    return {}\n  elseif n == 1 then\n    return {1}\n  elseif n % 2 == 0 then\n\
    \    return make_a_pile(n / 2) + make_a_pile(n / 2)\n  else\n    return make_a_pile(n\
    \ / 2) + make_a_pile(n / 2) + make_a_pile(n / 2)\n  end\nend", "  local pile =\
    \ {}\n  local n = 1\n  while n <= n do\n    pile[#pile+1] = n -- add n to the\
    \ last element of pile\n    local next_odd = math.floor(n/2) -- next odd number\n\
    \    local next_even = math.floor(n/2) -- next even number\n    if next_odd %\
    \ 2 == 0 then\n      n = next_odd\n    else\n      n = next_even\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2) +\
    \ 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n%2 == 0 then\n      n =\
    \ n/2\n    else\n      n = n*3 + 1\n    end\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n      i = i + 1\n    else\n      pile[i] = (i - 1) + ((i - 1) ^ 2)\n  \
    \    i = i + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i\
    \ + 1] = pile[i] + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n\
    \      next_odd = next_odd + 1\n      if next_odd % 2 == 0 then\n        next_even\
    \ = next_even + 1\n      end\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd = n\n  else\n   \
    \ next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    table.insert(pile, i)\n\
    \  end\n  if next_odd % 2 == 1 then\n    table.insert(pile, next_odd)\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   pile[i] = n\n    i = i * 2 + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = i\n    if math.mod(n, 2) == 0 then\n\
    \      pile[i + 1] = math.floor(n/2)\n    else\n      pile[i + 1] = math.floor(n/2)+1\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local nlevels = math.floor(n/2) + 1\n  for i = 1, nlevels\
    \ do\n    pile[i] = n\n    if n%2 == 0 then\n      n = n/2\n    else\n      n\
    \ = n*3 + 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2\n  end\n  return pile\n\
    end", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n\
    \  elseif n % 2 == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n  else\n\
    \    return make_a_pile(n-1) + make_a_pile(n-2) + make_a_pile(n-3)\n  end\nend",
  "  local pile = {}\n  local next_odd\n  if n % 2 == 0 then\n    next_odd = n\n \
    \ else\n    next_odd = n - 1\n  end\n  for i = 1, next_odd do\n    table.insert(pile,\
    \ i)\n  end\n  if next_odd % 2 == 1 then\n    table.insert(pile, next_odd + 1)\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n % 2 == 0 then\n    \
    \  n = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = math.floor(n/2)\n    end\n    pile[1] = next_odd\n    for i = 2,\
    \ n do\n      pile[i] = pile[i-1] + next_even\n      if i % 2 == 0 then\n    \
    \    next_even = next_even + 1\n      else\n        next_odd = next_odd + 1\n\
    \      end\n    end\n  end\n  return pile\nend", "  if n == 0 then\n    return\
    \ {}\n  elseif n == 1 then\n    return {1}\n  else\n    local pile = {}\n    local\
    \ next_odd\n    local next_even\n    if n % 2 == 0 then\n      next_even = n /\
    \ 2\n    else\n      next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n\
    \      pile[i] = next_odd\n      if i % 2 == 0 then\n        pile[i] = pile[i]\
    \ + 1\n      end\n      if i % 2 == 1 then\n        pile[i] = pile[i] + 1\n  \
    \    end\n    end\n    return pile\n  end\nend", "  local pile = {}\n  local i\
    \ = 1\n  while i <= n do\n    if i % 2 == 1 then\n      pile[i] = i\n    else\n\
    \      pile[i] = i + 2\n    end\n    i = i + 1\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i =\
    \ i + 2\n  end\n  return pile\nend", "  local pile = {}\n  local nlevels = math.floor(n/2)\
    \ + 1\n  for i = 1, nlevels do\n    pile[i] = n\n    if n % 2 == 1 then\n    \
    \  n = math.floor(n/2)\n    else\n      n = math.floor(n/2)+1\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n\
    \  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n    \
    \  pile[i] = (math.floor(n/2) + 1)\n    end\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2\
    \ + 1\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  if n%2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_even = n\n  end\n  while n ~= 0 do\n    pile[#pile+1]\
    \ = next_odd\n    if n%2 == 0 then\n      next_odd = next_odd+1\n    else\n  \
    \    next_even = next_even+1\n    end\n    n = n-1\n  end\n  return pile\nend",
  "  local pile = {}\n  local next_odd\n  local next_even\n  local i = 1\n  while\
    \ i <= n do\n    local next_odd_or_even = math.floor(i/2) -- next odd or even\
    \ number\n    next_odd = next_odd_or_even % 2 -- next odd number\n    next_even\
    \ = next_odd_or_even - next_odd -- next even number\n    pile[i] = next_odd\n\
    \    i = next_even\n  end\n  return pile\nend", "  local pile = {}\n  for i =\
    \ 1, n do\n    pile[i] = n\n    if n % 2 == 1 then\n      pile[i] = pile[i] +\
    \ 1\n    end\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    pile[i] = i\n  end\n  if n % 2 == 1 then\n    pile[#pile+1] = math.floor(n/2)\n\
    \  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    if i %\
    \ 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n      pile[i + 1] =\
    \ pile[i]\n    end\n  end\n  return pile\nend", "  local pile = {}\n  local i\
    \ = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n\
    \      pile[i] = 2 * n + 1\n    end\n    i = i + 1\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n \
    \     pile[i] = n\n    else\n      pile[i] = math.floor((n - i) / 2)\n    end\n\
    \    i = i + 1\n  end\n  return pile\nend", "  if n == 0 then\n    return {}\n\
    \  elseif n == 1 then\n    return {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n\
    \ / 2) + {n % 2}\n  else\n    return make_a_pile(n / 2) + {(n % 2 + 1) % 2}\n\
    \  end\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n\
    \ % 2 == 0 then\n      n = math.floor(n/2)\n    else\n      n = math.ceil(n/2)\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n  end\n  return pile\nend", " \
    \ local pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % (2 * n) + 1\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   if i % 2 == 0 then\n      pile[i] = i\n      i = i + 1\n    else\n      pile[i]\
    \ = 2 * i\n      i = i + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    pile[i] = i\n  end\n  if n ~= 0 then\n    if n\
    \ % 2 == 0 then\n      pile[#pile+1] = math.floor(n/2)\n    else\n      pile[#pile+1]\
    \ = math.floor(n/2) + 1\n    end\n  end\n  return pile\nend", "  local pile =\
    \ {}\n  for i = 1, n do\n    pile[i] = n\n    if math.mod(n, 2) == 0 then\n  \
    \    n = math.floor(n/2)\n    else\n      n = math.ceil(n/2)\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n\
    \      next_odd = next_odd + 1\n      if next_odd % 2 == 0 then\n        next_even\
    \ = next_even + 1\n      end\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i]\
    \ + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n\
    \    i = 2 * i\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n\
    \  while i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = i\n    i = i + 2\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  if n then\n    if n % 2 == 1 then\n      next_odd\
    \ = n\n    else\n      next_odd = math.floor(n/2)\n    end\n    pile[1] = next_odd\n\
    \    pile[2] = next_odd\n  end\n  return pile\nend", "  local pile = {}\n  for\
    \ i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i] + 1\n    else\n\
    \      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\nend", "  if n ==\
    \ 0 then\n    return {}\n  elseif n == 1 then\n    return {1}\n  else\n    local\
    \ pile = {}\n    local next_odd, next_even\n    if n % 2 == 0 then\n      next_even\
    \ = n / 2\n      next_odd = next_even + 1\n    else\n      next_odd = n\n    \
    \  next_even = next_odd / 2\n    end\n    for i = 1, next_odd do\n      pile[i]\
    \ = i + 1\n    end\n    for i = 1, next_even do\n      pile[i] = pile[i] + 1\n\
    \    end\n    return pile\n  end\nend", "  local pile = {}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i] = (math.floor(n/2)\
    \ + 1) * math.floor(n/2)\n    end\n  end\n  return pile\nend", "  local pile =\
    \ {}\n  local nlevels = math.floor(n/2) + 1\n  for i = 1, nlevels do\n    pile[i]\
    \ = n\n    if n % 2 == 0 then\n      n = math.floor(n/2) + 1\n    else\n     \
    \ n = math.floor(n/2) + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if n % 2 == 0 then\n      pile[i] = n\n      n\
    \ = math.floor(n/2)\n    else\n      pile[i] = n + 1\n      n = math.floor(n/2)\n\
    \    end\n  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n \
    \ local next_even\n  if n <= 0 then\n    return pile\n  elseif n == 2 then\n \
    \   next_odd = next_even = n + 2\n  elseif n == 3 then\n    next_odd = next_even\
    \ = n + 4\n  else\n    next_odd = next_even = n + 6\n  end\n  local i = 1\n  while\
    \ i <= n do\n    pile[i] = next_odd\n    next_odd = next_even + 2\n    next_even\
    \ = next_even + 2\n    i = i + 1\n  end\n  return pile\nend", "  local pile =\
    \ {}\n  local i = 1\n  while i <= n do\n    pile[i] = i\n    i = i * 2 + 1\n \
    \ end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = n / 2\n    end\n    pile[1] = next_odd\n    for i = 2, n do\n  \
    \    pile[i] = pile[i - 1] + next_even\n    end\n  end\n  return pile\nend", " \
    \ local pile = {}\n  local next_odd\n  local next_even\n  if n and n % 2 == 0\
    \ then\n    next_odd = n\n  elseif n and n % 2 == 1 then\n    next_even = n\n\
    \  else\n    return pile\n  end\n  local i = 1\n  while i <= next_odd do\n   \
    \ pile[i] = i\n    i = i + 2\n  end\n  i = 1\n  while i <= next_even do\n    pile[i]\
    \ = i\n    i = i + 2\n  end\n  return pile\nend", "  local pile = {}\n  for i\
    \ = 1, n do\n    if i % 2 == 0 then\n      pile[i] = n\n    else\n      pile[i]\
    \ = (math.floor(n/2) + 1)\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      pile[i + 1] = pile[i]\
    \ + 1\n    else\n      pile[i + 1] = pile[i]\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if n ~= 0 then\n\
    \      n = math.floor((n + 1) / 2)\n    end\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  for i = 1, n do\n    pile[i] = (i + 1) % (2 * n) + 1\n  end\n \
    \ return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = math.floor(n/2)\n    else\n\
    \      next_odd = math.floor(n/2)\n    end\n    pile[1] = n\n    for i = 2, next_odd\
    \ do\n      pile[i] = pile[i-1] + 2\n    end\n    for i = next_even, n do\n  \
    \    pile[i] = pile[i-1] + 1\n    end\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n \
    \   pile[i] = n\n    i = i * 2 + 1\n  end\n  return pile\nend", "  local pile\
    \ = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n    next_even = 2 * n\n  else\n    next_odd = 2 * n\n    next_even = n\n\
    \  end\n  for i = 1, next_odd do\n    table.insert(pile, i)\n  end\n  for i =\
    \ 1, next_even do\n    table.insert(pile, i + 1)\n  end\n  return pile\nend",
  "  local pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n \
    \     pile[i] = n\n    else\n      pile[i] = 2 * n\n    end\n    i = i + 1\n \
    \ end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i]\
    \ = n\n    if n % 2 == 1 then\n      pile[i] = pile[i] + 1\n    end\n  end\n \
    \ return pile\nend", "  local pile = {}\n  local level = 1\n  local stones = 0\n\
    \  while stones < n do\n    local next_level = math.floor((stones + level) / 2)\n\
    \    pile[level] = stones\n    level = next_level\n    stones = stones + level\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i <= n\
    \ do\n    if i % 2 == 0 then\n      pile[i] = n\n      i = i + 1\n    else\n \
    \     pile[i] = (i - 1) + ((i - 1) * (i - 1)) / 2\n      i = i + 1\n    end\n\
    \  end\n  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n then\n    if n % 2 == 0 then\n      next_even = n / 2\n    else\n    \
    \  next_odd = math.floor(n/2)\n    end\n    for i = 1, n do\n      pile[i] = next_odd\n\
    \      if n % 2 == 0 then\n        pile[i] = pile[i] + next_even\n      end\n\
    \      next_odd = next_odd + 1\n      next_even = next_even + 2\n    end\n  end\n\
    \  return pile\nend", "  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n\
    \    if n ~= 0 then\n      n = math.floor(n/2) + 1\n    end\n  end\n  return pile\n\
    end", "  local pile = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0\
    \ then\n    next_odd = n + 1\n  else\n    next_even = n + 1\n  end\n  repeat\n\
    \    pile[#pile+1] = next_odd\n    next_odd = next_odd + 1\n  until next_odd >\
    \ next_even\n  return pile\nend", "  local pile = {}\n  local i = 1\n  while i\
    \ <= n do\n    pile[i] = i\n    i = i * 2\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd\
    \ = n\n  else\n    next_even = n\n  end\n  local i = 1\n  while i <= n do\n  \
    \  pile[i] = next_odd\n    if next_even % 2 == 0 then\n      next_even = next_even\
    \ / 2\n    else\n      next_even = next_even + 1\n    end\n    i = i + 1\n  end\n\
    \  return pile\nend", "  local pile = {}\n  local next_odd\n  local next_even\n\
    \  if n <= 0 then\n    return pile\n  elseif n % 2 == 0 then\n    next_even =\
    \ n / 2\n  else\n    next_odd = math.floor(n/2)\n  end\n  for i = 1, n do\n  \
    \  pile[i] = next_odd\n    next_odd = next_even + 1\n    next_even = next_even\
    \ + 2\n  end\n  return pile\nend", "  local pile = {}\n  for i = 1, n do\n   \
    \ pile[i] = (i + 1) % (i + 1)\n  end\n  return pile\nend", "  local pile = {}\n\
    \  local i = 1\n  while i <= n do\n    pile[i] = n\n    i = 2 * i\n  end\n  return\
    \ pile\nend", "  if n == 0 then\n    return {}\n  elseif n == 1 then\n    return\
    \ {1}\n  elseif n % 2 == 0 then\n    return make_a_pile(n-1) + make_a_pile(n-2)\n\
    \  else\n    return make_a_pile(n-1) + make_a_pile(n-2) + make_a_pile(n-3)\n \
    \ end\nend", "  local pile = {}\n  local i = 1\n  while i <= n do\n    pile[i]\
    \ = n\n    i = 2 * i\n  end\n  return pile\nend", "  local pile = {}\n  local\
    \ next_odd\n  local next_even\n  if n % 2 == 0 then\n    next_odd = n\n  else\n\
    \    next_even = n\n  end\n  local i = 1\n  while i <= n do\n    pile[i] = next_odd\n\
    \    next_odd = next_odd + 1\n    if next_odd % 2 == 0 then\n      next_even =\
    \ next_even + 1\n    end\n    i = i + 1\n  end\n  return pile\nend", "  local\
    \ pile = {}\n  local i = 1\n  while i <= n do\n    if i % 2 == 0 then\n      pile[i]\
    \ = n\n      i = i + 1\n    else\n      pile[i] = (math.floor(n/2) + 1)\n    \
    \  i = i + 1\n    end\n  end\n  return pile\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
