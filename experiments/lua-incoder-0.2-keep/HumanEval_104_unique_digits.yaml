name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a list of positive integers x. return a sorted list of all \n--\
  \ elements that hasn't any even digit.\n-- Note: Returned list should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n\
  -- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local seen = {}\n  local res = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      table.insert(res, digit)\n    else\n\
    \      local k = math.floor(math.log10(digit))\n      if seen[k] then\n      \
    \  table.insert(res, digit)\n      else\n        seen[k] = true\n      end\n \
    \   end\n  end\n  return res\nend", "  local ret = {}\n  for i = 1, #x do\n  \
    \  if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend", "  local result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n\
    \      table.insert(result, x[i])\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      result[#result\
    \ + 1] = x[i]\n    end\n  end\n  return result\nend", "  local t = {}\n  for i\
    \ = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(t, x[i])\n    end\n\
    \  end\n  return t\nend", "  local result = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return table.sort(result)\n\
    end", "    local ret = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n\
    \            table.insert(ret, x[i])\n        end\n    end\n    return ret\nend",
  "    local seen = {}\n    local ret = {}\n    for i = 1, #x do\n        if seen[x[i]]\
    \ then\n            table.insert(ret, x[i])\n        else\n            seen[x[i]]\
    \ = true\n        end\n    end\n    return ret\nend", "  local ret = {}\n  local\
    \ i = 1\n  while i <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret,\
    \ x[i])\n    end\n    i = i + 1\n  end\n  return ret\nend", "  local ret = {}\n\
    \  for i = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n\
    \    end\n  end\n  return ret\nend", "  local function is_even(x)\n    return\
    \ x % 2 == 0\n  end\n  local function is_odd(x)\n    return x % 2 == 1\n  end\n\
    \  local function is_digit(x)\n    return x >= 0 and x <= 9\n  end\n  local function\
    \ is_unique_digit(x)\n    return is_digit(x) and x[#x] == x\n  end\n  local function\
    \ is_unique_digit_in_list(x)\n    return is_unique_digit(x) and x[#x] == x\n \
    \ end\n  local function is_unique_digit_in_list2(x)\n    return is_unique_digit(x)\
    \ and x[#x] == x\n  end\n  local function is_unique_digit_in_list3(x)\n    return\
    \ is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list4(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list5(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list6(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list7(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list8(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list9(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list10(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list11(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list12(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list13(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list14(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list15(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list16(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list17(x)\n\
    \    return is_unique_digit(x) and x[#x] == x\n  end\n  local function is_unique_digit_in_list18(x)\n\
    \    return is_unique_digit(x) and x[#x] == ", "  local seen = {}\n  local res\
    \ = {}\n  for i = 1, #x do\n    if seen[x[i]] then\n      table.insert(res, x[i])\n\
    \    else\n      seen[x[i]] = true\n    end\n  end\n  return res\nend", "  local\
    \ ret = {}\n  local i = 1\n  while i <= #x do\n    if x[i] % 2 == 0 then\n   \
    \   table.insert(ret, x[i])\n    end\n    i = i + 1\n  end\n  return ret\nend",
  "  local new_x = {}\n  for i = 1, #x do\n    local digit = x[i]\n    if digit ==\
    \ 0 then\n      new_x = new_x:add(0)\n    else\n      new_x = new_x:add(digit)\n\
    \    end\n  end\n  local new_x = new_x:sort()\n  local new_x = new_x:filter(function(x)\n\
    \    return x ~= 0\n  end)\n  return new_x\nend", "  local new_x = {}\n  for i\
    \ = 1, #x do\n    if x[i] % 2 == 0 then\n      table.insert(new_x, x[i])\n   \
    \ end\n  end\n  return table.sort(new_x)\nend", "  local ret = {}\n  for i = 1,\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \ end\n  return ret\nend", "  local ret = {}\n  local i = 1\n  while i <= #x do\n\
    \    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n    i = i\
    \ + 1\n  end\n  return ret\nend", "  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend", "  local result = {}\n  local i = 1\n  while i <= #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(result, x[i])\n    end\n    i = i + 1\n  end\n\
    \  return result\nend", "  local ret = {}\n  for i = 1, #x do\n    if x[i] % 2\
    \ == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return ret\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
