language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i + 3] ~= s[i + 3] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp49zmydzo.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp49zmydzo.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  if first_letter ==\
    \ second_letter or first_letter == third_letter then\n    return is_happy(string.sub(s,2,4))\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7tusui1.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph7tusui1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbd4vqib9.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] or s[i]\
    \ ~= s[i - 2] then\n            count = count + 1\n        end\n    end\n    return\
    \ count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyl472gf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptyl472gf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      if s[i] ~= s[count + 1] then\n        happy = false\n        break\n\
    \      end\n      count = count + 1\n    end\n    if s[i] ~= s[count + 1] then\n\
    \      happy = false\n      break\n    end\n    count = count + 1\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6t9o1c01.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6t9o1c01.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        else\n       \
    \     count = count - 1\n        end\n        if count >= 3 then\n           \
    \ happy = true\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqny8er2l.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqny8er2l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local letters = {}\n  for i =\
    \ 1, #s do\n    table.insert(letters, s[i])\n  end\n  local happy = true\n  for\
    \ i = 1, #letters do\n    if letters[i] ~= letters[i + 1] then\n      happy =\
    \ false\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ya7am5m.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ya7am5m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        else\n       \
    \     count = count - 1\n        end\n        if count >= 3 then\n           \
    \ happy = true\n            break\n        end\n    end\n    return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8w88zco.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph8w88zco.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n     \
    \   end\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxb6c35m.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwxb6c35m.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i]:lower() == s[i]:lower()\
    \ then\n            count = count + 1\n        else\n            count = count\n\
    \        end\n    end\n    return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusfit00r.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpusfit00r.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpusfit00r.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hyvrdp2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3hyvrdp2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudaplfrt.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 then\n    for i = 1, count do\n      if s[i] ~=\
    \ s[count + i] then\n        happy = false\n        break\n      end\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_mhtql0.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm_mhtql0.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i+1] then\n      happy = false\n      break\n \
    \   end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx8j58nso.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx8j58nso.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i + 1] then\n      happy =\
    \ true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e5ww1nr.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_e5ww1nr.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  if first_letter ==\
    \ second_letter and second_letter == third_letter then\n    return is_happy(s[4])\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_wap2ot.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp4_wap2ot.lua:13:\
    \ in function </tmp/tmp4_wap2ot.lua:11>\n\t(...tail calls...)\n\t/tmp/tmp4_wap2ot.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbd4vqib9.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  -- base case\n  if\
    \ first_letter == second_letter and second_letter == third_letter then return\
    \ true end\n  -- recursive case\n  if first_letter == second_letter or first_letter\
    \ == third_letter then\n    return is_happy(string.sub(s,2,4))\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf58gq3lt.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf58gq3lt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local length = #s\n    if length < 3 then\n    \
    \    return happy\n    end\n    for i = 1, length do\n        if s[i] ~= s[i]\
    \ then\n            happy = false\n            break\n        end\n    end\n \
    \   if happy then\n        return happy\n    end\n    for i = 1, length do\n \
    \       if s[i] ~= s[i+1] then\n            happy = false\n            break\n\
    \        end\n    end\n    if happy then\n        return happy\n    end\n    for\
    \ i = 1, length do\n        if s[i] ~= s[i+2] then\n            happy = false\n\
    \            break\n        end\n    end\n    if happy then\n        return happy\n\
    \    end\n    for i = 1, length do\n        if s[i] ~= s[i+3] then\n         \
    \   happy = false\n            break\n        end\n    end\n    if happy then\n\
    \        return happy\n    end\n    for i = 1, length do\n        if s[i] ~= s[i+4]\
    \ then\n            happy = false\n            break\n        end\n    end\n \
    \   if happy then\n        return happy\n    end\n    for i = 1, length do\n \
    \       if s[i] ~= s[i+5] then\n            happy = false\n            break\n\
    \        end\n    end\n    if happy then\n        return happy\n    end\n    for\
    \ i = 1, length do\n        if s[i] ~= s[i+6] then\n            happy = false\n\
    \            break\n        end\n    end\n    if happy then\n        return happy\n\
    \    end\n    for i = 1, length do\n        if s[i] ~= s[i+7] then\n         \
    \   happy = false\n            break\n        end\n    end\n    if happy then\n\
    \        return happy\n    end\n    for i = 1, length do\n        if s[i] ~= s[i+8]\
    \ then\n            happy = false\n            break\n        end\n    end\n \
    \   if happy then\n        return happy\n    end\n    for i = 1, length do\n \
    \       if s[i] ~= s[i+9] then\n            happy = false\n            break\n\
    \        end\n    end\n    if happy then\n        return happy\n    end\n    for\
    \ i = 1, length do\n        if s[i] ~= s[i+10] then\n            happy = false\n\
    \            break\n        end\n    end\n    if happy then\n        return happy\n\
    \    end\n    for i = 1, length do\n        if s[i] ~= s[i+11] then\n        \
    \    happy = false\n            break\n        end\n    end\n    if happy then\n\
    \        return happy\n    end\n    for i = 1, length do\n        if s[i] ~= s[i+12]\
    \ then\n            happy = false\n            break\n        end\n    end\n \
    \   if happy then\n        return happy\n    end\n    for i = 1, length do\n \
    \       if s[i] ~= s[i+13] then\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwuf5afwh.lua:150: ''end'' expected (to close ''if'' at line
    135) near <eof>

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hyvrdp2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3hyvrdp2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kv7gan6.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0kv7gan6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = false\n      count = 0\n    end\n\
    \    if s[i] ~= s[i - 1] then\n      happy = false\n      count = 0\n    end\n\
    \    count = count + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdl3gpq2.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwdl3gpq2.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    local letter = s:sub(i, i)\n    local next =\
    \ s:sub(i + 1, i + 1)\n    if letter == next then\n      happy = false\n     \
    \ break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tkxupfl.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9tkxupfl.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m6t7v7t.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp9m6t7v7t.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpel1g8_il.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      happy = true\n      count = count + 1\n    elseif count == 1 then\n\
    \      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n    \
    \    happy = false\n      end\n      count = count + 1\n    elseif count == 2\
    \ then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n\
    \        happy = false\n      end\n      count = count + 1\n    elseif count ==\
    \ 3 then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n\
    \        happy = false\n      end\n      count = count + 1\n    end\n  end\n \
    \ return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2ks6f0k.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz2ks6f0k.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i]:lower() == s[i]:lower()\
    \ then\n            count = count + 1\n        else\n            if count > 0\
    \ then\n                return false\n            end\n            count = 0\n\
    \        end\n    end\n    return count >= 3\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbzggcwl.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqbzggcwl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqbzggcwl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4obkr01l.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp4obkr01l.lua:13:\
    \ in function </tmp/tmp4obkr01l.lua:11>\n\t(...tail calls...)\n\t/tmp/tmp4obkr01l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if string.find(s, string.char(s[i]))\
    \ == nil then\n            happy = false\n            break\n        end\n   \
    \ end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmbd44m_2.lua:14:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmpmbd44m_2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpmbd44m_2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_xucydv.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_xucydv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudaplfrt.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == #s or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4uudq3_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj4uudq3_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6emq2_v.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa6emq2_v.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    for i = 1, #s do\n        if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n            n = n + 1\n        end\n    end\n    return n >=\
    \ 3 and n == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin8zbe60.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpin8zbe60.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhb5sevt.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyhb5sevt.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then return false end\n    local count = {}\n\
    \    for i = 1, n do\n        local c = s[i]\n        if count[c] ~= nil then\n\
    \            count[c] = count[c] + 1\n        else\n            count[c] = 1\n\
    \        end\n    end\n    for i = 1, n do\n        if count[s[i]] ~= n then return\
    \ false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoh6padl4.lua:20:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpoh6padl4.lua:20: in local 'candidate'\n\
    \t/tmp/tmpoh6padl4.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n    end\n    if count == 3 then\n  \
    \    happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5koftu9k.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5koftu9k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] and s[i] ~= s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[i - 1] and s[i]\
    \ ~= s[i - 2] then\n        happy = true\n        break\n      end\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5prvqwk9.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5prvqwk9.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  if first_letter ==\
    \ second_letter or first_letter == third_letter then\n    return is_happy(s[4])\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pdzvt9r.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp0pdzvt9r.lua:13:\
    \ in function </tmp/tmp0pdzvt9r.lua:11>\n\t(...tail calls...)\n\t/tmp/tmp0pdzvt9r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzekwski.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkzekwski.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n            count = count + 1\n\
    \        end\n    end\n    if count >= 3 and count == #s then\n        happy =\
    \ true\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4kw5ptgc.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4kw5ptgc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  -- base case\n  if\
    \ first_letter == second_letter and second_letter == third_letter then return\
    \ true end\n  -- recursive case\n  if first_letter == second_letter or first_letter\
    \ == third_letter then\n    return is_happy(string.sub(s,2,4))\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wyou7xb.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8wyou7xb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return is_happy(s[1]) and is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) and is_happy(s[2]) and is_happy(s[3]) and is_happy(s[4])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsnyiqh2.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpgsnyiqh2.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmpgsnyiqh2.lua:25: in local 'candidate'\n\t/tmp/tmpgsnyiqh2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvb62dmp.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgvb62dmp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n            count = count + 1\n\
    \        end\n    end\n    if count >= 3 and count % 3 == 0 then\n        happy\
    \ = true\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwczk0308.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwczk0308.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[1] ~= s[1] then return false end\n  if s[2] ~= s[2] then return\
    \ false end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmu_zzsi7.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpmu_zzsi7.lua:13:\
    \ in function </tmp/tmpmu_zzsi7.lua:11>\n\t(...tail calls...)\n\t/tmp/tmpmu_zzsi7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvb62dmp.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgvb62dmp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if s[2] ~= s[2] then return false\
    \ end\n  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n\
    \  if s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then\
    \ return false end\n  -- base case\n  if s[1] ~= s[1] then return false end\n\
    \  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n  if\
    \ s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then return\
    \ false end\n  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base\
    \ case\n  if s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~=\
    \ s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then return false\
    \ end\n  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n\
    \  if s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then\
    \ return false end\n  -- base case\n  if s[1] ~= s[1] then return false end\n\
    \  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n  if\
    \ s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then return\
    \ false end\n  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base\
    \ case\n  if s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~=\
    \ s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then return false\
    \ end\n  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n\
    \  if s[1] ~= s[1] then return false end\n  -- base case\n  if s[1] ~= s[1] then\
    \ return false end\n  -- base case\n  if s[1] ~= s[1] then return false end\n\
    \  -- base case\n  if s[1] ~= s[1] then return false end\n  -- base case\n  if\
    \ s[1]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3nrpc40_.lua:74: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zu5qkgh.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6zu5qkgh.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if s[i] ~= s[count] then\n      happy = false\n      count = i\n   \
    \ else\n      count = count + 1\n    end\n  end\n  return happy and count >= 3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77yqokh9.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp77yqokh9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld94fvhh.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpld94fvhh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3 and count\
    \ == #s - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxz0rjs.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqzxz0rjs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if #s - i >= 3 then\n      if\
    \ s[i - 1] ~= s[i - 2] then\n        happy = true\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ikwr_xp.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ikwr_xp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    for i = 1, #s do\n        if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n            return false\n        end\n        n = n + 1\n \
    \   end\n    return n >= 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qkuto0k.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7qkuto0k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            happy = true\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuawxjlf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzuawxjlf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s %\
    \ 3 ~= 0 then return false end\n  -- recursive case\n  local last_letter = s[1]\n\
    \  for i = 2, #s do\n    if last_letter ~= s[i] then\n      return false\n   \
    \ end\n    last_letter = s[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24gsdqrv.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24gsdqrv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local len = #s\n    if len < 3 then\n        return\
    \ false\n    end\n    for i = 1, len do\n        local letter = s[i]\n       \
    \ for j = i + 1, len + 1 do\n            if s[j] == letter then\n            \
    \    happy = false\n                break\n            end\n        end\n    end\n\
    \    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h_9bfbu.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_h_9bfbu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbwicgt5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwbwicgt5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local i = 0\n    local j = 1\n    while i < #s and\
    \ j < #s do\n        if s[i] ~= s[j] then\n            happy = false\n       \
    \     break\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgdjsrlz.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkgdjsrlz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    for i = 1, #s do\n        if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n            n = n + 1\n        end\n    end\n    return n >=\
    \ 3 and string.sub(s, 1, 3) == string.sub(s, 2, 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rjy_kg8.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1rjy_kg8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      if s[i] ~= s[count] then\n        happy = false\n        break\n\
    \      end\n      count = 0\n    else\n      count = count + 1\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gu425u_.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4gu425u_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld94fvhh.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpld94fvhh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo2po90d_.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpo2po90d_.lua:13:\
    \ in function </tmp/tmpo2po90d_.lua:11>\n\t(...tail calls...)\n\t/tmp/tmpo2po90d_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbd4vqib9.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local i = 0\n  while i < #s do\n    if s[i] ~= s[i]\
    \ then\n      happy = false\n      break\n    end\n    i = i + 1\n  end\n  if\
    \ #s >= 3 then\n    local j = 1\n    while j < #s do\n      if s[j] == s[j] then\n\
    \        j = j + 1\n      else\n        happy = true\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnvw1wwu.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprnvw1wwu.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    local letter = s[i]\n    for j = i + 1, len do\n\
    \      if s[j] == letter then\n        return false\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3dlzz18.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv3dlzz18.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- recursive case\n  local\
    \ last_letter = s[1]\n  local last_count = 0\n  for i = 2, #s do\n    if s[i]\
    \ != last_letter then\n      last_count = last_count + 1\n    else\n      last_count\
    \ = last_count - 1\n    end\n    if last_count < 0 then\n      return false\n\
    \    end\n    last_letter = s[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbk0j7tw3.lua:18: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- check every 3 letters\n\
    \  for i = 1, #s - 1, 3 do\n    -- check if letters are distinct\n    if #(s:sub(i,\
    \ i + 3)) ~= 1 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6i5wmb65.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6i5wmb65.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s %\
    \ 3 ~= 0 then return false end\n  -- recursive case\n  local last_letter = nil\n\
    \  for i = 1, #s do\n    local letter = s[i]\n    if last_letter ~= letter then\n\
    \      last_letter = letter\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp386b3h8.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp386b3h8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return false end\n\
    \  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n      happy = true\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn7zee62.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprn7zee62.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbd4vqib9.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kv7gan6.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0kv7gan6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 then\n    for i = 1, count - 2 do\n      if s[i]\
    \ ~= s[count + 1] then\n        happy = false\n        break\n      end\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnwxr2ogo.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnwxr2ogo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuj4nh754.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return is_happy(s[1]) and is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) and is_happy(s[2]) and is_happy(s[3]) and is_happy(s[4])\
    \ and is_happy(s[5]) and is_happy(s[6]) and is_happy(s[7])\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexwsp2xt.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpexwsp2xt.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmpexwsp2xt.lua:25: in local 'candidate'\n\t/tmp/tmpexwsp2xt.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[(i + 1) % #s] then\n      happy = false\n     \
    \ break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgamgs97.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqgamgs97.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s and #s % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw2ypafv.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqw2ypafv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if #s - i >= 3 then\n\
    \            if string.find(string.sub(s,i,i+3),string.sub(s,i,i+3)) then\n  \
    \              happy = true\n            end\n        end\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm6vyjb6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgm6vyjb6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 3 then\n    local first\
    \ = s[1]\n    local second = s[2]\n    local third = s[3]\n    if first ~= second\
    \ and first ~= third then return false end\n    if second ~= third then return\
    \ false end\n    return true\n  end\n  -- recursive case\n  local first = s[1]\n\
    \  local second = s[2]\n  local third = s[3]\n  if first ~= second and first ~=\
    \ third then\n    return false\n  end\n  if second ~= third then\n    return false\n\
    \  end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8zldz_w.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpy8zldz_w.lua:13:\
    \ in function </tmp/tmpy8zldz_w.lua:11>\n\t(...tail calls...)\n\t/tmp/tmpy8zldz_w.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n    end\n    if count == 3 then\n  \
    \    happy = true\n      count = 0\n    end\n  end\n  return happy\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn8o8bon.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcn8o8bon.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[4] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[5] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[6] then return false end\n  -- recursive case\n  if s[2] ~= s[7] then return\
    \ false end\n  -- recursive case\n  if s[2] ~= s[8] then return false end\n  --\
    \ recursive case\n  if s[2] ~= s[9] then return false end\n  -- recursive case\n\
    \  if s[2] ~= s[10] then return false end\n  -- recursive case\n  if s[2] ~= s[11]\
    \ then return false end\n  -- recursive case\n  if s[2] ~= s[12] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[13] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[14] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[15] then return false end\n  -- recursive case\n  if s[2] ~= s[16] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[17] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[18] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[19] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[20] then return false end\n  -- recursive case\n  if s[2] ~= s[21] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[22] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[23] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[24] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[25] then return false end\n  -- recursive case\n  if s[2] ~= s[26] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[27] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[28] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[29] then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy83hf57.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            happy = true\n            break\n        end\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2qcgjsb.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg2qcgjsb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_xucydv.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_xucydv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  if count >= 3 then\n    for i = 1, count - 2 do\n\
    \      if s[i] ~= s[count + 1] then\n        happy = false\n        break\n  \
    \    end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4g94vatb.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4g94vatb.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        end\n        count\
    \ = count + 1\n    end\n    return happy and count >= 3 and count == #s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8uixgwo.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_8uixgwo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n        happy = true\n      end\n      count = count + 1\n    elseif count\
    \ == 3 then\n      if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i -\
    \ 3] then\n        happy = true\n      end\n      count = 0\n    else\n      count\
    \ = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfcnhoap.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbfcnhoap.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local length = #s\n  if length >= 3 then\n    local\
    \ letters = {}\n    for i = 1, length do\n      table.insert(letters, s[i])\n\
    \    end\n    local happy = true\n    for i = 1, length do\n      if letters[i]\
    \ ~= letters[i + 1] then\n        happy = false\n        break\n      end\n  \
    \  end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljscq9ga.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpljscq9ga.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      happy = true\n      count = count + 1\n    elseif count == 1 then\n\
    \      happy = happy and s[i] ~= s[i - 1]\n      count = count + 1\n    elseif\
    \ count == 2 then\n      happy = happy and s[i] ~= s[i - 1] and s[i] ~= s[i -\
    \ 2]\n      count = count + 1\n    elseif count == 3 then\n      happy = happy\
    \ and s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\n      count\
    \ = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp211_cigp.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp211_cigp.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~=\
    \ s[i - 2] and s[i] ~= s[i - 3] then\n      happy = true\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x5uvuso.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8x5uvuso.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n      if count == 3 then\n        happy\
    \ = true\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasujt3r.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmasujt3r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):lower() == s:sub(1, 3):lower() .. s:sub(2, 3):lower()\
    \ == s:sub(2, 3):lower() .. s:sub(3, 3):lower() == s:sub(3, 3):lower()\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsmrbm0t.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprsmrbm0t.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  local i = 0\n  while i < len do\n    local letter = s[i]\n    i = i\
    \ + 1\n    if letter ~= letter then\n      happy = false\n      break\n    end\n\
    \  end\n  local j = 1\n  while j < len do\n    local letter = s[j]\n    j = j\
    \ + 1\n    if letter ~= letter then\n      happy = false\n      break\n    end\n\
    \  end\n  local k = 1\n  while k < len do\n    local letter = s[k]\n    k = k\
    \ + 1\n    if letter ~= letter then\n      happy = false\n      break\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu23esfs.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgu23esfs.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3 and count\
    \ == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknalpumi.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpknalpumi.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6emq2_v.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa6emq2_v.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudaplfrt.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n    end\n    count = count + 1\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg0rsfxr.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfg0rsfxr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  -- base case\n  if\
    \ first_letter == second_letter and second_letter == third_letter then return\
    \ is_happy(s[4])\n  -- recursive case\n  if first_letter == second_letter or first_letter\
    \ == third_letter then return is_happy(s[2])\n  -- recursive case\n  if second_letter\
    \ == third_letter then return is_happy(s[1])\n  -- recursive case\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvzgamn4f.lua:23: ''end'' expected (to close ''if'' at line
    21) near ''if''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i - 1] then\n      happy = false\n\
    \      break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n     \
    \ if s[i] ~= s[i + 1] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsls4gx1i.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsls4gx1i.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then return false\
    \ end\n  if s[2] ~= s[2] then return false end\n  if s[1] == s[1] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoe1ucmk8.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoe1ucmk8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  else\n    return is_happy(s[1]) and\
    \ is_happy(s[2])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jw5sxcv.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp2jw5sxcv.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmp2jw5sxcv.lua:20: in local 'candidate'\n\t/tmp/tmp2jw5sxcv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpudaplfrt.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s %\
    \ 3 ~= 0 then return false end\n  -- recursive case\n  for i = 1, #s do\n    if\
    \ s[i] ~= s[i - 1] or s[i] ~= s[i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1zim45e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp1zim45e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n      if count == 3 then\n        happy\
    \ = true\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasujt3r.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmasujt3r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9tmjm_m.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx9tmjm_m.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[count] == s[count+1]\
    \ then\n            count = count + 1\n        else\n            count = count\
    \ + 1\n            if count > #s then\n                return true\n         \
    \   end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp976wlnxd.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp976wlnxd.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return is_happy(s[1]) and is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) and is_happy(s[2]) and is_happy(s[3]) and is_happy(s[4])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsnyiqh2.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpgsnyiqh2.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmpgsnyiqh2.lua:25: in local 'candidate'\n\t/tmp/tmpgsnyiqh2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[(i+1):(#s)] then happy = true end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp46flyhmm.lua:19: <name> expected near ''(''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i - 2] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7no04r7.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt7no04r7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvb62dmp.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgvb62dmp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = count + 1\n    else\n    \
    \  count = count + 1\n    end\n    if count == 3 then\n      happy = true\n  \
    \  end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkexctm_j.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkexctm_j.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count >= 3 and count == #s and #s % 3 == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtj0b7bh.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwtj0b7bh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return is_happy(s[1]) and is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) and is_happy(s[2]) and is_happy(s[3]) and is_happy(s[4])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgsnyiqh2.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpgsnyiqh2.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmpgsnyiqh2.lua:25: in local 'candidate'\n\t/tmp/tmpgsnyiqh2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i+1] ~= s[i+2] then\n        happy = false\n        break\n      end\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejybty62.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpejybty62.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[1] == s[1] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[1] == s[4] then return\
    \ false end\n  if s[1] == s[5] then return false end\n  if s[1] == s[6] then return\
    \ false end\n  if s[1] == s[7] then return false end\n  if s[1] == s[8] then return\
    \ false end\n  if s[1] == s[9] then return false end\n  if s[1] == s[10] then\
    \ return false end\n  if s[1] == s[11] then return false end\n  if s[1] == s[12]\
    \ then return false end\n  if s[1] == s[13] then return false end\n  if s[1] ==\
    \ s[14] then return false end\n  if s[1] == s[15] then return false end\n  if\
    \ s[1] == s[16] then return false end\n  if s[1] == s[17] then return false end\n\
    \  if s[1] == s[18] then return false end\n  if s[1] == s[19] then return false\
    \ end\n  if s[1] == s[20] then return false end\n  if s[1] == s[21] then return\
    \ false end\n  if s[1] == s[22] then return false end\n  if s[1] == s[23] then\
    \ return false end\n  if s[1] == s[24] then return false end\n  if s[1] == s[25]\
    \ then return false end\n  if s[1] == s[26] then return false end\n  if s[1] ==\
    \ s[27] then return false end\n  if s[1] == s[28] then return false end\n  if\
    \ s[1] == s[29] then return false end\n  if s[1] == s[30] then return false end\n\
    \  if s[1] == s[31] then return false end\n  if s[1] == s[32] then return false\
    \ end\n  if s[1] == s[33] then return false end\n  if s[1] == s[34] then return\
    \ false end\n  if s[1] == s[35] then return false end\n  if s[1] == s[36] then\
    \ return false end\n  if s[1] == s[37] then return false end\n  if s[1] == s[38]\
    \ then return false end\n  if s[1] == s[39] then return false end\n  if s[1] ==\
    \ s[40] then return false end\n  if s[1] == s[41] then return false end\n  if\
    \ s[1] == s[42] then return false end\n  if s[1] == s[43] then return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm9qoao5g.lua:61: ''end'' expected (to close ''if'' at line
    60) near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  local last = ''\n  for i = 1, #s do\n    if last ~= s[i]\
    \ then\n      count = count + 1\n      last = s[i]\n    end\n  end\n  return count\
    \ >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafzio48g.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpafzio48g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      if s[i]:lower() == s[i+1]:lower() and s[i]:lower()\
    \ == s[i+2]:lower() then\n        happy = true\n      end\n      count = 0\n \
    \   else\n      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp78g65lcw.lua:17:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp78g65lcw.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp78g65lcw.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  return happy and count >= 3 and count == #s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr1uojsk.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsr1uojsk.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      count = count + 1\n      if count == 3 then\n        happy\
    \ = true\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasujt3r.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmasujt3r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfuw0yws6.lua:13: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hyvrdp2.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3hyvrdp2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if #s - i > 3 then\n \
    \           if string.sub(s, i, i + 3) == string.sub(s, i - 1, i - 2) then\n \
    \               happy = true\n            end\n        end\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15k3n88p.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp15k3n88p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if s[2] ~= s[2] then return false\
    \ end\n  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n\
    \  if s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then\
    \ return false end\n  -- base case\n  if s[2] ~= s[2] then return false end\n\
    \  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n  if\
    \ s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then return\
    \ false end\n  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base\
    \ case\n  if s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~=\
    \ s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then return false\
    \ end\n  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n\
    \  if s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then\
    \ return false end\n  -- base case\n  if s[2] ~= s[2] then return false end\n\
    \  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n  if\
    \ s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then return\
    \ false end\n  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base\
    \ case\n  if s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~=\
    \ s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then return false\
    \ end\n  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n\
    \  if s[2] ~= s[2] then return false end\n  -- base case\n  if s[2] ~= s[2] then\
    \ return false end\n  -- base case\n  if s[2] ~= s[2] then return false end\n\
    \  -- base case\n  if s[2] ~= s[2] then return false end\n  -- base case\n  if\
    \ s[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp0fuer98.lua:74: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count >= 3 and count % 3 == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r29jwpm.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4r29jwpm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  -- recursive case\n  if s[1] ~= s[2] then return false end\n  -- recursive\
    \ case\n  if s[1] ~= s[3] then return false end\n  -- recursive case\n  return\
    \ is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjige_y8y.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpjige_y8y.lua:13:\
    \ in function </tmp/tmpjige_y8y.lua:11>\n\t(...tail calls...)\n\t/tmp/tmpjige_y8y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local n = #s\n  if n >= 3 then\n    for i = 1, n do\n\
    \      if s[i] ~= s[i] then\n        happy = true\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmok_4xt.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzmok_4xt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  return happy and count >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf6ann8r.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnf6ann8r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      happy = true\n      count = count+1\n    else\n      if s[i] ~=\
    \ s[count] then\n        happy = false\n      end\n      count = count+1\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9023fz3l.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9023fz3l.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    local letter = s[i]\n    for j = 1, i do\n  \
    \    if letter ~= s[j] then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk6n9vrm.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqk6n9vrm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local last_letter = s[1]\n  local\
    \ last_letter2 = s[2]\n  local last_letter3 = s[3]\n  local last_letter4 = s[4]\n\
    \  local last_letter5 = s[5]\n  local last_letter6 = s[6]\n  local last_letter7\
    \ = s[7]\n  local last_letter8 = s[8]\n  local last_letter9 = s[9]\n  local last_letter10\
    \ = s[10]\n  local last_letter11 = s[11]\n  local last_letter12 = s[12]\n  local\
    \ last_letter13 = s[13]\n  local last_letter14 = s[14]\n  local last_letter15\
    \ = s[15]\n  local last_letter16 = s[16]\n  local last_letter17 = s[17]\n  local\
    \ last_letter18 = s[18]\n  local last_letter19 = s[19]\n  local last_letter20\
    \ = s[20]\n  local last_letter21 = s[21]\n  local last_letter22 = s[22]\n  local\
    \ last_letter23 = s[23]\n  local last_letter24 = s[24]\n  local last_letter25\
    \ = s[25]\n  local last_letter26 = s[26]\n  local last_letter27 = s[27]\n  local\
    \ last_letter28 = s[28]\n  local last_letter29 = s[29]\n  local last_letter30\
    \ = s[30]\n  local last_letter31 = s[31]\n  local last_letter32 = s[32]\n  local\
    \ last_letter33 = s[33]\n  local last_letter34 = s[34]\n  local last_letter35\
    \ = s[35]\n  local last_letter36 = s[36]\n  local last_letter37 = s[37]\n  local\
    \ last_letter38 = s[38]\n  local last_letter39 = s[39]\n  local last_letter40\
    \ = s[40]\n  local last_letter41 = s[41]\n  local last_letter42 = s[42]\n  local\
    \ last_letter43 = s[43]\n  local last_letter44 = s[44]\n  local last_letter45\
    \ = s[45]\n  local last_letter46 = s[46]\n  local last_letter47 = s[47]\n  local\
    \ last_letter48 = s[48]\n  local last_letter49 = s[49]\n  local last_letter50\
    \ = s[50]\n  local last_letter51 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwb04f_vt.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppoyucv58.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppoyucv58.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):lower() == s:sub(1, 3):lower() .. s:sub(2, 3):lower()\
    \ == s:sub(2, 3):lower() .. s:sub(3, 3):lower() == s:sub(3, 3):lower()\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsmrbm0t.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprsmrbm0t.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i+1] then\n      happy = true\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3efuvkit.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3efuvkit.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    local letter = string.sub(s,i,i)\n\
    \    local count = #string.gsub(s,letter,\"\")\n    if count > 3 then\n      happy\
    \ = false\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiefo9lj.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfiefo9lj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count\
    \ = count + 1\n    end\n  end\n  return count >= 3 and count % 3 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtq7cfb_.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvtq7cfb_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local n = #s\n  return n >= 3 and n == #(s:gsub(\"(.)\", function(c) return\
    \ c:lower() end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u9b2wc7.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9u9b2wc7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count == 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88o2bi3l.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp88o2bi3l.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxygfpipk.lua:30: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- base case\n \
    \ if #s == 3 then\n    return true\n  end\n  -- base case\n  if #s == 2 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 1 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 0 then\n    return false\n  end\n  -- base\
    \ case\n  if #s == 1 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 2 then\n    return true\n  end\n  -- base case\n  if #s == 3 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 4 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 5 then\n    return true\n  end\n  -- base case\n  if #s\
    \ == 6 then\n    return true\n  end\n  -- base case\n  if #s == 7 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 8 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 9 then\n    return true\n  end\n  -- base case\n  if #s\
    \ == 10 then\n    return true\n  end\n  -- base case\n  if #s == 11 then\n   \
    \ return true\n  end\n  -- base case\n  if #s == 12 then\n    return true\n  end\n\
    \  -- base case\n  if #s == 13 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 14 then\n    return true\n  end\n  -- base case\n  if #s == 15 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 16 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 17 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 18 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 19 then\n    return true\n  end\n  -- base case\n  if #s == 20 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 21 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 22 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 23 then\n    return true\n  end\n  -- base case\n  if #s == 24 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 25 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 26 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 27 then\n    return true\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj118nqpw.lua:154: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #s == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0003z9o.lua:86: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    local letter = s[i]\n    for j = i + 1, len do\n\
    \      if letter ~= s[j] then\n        return happy\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqav0el27.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqav0el27.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  else\n    return is_happy(s[1]) and\
    \ is_happy(s[2])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jw5sxcv.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmp2jw5sxcv.lua:13:\
    \ in upvalue 'is_happy'\n\t/tmp/tmp2jw5sxcv.lua:20: in local 'candidate'\n\t/tmp/tmp2jw5sxcv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[(i+1)%#s] then happy = false end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoe1sbph.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoe1sbph.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if #s - i > 3 then\n      happy\
    \ = true\n      break\n    end\n    if s[i - 1] == s[i - 2] then\n      happy\
    \ = false\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30_9zukf.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp30_9zukf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n     \
    \       break\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgs917j7e.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgs917j7e.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  -- recursive case\n  if s[1] ~= s[2] then return false end\n  -- recursive\
    \ case\n  if s[1] ~= s[3] then return false end\n  -- recursive case\n  return\
    \ is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjige_y8y.lua:13:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpjige_y8y.lua:13:\
    \ in function </tmp/tmpjige_y8y.lua:11>\n\t(...tail calls...)\n\t/tmp/tmpjige_y8y.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_xucydv.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_xucydv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if s[1] == s[2] and s[1] == s[3] then\
    \ return false end\n  -- recursive case\n  return is_happy(s[2:end])\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaynbh44k.lua:19: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n      happy = true\n \
    \     count = count + 1\n    end\n  end\n  if count >= 3 then\n    for i = 1,\
    \ #s do\n      if s[i] ~= s[i - 3] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl887wn9.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsl887wn9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):lower() == s:sub(1, 3):lower() .. s:sub(2, 3):lower()\
    \ .. s:sub(3, 3):lower()\n  return happy and happy ~= s:sub(1, 3):lower() .. s:sub(2,\
    \ 3):lower() .. s:sub(3, 3):lower()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28eo82ki.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp28eo82ki.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then return false end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9tmjm_m.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx9tmjm_m.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+3) == string.sub(s,\
    \ 1, i+3) then\n      happy = true\n    end\n  end\n  return happy\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5mtfpp8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc5mtfpp8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        end\n        count\
    \ = count + 1\n    end\n    return happy and count >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imt2ial.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9imt2ial.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    count = count + 1\n    if count >\
    \ 3 then\n      return false\n    end\n  end\n  local last_letter = nil\n  for\
    \ i = 1, #s do\n    if last_letter ~= s[i] then\n      count = count + 1\n   \
    \   if count > 3 then\n        return false\n      end\n    end\n    last_letter\
    \ = s[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lglncc4.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8lglncc4.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp83jazgnq.lua:28: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] and s[i] ~= s[i - 2] then\n      count = count + 1\n    end\n  end\n\
    \  if count >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[i - 1] and s[i]\
    \ ~= s[i - 2] then\n        happy = true\n      end\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k35kifq.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0k35kifq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = false\n      count = 0\n    end\n\
    \    if s[i] ~= s[i - 1] then\n      happy = false\n      count = 0\n    end\n\
    \    count = count + 1\n  end\n  if count == 3 then\n    happy = true\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aa8v3w_.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8aa8v3w_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzekwski.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkzekwski.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800360
