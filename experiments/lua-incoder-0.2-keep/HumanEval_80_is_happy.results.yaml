name: HumanEval_80_is_happy
language: lua
results:
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local length = #s\n  if length < 3 then\n    return\
    \ happy\n  end\n  for i = 1, length do\n    if s[i] ~= s[i] then\n      happy\
    \ = false\n      break\n    end\n  end\n  local happy = false\n  for i = 1, length\
    \ do\n    if s[i] ~= s[i + 2] then\n      happy = false\n      break\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnngte67.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphnngte67.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn4qlos4c.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpn4qlos4c.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count\
    \ = count + 1\n    end\n  end\n  return count >= 3 and count % 3 == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx2qq33xn.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx2qq33xn.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n   \
    \   happy = true\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp46sl9742.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp46sl9742.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] or s[i] ~= s[i - 2] then\n      happy = true\n      count = count +\
    \ 1\n    end\n  end\n  return happy and count >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbw0l8_iv.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbw0l8_iv.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjqvklp3q.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s %\
    \ 3 ~= 0 then return false end\n  -- recursive case\n  local last_letter = nil\n\
    \  for i = 1, #s do\n    if last_letter ~= s[i] then\n      last_letter = s[i]\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzn_gxrna.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzn_gxrna.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpknypyiei.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpckx4xfac.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n \
    \   if s[i] ~= s[count] then\n      happy = false\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb249d36f.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpb249d36f.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ts1elun.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5ts1elun.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp199l37rv.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0ky5h1dl.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdbe3uvuv.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      happy = true\n      count = count + 1\n    elseif count == 1 then\n\
    \      happy = happy and s[i] ~= s[i - 1]\n      count = count + 1\n    elseif\
    \ count == 2 then\n      happy = happy and s[i] ~= s[i - 2] and s[i] ~= s[i -\
    \ 1]\n      count = count + 1\n    elseif count == 3 then\n      happy = happy\
    \ and s[i] ~= s[i - 3] and not (s[i] ~= s[i - 2] and s[i] ~= s[i - 1])\n     \
    \ count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_jsd84sc.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_jsd84sc.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local last_letter = s[#s-1]\n\
    \  local last_letter_count = #last_letter\n  local last_letter_count_2 = #last_letter\
    \ - 1\n  local last_letter_count_3 = #last_letter - 2\n  local last_letter_count_4\
    \ = #last_letter - 3\n  local last_letter_count_5 = #last_letter - 4\n  local\
    \ last_letter_count_6 = #last_letter - 5\n  local last_letter_count_7 = #last_letter\
    \ - 6\n  local last_letter_count_8 = #last_letter - 7\n  local last_letter_count_9\
    \ = #last_letter - 8\n  local last_letter_count_10 = #last_letter - 9\n  local\
    \ last_letter_count_11 = #last_letter - 10\n  local last_letter_count_12 = #last_letter\
    \ - 11\n  local last_letter_count_13 = #last_letter - 12\n  local last_letter_count_14\
    \ = #last_letter - 13\n  local last_letter_count_15 = #last_letter - 14\n  local\
    \ last_letter_count_16 = #last_letter - 15\n  local last_letter_count_17 = #last_letter\
    \ - 16\n  local last_letter_count_18 = #last_letter - 17\n  local last_letter_count_19\
    \ = #last_letter - 18\n  local last_letter_count_20 = #last_letter - 19\n  local\
    \ last_letter_count_21 = #last_letter - 20\n  local last_letter_count_22 = #last_letter\
    \ - 21\n  local last_letter_count_23 = #last_letter - 22\n  local last_letter_count_24\
    \ = #last_letter - 23\n  local last_letter_count_25 = #last_letter - 24\n  local\
    \ last_letter_count_26 = #last_letter - 25\n  local last_letter_count_27 = #last_letter\
    \ - 26\n  local last_letter_count_28 = #last_letter - 27\n  local last_letter_count_29\
    \ = #last_letter - 28\n  local last_letter_count_30 = #last_letter - 29\n  local\
    \ last_letter_count_31 = #last_letter - 30\n  local last_letter_count_32 = #last_letter\
    \ - 31\n  local last_letter_count_33 = #last_letter - 32\n  local last_letter_count_34\
    \ = #last_letter - 33\n  local last_letter_count_35 = #last_letter - 34\n  local\
    \ last_letter_count_36 = #last_letter - 35\n  local last_letter_count_37 = #last_letter\
    \ - 36\n  local last_letter_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpey2acyo9.lua:70: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i]\
    \ ~= s[i - 2] then\n            count = count + 1\n        end\n    end\n    return\
    \ count >= 3 and count == #s or false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwafyqeg8.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwafyqeg8.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpktaws79o.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpktaws79o.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      count = count + 1\n      happy = happy and s[i]\n    else\n  \
    \    count = count + 1\n      if s[i] == s[i - 1] then\n        happy = happy\
    \ and s[i]\n      else\n        happy = happy and false\n      end\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpanfhct0o.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpanfhct0o.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n     \
    \       break\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvoxdnl8x.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvoxdnl8x.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        else\n       \
    \     count = count + 1\n        end\n        if count >= 3 then\n           \
    \ happy = true\n            break\n        end\n    end\n    return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy5_aqdel.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy5_aqdel.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i, i+1) then\n      happy = true\n      break\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp568fe94f.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp568fe94f.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppgm9k_y1.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmppgm9k_y1.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n    end\n    count = count + 1\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78nghp_a.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp78nghp_a.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqu8uju3.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpaqu8uju3.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        else\n       \
    \     count = count - 1\n        end\n        if count >= 3 then\n           \
    \ happy = true\n            break\n        end\n    end\n    return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr688zs3x.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpr688zs3x.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\n  -- base case\n \
    \ if #s == 3 then\n    return true\n  end\n  -- base case\n  if #s == 2 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 1 then\n    return true\n\
    \  end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if\
    \ s[i] ~= s[i + 1] then\n      happy = false\n      break\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02tffbpy.lua:44:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp02tffbpy.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpu7pe_muw.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i]:sub(1,1) == s[i]:sub(2)\
    \ then\n            count = count + 1\n        else\n            if count > 0\
    \ then\n                return false\n            end\n            count = 0\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp808p_stu.lua:14:\
    \ attempt to index field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp808p_stu.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = false\n    end\n    if s[i] ~= s[count] then\n      happy\
    \ = false\n    end\n    count = count + 1\n  end\n  if count == 3 then\n    happy\
    \ = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkpbr987n.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkpbr987n.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local letters = {}\n  for i =\
    \ 1, #s do\n    table.insert(letters, s[i])\n  end\n  -- base case\n  if #letters\
    \ == 3 then return true end\n  -- recursive case\n  local letters = {}\n  for\
    \ i = 1, #s do\n    table.insert(letters, s[i])\n  end\n  for i = 1, #letters\
    \ do\n    if letters[i] != letters[i+1] then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpbew1fq_2.lua:29: 'then' expected near '!'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp963hi6z_.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmp963hi6z_.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiq1q32iy.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpiq1q32iy.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpumrxsenl.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpumrxsenl.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n \
    \   if s[i] ~= s[count] then\n      happy = false\n      count = count + 1\n \
    \   end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw4dqvus7.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw4dqvus7.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  return happy and count >= 3 and count == #s - 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps4vmtb_q.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmps4vmtb_q.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = false\n      count = 0\n    end\n\
    \    if s[i] ~= s[i - 1] then\n      happy = false\n      count = 0\n    end\n\
    \    count = count + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpevu9nwtb.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpevu9nwtb.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0m_e9t45.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp477gis19.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp94kgprwx.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp94kgprwx.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmptsqpj1cl.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local n = 1\n  while n < #s do\n    if s[n] == s[n+1]\
    \ then\n      n = n + 1\n    else\n      happy = true\n      n = n + 1\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_44a1w0t.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_44a1w0t.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpas7xccc9.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count >= 3 and count == #s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpesips2co.lua:29:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpesips2co.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return false end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return false end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return false end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return false end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return false end\n  -- base case\n  if #s\
    \ == 13 then return true end\n  -- base case\n  if #s == 14 then return false\
    \ end\n  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if\
    \ #s == 16 then return false end\n  -- base case\n  if #s == 17 then return true\
    \ end\n  -- base case\n  if #s == 18 then return false end\n  -- base case\n \
    \ if #s == 19 then return true end\n  -- base case\n  if #s == 20 then return\
    \ false end\n  -- base case\n  if #s == 21 then return true end\n  -- base case\n\
    \  if #s == 22 then return false end\n  -- base case\n  if #s == 23 then return\
    \ true end\n  -- base case\n  if #s == 24 then return false end\n  -- base case\n\
    \  if #s == 25 then return true end\n  -- base case\n  if #s == 26 then return\
    \ false end\n  -- base case\n  if #s == 27 then return true end\n  -- base case\n\
    \  if #s == 28 then return false end\n  -- base case\n  if #s == 29 then return\
    \ true end\n  -- base case\n  if #s == 30 then return false end\n  -- base case\n\
    \  if #s == 31 then return true end\n  -- base case\n  if #s == 32 then return\
    \ false end\n  -- base case\n  if #s == 33 then return true end\n  -- base case\n\
    \  if #s == 34 then return false end\n  -- base case\n  if #s == 35 then return\
    \ true end\n  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpd1qzvy9w.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8e9t5u0m.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8e9t5u0m.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i+1] then\n      happy = true\n      break\n  \
    \  end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcg74rqgk.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcg74rqgk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count >= 3 and happy == false then\n    happy = true\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuireddr_.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuireddr_.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local n = 1\n  while n <= #s do\n    if s[n] == s[n+1]\
    \ then\n      n = n + 1\n    else\n      happy = true\n      break\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvgbx8q2l.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvgbx8q2l.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl29qhfxf.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpl29qhfxf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then\n        return false\n    end\n    local\
    \ ok = true\n    for i = 1, n do\n        if s[i] ~= s[i+1] then\n           \
    \ ok = false\n            break\n        end\n    end\n    return ok\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphe3sxwkk.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphe3sxwkk.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n    end\n    count = count + 1\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpom4tsf07.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpom4tsf07.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpxow0y42_.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  else\n    return is_happy(s[1]) and\
    \ is_happy(s[2])\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiuo5_y14.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpiuo5_y14.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmpiuo5_y14.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy\
    \ = false\n      break\n    end\n  end\n  if len > 3 then\n    for i = 1, len\
    \ do\n      if s[i]:lower() ~= s[i+3]:lower() then\n        happy = false\n  \
    \      break\n      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd1pskvfv.lua:18:\
    \ attempt to index field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpd1pskvfv.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrcjm7pe.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzrcjm7pe.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local length = #s\n  if length < 3 then\n    return\
    \ happy\n  end\n  for i = 1, length do\n    if s[i] ~= s[i] then\n      happy\
    \ = false\n      break\n    end\n  end\n  if length == 3 then\n    for i = 1,\
    \ length do\n      if s[i] ~= s[i+1] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvlk99qw.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpyvlk99qw.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #s == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpfejks2tn.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4v5pspoz.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcm__w8gj.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpcm__w8gj.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  for i = 1, len do\n    if s[i+2] ~= s[i+2] then\n      happy = false\n    \
    \  break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  for i = 1, len do\n    if s[i+3] ~= s[i+3] then\n      happy = false\n    \
    \  break\n    end\n  end\n  if happy == false then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj2uxorhb.lua:52:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj2uxorhb.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n    if count == 3 then\n      happy = true\n      count = 0\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiwlu8rq6.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpiwlu8rq6.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = count + 1\n    else\n    \
    \  count = count + 1\n    end\n  end\n  if count >= 3 then\n    for i = 1, count\
    \ do\n      if s[i] ~= s[count + 1] then\n        happy = false\n        break\n\
    \      end\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zjzyr3y.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp6zjzyr3y.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- base case\n \
    \ if #s == 1 then\n    return false\n  end\n  -- base case\n  if #s == 2 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 3 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 4 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 5 then\n    return true\n  end\n  -- base case\n  if #s == 6 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 7 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 8 then\n    return true\n  end\n  -- base case\n\
    \  if #s == 9 then\n    return true\n  end\n  -- base case\n  if #s == 10 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 11 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 12 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 13 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 14 then\n    return true\n  end\n  -- base case\n  if #s == 15 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 16 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 17 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 18 then\n    return true\n  end\n  -- base case\n  if #s == 19 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 20 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 21 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 22 then\n    return true\n  end\n  -- base case\n  if #s ==\
    \ 23 then\n    return true\n  end\n  -- base case\n  if #s == 24 then\n    return\
    \ true\n  end\n  -- base case\n  if #s == 25 then\n    return true\n  end\n  --\
    \ base case\n  if #s == 26 then\n    return true\n  end\n  -- base case\n  if\
    \ #s == 27 then\n    return true\n  end\n  -- base case\n  if #s == 28 then\n\
    \    return true\n  end\n  -- base case\n  if #s == 29 then\n    return true\n\
    \  end\n  -- base case\n  if #s == 30 then\n    return true\n  end\n  -- base\
    \ case\n  if #s == 31 then\n    return true\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7k00njqg.lua:154: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return false end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- recursive case\n  if\
    \ s[2] ~= s[2] then return false end\n  if s[1] == s[1] then return false end\n\
    \  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return false\
    \ end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[2] ~= s[3] then return\
    \ false end\n  if s[1] == s[2] then return false end\n  if s[1] == s[3] then return\
    \ false end\n  if s[2] ~= s[3] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2s8gnm4o.lua:64: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_5qhjdy1.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmp_5qhjdy1.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      break\n    end\n    count = count + 1\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuz3itsvz.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuz3itsvz.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 3 then\n    return is_happy(s:sub(1,2))\
    \ and is_happy(s:sub(2,2)) and is_happy(s:sub(1,2))\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo8di8ijp.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpo8di8ijp.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphx467fc.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpphx467fc.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local len = #s\n    if len < 3 then\n        return\
    \ happy\n    end\n    for i = 1, len do\n        if s[i] ~= s[i+1] then\n    \
    \        happy = true\n            break\n        end\n    end\n    return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitxay6or.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpitxay6or.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then return false end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i] then return false end\n  end\n  for\
    \ i = 1, len do\n    if s[i+1] ~= s[i+2] then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6va71z3.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd6va71z3.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqphohp4b.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqphohp4b.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i] ~= s[i+1] then\n        happy = false\n        break\n      end\n    end\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdh1q8c2l.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpdh1q8c2l.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local length = #s\n  if length < 3 then\n    return\
    \ happy\n  end\n  for i = 1, length do\n    if s[i] ~= s[i] then\n      happy\
    \ = false\n      break\n    end\n  end\n  if happy then\n    return happy\n  end\n\
    \  local happy = false\n  local length = #s\n  for i = 1, length do\n    if s[i]\
    \ ~= s[i+1] then\n      happy = false\n      break\n    end\n  end\n  if happy\
    \ then\n    return happy\n  end\n  local happy = false\n  local length = #s\n\
    \  for i = 1, length do\n    if s[i] ~= s[i-1] then\n      happy = false\n   \
    \   break\n    end\n  end\n  if happy then\n    return happy\n  end\n  local happy\
    \ = false\n  local length = #s\n  for i = 1, length do\n    if s[i] ~= s[i-2]\
    \ then\n      happy = false\n      break\n    end\n  end\n  if happy then\n  \
    \  return happy\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpub23coti.lua:67:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpub23coti.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i+1] then\n      happy = false\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpggqiiydx.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpggqiiydx.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp05pq26o8.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- check each 3 consecutive\
    \ letters\n  for i = 1, #s - 1, 3 do\n    -- check if they are distinct\n    if\
    \ s[i] ~= s[i+1] then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzxxpbo5_.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzxxpbo5_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local len = #s\n    if len < 3 then\n        return\
    \ false\n    end\n    for i = 1, len do\n        if s[i] ~= s[(i+1)%len] then\n\
    \            happy = true\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0q72634k.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp0q72634k.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7g66ygn1.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7g66ygn1.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5_ylwdt1.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5_ylwdt1.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3 and count\
    \ % 3 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7ia1ra8.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph7ia1ra8.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpmhtgpw9t.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- recursive case\n  local\
    \ function helper(l, r)\n    if l == r then return true end\n    if s[l] == s[l+1]\
    \ then helper(l+1, l+2) end\n    if s[r] == s[r-1] then helper(r-1, r-2) end\n\
    \    return false\n  end\n  return helper(1, #s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78ioaenl.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp78ioaenl.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf0b7l3ol.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpf0b7l3ol.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i]:sub(1, 1) == s[i]:sub(2, 2) then\n            count = count + 1\n     \
    \   else\n            if count > 0 then\n                happy = true\n      \
    \      end\n            count = 0\n        end\n    end\n    return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf7b830uo.lua:15:\
    \ attempt to index field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpf7b830uo.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpeiu4r8z5.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = false\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      count = 0\n    end\n    count = count + 1\n\
    \  end\n  if count == 3 then\n    happy = true\n  end\n  return happy\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkax408yz.lua:36:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkax408yz.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpga7xpu_4.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      if s[i]:lower() == s[i+1]:lower() and s[i]:lower()\
    \ == s[i+2]:lower() then\n        happy = true\n      end\n    end\n    count\
    \ = count + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoqkz4u35.lua:17:\
    \ attempt to index field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoqkz4u35.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n      count\
    \ = count + 1\n    end\n  end\n  return count >= 3 and count == #s and #s % 3\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprjmrimej.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmprjmrimej.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then\n        return false\n    end\n    local\
    \ ok = true\n    for i = 1, n do\n        local j = i - 1\n        if s[j] ==\
    \ s[i] then\n            j = j - 1\n        end\n        if j > 0 then\n     \
    \       ok = false\n            break\n        end\n    end\n    return ok\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp72evxla1.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp72evxla1.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if #s - i >= 3 then\n      happy\
    \ = true\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjg2y4gtl.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjg2y4gtl.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if happy then\n    return true\n  end\n  local\
    \ happy2 = true\n  for i = 1, len do\n    if s[i] ~= s[i + 3] then\n      happy2\
    \ = false\n      break\n    end\n  end\n  if happy2 then\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmq5vhgwk.lua:45:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmq5vhgwk.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpr0psauia.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    for i = 1, #s do\n        if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i, i+1) then\n            n = n + 1\n        end\n    end\n    return n >= 3\
    \ and n == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7telz3b.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpc7telz3b.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] == s[i] then\n\
    \            count = count + 1\n        else\n            if count > 3 then\n\
    \                return false\n            end\n            count = 0\n      \
    \  end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd7vwx4pi.lua:29:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd7vwx4pi.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ==\
    \ s[i - 1] and s[i] == s[i - 2] then\n      count = count + 1\n    elseif count\
    \ == 3 then\n      happy = true\n      count = 0\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5o8fy4tc.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5o8fy4tc.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjcba31uq.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local letters = {}\n  for i =\
    \ 1, #s do\n    table.insert(letters, s[i])\n  end\n  -- base case\n  if #letters\
    \ == 3 then return true end\n  -- recursive case\n  local happy = false\n  for\
    \ i = 1, #letters do\n    local letter = letters[i]\n    local next = letters[i+1]\n\
    \    local next2 = letters[i+2]\n    if letter == next and letter == next2 then\n\
    \      happy = false\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3srhcv1.lua:42:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx3srhcv1.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpjmouotgu.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then return false end\n    local ok = true\n \
    \   for i = 1, n do\n        local j = i - 1\n        while j >= 0 and s[j] ==\
    \ s[j+1] do\n            j = j - 1\n        end\n        if j >= 0 then\n    \
    \        ok = false\n            break\n        end\n    end\n    return ok\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp88qahusl.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp88qahusl.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpq9xyixyy.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i+1] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnuaevxfb.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnuaevxfb.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i - 2] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpirnw6qhg.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpirnw6qhg.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] then\n            happy = true\n        end\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpim4q5bg3.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpim4q5bg3.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  return happy and count >= 3 and count % 3 == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv38up8ef.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv38up8ef.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i+1)\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptqgkk1l_.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptqgkk1l_.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i+2] ~= s[i+2] then\n        happy = false\n        break\n      end\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfc10knn7.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpfc10knn7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i+3) == string.sub(s,\
    \ i+1, i+2) then\n      count = count + 1\n    end\n  end\n  return count >= 3\
    \ and count == #s or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptdudezgn.lua:24:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmptdudezgn.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhgef9vc.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxhgef9vc.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  end\n  -- recursive case\n  if #s ==\
    \ 1 then\n    return is_happy(s[1]) and is_happy(s[2])\n  end\n  -- recursive\
    \ case\n  return is_happy(s[1]) and is_happy(s[2]) and is_happy(s[3]) and is_happy(s[4])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu926whjy.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu926whjy.lua:25:\
    \ in function 'candidate'\\n\\t/tmp/tmpu926whjy.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3 and count\
    \ == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7c6kxgh1.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7c6kxgh1.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #s == 32 then return true end\n  -- base case\n  if #s ==\
    \ 33 then return true end\n  -- base case\n  if #s == 34 then return true end\n\
    \  -- base case\n  if #s == 35 then return true end\n  -- base case\n  if #s ==\
    \ 36 then return true end\n  -- base case\n  if #s == 37 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpridtirbo.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzzgt13z4.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpzzgt13z4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local last_letter = s[1]\n  local\
    \ last_letter2 = s[2]\n  local last_letter3 = s[3]\n  local last_letter4 = s[4]\n\
    \  local last_letter5 = s[5]\n  local last_letter6 = s[6]\n  local last_letter7\
    \ = s[7]\n  local last_letter8 = s[8]\n  local last_letter9 = s[9]\n  local last_letter10\
    \ = s[10]\n  local last_letter11 = s[11]\n  local last_letter12 = s[12]\n  local\
    \ last_letter13 = s[13]\n  local last_letter14 = s[14]\n  local last_letter15\
    \ = s[15]\n  local last_letter16 = s[16]\n  local last_letter17 = s[17]\n  local\
    \ last_letter18 = s[18]\n  local last_letter19 = s[19]\n  local last_letter20\
    \ = s[20]\n  local last_letter21 = s[21]\n  local last_letter22 = s[22]\n  local\
    \ last_letter23 = s[23]\n  local last_letter24 = s[24]\n  local last_letter25\
    \ = s[25]\n  local last_letter26 = s[26]\n  local last_letter27 = s[27]\n  local\
    \ last_letter28 = s[28]\n  local last_letter29 = s[29]\n  local last_letter30\
    \ = s[30]\n  local last_letter31 = s[31]\n  local last_letter32 = s[32]\n  local\
    \ last_letter33 = s[33]\n  local last_letter34 = s[34]\n  local last_letter35\
    \ = s[35]\n  local last_letter36 = s[36]\n  local last_letter37 = s[37]\n  local\
    \ last_letter38 = s[38]\n  local last_letter39 = s[39]\n  local last_letter40\
    \ = s[40]\n  local last_letter41 = s[41]\n  local last_letter42 = s[42]\n  local\
    \ last_letter43 = s[43]\n  local last_letter44 = s[44]\n  local last_letter45\
    \ = s[45]\n  local last_letter46 = s[46]\n  local last_letter47 = s[47]\n  local\
    \ last_letter48 = s[48]\n  local last_letter49 = s[49]\n  local last_letter50\
    \ = s[50]\n  local last_letter51 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4qs5jdnt.lua:68: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local first_letter = s[1]\n \
    \ local second_letter = s[2]\n  local third_letter = s[3]\n  if first_letter ==\
    \ second_letter or first_letter == third_letter then\n    return is_happy(s[4])\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7w4glev3.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmp7w4glev3.lua:32: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local n = #s\n  if n < 3 then return false end\n  local ok = true\n  for i\
    \ = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n  return ok\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjt87lg1q.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjt87lg1q.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp51erv3dj.lua:13: function arguments expected near '='\\\
    n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local n = #s\n    for i = 1, n do\n        if s[i]\
    \ ~= s[i - 1] then\n            happy = true\n            break\n        end\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3f1ruv1m.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3f1ruv1m.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s,i,i+1) ~= string.sub(s,i,i+1)\
    \ then\n      happy = false\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9whvhfe.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpo9whvhfe.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8swg48bi.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8swg48bi.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n      count = count +\
    \ 1\n    end\n  end\n  if count >= 3 and count == #s - 3 then\n    happy = true\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp2ft6hir.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpp2ft6hir.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\n  -- recursive case\n\
    \  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i+1] then\n     \
    \ happy = true\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3o7p377_.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3o7p377_.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpcou18r6f.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n     \
    \       break\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxtxnsy8f.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpxtxnsy8f.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      if s[i - 1] == s[i - 2] and s[i - 2] == s[i - 3] then\n      \
    \  happy = true\n      end\n      count = 0\n    end\n    count = count + 1\n\
    \  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0jhsqp66.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0jhsqp66.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      count = i\n    else\n      count =\
    \ count + 1\n    end\n  end\n  return happy and count >= 3 and count == #s - 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48me0i2j.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp48me0i2j.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    local happy = false\n    for i = 1, #s do\n        if n\
    \ == 1 then\n            if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i\
    \ - 3] then\n                happy = false\n            end\n        elseif n\
    \ == 2 then\n            if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n      \
    \          happy = false\n            end\n        elseif n == 3 then\n      \
    \      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i - 3] then\n    \
    \            happy = false\n            end\n        end\n        n = n + 1\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx1mta_zo.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx1mta_zo.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpfc1dt_k3.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i + 3] ~= s[i + 3] then\n        happy = false\n        break\n      end\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphegs1frc.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmphegs1frc.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpbasnziev.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqykhybzi.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpqykhybzi.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4es17hp.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpf4es17hp.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i - 2] then\n\
    \            count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr5u0bvdv.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpr5u0bvdv.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i+1] then\n      happy = false\n\
    \      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq728e15_.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpq728e15_.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if s[1] == s[2] and s[2] == s[3] then\
    \ return true end\n  -- recursive case\n  return is_happy(s:sub(3)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(s:sub(1))\
    \ or is_happy(s:sub(2)) or is_happy(s:sub(1)) or is_happy(s:sub(2)) or is_happy(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp41r1uh9r.lua:20: ')' expected (to close '(' at line 19)\
    \ near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[count] then\n            happy = true\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return happy and count >= 3\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpek3ewqwd.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpek3ewqwd.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoml8gon5.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpoml8gon5.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return false end\n\
    \  -- base case\n  if #s == 1 then return false end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return false end\n  -- base case\n  if #s == 4 then return false end\n\
    \  -- base case\n  if #s == 5 then return false end\n  -- base case\n  if #s ==\
    \ 6 then return false end\n  -- base case\n  if #s == 7 then return false end\n\
    \  -- base case\n  if #s == 8 then return false end\n  -- base case\n  if #s ==\
    \ 9 then return false end\n  -- base case\n  if #s == 10 then return false end\n\
    \  -- base case\n  if #s == 11 then return false end\n  -- base case\n  if #s\
    \ == 12 then return false end\n  -- base case\n  if #s == 13 then return false\
    \ end\n  -- base case\n  if #s == 14 then return false end\n  -- base case\n \
    \ if #s == 15 then return false end\n  -- base case\n  if #s == 16 then return\
    \ false end\n  -- base case\n  if #s == 17 then return false end\n  -- base case\n\
    \  if #s == 18 then return false end\n  -- base case\n  if #s == 19 then return\
    \ false end\n  -- base case\n  if #s == 20 then return false end\n  -- base case\n\
    \  if #s == 21 then return false end\n  -- base case\n  if #s == 22 then return\
    \ false end\n  -- base case\n  if #s == 23 then return false end\n  -- base case\n\
    \  if #s == 24 then return false end\n  -- base case\n  if #s == 25 then return\
    \ false end\n  -- base case\n  if #s == 26 then return false end\n  -- base case\n\
    \  if #s == 27 then return false end\n  -- base case\n  if #s == 28 then return\
    \ false end\n  -- base case\n  if #s == 29 then return false end\n  -- base case\n\
    \  if #s == 30 then return false end\n  -- base case\n  if #s == 31 then return\
    \ false end\n  -- base case\n  if #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp22mser1w.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp6zusg2it.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpn771enap.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 1 then return true end\n\
    \  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpzh6i8m78.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 2 then\n    return is_happy(s[1])\
    \ and is_happy(s[2]) and is_happy(s[3])\n  else\n    return is_happy(s[1]) or\
    \ is_happy(s[2]) or is_happy(s[3])\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp__fwru3_.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp__fwru3_.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmp__fwru3_.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpm147msqb.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- check each letter\n \
    \ for i = 1, #s do\n    -- check if current letter is repeated\n    if s[i] ==\
    \ s[i - 1] or s[i] == s[i - 2] or s[i] == s[i - 3] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpadzo8zxa.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpadzo8zxa.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then return false end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i] then return false end\n  end\n  for\
    \ i = 1, len do\n    if s[i] ~= s[i - 1] then return false end\n  end\n  for i\
    \ = 1, len do\n    if s[i] ~= s[i + 1] then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_86zj2l.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpu_86zj2l.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] and s[i] ~= s[i - 2] then\n            count = count + 1\n\
    \        end\n        if count == 3 then\n            happy = true\n        end\n\
    \    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4dlk2cdo.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4dlk2cdo.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy\
    \ = false\n      break\n    end\n  end\n  if happy then\n    return true\n  end\n\
    \  local happy = false\n  local len = #s\n  for i = 1, len do\n    if s[i]:lower()\
    \ ~= s[i]:lower() then\n      happy = false\n      break\n    end\n  end\n  if\
    \ happy then\n    return true\n  end\n  local happy = false\n  local len = #s\n\
    \  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy =\
    \ false\n      break\n    end\n  end\n  if happy then\n    return true\n  end\n\
    \  local happy = false\n  local len = #s\n  for i = 1, len do\n    if s[i]:lower()\
    \ ~= s[i]:lower() then\n      happy = false\n      break\n    end\n  end\n  if\
    \ happy then\n    return true\n  end\n  local happy = false\n  local len = #s\n\
    \  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy =\
    \ false\n      break\n    end\n  end\n  if happy then\n    return true\n  end\n\
    \  local happy = false\n  local len = #s\n  for i = 1, len do\n    if s[i]:lower()\
    \ ~= s[i]:lower() then\n      happy = false\n      break\n    end\n  end\n  if\
    \ happy then\n    return true\n  end\n  local happy = false\n  local len = #s\n\
    \  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy =\
    \ false\n      break\n    end\n  end\n  if happy then\n    return true\n  end\n\
    \  local happy = false\n  local len = #s\n  for i = 1, len do\n    if s[i]:lower()\
    \ ~= s[i]:lower() then\n      happy = false\n      break\n    end\n  end\n  if\
    \ happy then\n    return true\n  end\n  local happy = false\n  local len = #s\n\
    \  for i = 1, len do\n    if s[i]:lower() ~= s[i]:lower() then\n      happy =\
    \ false\n      break\n    end\n  end\n  if happy then\n    return true\n  end\n\
    \  local happy = false\n  local len = #s\n  for i = 1, len do\n    if s[i]:lower()\
    \ ~= s[i]:lower() then\n      happy = false\n      break\n    end\n  end\n  if\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmptnvqe5zm.lua:123: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppo1b7k1o.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local n = 1\n    local happy = false\n    for i = 1, #s do\n        if n\
    \ == 1 then\n            if s[i] ~= s[i] then\n                happy = false\n\
    \            end\n        else\n            if s[i] ~= s[n-i] then\n         \
    \       happy = false\n            end\n        end\n        n = n + 1\n    end\n\
    \    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppi7468ls.lua:34:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppi7468ls.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            happy = true\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph4sdbnxi.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph4sdbnxi.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return false end\n\
    \  -- recursive case\n  local first_letter = s[1]\n  local second_letter = s[2]\n\
    \  local third_letter = s[3]\n  if first_letter ~= second_letter or second_letter\
    \ ~= third_letter then\n    return false\n  end\n  return is_happy(s[3])\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqq54k0an.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpqq54k0an.lua:33: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3]\
    \ then\n      happy = true\n      break\n    end\n  end\n  return happy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbtxsisze.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbtxsisze.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6y0tvitw.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmp6y0tvitw.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp65vdg0o0.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmp65vdg0o0.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):find(string.char(string.byte(s:sub(1, 3)):gsub(\"\
    %z\", \"\")))\n  return happy ~= nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprkdqy6dz.lua:12:\
    \ attempt to index a number value\\nstack traceback:\\n\\t/tmp/tmprkdqy6dz.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- recursive case\n\
    \  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n   \
    \   happy = true\n      break\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7cw8f34d.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7cw8f34d.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i - 1] == s[i] then\n\
    \            count = count + 1\n        else\n            if count > 0 then\n\
    \                return false\n            end\n            count = 0\n      \
    \  end\n    end\n    return count >= 3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ga85ybq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3ga85ybq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    count = count\
    \ + 1\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc61eccvw.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpc61eccvw.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local n = #s\n  if n < 3 then\n    return happy\n  end\n\
    \  local i = 0\n  local j = 1\n  while i < n do\n    if s[i] ~= s[j] then\n  \
    \    happy = false\n      break\n    end\n    i = i + 1\n    j = j + 1\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpannigv_u.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpannigv_u.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[count] then\n\
    \            count = count + 1\n        else\n            count = count + 1\n\
    \        end\n    end\n    return count >= 3 and count == #s or nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99evcv3b.lua:26:\
    \ expected: false, actual: nil\\nstack traceback:\\n\\t/tmp/tmp99evcv3b.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[1] ~= s[1] then return false end\n  if s[2] ~= s[2] then return\
    \ false end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbqzmyxga.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpbqzmyxga.lua:28: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 1 then return true end\n  -- base case\n  if #s ==\
    \ 0 then return false end\n  -- base case\n  if #s == 4 then return true end\n\
    \  -- base case\n  if #s == 5 then return true end\n  -- base case\n  if #s ==\
    \ 6 then return true end\n  -- base case\n  if #s == 7 then return true end\n\
    \  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if #s ==\
    \ 9 then return true end\n  -- base case\n  if #s == 10 then return true end\n\
    \  -- base case\n  if #s == 11 then return true end\n  -- base case\n  if #s ==\
    \ 12 then return true end\n  -- base case\n  if #s == 13 then return true end\n\
    \  -- base case\n  if #s == 14 then return true end\n  -- base case\n  if #s ==\
    \ 15 then return true end\n  -- base case\n  if #s == 16 then return true end\n\
    \  -- base case\n  if #s == 17 then return true end\n  -- base case\n  if #s ==\
    \ 18 then return true end\n  -- base case\n  if #s == 19 then return true end\n\
    \  -- base case\n  if #s == 20 then return true end\n  -- base case\n  if #s ==\
    \ 21 then return true end\n  -- base case\n  if #s == 22 then return true end\n\
    \  -- base case\n  if #s == 23 then return true end\n  -- base case\n  if #s ==\
    \ 24 then return true end\n  -- base case\n  if #s == 25 then return true end\n\
    \  -- base case\n  if #s == 26 then return true end\n  -- base case\n  if #s ==\
    \ 27 then return true end\n  -- base case\n  if #s == 28 then return true end\n\
    \  -- base case\n  if #s == 29 then return true end\n  -- base case\n  if #s ==\
    \ 30 then return true end\n  -- base case\n  if #s == 31 then return true end\n\
    \  -- base case\n  if #s == 32 then return true end\n  -- base case\n  if #s ==\
    \ 33 then return true end\n  -- base case\n  if #s == 34 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpsd7e4ksj.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] then\n\
    \            happy = true\n            break\n        end\n    end\n    return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsp4c3web.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsp4c3web.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then happy = false end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzyv9iqt.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvzyv9iqt.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[i - 1] or s[i] ~= s[i - 2] then\n      count = count + 1\n      if count >\
    \ 3 then\n        happy = true\n        break\n      end\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0hh_0yy.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpp0hh_0yy.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if #s == 3 then\n    return is_happy(s:sub(1,2))\
    \ and is_happy(s:sub(2,2)) and is_happy(s:sub(1,2))\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnywpf60n.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnywpf60n.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[2] ~= s[2] then return false end\n  if s[2] ~= s[2] then return\
    \ false end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihdyplzp.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpihdyplzp.lua:28: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and\
    \ s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n            happy = true\n     \
    \   end\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg1cdn_wl.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpg1cdn_wl.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpqb1d94ho.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpmph90yht.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if #s >= 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count]\
    \ then\n        happy = false\n        break\n      end\n      count = count +\
    \ 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyc_qcgi2.lua:38:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpyc_qcgi2.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[1] == s[1] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  return is_happy(s[3])\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc_srb_7o.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpc_srb_7o.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3t8l8ho.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmpx3t8l8ho.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy9uc_p73.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpy9uc_p73.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[2] then return false\
    \ end\n  if s[1] == s[1] then return false end\n  if s[1] == s[2] then return\
    \ false end\n  if s[1] == s[3] then return false end\n  if s[1] == s[4] then return\
    \ false end\n  if s[1] == s[5] then return false end\n  if s[1] == s[6] then return\
    \ false end\n  if s[1] == s[7] then return false end\n  if s[1] == s[8] then return\
    \ false end\n  if s[1] == s[9] then return false end\n  if s[1] == s[10] then\
    \ return false end\n  if s[1] == s[11] then return false end\n  if s[1] == s[12]\
    \ then return false end\n  if s[1] == s[13] then return false end\n  if s[1] ==\
    \ s[14] then return false end\n  if s[1] == s[15] then return false end\n  if\
    \ s[1] == s[16] then return false end\n  if s[1] == s[17] then return false end\n\
    \  if s[1] == s[18] then return false end\n  if s[1] == s[19] then return false\
    \ end\n  if s[1] == s[20] then return false end\n  if s[1] == s[21] then return\
    \ false end\n  if s[1] == s[22] then return false end\n  if s[1] == s[23] then\
    \ return false end\n  if s[1] == s[24] then return false end\n  if s[1] == s[25]\
    \ then return false end\n  if s[1] == s[26] then return false end\n  if s[1] ==\
    \ s[27] then return false end\n  if s[1] == s[28] then return false end\n  if\
    \ s[1] == s[29] then return false end\n  if s[1] == s[30] then return false end\n\
    \  if s[1] == s[31] then return false end\n  if s[1] == s[32] then return false\
    \ end\n  if s[1] == s[33] then return false end\n  if s[1] == s[34] then return\
    \ false end\n  if s[1] == s[35] then return false end\n  if s[1] == s[36] then\
    \ return false end\n  if s[1] == s[37] then return false end\n  if s[1] == s[38]\
    \ then return false end\n  if s[1] == s[39] then return false end\n  if s[1] ==\
    \ s[40] then return false end\n  if s[1] == s[41] then return false end\n  if\
    \ s[1] == s[42] then return false end\n  if s[1] == s[43] then return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpa57jkmo7.lua:61: 'end' expected (to close 'if' at line\
    \ 60) near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then return true end\n  -- base case\n  if #s ==\
    \ 1 then return false end\n  -- base case\n  if #s == 2 then return true end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- base case\n  if #s ==\
    \ 4 then return true end\n  -- base case\n  if #s == 5 then return true end\n\
    \  -- base case\n  if #s == 6 then return true end\n  -- base case\n  if #s ==\
    \ 7 then return true end\n  -- base case\n  if #s == 8 then return true end\n\
    \  -- base case\n  if #s == 9 then return true end\n  -- base case\n  if #s ==\
    \ 10 then return true end\n  -- base case\n  if #s == 11 then return true end\n\
    \  -- base case\n  if #s == 12 then return true end\n  -- base case\n  if #s ==\
    \ 13 then return true end\n  -- base case\n  if #s == 14 then return true end\n\
    \  -- base case\n  if #s == 15 then return true end\n  -- base case\n  if #s ==\
    \ 16 then return true end\n  -- base case\n  if #s == 17 then return true end\n\
    \  -- base case\n  if #s == 18 then return true end\n  -- base case\n  if #s ==\
    \ 19 then return true end\n  -- base case\n  if #s == 20 then return true end\n\
    \  -- base case\n  if #s == 21 then return true end\n  -- base case\n  if #s ==\
    \ 22 then return true end\n  -- base case\n  if #s == 23 then return true end\n\
    \  -- base case\n  if #s == 24 then return true end\n  -- base case\n  if #s ==\
    \ 25 then return true end\n  -- base case\n  if #s == 26 then return true end\n\
    \  -- base case\n  if #s == 27 then return true end\n  -- base case\n  if #s ==\
    \ 28 then return true end\n  -- base case\n  if #s == 29 then return true end\n\
    \  -- base case\n  if #s == 30 then return true end\n  -- base case\n  if #s ==\
    \ 31 then return true end\n  -- base case\n  if #s == 32 then return true end\n\
    \  -- base case\n  if #s == 33 then return true end\n  -- base case\n  if #s ==\
    \ 34 then return true end\n  -- base case\n  if #s == 35 then return true end\n\
    \  -- base case\n  if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpf8i_inlh.lua:86: 'then' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local happy = false\n    local len = #s\n    if len < 3 then\n        return\
    \ happy\n    end\n    for i = 1, len do\n        if s[i] ~= s[i+1] then\n    \
    \        happy = true\n        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp94vi1y5k.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp94vi1y5k.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ubggvi6.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5ubggvi6.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9yxekpsc.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9yxekpsc.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+1) ~= string.sub(s,\
    \ i+1, i+2) then\n      happy = true\n      break\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq94xr526.lua:25:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpq94xr526.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3z4bdpqa.lua:28: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 0 then\n      count = count+1\n    elseif count == 1 then\n      count = count+1\n\
    \    elseif count == 2 then\n      count = count+1\n    elseif count == 3 then\n\
    \      count = count+1\n    elseif count == 4 then\n      count = count+1\n  \
    \  elseif count == 5 then\n      count = count+1\n    elseif count == 6 then\n\
    \      count = count+1\n    elseif count == 7 then\n      count = count+1\n  \
    \  elseif count == 8 then\n      count = count+1\n    elseif count == 9 then\n\
    \      count = count+1\n    elseif count == 10 then\n      count = count+1\n \
    \   elseif count == 11 then\n      count = count+1\n    elseif count == 12 then\n\
    \      count = count+1\n    elseif count == 13 then\n      count = count+1\n \
    \   elseif count == 14 then\n      count = count+1\n    elseif count == 15 then\n\
    \      count = count+1\n    elseif count == 16 then\n      count = count+1\n \
    \   elseif count == 17 then\n      count = count+1\n    elseif count == 18 then\n\
    \      count = count+1\n    elseif count == 19 then\n      count = count+1\n \
    \   elseif count == 20 then\n      count = count+1\n    elseif count == 21 then\n\
    \      count = count+1\n    elseif count == 22 then\n      count = count+1\n \
    \   elseif count == 23 then\n      count = count+1\n    elseif count == 24 then\n\
    \      count = count+1\n    elseif count == 25 then\n      count = count+1\n \
    \   elseif count == 26 then\n      count = count+1\n    elseif count == 27 then\n\
    \      count = count+1\n    elseif count == 28 then\n      count = count+1\n \
    \   elseif count == 29 then\n      count = count+1\n    elseif count == 30 then\n\
    \      count = count+1\n    elseif count == 31 then\n      count = count+1\n \
    \   elseif count == 32 then\n      count = count+1\n    elseif count == 33 then\n\
    \      count = count+1\n    elseif count == 34 then\n      count = count+1\n \
    \   elseif count == 35 then\n      count = count+1\n    elseif count == 36 then\n\
    \      count = count+1\n    elseif count == 37 then\n      count = count+1\n \
    \   elseif count == 38 then\n      count = count+1\n    elseif count == 39 then\n\
    \      count = count+1\n    elseif count == 40 then\n      count = count+1\n \
    \   elseif count == 41 then\n      count = count+1\n    elseif count == 42 then\n\
    \      count = count+1\n    elseif count == 43 then\n      count = count+1\n \
    \   elseif count == 44 then\n      \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpekt5lqqy.lua:119: 'end' expected (to close 'if' at line\
    \ 15) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphckj9sqd.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  for i = 1, len do\n    if s[i] ~= s[i] then\n      happy = false\n \
    \     break\n    end\n  end\n  if len > 3 then\n    for i = 1, len do\n      if\
    \ s[i+i] ~= s[i+i] then\n        happy = false\n        break\n      end\n   \
    \ end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0fzkti7.lua:39:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj0fzkti7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if s[i] ~=\
    \ s[count] then\n      happy = false\n      break\n    end\n    count = count\
    \ + 1\n  end\n  if count == 3 then\n    for i = 1, #s do\n      if s[i] ~= s[count\
    \ + 1] then\n        happy = false\n        break\n      end\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpggpshbz8.lua:37:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpggpshbz8.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[(i + 1) % #s] then happy = true end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjd93x3m2.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjd93x3m2.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = not happy\n      count = 0\n    end\n\
    \    if s[i] ~= s[count] then\n      happy = not happy\n      count = count +\
    \ 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4hlbvxmf.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4hlbvxmf.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = true\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = false\n    end\n    count = count + 1\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv_s0_uqs.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpv_s0_uqs.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = s:sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1, 3):sub(1,\
    \ 3):sub(1, 3):sub(1, 3):\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpdgeyvy4m.lua:13: function arguments expected near '='\\\
    n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- Your code here\n  local happy = false\n  local count = 0\n  for i = 1, #s\
    \ do\n    if count == 3 then\n      happy = not happy\n      count = 0\n    end\n\
    \    if s[i] ~= s[count] then\n      happy = not happy\n      count = count +\
    \ 1\n    end\n  end\n  return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2zhzafot.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp2zhzafot.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  for i = 1, #s do\n    if string.sub(s, i, i+3) == string.sub(s,\
    \ i, i+3) then\n      happy = false\n      break\n    end\n  end\n  return happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7rt8bhmz.lua:27:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7rt8bhmz.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  if s[2] ~= s[3] then return false\
    \ end\n  return is_happy(s[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzk6hhe3.lua:13:\
    \ attempt to get length of local 's' (a nil value)\\nstack traceback:\\n\\t(tail\
    \ call): ?\\n\\t/tmp/tmppzk6hhe3.lua:26: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i+1] then\n      happy = true\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjq6v82b0.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjq6v82b0.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        if s[i] ~= s[i - 1] and s[i]\
    \ ~= s[i - 2] then\n            count = count + 1\n        end\n    end\n    return\
    \ count >= 3 and count == #s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3d91nna4.lua:26:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp3d91nna4.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3qi1sy8j.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local len = #s\n  if len < 3 then\n    return happy\n\
    \  end\n  local last_char = {}\n  for i = 1, len do\n    local char = s[i]\n \
    \   if last_char[char] ~= nil then\n      happy = false\n      break\n    end\n\
    \    last_char[char] = true\n  end\n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpezq1om32.lua:24:\
    \ table index is nil\\nstack traceback:\\n\\t/tmp/tmpezq1om32.lua:34: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s <= 3 then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3q4kjww1.lua:30: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s ==\
    \ 3 then return true end\n  -- recursive case\n  local happy = false\n  for i\
    \ = 1, #s do\n    if s[i] ~= s[i - 1] then\n      happy = true\n    end\n  end\n\
    \  return happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj94gn60z.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj94gn60z.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\n-- is_happy(a) => False\n\
    -- is_happy(aa) => False\n-- is_happy(abcd) => True\n-- is_happy(aabb) => False\n\
    -- is_happy(adb) => True\n-- is_happy(xyy) => False\nlocal function is_happy(s)\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      happy = not happy\n      count = 0\n    end\n    if s[i] ~= s[count]\
    \ then\n      happy = not happy\n      count = count + 1\n    end\n  end\n  return\
    \ happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpywi2tzop.lua:32:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpywi2tzop.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
