name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  -- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n--\
  \ (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest = numbers[1]\n  local largest = numbers[1]\n  for\
    \ i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = math.inf\n  local smallest_number\
    \ = nil\n  local largest_distance = math.inf\n  local largest_number = nil\n \
    \ for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance > largest_distance then\n      largest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i]\n\
    \    if smallest > new_smallest then\n      largest, smallest = new_largest, new_smallest\n\
    \    elseif largest < new_largest then\n      largest, smallest = new_smallest,\
    \ new_largest\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance > math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local dist = math.abs(numbers[i] - smallest)\n    if dist\
    \ < smallest then\n      smallest = dist\n    end\n    dist = math.abs(numbers[i]\
    \ - largest)\n    if dist < largest then\n      largest = dist\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local second_smallest_distance\n  local second_smallest_index\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ numbers[1])\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = number\n    end\n    if distance < second_smallest_distance\
    \ then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = number\n    end\n  end\n  return smallest_index, second_smallest_index\nend",
  "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - smallest)\n    if distance <\
    \ smallest then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_number = nil\n  local largest_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_element\n  local second_smallest_distance\n  local second_smallest_element\n\
    \  for _, element in ipairs(numbers) do\n    local distance = math.abs(element\
    \ - smallest_element)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_element = element\n    end\n    if smallest_distance\
    \ > second_smallest_distance then\n      second_smallest_distance = smallest_distance\n\
    \      second_smallest_element = smallest_element\n    end\n  end\n  return smallest_element,\
    \ second_smallest_element\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    end\n\
    \    if number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < smallest_number then\n      smallest_number = numbers[i]\n\
    \      smallest_index = i\n    elseif numbers[i] < second_smallest_number then\n\
    \      second_smallest_number = numbers[i]\n      second_smallest_index = i\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local d = math.abs(numbers[i] - largest)\n    if\
    \ d < smallest then\n      smallest, largest = d, numbers[i]\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_index\n  local smallest_number",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local diff = numbers[i] - smallest\n    if diff < smallest then\n  \
    \    smallest = diff\n    end\n    diff = numbers[i] - largest\n    if diff >\
    \ largest then\n      largest = diff\n    end\n  end\n  return smallest, largest\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
