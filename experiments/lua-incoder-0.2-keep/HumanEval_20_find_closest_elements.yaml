name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  -- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n--\
  \ (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest = numbers[1]\n  local largest = numbers[1]\n  for\
    \ i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = math.inf\n  local smallest_number\
    \ = nil\n  local largest_distance = math.inf\n  local largest_number = nil\n \
    \ for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance > largest_distance then\n      largest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i]\n\
    \    if smallest > new_smallest then\n      largest, smallest = new_largest, new_smallest\n\
    \    elseif largest < new_largest then\n      largest, smallest = new_smallest,\
    \ new_largest\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance > math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local dist = math.abs(numbers[i] - smallest)\n    if dist\
    \ < smallest then\n      smallest = dist\n    end\n    dist = math.abs(numbers[i]\
    \ - largest)\n    if dist < largest then\n      largest = dist\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local second_smallest_distance\n  local second_smallest_index\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ numbers[1])\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = number\n    end\n    if distance < second_smallest_distance\
    \ then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = number\n    end\n  end\n  return smallest_index, second_smallest_index\nend",
  "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - smallest)\n    if distance <\
    \ smallest then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_number = nil\n  local largest_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_element\n  local second_smallest_distance\n  local second_smallest_element\n\
    \  for _, element in ipairs(numbers) do\n    local distance = math.abs(element\
    \ - smallest_element)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_element = element\n    end\n    if smallest_distance\
    \ > second_smallest_distance then\n      second_smallest_distance = smallest_distance\n\
    \      second_smallest_element = smallest_element\n    end\n  end\n  return smallest_element,\
    \ second_smallest_element\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    end\n\
    \    if number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < smallest_number then\n      smallest_number = numbers[i]\n\
    \      smallest_index = i\n    elseif numbers[i] < second_smallest_number then\n\
    \      second_smallest_number = numbers[i]\n      second_smallest_index = i\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local d = math.abs(numbers[i] - largest)\n    if\
    \ d < smallest then\n      smallest, largest = d, numbers[i]\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_index\n  local smallest_number",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local diff = numbers[i] - smallest\n    if diff < smallest then\n  \
    \    smallest = diff\n    end\n    diff = numbers[i] - largest\n    if diff >\
    \ largest then\n      largest = diff\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_index\n  local largest_distance = math.inf\n  local largest_index\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - numbers[1])\n    if smallest_distance > distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n    end\n    if largest_distance <\
    \ distance then\n      largest_distance = distance\n      largest_index = index\n\
    \    end\n  end\n  return numbers[smallest_index], numbers[largest_index]\nend",
  "  local smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if numbers[i] < smallest then\n      smallest = numbers[i]\n\
    \    end\n    if numbers[i] > largest then\n      largest = numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - smallest)\n    if distance < smallest then\n      smallest = distance\n  \
    \  elseif distance > largest then\n      largest = distance\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local smallest_number", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local diff = math.abs(numbers[i]\
    \ - largest)\n    if diff < smallest then\n      smallest, largest = diff, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_index\n  local second_smallest_distance\n  local\
    \ second_smallest_index", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i]\n\
    \    if smallest > new_smallest then\n      smallest, largest = new_smallest,\
    \ new_largest\n    elseif largest < new_largest then\n      smallest, largest\
    \ = new_largest, new_smallest\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ second_smallest_number\n  for _, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    if smallest_distance > math.inf then\n      second_smallest_number = smallest_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number = nil\n  local largest_distance = math.inf\n  local largest_number\
    \ = nil", "  local smallest_distance = math.inf\n  local smallest_number = nil\n\
    \  local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance == math.inf then\n      break\n    end\n   \
    \ if smallest_number ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        smallest_distance = distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local distance = math.abs(numbers[i] - largest)\n\
    \    if distance < smallest then\n      smallest, largest = distance, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local diff = numbers[i]\
    \ - smallest\n    if diff < smallest then\n      smallest = diff\n    elseif diff\
    \ > largest then\n      largest = diff\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        smallest_distance = distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      largest = current\n    elseif current >\
    \ largest then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local dist = math.abs(numbers[i] - largest)\n \
    \   if dist < smallest then\n      smallest, largest = dist, numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n  local\
    \ largest = numbers[1]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - smallest)\n    if distance < smallest then\n      smallest = distance\n  \
    \  end\n    distance = math.abs(numbers[i] - largest)\n    if distance < largest\
    \ then\n      largest = distance\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number = nil\n \
    \ local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance > math.inf then\n      second_smallest_number\
    \ = smallest_number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ or distance < smallest_distance then\n      smallest_distance = distance\n \
    \     smallest_number = number\n    end\n    local second_distance = math.abs(number\
    \ - second_smallest_number)\n    if second_distance < smallest_distance then\n\
    \      smallest_distance = second_distance\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local min_distance = nil\n  local min_number = nil\n  local\
    \ max_number = nil\n  for _, number in ipairs(numbers) do\n    if min_distance\
    \ == nil then\n      min_distance = number\n      min_number = number\n      max_number\
    \ = number\n    else\n      local distance = math.abs(number - min_number)\n \
    \     if distance < min_distance then\n        min_distance = distance\n     \
    \   min_number = number\n      elseif distance > max_distance then\n        max_distance\
    \ = distance\n        max_number = number\n      end\n    end\n  end\n  return\
    \ min_number, max_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number\n  local second_smallest_number\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    if smallest_distance == math.inf then\n      break\n\
    \    end\n    if number < smallest_number then\n      second_smallest_number =\
    \ smallest_number\n      smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local dist = math.abs(numbers[i] - largest)\n \
    \   if dist < smallest then\n      smallest, largest = dist, numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    if\
    \ numbers[i] < smallest_number then\n      smallest_number = numbers[i]\n    end\n\
    \    if numbers[i] < second_smallest_number then\n      second_smallest_number\
    \ = numbers[i]\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number = nil\n \
    \ local largest_distance = math.inf\n  local largest_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    local distance = math.abs(number\
    \ - largest_number)\n    if distance > largest_distance then\n      largest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    end\n    diff = numbers[i] - largest\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - smallest)\n    if dist < smallest then\n\
    \      smallest = dist\n    end\n    dist = math.abs(numbers[i] - largest)\n \
    \   if dist < largest then\n      largest = dist\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local dist = math.abs(numbers[i] - smallest)\n\
    \    if dist < smallest then\n      smallest = dist\n    end\n    dist = math.abs(numbers[i]\
    \ - largest)\n    if dist < largest then\n      largest = dist\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ < smallest_number then\n      smallest_number = numbers[i]\n    end\n    if\
    \ numbers[i] < second_smallest_number then\n      second_smallest_number = numbers[i]\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] < smallest then\n      smallest = numbers[i]\n    end\n   \
    \ if numbers[i] > largest then\n      largest = numbers[i]\n    end\n  end\n \
    \ return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local smallest_number\n  local second_smallest_index\n  local\
    \ second_smallest_number\n  for index, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = index\n   \
    \   smallest_number = number\n    end\n    if smallest_distance == math.inf then\n\
    \      break\n    end\n  end\n  if smallest_distance == math.inf then\n    return\
    \ nil\n  end\n  local second_smallest_distance = math.inf\n  local second_smallest_index\n\
    \  local second_smallest_number\n  for index, number in ipairs(numbers) do\n \
    \   local distance = math.abs(number - second_smallest_number)\n    if distance\
    \ < second_smallest_distance then\n      second_smallest_distance = distance\n\
    \      second_smallest_index = index\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    if numbers[i] < smallest then\n      smallest = numbers[i]\n\
    \    elseif numbers[i] > largest then\n      largest = numbers[i]\n    end\n \
    \ end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n    if\
    \ current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number = nil\n \
    \ local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      largest_number = number\n  \
    \  end\n  end\n  return smallest_number, largest_number\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_index\n  local smallest_number", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < smallest_number then\n      smallest_number = numbers[i]\n\
    \    end\n    if numbers[i] < second_smallest_number then\n      second_smallest_number\
    \ = numbers[i]\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_element\n  local second_smallest_distance\n  local\
    \ second_smallest_element\n  for _, element in ipairs(numbers) do\n    local distance\
    \ = math.abs(element - smallest_element)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_element = element\n\
    \    end\n    if distance < second_smallest_distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_element = element\n    end\n  end\n  return\
    \ smallest_element, second_smallest_element\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n    if\
    \ current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current_number = numbers[i]\n    if current_number < smallest_number then\n\
    \      smallest_number = current_number\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local dist =\
    \ math.abs(numbers[i] - smallest)\n    if dist < smallest then\n      smallest\
    \ = dist\n      largest = numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local min_distance\
    \ = math.inf\n  local min_number = nil\n  local max_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - min_number)\n\
    \    if distance < min_distance then\n      min_distance = distance\n      min_number\
    \ = number\n    end\n    distance = math.abs(number - max_number)\n    if distance\
    \ < min_distance then\n      min_distance = distance\n      max_number = number\n\
    \    end\n  end\n  return min_number, max_number\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      break\n    end\n  end\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - second_smallest_number)\n    if distance\
    \ < smallest_distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ or distance < smallest_distance then\n      smallest_distance = distance\n \
    \     smallest_number = number\n    end\n    if smallest_number ~= nil then\n\
    \      local second_distance = math.abs(number - second_smallest_number)\n   \
    \   if second_distance < smallest_distance then\n        smallest_distance = second_distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n      smallest_distance\
    \ = math.inf\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    if diff > largest then\n      largest\
    \ = diff\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_index\n  local smallest_number\n  local largest_index\n\
    \  local largest_number\n  for i, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_index = i\n      smallest_number\
    \ = number\n    end\n    if distance > largest_distance then\n      largest_distance\
    \ = distance\n      largest_index = i\n      largest_number = number\n    end\n\
    \  end\n  return smallest_number, largest_number\nend", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local diff = numbers[i]\
    \ - smallest\n    if diff < smallest then\n      smallest = diff\n    elseif diff\
    \ > largest then\n      largest = diff\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_distance\n\
    \  local second_smallest_index\n  for i, v in ipairs(numbers) do\n    local distance\
    \ = math.abs(v)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = i\n    end\n    if distance < second_smallest_distance\
    \ then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend", " \
    \ local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest\
    \ then\n      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if number > largest_number then\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local distance = math.abs(numbers[i] - smallest)\n    if\
    \ smallest == largest then\n      largest = numbers[i]\n    elseif distance <\
    \ smallest then\n      largest = numbers[i]\n    end\n    smallest = numbers[i]\n\
    \  end\n  return largest, smallest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  local smallest_index = 1\n  local\
    \ second_smallest_index = 1\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n      second_smallest_number = smallest_number\n      smallest_index\
    \ = i\n      second_smallest_index = i\n    elseif current_number > second_smallest_number\
    \ then\n      second_smallest_number = current_number\n      smallest_index =\
    \ i\n      second_smallest_index = i\n    end\n  end\n  return numbers[smallest_index],\
    \ numbers[second_smallest_index]\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local this_smallest, this_largest\
    \ = numbers[i], numbers[i - 1]\n    if this_smallest < smallest then\n      smallest\
    \ = this_smallest\n    end\n    if this_largest > largest then\n      largest\
    \ = this_largest\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local distance\
    \ = math.abs(numbers[i] - smallest)\n    if distance < smallest then\n      smallest\
    \ = distance\n    elseif distance > largest then\n      largest = distance\n \
    \   end\n  end\n  return smallest, largest\nend", "  local smallest, largest =\
    \ numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      largest = current\n    elseif current > largest then\n      smallest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    elseif distance > largest_distance then\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n  local\
    \ largest = numbers[1]\n  for i = 2, #numbers do\n    local diff = numbers[i]\
    \ - smallest\n    if diff < smallest then\n      smallest = diff\n    elseif diff\
    \ > largest then\n      largest = diff\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_index\n  local smallest_number\n  local largest_distance\
    \ = math.inf\n  local largest_index\n  local largest_number", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local dist =\
    \ math.abs(numbers[i] - largest)\n    if dist < smallest then\n      smallest,\
    \ largest = dist, numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest\
    \ then\n      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_distance\
    \ = second_distance\n      second_smallest_number = number\n    end\n  end\n \
    \ return smallest_number, second_smallest_number\nend", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local diff =\
    \ math.abs(numbers[i] - largest)\n    if diff < smallest then\n      smallest,\
    \ largest = diff, numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local dist = math.abs(numbers[i] - largest)\n \
    \   if dist < smallest then\n      smallest, largest = dist, numbers[i]\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   elseif number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local d = math.abs(numbers[i]\
    \ - largest)\n    if d < smallest then\n      smallest, largest = d, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    elseif distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local new_smallest, new_largest = numbers[i], numbers[i - 1]\n\
    \    if new_smallest < smallest then\n      smallest = new_smallest\n    end\n\
    \    if new_largest > largest then\n      largest = new_largest\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      largest = current\n    elseif current > largest\
    \ then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_index\n  local smallest_number\n  local second_smallest_distance\n\
    \  local second_smallest_index\n  local second_smallest_number\n  for index, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = index\n      smallest_number = number\n    end\n    if\
    \ smallest_distance > second_smallest_distance then\n      second_smallest_distance\
    \ = smallest_distance\n      second_smallest_index = smallest_index\n      second_smallest_number\
    \ = smallest_number\n    end\n  end\n  return second_smallest_index, second_smallest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ largest_number\n  for _, number in ipairs(numbers) do\n    local distance =\
    \ math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    distance = math.abs(number - largest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      largest_number = number\n  \
    \  end\n  end\n  return smallest_number, largest_number\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local distance = math.abs(number - largest_number)\n    if distance\
    \ > largest_distance then\n      largest_distance = distance\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      largest = current\n    elseif current > largest\
    \ then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_index = nil\n  local\
    \ smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local distance =\
    \ math.abs(numbers[i] - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = i\n      smallest_number\
    \ = numbers[i]\n    end\n  end\n  return smallest_index, smallest_number\nend",
  "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local diff = math.abs(numbers[i]\
    \ - largest)\n    if diff < smallest then\n      smallest, largest = diff, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local diff =\
    \ math.abs(numbers[i] - largest)\n    if diff < smallest then\n      smallest,\
    \ largest = diff, numbers[i]\n    end\n  end\n  return smallest, largest\nend",
  "  local smallest_distance = math.inf\n  local smallest_element\n  local second_smallest_element\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_element)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_element = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance > math.inf\
    \ then\n      break\n    end\n    local second_distance = math.abs(number - second_smallest_element)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_element\
    \ = number\n    end\n  end\n  return smallest_element, second_smallest_element\n\
    end", "  local smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  for index, number in pairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n  end\n  return smallest_index, smallest_number\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    end\n\
    \    if number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        smallest_distance = distance\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local smallest_number", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local dist = math.abs(numbers[i]\
    \ - largest)\n    if dist < smallest then\n      smallest, largest = dist, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n\
    \  local second_smallest_distance = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number = nil\n \
    \ local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_number ~= nil then\n      local second_distance = math.abs(number\
    \ - second_smallest_number)\n      if second_distance < smallest_distance then\n\
    \        smallest_distance = second_distance\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local min_distance = math.inf\n  local min_number = nil\n  local max_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    if number < min_number then\n\
    \      min_number = number\n      min_distance = math.abs(min_number)\n    elseif\
    \ number > max_number then\n      max_number = number\n    end\n  end\n  if min_number\
    \ == nil then\n    return nil\n  end\n  return min_number, max_number\nend", " \
    \ local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        second_smallest_distance = distance\n    \
    \    second_smallest_number = number\n      end\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index = nil\n  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  local second_smallest_index = nil\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_index\
    \ = i\n      smallest_number = numbers[i]\n    end\n    if distance < smallest_distance\
    \ then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = i\n      second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_index\n  local second_smallest_index\n  for index, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - numbers[1])\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = index\n   \
    \ end\n    if smallest_distance == math.inf then\n      break\n    end\n    if\
    \ distance < smallest_distance then\n      second_smallest_index = index\n   \
    \ end\n  end\n  return numbers[smallest_index], numbers[second_smallest_index]\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for _, number in pairs(numbers) do\n\
    \    if number < smallest_number then\n      smallest_number = number\n    end\n\
    \    if number > second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  for index, number in pairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n  end\n  return smallest_index, smallest_number\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number = nil\n  local second_smallest_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        second_smallest_number = number\n      end\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff\
    \ < smallest then\n      smallest = diff\n    elseif diff > largest then\n   \
    \   largest = diff\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_number = number\n      end\n    end\n  end\n\
    \  return smallest_number, second_smallest_number\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_index\n  local second_smallest_index\n  for index,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - numbers[1])\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = index\n    end\n    if smallest_distance == math.inf then\n\
    \      break\n    end\n    if smallest_distance > math.inf then\n      break\n\
    \    end\n  end\n  if smallest_distance == math.inf then\n    return nil\n  end\n\
    \  local second_smallest_distance = math.inf\n  local second_smallest_number\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - numbers[smallest_index])\n    if distance < second_smallest_distance then\n\
    \      second_smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n    if second_smallest_distance == math.inf then\n      break\n    end\n\
    \    if second_smallest_distance > math.inf then\n      break\n    end\n  end\n\
    \  return smallest_index, second_smallest_index\nend", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = math.inf\n  local smallest_index\n\
    \  local smallest_number\n  local second_smallest_index\n  local second_smallest_number\n\
    \  for index, number in pairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n    if smallest_distance == math.inf then\n      break\n    end\n   \
    \ if number > smallest_number then\n      second_smallest_index = smallest_index\n\
    \      second_smallest_number = smallest_number\n      smallest_distance = math.inf\n\
    \      smallest_index = index\n      smallest_number = number\n    end\n  end\n\
    \  if smallest_distance == math.inf then\n    return nil, nil\n  end\n  return\
    \ smallest_number, numbers[smallest_index]\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_index\n  local smallest_number", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      largest = current\n    elseif\
    \ current > largest then\n      smallest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    end\n    if current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      largest = current\n    elseif current > largest\
    \ then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local distance = math.abs(numbers[i] - largest)\n    if distance\
    \ < smallest then\n      smallest, largest = distance, numbers[i]\n    end\n \
    \ end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n  local\
    \ largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      largest = current\n    elseif current >\
    \ largest then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ largest_distance = math.inf\n  local largest_number", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n  for i\
    \ = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil and smallest_distance < distance then\n\
    \      second_smallest_number = smallest_number\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n  local\
    \ largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      largest = current\n    elseif current >\
    \ largest then\n      smallest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n\
    \  local second_smallest_distance = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - second_smallest_number)\n    if second_smallest_distance\
    \ == nil then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    elseif second_smallest_distance > distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_number = number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in ipairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number\n  local\
    \ largest_number\n  for _, number in ipairs(numbers) do\n    local distance =\
    \ math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    if number > largest_number then\n      largest_number = number\n    end\n\
    \  end\n  return smallest_number, largest_number\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = largest - numbers[i]\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance < math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_index = nil\n  local largest_distance = math.inf\n\
    \  local largest_index = nil\n  for i, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - numbers[1])\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = i\n    end\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_index = i\n    end\n  end\n  return smallest_index, largest_index\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = nil\n \
    \ local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil then\n      smallest_distance = distance\n  \
    \    smallest_number = number\n      second_smallest_number = number\n    elseif\
    \ smallest_distance > distance then\n      smallest_distance = distance\n    \
    \  smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local second_smallest_number\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_distance > math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_index\n  local second_smallest_index\n  for i = 1,\
    \ #numbers do\n    local distance = math.abs(numbers[i] - numbers[smallest_index])\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = i\n    end\n    if smallest_index and smallest_index ==\
    \ i then\n      break\n    end\n  end\n  if smallest_index then\n    local second_smallest_distance\
    \ = math.inf\n    local second_smallest_index\n    for i = 1, #numbers do\n  \
    \    local distance = math.abs(numbers[i] - numbers[second_smallest_index])\n\
    \      if distance < second_smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_index = i\n      end\n      if second_smallest_index\
    \ and second_smallest_index == i then\n        break\n      end\n    end\n   \
    \ if second_smallest_index then\n      return numbers[smallest_index], numbers[second_smallest_index]\n\
    \    end\n  end\nend", "  local smallest, largest = numbers[1], numbers[1]\n \
    \ for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest_number = numbers[1]\n  local\
    \ second_smallest_number = numbers[1]\n  for i = 2, #numbers do\n    local current_number\
    \ = numbers[i]\n    if current_number < smallest_number then\n      smallest_number\
    \ = current_number\n    elseif current_number > second_smallest_number then\n\
    \      second_smallest_number = current_number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
