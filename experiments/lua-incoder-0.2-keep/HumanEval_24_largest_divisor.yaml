name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_divisor = 1\n    local max_divisor_p = 1\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            if max_divisor < i then\n \
    \               max_divisor = i\n                max_divisor_p = i\n         \
    \   else\n                max_divisor_p = max_divisor_p * i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend", "    local max_divisor\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n            end\n        end\n  \
    \  end\n    return max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_p\
    \ = 1\n    local max_divisor_n = 1\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            if max_divisor < i then\n                max_divisor = i\n\
    \                max_divisor_p = n / i\n                max_divisor_n = i\n  \
    \          end\n        end\n    end\n    return max_divisor\nend", "  local max_divisor\
    \ = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n = 1\n  for i\
    \ = 2, n do\n    if n % i == 0 then\n      local divisor_value = i\n      if divisor_value\
    \ > max_divisor_value then\n        max_divisor_value = divisor_value\n      \
    \  max_divisor_value_n = 1\n      else\n        max_divisor_value = max_divisor_value_n\n\
    \      end\n    end\n    max_divisor_value_n = max_divisor_value_n ^ i\n  end\n\
    \  return max_divisor_value\nend", "    local max_div = nil\n    local max_div_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_div\
    \ == nil then\n                max_div = i\n                max_div_n = n\n  \
    \          else\n                if max_div < i then\n                    max_div\
    \ = i\n                    max_div_n = n\n                end\n            end\n\
    \        end\n    end\n    return max_div\nend", "    local max_divisor = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor <\
    \ i then\n                max_divisor = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_value\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_value\
    \ = i\n            else\n                max_divisor_value = i\n            end\n\
    \        end\n    end\n    return max_divisor_value\nend", "  -- The largest divisor\
    \ is one less than the square root of n\n  local max_divisor = math.floor(math.sqrt(n))\n\
    \  -- If n is a perfect square, return its square root\n  if n == max_divisor\
    \ then\n    return max_divisor\n  -- Otherwise, find the largest divisor smaller\
    \ than n\n  else\n    -- If n is evenly divisible by max_divisor, return max_divisor\n\
    \    if n % max_divisor == 0 then\n      return max_divisor\n    -- Otherwise,\
    \ find the largest divisor smaller than max_divisor\n    else\n      -- If n is\
    \ evenly divisible by max_divisor + 1, return max_divisor + 1\n      if n % max_divisor\
    \ == 1 then\n        return max_divisor + 1\n      -- Otherwise, find the largest\
    \ divisor smaller than max_divisor + 1\n      else\n        -- If n is evenly\
    \ divisible by max_divisor + 2, return max_divisor + 2\n        if n % max_divisor\
    \ == 2 then\n          return max_divisor + 2\n        -- Otherwise, find the\
    \ largest divisor smaller than max_divisor + 2\n        else\n          -- If\
    \ n is evenly divisible by max_divisor + 3, return max_divisor + 3\n         \
    \ if n % max_divisor == 3 then\n            return max_divisor + 3\n         \
    \ -- Otherwise, find the largest divisor smaller than max_divisor + 3\n      \
    \    else\n            -- If n is evenly divisible by max_divisor + 4, return\
    \ max_divisor + 4\n            if n % max_divisor == 4 then\n              return\
    \ max_divisor + 4\n            -- Otherwise, find the largest divisor smaller\
    \ than max_divisor + 4\n            else\n              -- If n is evenly divisible\
    \ by max_divisor + 5, return max_divisor + 5\n              if n % max_divisor\
    \ == 5 then\n                return max_divisor + 5\n              -- Otherwise,\
    \ find the largest divisor smaller than max_divisor + 5\n              else\n\
    \                -- If n is evenly divisible by max_divisor + 6, return max_divisor\
    \ + 6\n                if n % max_divisor == 6 then\n                  return\
    \ max_divisor + 6\n                -- Otherwise, find the largest divisor smaller\
    \ than max_divisor + 6\n                else\n                  -- If n is evenly\
    \ divisible by max_divisor + 7, return max_divisor + 7\n                  if n\
    \ % max_divisor == 7 then\n                    return max_divisor + 7\n      \
    \            -- Otherwise, find the largest divisor smaller than max_divisor +\
    \ 7\n                  else\n                    -- If n is evenly divisible by\
    \ max_divisor + 8, return max_divisor + 8\n                    if n % ", "   \
    \ local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            local\
    \ divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end", "    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            local divisor = i\n   \
    \         local divisor_remainder = n % i\n            if divisor_remainder >\
    \ max_divisor_remainder then\n                max_divisor = divisor\n        \
    \        max_divisor_remainder = divisor_remainder\n            end\n        end\n\
    \    end\n    return max_divisor\nend", "    local divisor = 1\n    while n %\
    \ divisor == 0 do\n        divisor = divisor + 1\n    end\n    return divisor\n\
    end", "  -- Base case\n  if n == 1 then return 1 end\n  -- Recursive case\n  if\
    \ n % 2 == 0 then return largest_divisor(n / 2) end\n  -- Recursive case\n  if\
    \ n % 3 == 0 then return largest_divisor(n / 3) end\n  -- Recursive case\n  if\
    \ n % 5 == 0 then return largest_divisor(n / 5) end\n  -- Recursive case\n  if\
    \ n % 7 == 0 then return largest_divisor(n / 7) end\n  -- Recursive case\n  if\
    \ n % 11 == 0 then return largest_divisor(n / 11) end\n  -- Recursive case\n \
    \ if n % 13 == 0 then return largest_divisor(n / 13) end\n  -- Recursive case\n\
    \  if n % 17 == 0 then return largest_divisor(n / 17) end\n  -- Recursive case\n\
    \  if n % 19 == 0 then return largest_divisor(n / 19) end\n  -- Recursive case\n\
    \  if n % 23 == 0 then return largest_divisor(n / 23) end\n  -- Recursive case\n\
    \  if n % 29 == 0 then return largest_divisor(n / 29) end\n  -- Recursive case\n\
    \  if n % 31 == 0 then return largest_divisor(n / 31) end\n  -- Recursive case\n\
    \  if n % 37 == 0 then return largest_divisor(n / 37) end\n  -- Recursive case\n\
    \  if n % 41 == 0 then return largest_divisor(n / 41) end\n  -- Recursive case\n\
    \  if n % 43 == 0 then return largest_divisor(n / 43) end\n  -- Recursive case\n\
    \  if n % 47 == 0 then return largest_divisor(n / 47) end\n  -- Recursive case\n\
    \  if n % 53 == 0 then return largest_divisor(n / 53) end\n  -- Recursive case\n\
    \  if n % 59 == 0 then return largest_divisor(n / 59) end\n  -- Recursive case\n\
    \  if n % 61 == 0 then return largest_divisor(n / 61) end\n  -- Recursive case\n\
    \  if n % 67 == 0 then return largest_divisor(n / 67) end\n  -- Recursive case\n\
    \  if n % 71 == 0 then return largest_divisor(n / 71) end\n  -- Recursive case\n\
    \  if n % 73 == 0 then return largest_divisor(n / 73) end\n  -- Recursive case\n\
    \  if n % 79 == 0 then return largest_divisor(n / 79) end", "    local max_divisor\
    \ = 1\n    local max_divisor_value = 1\n    for i = 2, n do\n        if n % i\
    \ == 0 then\n            if max_divisor < i then\n                max_divisor\
    \ = i\n                max_divisor_value = n\n            end\n        end\n \
    \   end\n    return max_divisor_value\nend", "    local max_divisor = 1\n    local\
    \ max_divisor_square = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          local divisor = i\n            local divisor_square = i * i\n     \
    \       if divisor_square > max_divisor_square then\n                max_divisor\
    \ = divisor\n                max_divisor_square = divisor_square\n           \
    \ end\n        end\n    end\n    return max_divisor\nend", "    local max_divisor\
    \ = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            if max_divisor < i then\n                max_divisor = i\n\
    \                max_divisor_p = n / i\n            end\n        end\n    end\n\
    \    return max_divisor_p\nend", "    local max_divisor = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_index =\
    \ 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_index\
    \ = i\n            else\n                max_divisor_index = i\n            end\n\
    \        end\n    end\n    return max_divisor\nend", "  local max_divisor = 1\n\
    \  local max_divisor_remainder = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      max_divisor = i\n      max_divisor_remainder = n % i\n    end\n  end\n\
    \  return max_divisor, max_divisor_remainder\nend", "    local max_divisor = 1\n\
    \    local max_divisor_p = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \          max_divisor_p = n / i\n            end\n        end\n    end\n    return\
    \ max_divisor_p\nend", "    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_divisor < i then\n                max_divisor\
    \ = i\n            end\n        end\n    end\n    return max_divisor\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
