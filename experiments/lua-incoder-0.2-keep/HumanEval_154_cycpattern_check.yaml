name: HumanEval_154_cycpattern_check
language: lua
prompt: "-- You are given 2 words. You need to return True if the second word or any\
  \ of its rotations is a substring in the first word\n-- cycpattern_check(\"abcd\"\
  ,\"abd\") => False\n-- cycpattern_check(\"hello\",\"ell\") => True\n-- cycpattern_check(\"\
  whassup\",\"psus\") => False\n-- cycpattern_check(\"abab\",\"baa\") => True\n--\
  \ cycpattern_check(\"efef\",\"eeff\") => False\n-- cycpattern_check(\"himenss\"\
  ,\"simen\") => True\nlocal function cycpattern_check(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = cycpattern_check\n\
  \    lu.assertEquals(candidate('xyzw', 'xyw'), false)\n    lu.assertEquals(candidate('yello',\
  \ 'ell'), true)\n    lu.assertEquals(candidate('whattup', 'ptut'), false)\n    lu.assertEquals(candidate('efef',\
  \ 'fee'), true)\n    lu.assertEquals(candidate('abab', 'aabb'), false)\n    lu.assertEquals(candidate('winemtt',\
  \ 'tinem'), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function helper(str, pattern)\n    local function helper2(str,\
    \ pattern)\n      local function helper3(str, pattern)\n        local function\
    \ helper4(str, pattern)\n          local function helper5(str, pattern)\n    \
    \        local function helper6(str, pattern)\n              local function helper7(str,\
    \ pattern)\n                local function helper8(str, pattern)\n           \
    \       local function helper9(str, pattern)\n                    local function\
    \ helper10(str, pattern)\n                      local function helper11(str, pattern)\n\
    \                        local function helper12(str, pattern)\n             \
    \             local function helper13(str, pattern)\n                        \
    \    local function helper14(str, pattern)\n                              local\
    \ function helper15(str, pattern)\n                                local function\
    \ helper16(str, pattern)\n                                  local function helper17(str,\
    \ pattern)\n                                    local function helper18(str, pattern)\n\
    \                                      local function helper19(str, pattern)\n\
    \                                        local function helper20(str, pattern)\n\
    \                                          local function helper21(str, pattern)\n\
    \                                            local function helper22(str, pattern)\n\
    \                                              local function helper23(str, pattern)\n\
    \                                                local function helper24(str,\
    \ pattern)\n                                                  local function helper25(str,\
    \ pattern)\n                                                    local function\
    \ helper26(str, pattern)\n                                                   \
    \   local function helper27(str, pattern)\n                                  \
    \                      local function helper28(str, pattern)\n               \
    \                                           local function helper29(str, pattern)\n\
    \                                                            local function helper30(str,\
    \ pattern)\n                                                              local\
    \ function helper31(str, pattern)\n                                          \
    \                      local function helper32(str, pattern)\n               \
    \                                                   local function helper33(str,\
    \ pattern)\n                                                                 \
    \   local function helper34(str, pattern)\n                                  \
    \                                    local function helper35(str, pattern)\n \
    \                                                                       local\
    \ function helper36(str, pattern)\n                                          \
    \                                local function helper37(str, pattern)\n     \
    \                                                                       local\
    \ function helper38(str, pattern)\n                                          \
    \                                    local function helper39(str, pattern)\n \
    \                                                                            \
    \   local function helper40(str, pattern)\n                                  \
    \                                                local function helper41(str,\
    \ pattern)\n                                                                 \
    \                   local function helper42(str, pattern)\n                  \
    \                                                                    local function\
    \ helper43(str, pattern)\n                                                   \
    \                                     local function helper44(str, pattern)\n\
    \                                                                            \
    \              local function helper45(str, pattern)\n                       \
    \                                                                     local function\
    \ helper46(str, pattern)\n                                                   \
    \                                           local function helper47(str, pattern)\n\
    \                                                                            \
    \                    local function helper48(str, pattern)\n                 \
    \                                                                            \
    \     local function helper49(str, pattern)\n                                \
    \                                                                    local function\
    \ helper50(str, pattern)\n                                                   \
    \                                                   local ", "  local function\
    \ is_substring(c,s)\n    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and\
    \ string.sub(c,1,#c) == s\n  end\n  local function is_substring_rotation(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_substring_rotations(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_substring_rotations_rotations(c,s)\n    return\
    \ #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s and\
    \ string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s\n  end\n  local function\
    \ is_substring_rotations_rotations_rotations(c,s)\n    return #c > 0 and #s >\
    \ 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s and string.sub(c,#s,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations(c,s)\n    return\
    \ #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s and\
    \ string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c)\
    \ == s and string.sub(c,#s,#c) == s\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c", "  local function is_substring(c,d)\n    return\
    \ string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n  local function\
    \ is_substring_rotation(c,d)\n    return string.find(a,c) and string.find(a,d)\
    \ or string.find(d,c)\n  end\n  local function is_substring_rotations(c,d)\n \
    \   return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d) or string.find(d,c)\n  end\n  local function is_substring_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c,d)\n\
    \    return string.find(a,c) and ", "  local function helper(str, substr)\n  \
    \  if str:sub(1, #substr) == substr then\n      return true\n    end\n    str\
    \ = str:sub(1, #str - 1)\n    for i = 1, #str do\n      if helper(str:sub(i, #str),\
    \ substr) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  return helper(a, \"^\"..b..\"$\") or helper(b, \"^\"..a..\"$\")\nend", "  local\
    \ function is_substring(c)\n    return a:sub(1, #c) == c\n  end\n  local function\
    \ is_rotated_substring(c)\n    return a:sub(1, #c) ~= c and a:sub(1, #c) ~= c:reverse()\n\
    \  end\n  return #a == #b and is_substring(b[1]) or is_rotated_substring(b[1])\
    \ and is_substring(b[2]) or is_rotated_substring(b[2]) and is_substring(b[1])\n\
    end", "  local function is_substring_helper(substr, str, i, j)\n    if i == j\
    \ then\n      return true\n    end\n    if substr == \"\" then\n      return true\n\
    \    end\n    if substr == str[i] then\n      return is_substring_helper(substr,\
    \ str, i + 1, j + 1)\n    end\n    return false\n  end\n  return is_substring_helper(b,\
    \ a, 1, #a) == true\nend", "  local function is_substring(c)\n    return a:find(c)\
    \ ~= nil or (a:find(c) ~= nil and b:find(c) ~= nil)\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:find(c) ~= nil and b:find(c) ~= nil\n  end\n  local function is_rotated_substring2(c)\n\
    \    return a:find(c) ~= nil and b:find(c) ~= nil and a:find(c) ~= b:find(c)\n\
    \  end\n  local function is_rotated_substring3(c)\n    return a:find(c) ~= nil\
    \ and b:find(c) ~= nil and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and\
    \ a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\n\
    \  end\n  local function is_rotated_substring4(c)\n    return a:find(c) ~= nil\
    \ and b:find(c) ~= nil and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and\
    \ a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\
    \ and a:find(c) ~= b:find(c)\n  end\n  local function is_rotated_substring5(c)\n\
    \    return a:find(c) ~= nil and b:find(c) ~= nil and a:find(c) ~= b:find(c) and\
    \ a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\
    \ and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\n\
    \  end\n  local function is_rotated_substring6(c)\n    return a:find(c) ~= nil\
    \ and b:find(c) ~= nil and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and\
    \ a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\
    \ and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c) and a:find(c) ~= b:find(c)\n\
    \  end\n  local function is_rotated_substring7(c)\n    return a:find(c) ~= nil\
    \ and b:find(c) ~= nil and a:find(c) ~= ", "  local function helper(str, start,\
    \ end)\n    if start > end then return false end\n    if start == end then return\
    \ true end\n    if str:sub(start, start + 1) ~= a:sub(start, start + 1) then return\
    \ false end\n    return helper(str, start + 1, end)\n  end\n  return helper(b,\
    \ 2, #b) == true\nend", "  local function is_substring_helper(str, pattern)\n\
    \    local function helper(str, pattern)\n      if str:len() < pattern:len() then\n\
    \        return false\n      end\n      local pattern = pattern:gsub(\"%a\", function(c)\n\
    \        return string.char(tonumber(c))\n      end)\n      local str = str:gsub(\"\
    %a\", function(c)\n        return string.char(tonumber(c))\n      end)\n     \
    \ local i = 1\n      while i <= str:len() do\n        if str:sub(i, i) ~= pattern\
    \ then\n          return false\n        end\n        i = i + 1\n      end\n  \
    \    return true\n    end\n    return helper(a, b)\n  end\n  return is_substring_helper(a,\
    \ b)\nend", "  local function is_substring(x, y) -- Check if x is a substring\
    \ of y\n    return #x >= #y and string.sub(x,1,#y)==y\n  end\n  local function\
    \ is_rotation(x, y) -- Check if x is a rotation of y\n    local function is_substring_or_rotation(x,\
    \ y) -- Check if x is a substring or a rotation of y\n      return is_substring(x,\
    \ y) or is_rotation(y, x)\n    end\n    local function is_substring_or_rotation(y,\
    \ x) -- Check if y is a substring or a rotation of x\n      return is_substring_or_rotation(y,\
    \ x) or is_substring(x, y)\n    end\n    return is_substring_or_rotation(x, y)\
    \ or is_rotation(y, x)\n  end\n  local function is_substring_or_rotation(x, y)\
    \ -- Check if x is a substring or a rotation of y\n    return is_substring(x,\
    \ y) or is_rotation(y, x)\n  end\n  local function is_substring(x, y) -- Check\
    \ if x is a substring of y\n    return #x >= #y and string.sub(x,1,#y)==y\n  end\n\
    \  local function is_rotation(x, y) -- Check if x is a rotation of y\n    local\
    \ function is_substring_or_rotation(x, y) -- Check if x is a substring or a rotation\
    \ of y\n      return is_substring(x, y) or is_rotation(y, x)\n    end\n    local\
    \ function is_substring_or_rotation(y, x) -- Check if y is a substring or a rotation\
    \ of x\n      return is_substring_or_rotation(y, x) or is_substring(x, y)\n  \
    \  end\n    return is_substring_or_rotation(x, y) or is_rotation(y, x)\n  end\n\
    \  local function is_substring_or_rotation(x, y) -- Check if x is a substring\
    \ or a rotation of y\n    return is_substring(x, y) or is_rotation(y, x)\n  end\n\
    \  local function is_substring(x, y) -- Check if x is a substring of y\n    return\
    \ #x >= #y and string.sub(x,1,#y)==y\n  end\n  local function is_rotation(x, y)\
    \ -- Check if x is a rotation of y\n    local function is_substring_or_rotation(x,\
    \ y) -- Check if x is a substring or a rotation of y\n      return is_substring(x,\
    \ y) or is_rotation(y, x)\n    end\n    local function is_substring_or_rotation(y,\
    \ x) -- Check if y is a substring or a rotation of x\n      return is_substring_or_rotation(y,\
    \ x) or is_substring(x, y)\n    end\n    return is_substring_or_rotation(x, y)\
    \ or is_rotation(y, x)\n  end\n  local function is_substring_or_rotation(x, y)\
    \ -- Check if x is a substring or a rotation of y\n    return is_substring(x,\
    \ y) or is_rotation(y, ", "  local function is_substring_of_a(s)\n    local function\
    \ is_substring_of_a_helper(s,i,j)\n      if j > 0 then\n        if s[i] ~= s[j]\
    \ then\n          return false\n        end\n      end\n      if j == 0 then\n\
    \        return true\n      end\n      return is_substring_of_a_helper(s,i+1,j-1)\n\
    \    end\n    return is_substring_of_a_helper(a,1,#a)\n  end\n  return is_substring_of_a(b)\
    \ or is_substring_of_a(b,1,#b)\nend", "  local function substr_check(s, t)\n \
    \   return string.find(s, t) ~= nil\n  end\n  local function rotate_check(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, string.len(s) - 1)\n\
    \    if i == nil then\n      return false\n    end\n    if j == nil then\n   \
    \   return true\n    end\n    return string.sub(s, i, j) == t\n  end\n  local\
    \ function rotate_check(s, t, k)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, string.len(s) - 1)\n    if i == nil then\n      return false\n    end\n\
    \    if j == nil then\n      return true\n    end\n    return string.sub(s, i,\
    \ j) == t and string.sub(s, j, k) == t\n  end\n  local function rotate_check(s,\
    \ t, k)\n    local i, j = string.find(s, t), string.find(s, t, 1, string.len(s)\
    \ - 1)\n    if i == nil then\n      return false\n    end\n    if j == nil then\n\
    \      return true\n    end\n    return string.sub(s, i, j) == t and string.sub(s,\
    \ j, k) == t\n  end\n  local function rotate_check(s, t, k)\n    local i, j =\
    \ string.find(s, t), string.find(s, t, 1, string.len(s) - 1)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == t and string.sub(s, j, k) == t\n \
    \ end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, string.len(s) - 1)\n    if i == nil then\n      return\
    \ false\n    end\n    if j == nil then\n      return true\n    end\n    return\
    \ string.sub(s, i, j) == t and string.sub(s, j, k) == t\n  end\n  local function\
    \ rotate_check(s, t, k)\n    local i, j = string.find(s, t), string.find(s, t,\
    \ 1, string.len(s) - 1)\n    if i == nil then\n      return false\n    end\n \
    \   if j == nil then\n      return true\n    end\n    return string.sub(s, i,\
    \ j) == t and string.sub(s, j, k) == t\n  end\n  local function rotate_check(s,\
    \ t, k)\n    local i, j = string.find(s, t), string.find(s, t, 1, string.len(s)\
    \ - 1)\n    if i == nil then\n      return false\n    end\n    if j == nil then\n\
    \      return true\n    end\n    return string.sub(s, i, j) == t and string.sub(s,\
    \ j, k) == t\n  end\n  local function rotate_check(s, t, k)\n    local i, j =\
    \ string.find(s, t), string.find(s, t, 1, ", "  local function helper(str, pattern)\n\
    \    local function helper1(str, pattern)\n      if pattern == \"\" then\n   \
    \     return true\n      elseif str == pattern then\n        return true\n   \
    \   else\n        return helper1(str:sub(1, #str), pattern) or helper1(str:sub(#str\
    \ + 1), pattern)\n      end\n    end\n    return helper1(str, pattern)\n  end\n\
    \  return helper(a, b) or helper(b, a)\nend", "  local function is_substring(c)\n\
    \    return a:find(c) > -1 or b:find(c) > -1\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring2(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring3(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring4(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring5(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring6(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring7(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring8(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring9(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring10(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring11(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring12(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring13(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(c)\n  end\n\
    \  local function is_rotated_substring14(c)\n    return a:find(c) > -1 and b:find(c)\
    \ > -1 and a:find(c) > b:find(c)\n  end\n  local function is_rotated_substring15(c)\n\
    \    return a:find(c) > -1 and b:find(c) > -1 and a:find(c) < b:find(", "  local\
    \ function is_substring(c,s)\n    return string.find(c, s) ~= nil\n  end\n  local\
    \ function is_rotated_substring(c,s)\n    return string.find(c, s, 1, true) ~=\
    \ nil\n  end\n  local function is_rotated_substring2(c,s)\n    return string.find(c,\
    \ s, 1, false) ~= nil\n  end\n  local function is_rotated_substring3(c,s)\n  \
    \  return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring4(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring5(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring6(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring7(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring8(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring9(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring10(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring11(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring12(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring13(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring14(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring15(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring16(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring17(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring18(c,s)\n\
    \    return string.find(c, s, 1, false) ~= nil\n  end\n  local function is_rotated_substring19(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end", "  local function rots(word)\n\
    \    local ret = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n\
    \    end\n    return ret\n  end\n  local function submatch(word)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[#ret+1] = word:sub(i,i)\n    end\n\
    \    return ret\n  end\n  local function submatch(word, pattern)\n    local ret\
    \ = {}\n    for i = 1, #word do\n      ret[", "  local function helper(w, i, j)\n\
    \    if i == j or j == #w then return true end\n    if w[i] == '.' then\n    \
    \  if helper(w, i+1, j-1) and helper(w, i, j-1) then\n        return true\n  \
    \    end\n      if helper(w, i+1, j) and helper(w, i, j+1) then\n        return\
    \ true\n      end\n      if helper(w, i+1, j+1) and helper(w, i, j-1) then\n \
    \       return true\n      end\n      if helper(w, i, j+1) and helper(w, i, j+1)\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  return\
    \ helper(a, b, #a)\nend", "  local function is_substring_of_rotations(word, pattern)\n\
    \    local function is_substring_of_rotations_helper(word, pattern)\n      local\
    \ function is_substring_of_rotations_helper(word, pattern)\n        local function\
    \ is_substring_of_rotations_helper(word, pattern)\n          local function is_substring_of_rotations_helper(word,\
    \ pattern)\n            local function is_substring_of_rotations_helper(word,\
    \ pattern)\n              local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                  local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                    local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                      local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                        local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                          local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                            local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                              local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                  local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                    local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                      local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                        local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                          local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                            local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                              local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                  local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                    local function\
    \ is_substring_of_rotations_helper(word, pattern)\n                          \
    \                            local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                        local function\
    \ is_substring_of_rotations_helper(word, pattern)\n                          \
    \                                local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                            local\
    \ function is_substring_of_rotations_helper(word, pattern)\n                 \
    \                                             local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                                local\
    \ function is_substring_of_rotations_helper(word, pattern)\n                 \
    \                                                 local function is_substring_of_rotations_helper(word,\
    \ pattern)\n                                                                 \
    \   local function is_substring_of_rotations_helper(word, pattern)\n         \
    \                                                             local ", "  local\
    \ function cycpattern_check_recursive(w, i, j)\n    if j > #w then\n      return\
    \ true\n    end\n    if i == j then\n      if w[i] == a then\n        return cycpattern_check_recursive(w,\
    \ i+1, j-1)\n      else\n        return false\n      end\n    end\n    if w[i]\
    \ == a then\n      return cycpattern_check_recursive(w, i+1, j)\n    else\n  \
    \    return cycpattern_check_recursive(w, i, j-1)\n    end\n  end\n  return cycpattern_check_recursive(a,\
    \ b, #b)\nend", "  local function is_substring_helper(str, substr)\n    local\
    \ function helper(str, substr)\n      if str == nil then\n        return false\n\
    \      elseif substr == nil then\n        return true\n      elseif str:sub(1,\
    \ #substr) == substr then\n        return helper(str:sub(2, #str), substr)\n \
    \     else\n        return false\n      end\n    end\n    return helper(str, substr)\n\
    \  end\n  return is_substring_helper(a, b) ~= nil\nend", "  local function is_substring_helper(str,\
    \ pattern)\n    local function helper(str, pattern)\n      local function helper(str,\
    \ pattern)\n        if pattern == \"\" then\n          return true\n        end\n\
    \        if str:sub(1, #pattern) == pattern then\n          return helper(str:sub(#pattern\
    \ + 1), pattern)\n        end\n        return false\n      end\n      return helper(str,\
    \ pattern)\n    end\n    return is_substring_helper(a, pattern) and is_substring_helper(b,\
    \ pattern)\n  end\n  return is_substring_helper(a, \"\") and is_substring_helper(b,\
    \ \"\")\nend", "  local function is_substring_helper(substr, str)\n    return\
    \ str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper2(substr,\
    \ str)\n    return str:sub(1, #substr) == substr:reverse()\n  end\n  local function\
    \ is_substring_helper3(substr, str)\n    return str:sub(1, #substr) == substr:reverse():reverse()\n\
    \  end\n  local function is_substring_helper4(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse()\n  end\n  local function is_substring_helper5(substr,\
    \ str)\n    return str:sub(1, #substr) == substr:reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper6(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse()\n  end\n\
    \  local function is_substring_helper7(substr, str)\n    return str:sub(1, #substr)\
    \ == substr:reverse():reverse():reverse():reverse():reverse():reverse()\n  end\n\
    \  local function is_substring_helper8(substr, str)\n    return str:sub(1, #substr)\
    \ == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper9(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper10(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper11(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper12(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper13(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_helper14(substr, str)\n    return str:sub(1,\
    \ #substr) == substr:reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  ", "  local function check(c,i,j)\n    if j > 0 then\n      if a[i]\
    \ == b[j] then\n        j = j - 1\n      else\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local i,j = 0,0\n  while i < #a do\n    j\
    \ = j + 1\n    if check(a,i,j) then\n      i = i + 1\n    end\n  end\n  return\
    \ true\nend", "  local function substr_check(s, t)\n    local function is_substr_helper(s,\
    \ t, i, j)\n      if i == j then return true end\n      if i < j then\n      \
    \  return is_substr_helper(s, t, i+1, j) or is_substr_helper(s, t, i, j-1)\n \
    \     else\n        return s:sub(i, j) == t\n      end\n    end\n    return is_substr_helper(a,\
    \ b, #s, #t)\n  end\n  return substr_check(a, b) or substr_check(b, a)\nend",
  "    local pattern = a:gsub(\"%w+\", function(c) return c:lower() end)\n    local\
    \ pattern = pattern:gsub(\"%w+\", function(c) return c:upper() end)\n    local\
    \ pattern = pattern:gsub(\"%w+\", function(c) return c:reverse() end)\n    local\
    \ pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():lower() end)\n\
    \    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():lower()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():lower()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():lower()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():lower()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse():lower()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():reverse():reverse():reverse():reverse():upper()\
    \ end)\n    local pattern = pattern:gsub(\"%w+\", function(c) return c:reverse():reverse():",
  "  local function is_substring_helper(substr, str)\n    if substr == str then\n\
    \      return true\n    end\n    for i = 1, #substr do\n      if str:sub(1, #substr)\
    \ == substr and is_substring_helper(substr:sub(i+1), str) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  return is_substring_helper(b,\
    \ a)\nend", "  local function is_substring_helper(substr, str)\n    if substr\
    \ == \"\" then return true end\n    if substr == str then return true end\n  \
    \  if str:find(substr) == 1 then return true end\n    return false\n  end\n  local\
    \ function is_substring(a, b)\n    return is_substring_helper(b, a) or is_substring_helper(a,\
    \ b)\n  end\n  local function is_rotated_substring(a, b)\n    local function is_rotated_substring_helper(substr,\
    \ str)\n      if substr == \"\" then return true end\n      if substr == str then\
    \ return true end\n      if str:find(substr) == 1 then return true end\n     \
    \ return false\n    end\n    local function is_rotated_substring_recursive(substr,\
    \ str, rot)\n      if substr == \"\" then return true end\n      if substr ==\
    \ str then return true end\n      if rot:find(substr) == 1 then\n        return\
    \ is_rotated_substring_helper(substr, str)\n      else\n        return is_rotated_substring_recursive(substr,\
    \ str, rot + rot)\n      end\n    end\n    return is_rotated_substring_helper(b,\
    \ a) or is_rotated_substring_helper(a, b)\n  end\n  local function is_rotated_substring_recursive(a,\
    \ b)\n    return is_rotated_substring_recursive(b, a) or is_rotated_substring_recursive(a,\
    \ a)\n  end\n  return is_substring(a, b) or is_substring(b, a) or is_rotated_substring_recursive(a,\
    \ b) or is_rotated_substring_recursive(b, a)\nend", "  local function is_substring(x,\
    \ y)\n    for i = 1, #x do\n      if string.sub(x, y, i) == x then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_rotation(x,\
    \ y)\n    for i = 1, #x do\n      if string.sub(x, y, i) == y then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_rotations(x,\
    \ y)\n    for i = 1, #x do\n      for j = 1, #y do\n        if string.sub(x, y,\
    \ i) == y then\n          return true\n        end\n      end\n    end\n    return\
    \ false\n  end\n  local function is_substring_rotations_rotations(x, y)\n    for\
    \ i = 1, #x do\n      for j = 1, #y do\n        for k = 1, #x do\n          if\
    \ string.sub(x, y, i) == x then\n            return true\n          end\n    \
    \    end\n      end\n    end\n    return false\n  end\n  local function is_substring_rotations_rotations_rotations(x,\
    \ y)\n    for i = 1, #x do\n      for j = 1, #y do\n        for k = 1, #x do\n\
    \          for l = 1, #y do\n            if string.sub(x, y, i) == y then\n  \
    \            return true\n            end\n          end\n        end\n      end\n\
    \    end\n    return false\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(x,\
    \ y)\n    for i = 1, #x do\n      for j = 1, #y do\n        for k = 1, #x do\n\
    \          for l = 1, #y do\n            for m = 1, #x do\n              if string.sub(x,\
    \ y, i) == x then\n                return true\n              end\n          \
    \  end\n          end\n        end\n      end\n    end\n    return false\n  end\n\
    \  local function is_substring_rotations_rotations_rotations_rotations_rotations(x,\
    \ y)\n    for i = 1, #x do\n      for j = 1, #y do\n        for k = 1, #x do\n\
    \          for l = 1, #y do\n            for m = 1, #x do\n              for n\
    \ = 1, #y do\n                if string.sub(x, y, i) == y then\n             \
    \     return true\n                end\n              end\n            end\n \
    \         end\n        end\n      end\n    end\n    return false\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(x,\
    \ y)\n    for i = 1, #x do\n      for j = 1, #y do\n        for k = 1, #x do\n\
    \          for l = 1, #y do\n            for m = 1, #x do\n              for n\
    \ = 1, #y do\n                for o = 1, #x ", "  local function is_substring(c,d)\n\
    \    return string.find(a,c) and string.find(b,d)\n  end\n  local function is_substring_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\n\
    \  end\n  local function is_substring_rotation2(c)\n    return string.find(a,c)\
    \ and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1))\n  end\n  local function is_substring_rotation3(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1)) and string.find(b,string.sub(b,3,-1))\n\
    \  end\n  local function is_substring_rotation4(c)\n    return string.find(a,c)\
    \ and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1)) and string.find(b,string.sub(b,3,-1))\
    \ and string.find(b,string.sub(b,4,-1))\n  end\n  local function is_substring_rotation5(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1)) and string.find(b,string.sub(b,3,-1))\
    \ and string.find(b,string.sub(b,4,-1)) and string.find(b,string.sub(b,5,-1))\n\
    \  end\n  local function is_substring_rotation6(c)\n    return string.find(a,c)\
    \ and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1)) and string.find(b,string.sub(b,3,-1))\
    \ and string.find(b,string.sub(b,4,-1)) and string.find(b,string.sub(b,5,-1))\
    \ and string.find(b,string.sub(b,6,-1))\n  end\n  local function is_substring_rotation7(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,-1)) and string.find(b,string.sub(b,1,-1))\
    \ and string.find(b,string.sub(b,2,-1)) and string.find(b,string.sub(b,3,-1))\
    \ and string.find(b,string.sub(b,4,-1)) and string.find(b,string.sub(b,5,-1))\
    \ and string.find(b,string.sub(b,6,-1)) and string.find(b,string.sub(b,7,-1))\n\
    \  end\n  local function is_substring_rotation8(c)\n    return string.find(a,c)\
    \ and string.find(a,string.sub(a,", "  local function helper(w, i, j)\n    if\
    \ i == j or j == #w then return true end\n    if w[i] == w[j] then\n      return\
    \ helper(w, i + 1, j + 1)\n    elseif w[i] > w[j] then\n      return helper(w,\
    \ i + 1, j)\n    else\n      return helper(w, i, j + 1)\n    end\n  end\n  return\
    \ helper(a, b, #a)\nend", "    local pattern = a:gsub(\"%w+\", function(x)\n \
    \       return string.sub(b, 1, #b - #x - 1)\n    end)\n    return a:find(pattern)\
    \ ~= nil\nend", "  local function is_substring_helper(substr, str)\n    if substr\
    \ == str then\n      return true\n    end\n    if str:len() < substr:len() then\n\
    \      return false\n    end\n    local start_idx = 1\n    local end_idx = str:len()\n\
    \    while start_idx < end_idx do\n      local start_char = str:sub(start_idx,\
    \ start_idx + 1)\n      local end_char = str:sub(end_idx - 1, end_idx)\n     \
    \ if start_char == substr then\n        return true\n      end\n      if end_char\
    \ == substr then\n        return true\n      end\n      start_idx = start_idx\
    \ + 1\n      end_idx = end_idx - 1\n    end\n    return false\n  end\n  return\
    \ is_substring_helper(b, a) or is_substring_helper(a, a)\nend", "  local function\
    \ is_substring(c,d)\n    local function is_rotated_substring(c,d)\n      local\
    \ function is_rotated_substring(c,d)\n        local function is_rotated_substring(c,d)\n\
    \          local function is_rotated_substring(c,d)\n            local function\
    \ is_rotated_substring(c,d)\n              local function is_rotated_substring(c,d)\n\
    \                local function is_rotated_substring(c,d)\n                  local\
    \ function is_rotated_substring(c,d)\n                    local function is_rotated_substring(c,d)\n\
    \                      local function is_rotated_substring(c,d)\n            \
    \            local function is_rotated_substring(c,d)\n                      \
    \    local function is_rotated_substring(c,d)\n                            local\
    \ function is_rotated_substring(c,d)\n                              local function\
    \ is_rotated_substring(c,d)\n                                local function is_rotated_substring(c,d)\n\
    \                                  local function is_rotated_substring(c,d)\n\
    \                                    local function is_rotated_substring(c,d)\n\
    \                                      local function is_rotated_substring(c,d)\n\
    \                                        local function is_rotated_substring(c,d)\n\
    \                                          local function is_rotated_substring(c,d)\n\
    \                                            local function is_rotated_substring(c,d)\n\
    \                                              local function is_rotated_substring(c,d)\n\
    \                                                local function is_rotated_substring(c,d)\n\
    \                                                  local function is_rotated_substring(c,d)\n\
    \                                                    local function is_rotated_substring(c,d)\n\
    \                                                      local function is_rotated_substring(c,d)\n\
    \                                                        local function is_rotated_substring(c,d)\n\
    \                                                          local function is_rotated_substring(c,d)\n\
    \                                                            local function is_rotated_substring(c,d)\n\
    \                                                              local function\
    \ is_rotated_substring(c,d)\n                                                \
    \                local function is_rotated_substring(c,d)\n                  \
    \                                                local function is_rotated_substring(c,d)\n\
    \                                                                    local function\
    \ is_rotated_substring(c,d)\n                                                \
    \                      return true\n                                         \
    \                       end\n                                                \
    \              end\n                                                         \
    \   end\n                                                          end\n     \
    \                                                   end\n                    \
    \                                  end\n                                     \
    \               end\n                                                  end\n \
    \                                               end\n                        \
    \                      end\n                                            end\n\
    \                                          end\n                             \
    \           end\n                                      end\n                 \
    \                   end\n                                  end\n             \
    \                   end\n                              end\n                 \
    \           end\n                          end\n                        end\n\
    \                      end\n                    end\n                  end\n \
    \               end\n              end\n            end\n          end\n     \
    \   end\n      end\n    end\n  end\n  return is_substring(c,d) or is_rotated_substring(c,d)\
    \ or is_rotated_substring(c,d) or is_rotated_substring(c,d) or is_rotated_substring(c,d)\
    \ or is_rot", "  local function is_substring(c,s)\n    return #c > 0 and #s >\
    \ 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function\
    \ is_rotated_substring(c,s)\n    return #c > 0 and #s > 0 and #c <= #s and #s\
    \ <= #c and string.sub(c,#s,#c) == s\n  end\n  local function is_substring_of_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c) == s\n  end\n  local function is_rotated_substring_of_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s\n  end\n  local\
    \ function is_substring_of_rotated_substring_of_rotated_substring(c,s)\n    return\
    \ #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s and\
    \ string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c)\
    \ == s and string.sub(c,#s,#c) == s\n  end\n  local function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c)\
    \ == s and string.sub(c,#s,#c) == s and string.sub(c,#s,#c) == s\n  end\n  local\
    \ function is_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_substring_of_rotated_",
  "  local function is_substring(c)\n    return a:find(c) ~= nil\n  end\n  local function\
    \ is_rotated_substring(c)\n    return a:find(c) ~= nil and a:find(c, 1, true)\
    \ ~= nil\n  end\n  local function is_rotated_substring2(c)\n    return a:find(c)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\n  end\n\
    \  local function is_rotated_substring3(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\n\
    \  end\n  local function is_rotated_substring4(c)\n    return a:find(c) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring5(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring6(c)\n    return\
    \ a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring7(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\n\
    \  end\n  local function is_rotated_substring8(c)\n    return a:find(c) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil", " \
    \ local function is_substring_helper(str, pattern)\n    local function helper(str,\
    \ pattern)\n      if str:sub(1, #pattern) == pattern then\n        return true\n\
    \      else\n        return helper(str:sub(#pattern + 1), pattern)\n      end\n\
    \    end\n    return helper(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b) ~= nil\nend", "  local function is_substr_helper(str, pattern)\n    local\
    \ function helper(str, pattern)\n      local pat = pattern:gsub(\"%w+\", function(c)\n\
    \        return string.char(tonumber(c))\n      end)\n      local pat = pat:gsub(\"\
    %S+\", function(c)\n        return string.char(tonumber(c))\n      end)\n    \
    \  local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%w+\", function(c)\n        return string.char(tonumber(c))\n\
    \      end)\n      local pat = pat:gsub(\"%S+\", function(c)\n        return string.char(tonumber(c))",
  "  local function helper(str, i, j)\n    if i == j then return true end\n    if\
    \ str[i] == b and helper(str, i + 1, j - 1) then\n      return true\n    end\n\
    \    if str[j] == b and helper(str, i, j - 1) then\n      return true\n    end\n\
    \    return false\n  end\n  return helper(a, b, #a) == 1\nend", "  local function\
    \ is_substring_helper(str, substr)\n    return str:sub(1, #substr) == substr\n\
    \  end\n  return a:find(b) or is_substring_helper(a, a) or is_substring_helper(b,\
    \ b)\nend", "    local function is_substring_helper(str, substr)\n        if str:len()\
    \ < substr or str:len() > substr:len() then\n            return false\n      \
    \  end\n        local i = 2\n        while i <= str:len() do\n            if str:sub(i,\
    \ i) ~= substr:sub(1, substr) then\n                return false\n           \
    \ end\n            i = i + 1\n        end\n        return true\n    end\n    return\
    \ is_substring_helper(a, b) or is_substring_helper(b, a)\nend", "  local function\
    \ is_substring_of(a, b)\n    local function is_substring(c)\n      return string.find(a,\
    \ c) ~= nil\n    end\n    local function is_rotated_substring(c)\n      return\
    \ string.find(b, c) ~= nil\n    end\n    local function is_rotated_substrings(c)\n\
    \      local substrings = {}\n      for i = 1, #c do\n        local sub = c[i]\n\
    \        if is_rotated_substring(sub) then\n          table.insert(substrings,\
    \ sub)\n        end\n      end\n      return #substrings > 0\n    end\n    local\
    \ function is_rotated_substrings_of(c)\n      local substrings = {}\n      for\
    \ i = 1, #c do\n        local sub = c[i]\n        if is_rotated_substrings(sub)\
    \ then\n          table.insert(substrings, sub)\n        end\n      end\n    \
    \  return #substrings > 0\n    end\n    local function is_rotated_substrings_of2(c)\n\
    \      local substrings = {}\n      for i = 1, #c do\n        local sub = c[i]\n\
    \        if is_rotated_substrings(sub) then\n          table.insert(substrings,\
    \ sub)\n        end\n      end\n      return #substrings > 0\n    end\n    if\
    \ is_substring(a) then\n      return is_substring(b)\n    elseif is_substring(b)\
    \ then\n      return is_substring(a)\n    elseif is_rotated_substring(a) then\n\
    \      return is_rotated_substring(b)\n    elseif is_rotated_substring(b) then\n\
    \      return is_rotated_substring(a)\n    elseif is_rotated_substrings_of(a)\
    \ then\n      return is_rotated_substrings_of(b)\n    elseif is_rotated_substrings_of(b)\
    \ then\n      return is_rotated_substrings_of(a)\n    elseif is_rotated_substrings_of2(a)\
    \ then\n      return is_rotated_substrings_of2(b)\n    elseif is_rotated_substrings_of2(b)\
    \ then\n      return is_rotated_substrings_of2(a)\n    end\n  end\n  return is_substring_of(a,\
    \ b)\nend", "  local function is_substr_rotation(word, pattern)\n    local function\
    \ is_substr_rotation(word, pattern)\n      local function is_substr_rotation(word,\
    \ pattern)\n        local function is_substr_rotation(word, pattern)\n       \
    \   local function is_substr_rotation(word, pattern)\n            local function\
    \ is_substr_rotation(word, pattern)\n              local function is_substr_rotation(word,\
    \ pattern)\n                local function is_substr_rotation(word, pattern)\n\
    \                  local function is_substr_rotation(word, pattern)\n        \
    \            local function is_substr_rotation(word, pattern)\n              \
    \        local function is_substr_rotation(word, pattern)\n                  \
    \      local function is_substr_rotation(word, pattern)\n                    \
    \      local function is_substr_rotation(word, pattern)\n                    \
    \        local function is_substr_rotation(word, pattern)\n                  \
    \            local function is_substr_rotation(word, pattern)\n              \
    \                  local function is_substr_rotation(word, pattern)\n        \
    \                          local function is_substr_rotation(word, pattern)\n\
    \                                    local function is_substr_rotation(word, pattern)\n\
    \                                      local function is_substr_rotation(word,\
    \ pattern)\n                                        local function is_substr_rotation(word,\
    \ pattern)\n                                          local function is_substr_rotation(word,\
    \ pattern)\n                                            local function is_substr_rotation(word,\
    \ pattern)\n                                              local function is_substr_rotation(word,\
    \ pattern)\n                                                local function is_substr_rotation(word,\
    \ pattern)\n                                                  local function is_substr_rotation(word,\
    \ pattern)\n                                                    local function\
    \ is_substr_rotation(word, pattern)\n                                        \
    \              local function is_substr_rotation(word, pattern)\n            \
    \                                            local function is_substr_rotation(word,\
    \ pattern)\n                                                          local function\
    \ is_substr_rotation(word, pattern)\n                                        \
    \                    local function is_substr_rotation(word, pattern)\n      \
    \                                                        local function is_substr_rotation(word,\
    \ pattern)\n                                                                local\
    \ function is_substr_rotation(word, pattern)\n                               \
    \                                   local function is_substr_rotation(word, pattern)\n\
    \                                                                    local function\
    \ is_substr_rotation(word, pattern)\n                                        \
    \                              local function is_substr_rotation(word, pattern)\n\
    \                                                                        local\
    \ function is_substr_rotation(word, pattern)\n                               \
    \                                           local function is_substr_rotation(word,\
    \ pattern)\n                                                                 \
    \           local function is_substr_rotation(word, pattern)\n               \
    \                                                               local function\
    \ is_substr_rotation(word, pattern)\n                                        \
    \                                        local function is_substr_rotation(word,\
    \ pattern)\n                                                                 \
    \                 local function is_substr_rotation(word, pattern)\n         \
    \                                                                           local\
    \ function is_substr_rotation(word, pattern)", "  local function is_substring(c,d)\n\
    \    return string.find(a,c) and string.find(a,d) or string.find(d,c)\n  end\n\
    \  local function is_substring_rotation(a,b,c)\n    return string.find(a,b) and\
    \ string.find(a,c) or string.find(c,b)\n  end\n  local function is_substring_rotations(a,b,c,d)\n\
    \    return string.find(a,b) and string.find(a,c) and string.find(a,d) or string.find(c,b)\
    \ and string.find(c,d) or string.find(d,b) and string.find(d,c)\n  end\n  local\
    \ function is_substring_rotations_rotations(a,b,c,d,e)\n    return string.find(a,b)\
    \ and string.find(a,c) and string.find(a,d) and string.find(a,e) or string.find(c,b)\
    \ and string.find(c,d) and string.find(c,e) or string.find(d,b) and string.find(d,c)\
    \ and string.find(d,e) or string.find(e,b) and string.find(e,c) and string.find(e,d)\n\
    \  end\n  local function is_substring_rotations_rotations_rotations(a,b,c,d,e,f)\n\
    \    return string.find(a,b) and string.find(a,c) and string.find(a,d) and string.find(a,e)\
    \ and string.find(a,f) or string.find(c,b) and string.find(c,d) and string.find(c,e)\
    \ and string.find(c,f) or string.find(d,b) and string.find(d,c) and string.find(d,e)\
    \ and string.find(d,f) or string.find(e,b) and string.find(e,c) and string.find(e,d)\
    \ and string.find(e,f) or string.find(f,b) and string.find(f,c) and string.find(f,d)\
    \ and string.find(f,e)\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(a,b,c,d,e,f,g)\n\
    \    return string.find(a,b) and string.find(a,c) and string.find(a,d) and string.find(a,e)\
    \ and string.find(a,f) and string.find(a,g) or string.find(c,b) and string.find(c,d)\
    \ and string.find(c,e) and string.find(c,f) and string.find(c,g) or string.find(d,b)\
    \ and string.find(d,c) and string.find(d,e) and string.find(d,f) and string.find(d,g)\
    \ or string.find(e,b) and string.find(e,c) and string.find(e,d) and string.find(e,f)\
    \ and string.find(e,g) or string.find(f,b) and string.find(f,c) and string.find(f,d)\
    \ and string.find(f,e) and string.find(f,g) or string.find(g,b) and string.find(g,c)\
    \ and string.find(g,d) and string.find(g,e) and string.find(g,f)\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations_", "  local function\
    \ is_substring_helper(substr, str)\n    if substr == \"\" then\n      return true\n\
    \    end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true\n    end\n    if substr\
    \ == \"?\" then\n      return true\n    end\n    if substr == \"*\" then\n   \
    \   return true\n    end\n    if substr == \"?\" then\n      return true\n   \
    \ end\n    if substr == \"*\" then\n      return true", "  local function helper(str,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if str[i] == b[j]\
    \ then\n      return helper(str, i+1, j+1)\n    end\n    return helper(str, i+1,\
    \ j)\n  end\n  return helper(a, b, #b)\nend", "  local function is_substring_helper(substring,\
    \ word)\n    for i = 1, #word do\n      if string.sub(word, i, i) == substring\
    \ then\n        return true\n      end\n    end\n    return false\n  end\n  local\
    \ function is_substring(a, b)\n    return is_substring_helper(b, a) or is_substring_helper(a,\
    \ a)\n  end\n  return is_substring(a, b) or is_substring(b, a)\nend", "  local\
    \ function is_substring_of_rotated_string(a, b)\n    local function is_substring_of_rotated_string_aux(str,\
    \ substr, i, j)\n      if i >= j or j >= #str then return false end\n      if\
    \ substr == str[i] then\n        return is_substring_of_rotated_string_aux(str,\
    \ substr, i+1, j-1)\n      else\n        return is_substring_of_rotated_string_aux(str,\
    \ substr, i, j-1)\n      end\n    end\n    return is_substring_of_rotated_string_aux(a,\
    \ b, #a, #b)\n  end\n  return is_substring_of_rotated_string(a, b) or is_substring_of_rotated_string(b,\
    \ a)\nend", "  local function substr_check(s, t)\n    return string.find(s, t)\
    \ ~= nil\n  end\n  local function rotate_check(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i)\n  end\n  local function rotate_check_2(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == string.sub(s, j, i)\n  end\n  local\
    \ function rotate_check_3(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, i, j) == string.sub(s,\
    \ j, i)\n  end\n  local function rotate_check_4(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i)\n  end\n  local function rotate_check_5(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == string.sub(s, j, i)\n  end\n  local\
    \ function rotate_check_6(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, i, j) == string.sub(s,\
    \ j, i)\n  end\n  local function rotate_check_7(s, t)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ i, j) == string.sub(s, j, i)\n  end\n  local function rotate_check_8(s, t)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, i, j) == string.sub(s, j, ", "  local function\
    \ is_substring_helper(str, substr)\n    return str:sub(1, #substr) == substr\n\
    \  end\n  local function is_substring(a, b)\n    return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\n  end\n  local function is_rotated_substring(a,\
    \ b)\n    return is_substring_helper(a, string.sub(b, #a)) or is_substring_helper(b,\
    \ string.sub(a, #b))\n  end\n  return is_substring(a, b) or is_substring(b, a)\
    \ or is_rotated_substring(a, b)\nend", "    local function is_substring_of_a(c)\n\
    \        local function is_substring_b(d)\n            return d ~= nil and string.find(c,\
    \ d) > -1\n        end\n        return is_substring_b(b) or is_substring_b(a)\
    \ or is_substring_b(string.sub(b, 1))\n    end\n    return is_substring_of_a(a)\
    \ or is_substring_of_a(b)\nend", "  local function is_substring_helper(str, pattern)\n\
    \    local function helper(str, pattern)\n      local i = 1, #str\n      while\
    \ i <= #pattern do\n        if string.sub(pattern, 1, i) == string.sub(str,1,i)\
    \ then\n          i = i + 1\n        else\n          return false\n        end\n\
    \      end\n      return true\n    end\n    return helper(str, pattern)\n  end\n\
    \  return is_substring_helper(a,b) or is_substring_helper(b,a)\nend", "  local\
    \ function is_substring_of_a(c)\n    return a:sub(1, #a) == c\n  end\n  local\
    \ function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c(c)\n\
    \    return is_substring_of_a_or_rotated_b(c) or is_substring_of_a_or_rotated_b(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d(c)\n\
    \    return is_substring_of_a_or_rotated_b_or_rotated_c(c) or is_substring_of_a_or_rotated_b_or_rotated_c(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e(c)\n\
    \    return is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d(c) or is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f(c)\n\
    \    return is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e(c)\
    \ or is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f_or_rotated_g(c)\n\
    \    return is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f(c)\
    \ or is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f_or_rotated_g_or_rotated_h(c)\n\
    \    return is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f_or_rotated_g(c)\
    \ or is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_", " \
    \ local function is_substring_helper(substr, str)\n    local i, j = 1, #substr\n\
    \    while i <= j do\n      local c = str:sub(i, i)\n      local d = str:sub(j,\
    \ j)\n      if c == d then\n        j = j + 1\n      else\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_substring(a,\
    \ b)\n    if a == nil then\n      return false\n    end\n    if b == nil then\n\
    \      return false\n    end\n    return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\n  end\n  local function is_rotated_substring(a, b)\n    if a == nil then\n\
    \      return false\n    end\n    if b == nil then\n      return false\n    end\n\
    \    local i, j = 1, #a\n    while i <= j do\n      local c = a:sub(i, i)\n  \
    \    local d = a:sub(j, j)\n      if c == d then\n        j = j + 1\n      else\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ is_rotated_substring2(a, b)\n    if a == nil then\n      return false\n    end\n\
    \    if b == nil then\n      return false\n    end\n    local i, j = 1, #a\n \
    \   while i <= j do\n      local c = a:sub(i, i)\n      local d = a:sub(j, j)\n\
    \      if c == d then\n        j = j + 1\n      else\n        return false\n \
    \     end\n    end\n    return true\n  end\n  local function is_rotated_substring3(a,\
    \ b)\n    if a == nil then\n      return false\n    end\n    if b == nil then\n\
    \      return false\n    end\n    local i, j = 1, #a\n    while i <= j do\n  \
    \    local c = a:sub(i, i)\n      local d = a:sub(j, j)\n      if c == d then\n\
    \        j = j + 1\n      else\n        return false\n      end\n    end\n   \
    \ return true\n  end\n  local function is_rotated_substring4(a, b)\n    if a ==\
    \ nil then\n      return false\n    end\n    if b == nil then\n      return false\n\
    \    end\n    local i, j = 1, #a\n    while i <= j do\n      local c = a:sub(i,\
    \ i)\n      local d = a:sub(j, j)\n      if c == d then\n        j = j + 1\n \
    \     else\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local function is_rotated_substring5(a, b)\n    if a == nil then\n      return\
    \ false\n    end\n    if b == nil then\n      return false\n    end\n    local\
    \ i, j = 1, #a\n    while i <= j do\n      local ", "  local function is_substring_helper(substr,\
    \ str)\n    return str:find(substr) ~= nil\n  end\n  return is_substring_helper(b,a)\
    \ or is_substring_helper(a,b)\nend", "  local function is_substring(c,d)\n   \
    \ return #c > 0 and #d > 0 and #c <= #d and string.find(c, d) > -1\n  end\n  local\
    \ function is_substring_rotation(c)\n    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a),\
    \ string.sub(c,1,#c)) > -1\n  end\n  local function is_substring_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations(c)\n    return\
    \ #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub(c,1,#c))\
    \ > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations_rotations(c)\n\
    \    return #c > 0 and #c <= #a and string.find(string.sub(a,1,#a), string.sub",
  "  local function substr_check(s, t)\n    return #s == #t and\n      all(function(c)\n\
    \        return #c == #t and\n          string.find(s, c, 1, true) == #t - #c\
    \ + 1 and\n          string.find(t, c, 1, true) == #s - #c + 1 and\n         \
    \ string.find(s, c, #t + 1, true) == #t - #c + 1 and\n          string.find(t,\
    \ c, #s + 1, true) == #s - #c + 1 and\n          string.find(s, c, #t + 1, true)\
    \ == #t - #c + 1 and\n          string.find(t, c, #s + 1, true) == #s - #c + 1\
    \ and\n          string.find(s, c, #t + 1, true) == #t - #c + 1 and\n        \
    \  string.find(t, c, #s + 1, true) == #s - #c + 1 and\n          string.find(s,\
    \ c, #t + 1, true) == #t - #c + 1 and\n          string.find(t, c, #s + 1, true)\
    \ == #s - #c + 1 and\n          string.find(s, c, #t + 1, true) == #t - #c + 1\
    \ and\n          string.find(t, c, #s + 1, true) == #s - #c + 1 and\n        \
    \  string.find(s, c, #t + 1, true) == #t - #c + 1 and\n          string.find(t,\
    \ c, #s + 1, true) == #s - #c + 1 and\n          string.find(s, c, #t + 1, true)\
    \ == #t - #c + 1 and\n          string.find(t, c, #s + 1, true) == #s - #c + 1\
    \ and\n          string.find(s, c, #t + 1, true) == #t - #c + 1 and\n        \
    \  string.find(t, c, #s + 1, true) == #s - #c + 1 and\n          string.find(s,\
    \ c, #t + 1, true) == #t - #c + 1 and\n          string.find(t, c, #s + 1, true)\
    \ == #s - #c + 1 and\n          string.find(s, c, #t + 1, true) == #t - #c + 1\
    \ and\n          string.find(t, c, #s + 1, true) == #s - #c + 1 and\n        \
    \  string.find(s, c, #t + 1, true) == #t - #c + 1 and\n          string.find(t,\
    \ c, #s + 1, true) == #s - #c + 1 and\n          string.find(s, c, #t + 1, true)\
    \ == #t - #c + 1 and\n          string.find(t, c, #s + 1, true) == #s - #c + 1\
    \ and\n          string.find(s, c, #t + 1, true) == #t - #c + 1 and\n        \
    \  string.find(t, c, #s + 1, true) == #s - #c + 1 and\n          string.find(s,\
    \ c, #t + 1, true) == #t - ", "    local function is_substring_helper(str, substr)\n\
    \        local function is_substring_helper_recursive(str, substr, i, j)\n   \
    \         if i == j then\n                return true\n            elseif str[i]\
    \ == substr[j] then\n                return is_substring_helper_recursive(str,\
    \ substr, i + 1, j + 1)\n            else\n                return false\n    \
    \        end\n        end\n        return is_substring_helper_recursive(str, substr,\
    \ 1, #str)\n    end\n    return is_substring_helper(a, b, true)\nend", "  local\
    \ function helper(w, i, j)\n    if i == j or j == 0 then return true end\n   \
    \ if w[i] == b[j] then\n      return helper(w, i+1, j-1)\n    else\n      return\
    \ helper(w, i, j-1)\n    end\n  end\n  return helper(a, b, #b)\nend", "  local\
    \ function substr_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function rotate_check(s, t)\n    return string.find(", "    local function substr_check(word,\
    \ pattern)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.gsub(pattern, \"%u\", string.upper)\n        local\
    \ pattern = string.gsub(pattern, \"%S\", string.upper)\n        local pattern\
    \ = string.gsub(pattern, \"%l\", string.lower)\n        local pattern = string.gsub(pattern,\
    \ \"%u\", string.upper)\n        local pattern = string.gsub(pattern, \"%S\",\
    \ string.upper)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.gsub(pattern, \"%u\", string.upper)\n        local\
    \ pattern = string.gsub(pattern, \"%S\", string.upper)\n        local pattern\
    \ = string.gsub(pattern, \"%l\", string.lower)\n        local pattern = string.gsub(pattern,\
    \ \"%u\", string.upper)\n        local pattern = string.gsub(pattern, \"%S\",\
    \ string.upper)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.gsub(pattern, \"%u\", string.upper)\n        local\
    \ pattern = string.gsub(pattern, \"%S\", string.upper)\n        local pattern\
    \ = string.gsub(pattern, \"%l\", string.lower)\n        local pattern = string.gsub(pattern,\
    \ \"%u\", string.upper)\n        local pattern = string.gsub(pattern, \"%S\",\
    \ string.upper)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.gsub(pattern, \"%u\", string.upper)\n        local\
    \ pattern = string.gsub(pattern, \"%S\", string.upper)\n        local pattern\
    \ = string.gsub(pattern, \"%l\", string.lower)\n        local pattern = string.gsub(pattern,\
    \ \"%u\", string.upper)\n        local pattern = string.gsub(pattern, \"%S\",\
    \ string.upper)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.gsub(pattern, \"%u\", string.upper)\n        local\
    \ pattern = string.gsub(pattern, \"%S\", string.upper)\n        local pattern\
    \ = string.gsub(pattern, \"%l\", string.lower)\n        local pattern = string.gsub(pattern,\
    \ \"%u\", string.upper)\n        local pattern = string.gsub(pattern, \"%S\",\
    \ string.upper)\n        local pattern = string.gsub(pattern, \"%l\", string.lower)\n\
    \        local pattern = string.g", "  local function is_substring_of_a(s)\n \
    \   for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_a_or_rotated_b(s)\n\
    \    for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n      if string.find(b, c) then\n        return true\n    \
    \  end\n    end\n    return false\n  end\n  local function is_substring_of_a_or_rotated_b_or_both(s)\n\
    \    for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n      if string.find(b, c) then\n        return true\n    \
    \  end\n      if string.find(b, c, 2) then\n        return true\n      end\n \
    \   end\n    return false\n  end\n  local function is_substring_of_a_or_rotated_b_or_both_or_none(s)\n\
    \    for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n      if string.find(b, c) then\n        return true\n    \
    \  end\n      if string.find(b, c, 2) then\n        return true\n      end\n \
    \     if string.find(b, c, 3) then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_substring_of_a_or_rotated_b_or_both_or_none_or_both(s)\n\
    \    for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n      if string.find(b, c) then\n        return true\n    \
    \  end\n      if string.find(b, c, 2) then\n        return true\n      end\n \
    \     if string.find(b, c, 3) then\n        return true\n      end\n      if string.find(b,\
    \ c, 4) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substring_of_a_or_rotated_b_or_both_or_none_or_both_or_none(s)\n\
    \    for _, c in ipairs(s) do\n      if string.find(a, c) then\n        return\
    \ true\n      end\n      if string.find(b, c) then\n        return true\n    \
    \  end\n      if string.find(b, c, 2) then\n        return true\n      end\n \
    \     if string.find(b, c, 3) then\n        return true\n      end\n      if string.find(b,\
    \ c, 4) then\n        return true\n      end\n      if string.find(b, c, 5) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b_or_both_or_none_or_", "  local function is_substring_of_a(b)\n\
    \    local function is_substring_of_a_aux(str, substr)\n      if str:sub(1, #substr)\
    \ == substr then\n        return true\n      elseif str:sub(1, #substr) ~= \"\"\
    \ then\n        return is_substring_of_a_aux(str:sub(1, #substr), substr)\n  \
    \    else\n        return false\n      end\n    end\n    return is_substring_of_a_aux(b,\
    \ a)\n  end\n  return is_substring_of_a(b)\nend", "  local function helper(str,\
    \ pattern)\n    local function helper1(str, pattern)\n      local function helper2(str,\
    \ pattern)\n        local function helper3(str, pattern)\n          local function\
    \ helper4(str, pattern)\n            local function helper5(str, pattern)\n  \
    \            local function helper6(str, pattern)\n                local function\
    \ helper7(str, pattern)\n                  local function helper8(str, pattern)\n\
    \                    local function helper9(str, pattern)\n                  \
    \    local function helper10(str, pattern)\n                        local function\
    \ helper11(str, pattern)\n                          local function helper12(str,\
    \ pattern)\n                            local function helper13(str, pattern)\n\
    \                              local function helper14(str, pattern)\n       \
    \                         local function helper15(str, pattern)\n            \
    \                      local function helper16(str, pattern)\n               \
    \                     local function helper17(str, pattern)\n                \
    \                      local function helper18(str, pattern)\n               \
    \                         local function helper19(str, pattern)\n            \
    \                              local function helper20(str, pattern)\n       \
    \                                     local function helper21(str, pattern)\n\
    \                                              local function helper22(str, pattern)\n\
    \                                                local function helper23(str,\
    \ pattern)\n                                                  local function helper24(str,\
    \ pattern)\n                                                    local function\
    \ helper25(str, pattern)\n                                                   \
    \   local function helper26(str, pattern)\n                                  \
    \                      local function helper27(str, pattern)\n               \
    \                                           local function helper28(str, pattern)\n\
    \                                                            local function helper29(str,\
    \ pattern)\n                                                              local\
    \ function helper30(str, pattern)\n                                          \
    \                      local function helper31(str, pattern)\n               \
    \                                                   local function helper32(str,\
    \ pattern)\n                                                                 \
    \   local function helper33(str, pattern)\n                                  \
    \                                    local function helper34(str, pattern)\n \
    \                                                                       local\
    \ function helper35(str, pattern)\n                                          \
    \                                local function helper36(str, pattern)\n     \
    \                                                                       local\
    \ function helper37(str, pattern)\n                                          \
    \                                    local function helper38(str, pattern)\n \
    \                                                                            \
    \   local function helper39(str, pattern)\n                                  \
    \                                                local function helper40(str,\
    \ pattern)\n                                                                 \
    \                   local function helper41(str, pattern)\n                  \
    \                                                                    local function\
    \ helper42(str, pattern)\n                                                   \
    \                                     local function helper43(str, pattern)\n\
    \                                                                            \
    \              local function helper44(str, pattern)\n                       \
    \                                                                     local function\
    \ helper45(str, pattern)\n                                                   \
    \                                           local function helper46(str, pattern)\n\
    \                                                                            \
    \                    local function helper47(str, pattern)\n                 \
    \                                                                            \
    \     local function helper48(str, pattern)\n                                \
    \                                                                    local function\
    \ helper49(str, pattern)\n                                                   \
    \                                                   local function ", "    local\
    \ function substr_check(substr, str)\n        for i = 1, #str do\n           \
    \ if str:sub(i,i) == substr then\n                return true\n            end\n\
    \        end\n        return false\n    end\n    local function rotation(str,\
    \ i, j)\n        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n  \
    \      local u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return\
    \ s ~= t or s ~= u or s ~= v\n    end\n    local function rotate(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i+1,j+1)\n        local v = str:sub(i,j+1)\n        return s ~=\
    \ t or s ~= u or s ~= v\n    end\n    local function rotate_check(str, i, j)\n\
    \        local s = str:sub(i,j)\n        local t = str:sub(i+1,j)\n        local\
    \ u = str:sub(i", "    local function substr_check(word, pattern)\n        local\
    \ function substr_check_aux(word, pattern)\n            local function substr_check_aux(word,\
    \ pattern)\n                if word == pattern then\n                    return\
    \ true\n                elseif pattern == \"\" then\n                    return\
    \ false\n                else\n                    local i = #word\n         \
    \           local j = #pattern\n                    while i > 0 and j > 0 do\n\
    \                        if word[i] == pattern[j] then\n                     \
    \       i = i - 1\n                            j = j - 1\n                   \
    \     else\n                            if word[i] ~= pattern[j] then\n      \
    \                          return false\n                            end\n   \
    \                         i = i - 1\n                        end\n           \
    \         end\n                    return true\n                end\n        \
    \    end\n            return substr_check_aux(word, pattern)\n        end\n  \
    \      return substr_check_aux(word, pattern)\n    end\n    return substr_check(a,\
    \ b)\nend", "  local function is_substring(c,s)\n    return string.find(c, s)\
    \ ~= nil\n  end\n  local function is_rotated_substring(c,s)\n    return string.find(c,\
    \ s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n    return\
    \ string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, true) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return string.find(c, s, 1, ", "  local function is_substring(c,s)\n    return\
    \ string.find(c, s) ~= nil\n  end\n  local function is_rotated_substring(c,s)\n\
    \    local rotated_c = string.gsub(c, \"^\" .. s .. \"$\", \"$\" .. s .. \"^\"\
    )\n    return string.find(rotated_c, s) ~= nil\n  end\n  local function is_substring_or_rotated_substring(c,s)\n\
    \    return is_substring(c,s) or is_rotated_substring(c,s)\n  end\n  local function\
    \ is_substring_or_rotated_substring_or_both(c,s)\n    return is_substring_or_rotated_substring(c,s)\
    \ or is_substring(c,s)\n  end\n  local function is_substring_or_rotated_substring_or_both_or_none(c,s)\n\
    \    return is_substring_or_rotated_substring_or_both(c,s) or is_substring_or_rotated_substring(c,s)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none(c,s)\n\
    \    return is_substring_or_rotated_substring_or_both_or_none(c,s) or is_substring_or_rotated_substring_or_both(c,s)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(c,s)\n\
    \    return is_substring_or_rotated_substring_or_both_or_none_or_none(c,s) or\
    \ is_substring_or_rotated_substring_or_both_or_none(c,s)\n  end\n  local function\
    \ is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(c,s)\n   \
    \ return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(c,s)\
    \ or is_substring_or_rotated_substring_or_both_or_none_or_none(c,s)\n  end\n \
    \ local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none(c,s)\n\
    \    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none(c,s)\
    \ or is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(c,s)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none(c,s)\n\
    \    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none(c,s)\
    \ or is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_", "  local\
    \ function helper(str, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if str[i] == b[j] then\n      return helper(str, i+1, j-1)\n    else\n  \
    \    return helper(str, i, j-1)\n    end\n  end\n  return helper(a, b, #b)\nend",
  "  local function helper(str, i, j)\n    if i == j then return true end\n    if\
    \ i > j then return false end\n    if str[i] == b and helper(str, i+1, j-1) or\
    \ helper(str, i+1, j) then\n      return true\n    end\n  end\n  return helper(a,\
    \ b, #a)\nend", "  local function is_substring(c)\n    return string.find(a, c)\
    \ ~= nil\n  end\n  local function is_rotated_substring(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring2(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring3(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring4(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring5(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring6(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring7(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring8(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring9(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring10(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring11(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring12(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring13(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring14(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring15(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring16(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring17(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring18(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring19(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring20(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring21(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring22(c)\n    return string.find(b,\
    \ c) ~= nil\n  end\n  local function is_rotated_substring23(c)\n", "  local function\
    \ helper(w, i, j)\n    if i == j or i == 0 then\n      return true\n    end\n\
    \    if w[i] == b[j] then\n      return helper(w, i + 1, j + 1)\n    end\n   \
    \ if w[i] == b[j + 1] then\n      return helper(w, i, j + 1)\n    end\n    return\
    \ helper(w, i + 1, j)\n  end\n  return helper(a, b, #b)\nend", "  local function\
    \ substr_check(str)\n    local function substr_check(str)\n      local function\
    \ substr_check(str)\n        local function substr_check(str)\n          local\
    \ function substr_check(str)\n            local function substr_check(str)\n \
    \             local function substr_check(str)\n                local function\
    \ substr_check(str)\n                  local function substr_check(str)\n    \
    \                local function substr_check(str)\n                      local\
    \ function substr_check(str)\n                        local function substr_check(str)\n\
    \                          local function substr_check(str)\n                \
    \            local function substr_check(str)\n                              local\
    \ function substr_check(str)\n                                local function substr_check(str)\n\
    \                                  local function substr_check(str)\n        \
    \                            local function substr_check(str)\n              \
    \                        local function substr_check(str)\n                  \
    \                      local function substr_check(str)\n                    \
    \                      local function substr_check(str)\n                    \
    \                        local function substr_check(str)\n                  \
    \                            local function substr_check(str)\n              \
    \                                  local function substr_check(str)\n        \
    \                                          local function substr_check(str)\n\
    \                                                    local function substr_check(str)\n\
    \                                                      local function substr_check(str)\n\
    \                                                        local function substr_check(str)\n\
    \                                                          local function substr_check(str)\n\
    \                                                            local function substr_check(str)\n\
    \                                                              local function\
    \ substr_check(str)\n                                                        \
    \        local function substr_check(str)\n                                  \
    \                                local function substr_check(str)\n          \
    \                                                          local function substr_check(str)\n\
    \                                                                      return\
    \ true\n                                                                end\n\
    \                                                              end\n         \
    \                                                   end\n                    \
    \                                      end\n                                 \
    \                       end\n                                                \
    \      end\n                                                    end\n        \
    \                                          end\n                             \
    \                   end\n                                              end\n \
    \                                           end\n                            \
    \              end\n                                        end\n            \
    \                          end\n                                    end\n    \
    \                              end\n                                end\n    \
    \                          end\n                            end\n            \
    \              end\n                        end\n                      end\n \
    \                   end\n                  end\n                end\n        \
    \      end\n            end\n          end\n        end\n      end\n    end\n\
    \  end\n  return substr_check(a) and substr_check(b) and substr_check(a:sub(1,#a))\
    \ and substr_check(b:sub(1,#b)) and substr_check(a:sub(2,#a)) and substr_check(b:sub(2,#b))\
    \ and substr_check(a:sub(3,#a)) and substr_check(b:sub(3,#b)) and substr_check(a:sub(4,#a))\
    \ and substr_check(b:sub(4,#b)) and substr_check(a:sub(5,#a)) and substr_check(b:sub(5,#b))\
    \ and substr_check(a:sub(6,#a)) and substr_check(b:sub(6,#b", "  local function\
    \ substr_check(str, pattern)\n    local function substr_check_aux(str, pattern)\n\
    \      local function substr_check_aux(str, pattern)\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ == pattern then\n          return true\n", "  local function is_substring_of_word(word,\
    \ pattern)\n    local pattern = string.lower(pattern)\n    local word = string.lower(word)\n\
    \    local pattern_index = string.find(word, pattern, 1, true)\n    if pattern_index\
    \ == nil then\n      return false\n    end\n    local pattern_index_length = string.len(pattern)\n\
    \    local word_index = string.find(word, pattern, 1, true)\n    if word_index\
    \ == nil then\n      return false\n    end\n    local word_index_length = string.len(word)\n\
    \    return word_index - pattern_index <= pattern_index_length and word_index\
    \ - pattern_index + word_index_length <= pattern_index_length\n  end\n  local\
    \ function is_substring_of_pattern(word, pattern)\n    local pattern = string.lower(pattern)\n\
    \    local word = string.lower(word)\n    local pattern_index = string.find(word,\
    \ pattern, 1, true)\n    if pattern_index == nil then\n      return false\n  \
    \  end\n    local pattern_index_length = string.len(pattern)\n    local word_index\
    \ = string.find(word, pattern, 1, true)\n    if word_index == nil then\n     \
    \ return false\n    end\n    local word_index_length = string.len(word)\n    return\
    \ word_index - pattern_index <= pattern_index_length and word_index - pattern_index\
    \ + word_index_length <= pattern_index_length\n  end\n  local function is_substring_of_pattern_with_rotations(word,\
    \ pattern)\n    local pattern = string.lower(pattern)\n    local word = string.lower(word)\n\
    \    local pattern_index = string.find(word, pattern, 1, true)\n    if pattern_index\
    \ == nil then\n      return false\n    end\n    local pattern_index_length = string.len(pattern)\n\
    \    local word_index = string.find(word, pattern, 1, true)\n    if word_index\
    \ == nil then\n      return false\n    end\n    local word_index_length = string.len(word)\n\
    \    local rotated_pattern = string.sub(word, pattern_index + pattern_index_length,\
    \ word_index - pattern_index - 1)\n    return is_substring_of_pattern(word, rotated_pattern)\n\
    \  end\n  local function is_substring_of_pattern_with_rotations_without_rotations(word,\
    \ pattern)\n    local pattern = string.lower(pattern)\n    local word = string.lower(word)\n\
    \    local pattern_index = string.find(word, pattern, 1, true)\n    if pattern_index\
    \ == nil then\n      return false\n    end\n    local pattern_index_length = string.len(pattern)\n\
    \    local word_index = string.find(word, pattern, 1, true)\n    if word_index\
    \ == nil then\n      return false\n    end\n    local word_index_length = string.len(word)\n\
    \    local rotated_pattern = string.sub(word, pattern_index + pattern_index_length,\
    \ word_index - pattern_index - 1)\n    return is_substring_of_pattern(word, ",
  "  local function is_substring(c,s)\n    local function is_rotated_substring(c,s)\n\
    \      local function is_rotated_substring_helper(c,s,i,j)\n        if i < 0 then\n\
    \          return false\n        end\n        if i == j then\n          return\
    \ true\n        end\n        if i > j then\n          return false\n        end\n\
    \        if s[i]:sub(1,1) ~= c[i] then\n          return false\n        end\n\
    \        return is_rotated_substring_helper(c,s,i-1,j-1)\n      end\n      return\
    \ is_rotated_substring_helper(c,s,i,j)\n    end\n    return is_substring(c,s)\n\
    \  end\n  return is_substring(a,b) or is_substring(b,a)\nend", "  local function\
    \ check(c,i,j)\n    if i == j or c == '' then return true end\n    if a[i] ==\
    \ c then return check(c,i+1,j) end\n    if a[j] == c then return check(c,i,j-1)\
    \ end\n    return false\n  end\n  return check(b,1,#a)\nend", "  local function\
    \ rots(s)\n    local t = {}\n    for i = 1, #s do\n      t[#t + 1] = s:sub(i,\
    \ i)\n    end\n    return t\n  end\n  local function find(a, b)\n    local t =\
    \ {}\n    for i = 1, #a do\n      t[#t + 1] = a:sub(i, i)\n    end\n    for i\
    \ = 1, #b do\n      t[#t + 1] = b:sub(i, i)\n    end\n    return t\n  end\n  local\
    \ function sub(a, b)\n    local t = {}\n    for i = 1, #a do\n      t[#t + 1]\
    \ = a:sub(i, i)\n    end\n    for i = 1, #b do\n      t[#t + 1] = b:sub(i, i)\n\
    \    end\n    return t\n  end\n  local function rots_sub(a, b)\n    local t =\
    \ {}\n    for i = 1, #a do\n      t[#t + 1] = rots(a):sub(i, i)\n    end\n   \
    \ for i = 1, #b do\n      t[#t + 1] = rots(b):sub(i, i)\n    end\n    return t\n\
    \  end\n  local function rots_find(a, b)\n    local t = {}\n    for i = 1, #a\
    \ do\n      t[#t + 1] = rots(a):sub(i, i)\n    end\n    for i = 1, #b do\n   \
    \   t[#t + 1] = rots(b):sub(i, i)\n    end\n    return t\n  end\n  local function\
    \ rots_subfind(a, b)\n    local t = {}\n    for i = 1, #a do\n      t[#t + 1]\
    \ = rots(a):sub(i, i)\n    end\n    for i = 1, #b do\n      t[#t + 1] = rots(b):sub(i,\
    \ i)\n    end\n    return t\n  end\n  local function rots_subfind2(a, b)\n   \
    \ local t = {}\n    for i = 1, #a do\n      t[#t + 1] = rots(a):sub(i, i)\n  \
    \  end\n    for i = 1, #b do\n      t[#t + 1] = rots(b):sub(i, i)\n    end\n \
    \   return t\n  end\n  local function rots_subfind3(a, b)\n    local t = {}\n\
    \    for i = 1, #a do\n      t[#t + 1] = rots(a):sub(i, i)\n    end\n    for i\
    \ = 1, #b do\n      t[#t + 1] = rots(b):sub(i, i)\n    end\n    return t\n  end\n\
    \  local function rots_subfind4(a, b)\n    local t = {}\n    for i = 1, #a do\n\
    \      t[#t + 1] = rots(a):sub(i, i)\n    end\n    for i = 1, #b ", "  local function\
    \ is_substring_helper(str, substr)\n    local function is_substring_helper_recursive(str,\
    \ substr, i, j)\n      if i == j then return true end\n      if str:sub(i, j)\
    \ ~= substr then return false end\n      return is_substring_helper_recursive(str,\
    \ substr, i + 1, j + 1)\n    end\n    return is_substring_helper_recursive(str,\
    \ substr, 1, #str)\n  end\n  return is_substring_helper(a, b, true)\nend", " \
    \   local function is_substring(a, b)\n        local function is_substring_helper(str,\
    \ start, end)\n            if start > end then\n                return false\n\
    \            elseif start == end then\n                return true\n         \
    \   else\n                if str:sub(start, start + 1) ~= a then\n           \
    \         return false\n                else\n                    return is_substring_helper(str,\
    \ start + 1, end)\n                end\n            end\n        end\n       \
    \ return is_substring_helper(a, b, #a)\n    end\n    return is_substring(a, b)\n\
    end", "  local function is_substring(c,s)\n    return #c > 0 and #s > 0 and #c\
    \ <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_rotated_substring2(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring3(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n  local function is_rotated_substring4(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring5(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n \
    \ local function is_rotated_substring6(c,s)\n    return #c > 0 and #s > 0 and\
    \ #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring7(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_rotated_substring8(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring9(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n  local function is_rotated_substring10(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring11(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n \
    \ local function is_rotated_", "  local function is_substring_helper(str, substr)\n\
    \    if str:len() < substr:len() then\n      return false\n    end\n    local\
    \ i = 1\n    while i <= str:len() do\n      if str:sub(i, i) ~= substr:sub(i -\
    \ 1, i) then\n        return false\n      end\n      i = i + 1\n    end\n    return\
    \ true\n  end\n  return is_substring_helper(a, b) or is_substring_helper(b, a)\n\
    end", "  local function is_substring(cycle, word)\n    local result = true\n \
    \   for i = 1, #cycle do\n      if not word:sub(i, i) ~= cycle[i] then\n     \
    \   result = false\n        break\n      end\n    end\n    return result\n  end\n\
    \  local function is_substring_rotation(word, cycle)\n    local result = true\n\
    \    for i = 1, #cycle do\n      if not word:sub(i, i) ~= cycle[i] then\n    \
    \    result = false\n        break\n      end\n    end\n    return result\n  end\n\
    \  local function is_substring_rotations(word, cycle)\n    local result = true\n\
    \    for i = 1, #cycle do\n      if not word:sub(i, i) ~= cycle[i] then\n    \
    \    result = false\n        break\n      end\n    end\n    return result\n  end\n\
    \  local function is_substring_rotations_cycle(word, cycle)\n    local result\
    \ = true\n    for i = 1, #cycle do\n      if not word:sub(i, i) ~= cycle[i] then\n\
    \        result = false\n        break\n      end\n    end\n    return result\n\
    \  end\n  local function is_substring_rotations_cycles(word, cycle)\n    local\
    \ result = true\n    for i = 1, #cycle do\n      if not word:sub(i, i) ~= cycle[i]\
    \ then\n        result = false\n        break\n      end\n    end\n    return\
    \ result\n  end\n  local function is_substring_rotations_cycles_cycle(word, cycle)\n\
    \    local result = true\n    for i = 1, #cycle do\n      if not word:sub(i, i)\
    \ ~= cycle[i] then\n        result = false\n        break\n      end\n    end\n\
    \    return result\n  end\n  local function is_substring_rotations_cycles_cycles(word,\
    \ cycle)\n    local result = true\n    for i = 1, #cycle do\n      if not word:sub(i,\
    \ i) ~= cycle[i] then\n        result = false\n        break\n      end\n    end\n\
    \    return result\n  end\n  local function is_substring_rotations_cycles_cycles_cycle(word,\
    \ cycle)\n    local result = true\n    for i = 1, #cycle do\n      if not word:sub(i,\
    \ i) ~= cycle[i] then\n        result = false\n        break\n      end\n    end\n\
    \    return result\n  end\n  local function is_substring_rotations_cycles_cycles_cycles(word,\
    \ cycle)\n    local result = true\n    for i = 1, #cycle do\n      if not word:sub(i,\
    \ i) ~= cycle[i] then\n        result = false\n        break\n      end\n    end\n\
    \    return result\n  end\n  local function is_substring_rotations_cycles_cycles_cycles_cycle(word,\
    \ cycle)\n    local result = true\n    for i = 1, #cycle ", "  local function\
    \ is_substring_helper(str, substr)\n    if str == nil then\n      return false\n\
    \    end\n    if substr == nil then\n      return true\n    end\n    if str:len()\
    \ < substr:len() then\n      return false\n    end\n    for i = 1, str:len() do\n\
    \      if str:sub(i, i) ~= substr:sub(i, i) then\n        return false\n     \
    \ end\n    end\n    return true\n  end\n  local function is_substring(a, b)\n\
    \    return is_substring_helper(a, a) or is_substring_helper(b, b)\n  end\n  local\
    \ function is_rotated_substring(a, b)\n    return is_substring_helper(a, a) or\
    \ is_substring_helper(b, b) or is_substring_helper(a, a) or is_substring_helper(b,\
    \ b)\n  end\n  return is_substring(a, b) or is_substring(b, a) or is_rotated_substring(a,\
    \ b) or is_rotated_substring(b, a)\nend", "    local function substr_check(s,\
    \ t)\n        local function substr_check_aux(s, t, i, j)\n            if j >\
    \ i then\n                if s[i] == t[j] then\n                    substr_check_aux(s,\
    \ t, i + 1, j + 1)\n                else\n                    return false\n \
    \               end\n            else\n                return true\n         \
    \   end\n        end\n        return substr_check_aux(s, t, 1, #t)\n    end\n\
    \    return substr_check(a, b) or substr_check(b, a)\nend", "  local function\
    \ is_substring(c,s)\n    local function is_substring_aux(c,s,n)\n      if n ==\
    \ 0 then\n        return true\n      elseif c == s[n] then\n        return is_substring_aux(c,s,n-1)\n\
    \      else\n        return false\n      end\n    end\n    return is_substring_aux(c,s,#s)\n\
    \  end\n  local function is_substring2(a,b)\n    local function is_substring2_aux(a,b,n)\n\
    \      if n == 0 then\n        return true\n      elseif a[n] == b[n] then\n \
    \       return is_substring2_aux(a,b,n-1)\n      else\n        return false\n\
    \      end\n    end\n    return is_substring2_aux(a,b,#a)\n  end\n  return is_substring2(a,b)\
    \ or is_substring(a,b)\nend", "  local function is_substring_helper(substr, str,\
    \ i, j)\n    if i >= j then return true end\n    if substr == \"\" then return\
    \ true end\n    if substr == str[i] then return is_substring_helper(substr, str,\
    \ i+1, j) end\n    return is_substring_helper(substr, str, i, j-1)\n  end\n  return\
    \ is_substring_helper(b, a, 1, #a)\nend", "  local function is_substring(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and string.find(c, d) > -1\n  end\n\
    \  local function is_rotated_substring(c,d)\n    return #c > 0 and #d > 0 and\
    \ #c <= #d and string.find(d, c) > -1\n  end\n  local function is_rotated_substring2(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and string.find(d, c) > -1 and string.find(d,\
    \ c+1, #d) > -1\n  end\n  local function is_rotated_substring3(c,d)\n    return\
    \ #c > 0 and #d > 0 and #c <= #d and string.find(d, c) > -1 and string.find(d,\
    \ c+1, #d) > -1 and string.find(d, c+2, #d) > -1\n  end\n  local function is_rotated_substring4(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and string.find(d, c) > -1 and string.find(d,\
    \ c+1, #d) > -1 and string.find(d, c+2, #d) > -1 and string.find(d, c+3, #d) >\
    \ -1\n  end\n  local function is_rotated_substring5(c,d)\n    return #c > 0 and\
    \ #d > 0 and #c <= #d and string.find(d, c) > -1 and string.find(d, c+1, #d) >\
    \ -1 and string.find(d, c+2, #d) > -1 and string.find(d, c+3, #d) > -1 and string.find(d,\
    \ c+4, #d) > -1\n  end\n  local function is_rotated_substring6(c,d)\n    return\
    \ #c > 0 and #d > 0 and #c <= #d and string.find(d, c) > -1 and string.find(d,\
    \ c+1, #d) > -1 and string.find(d, c+2, #d) > -1 and string.find(d, c+3, #d) >\
    \ -1 and string.find(d, c+4, #d) > -1 and string.find(d, c+5, #d) > -1\n  end\n\
    \  local function is_rotated_substring7(c,d)\n    return #c > 0 and #d > 0 and\
    \ #c <= #d and string.find(d, c) > -1 and string.find(d, c+1, #d) > -1 and string.find(d,\
    \ c+2, #d) > -1 and string.find(d, c+3, #d) > -1 and string.find(d, c+4, #d) >\
    \ -1 and string.find(d, c+5, #d) > -1 and string.find(d, c+6, #d) > -1\n  end\n\
    \  local function is_rotated_substring8(c,d)", "    local function substr_check(word,\
    \ pattern)\n        local function substr_check_helper(word, pattern)\n      \
    \      local function helper(word, pattern)\n                local function helper2(word,\
    \ pattern)\n                    local function helper3(word, pattern)\n      \
    \                  local function helper4(word, pattern)\n                   \
    \         local function helper5(word, pattern)\n                            \
    \    return word:sub(1, word:len() - 1):find(pattern) ~= nil\n               \
    \             end\n                            return helper5(word, pattern) or\
    \ helper4(word, pattern) or helper3(word, pattern) or helper2(word, pattern) or\
    \ helper(word, pattern)\n                        end\n                       \
    \ return helper4(word, pattern) or helper3(word, pattern) or helper2(word, pattern)\
    \ or helper(word, pattern)\n                    end\n                    return\
    \ helper3(word, pattern) or helper2(word, pattern) or helper(word, pattern)\n\
    \                end\n                return helper2(word, pattern) or helper(word,\
    \ pattern)\n            end\n            return helper(word, pattern)\n      \
    \  end\n        return substr_check_helper(word, pattern)\n    end\n    return\
    \ substr_check(a, b)\nend", "  local function rots(s)\n    local t = {}\n    for\
    \ i = 1, #s do\n      t[#t + 1] = s:sub(i,i)\n    end\n    return t\n  end\n \
    \ local function sub(s, t)\n    local r = {}\n    for i = 1, #s do\n      if s:sub(i,i)\
    \ == t then\n        r[#r + 1] = true\n      end\n    end\n    return r\n  end\n\
    \  local function sub2(s, t)\n    local r = {}\n    for i = 1, #s do\n      if\
    \ s:sub(i,i) == t then\n        r[#r + 1] = true\n      end\n    end\n    return\
    \ r\n  end\n  local function sub3(s, t)\n    local r = {}\n    for i = 1, #s do\n\
    \      if s:sub(i,i) == t then\n        r[#r + 1] = true\n      end\n    end\n\
    \    return r\n  end\n  local function sub4(s, t)\n    local r = {}\n    for i\
    \ = 1, #s do\n      if s:sub(i,i) == t then\n        r[#r + 1] = true\n      end\n\
    \    end\n    return r\n  end\n  local function sub5(s, t)\n    local r = {}\n\
    \    for i = 1, #s do\n      if s:sub(i,i) == t then\n        r[#r + 1] = true\n\
    \      end\n    end\n    return r\n  end\n  local function sub6(s, t)\n    local\
    \ r = {}\n    for i = 1, #s do\n      if s:sub(i,i) == t then\n        r[#r +\
    \ 1] = true\n      end\n    end\n    return r\n  end\n  local function sub7(s,\
    \ t)\n    local r = {}\n    for i = 1, #s do\n      if s:sub(i,i) == t then\n\
    \        r[#r + 1] = true\n      end\n    end\n    return r\n  end\n  local function\
    \ sub8(s, t)\n    local r = {}\n    for i = 1, #s do\n      if s:sub(i,i) == t\
    \ then\n        r[#r + 1] = true\n      end\n    end\n    return r\n  end\n  local\
    \ function sub9(s, t)\n    local r = {}\n    for i = 1, #s do\n      if s:sub(i,i)\
    \ == t then\n        r[#r + 1] = true\n      end\n    end\n    return r\n  end\n\
    \  local function sub10(s, t)\n    local r = {}\n    for i = 1, #s do\n      if\
    \ s:sub(i,i) == t then\n        r[#r + 1] = true\n      end\n    end\n    return\
    \ r\n  end\n  local function sub11(s, t)\n    local r = {}\n    for i = 1, ",
  "  local function is_substring_helper(str, pattern)\n    if pattern == \"\" then\n\
    \      return true\n    end\n    if pattern == \"*\" then\n      return true\n\
    \    end\n    if pattern == \"?\" then\n      return false\n    end\n    if pattern\
    \ == \"*\" then\n      return true\n    end\n    if pattern == \"?\" then\n  \
    \    return false\n    end\n    if pattern == \"%\" then\n      return true\n\
    \    end\n    if pattern == \"[\" then\n      return true\n    end\n    if pattern\
    \ == \"]\" then\n      return true\n    end\n    if pattern == \"(\" then\n  \
    \    return true\n    end\n    if pattern == \")\" then\n      return true\n \
    \   end\n    if pattern == \"{\" then\n      return true\n    end\n    if pattern\
    \ == \"}\" then\n      return true\n    end\n    if pattern == \"|\" then\n  \
    \    return true\n    end\n    if pattern == \"-\" then\n      return true\n \
    \   end\n    if pattern == \"+\" then\n      return true\n    end\n    if pattern\
    \ == \"*\" then\n      return true\n    end\n    if pattern == \"?\" then\n  \
    \    return false\n    end\n    if pattern == \"%\" then\n      return true\n\
    \    end\n    if pattern == \"[\" then\n      return true\n    end\n    if pattern\
    \ == \"]\" then\n      return true\n    end\n    if pattern == \"(\" then\n  \
    \    return true\n    end\n    if pattern == \")\" then\n      return true\n \
    \   end\n    if pattern == \"{\" then\n      return true\n    end\n    if pattern\
    \ == \"}\" then\n      return true\n    end\n    if pattern == \"|\" then\n  \
    \    return true\n    end\n    if pattern == \"-\" then\n      return true\n \
    \   end\n    if pattern == \"+\" then\n      return true\n    end\n    if pattern\
    \ == \"*\" then\n      return true\n    end\n    if pattern == \"?\" then\n  \
    \    return false\n    end\n    if pattern == \"%\" then\n      return true\n\
    \    end\n    if pattern == \"[\" then\n      return true\n    end\n    if pattern\
    \ == \"]\" then\n      return true\n    end\n    if pattern == \"(\" then\n  \
    \    return true\n    end\n    if pattern == \")\" then\n      return true\n \
    \   end\n    if pattern == \"{\" then\n      return true\n    end\n    if pattern\
    \ == \"}\" then\n      return true\n    end\n    if pattern == \"|\" then\n  \
    \    return true\n    end\n    if pattern == \"-\" then\n      return true\n \
    \   end\n    if pattern == \"+\" then\n      return true\n    end\n    if pattern\
    \ == \"*\" then\n      return true\n    end\n    if pattern == \"?\" then\n  \
    \    return false\n    end\n    if pattern == \"%\" then\n      return true\n\
    \    end\n    if pattern == \"", "    local function is_substring(c,s)\n     \
    \   local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i + 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation2(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation3(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation4(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation5(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation6(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation7(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation8(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                i = i + 1\n    \
    \        end\n        end\n        return j\n    end\n    local function is_substring_rotation9(c,s)\n\
    \        local i,j = 0,0\n        while i <= #c do\n            if c[i] == s then\n\
    \                j = i - 1\n            else\n                ", "  local function\
    \ is_substring_of_a(c)\n    return a:sub(1, #a) == c\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rot", "  local function helper(str,\
    \ substr)\n    if str:sub(1, #substr) == substr then\n      return true\n    end\n\
    \    for i = 1, #str do\n      if str:sub(i, #substr) == substr then\n       \
    \ return true\n      end\n    end\n    return false\n  end\n  local function helper2(str,\
    \ substr)\n    if str:sub(1, #substr) == substr then\n      return true\n    end\n\
    \    for i = 1, #str do\n      if str:sub(i, #substr) == substr then\n       \
    \ return true\n      end\n    end\n    return false\n  end\n  if a:sub(1, #b)\
    \ == b then\n    return true\n  end\n  if helper(a, a) then\n    return true\n\
    \  end\n  if helper2(a, \"^\") then\n    return true\n  end\n  if helper2(a, \"\
    $\") then\n    return true\n  end\n  if helper2(a, \"-\") then\n    return true\n\
    \  end\n  if helper2(a, \"\\\\\") then\n    return true\n  end\n  if helper2(a,\
    \ \"/\") then\n    return true\n  end\n  if helper2(a, \"*\") then\n    return\
    \ true\n  end\n  if helper2(a, \"?\") then\n    return true\n  end\n  if helper2(a,\
    \ \".\") then\n    return true\n  end\n  if helper2(a, \"(\") then\n    return\
    \ true\n  end\n  if helper2(a, \"[\") then\n    return true\n  end\n  if helper2(a,\
    \ \"{\") then\n    return true\n  end\n  if helper2(a, \"|\") then\n    return\
    \ true\n  end\n  if helper2(a, \"}\") then\n    return true\n  end\n  if helper2(a,\
    \ \"[\") then\n    return true\n  end\n  if helper2(a, \"{\") then\n    return\
    \ true\n  end\n  if helper2(a, \"<\") then\n    return true\n  end\n  if helper2(a,\
    \ \"=\") then\n    return true\n  end\n  if helper2(a, \">\") then\n    return\
    \ true\n  end\n  if helper2(a, \"?\") then\n    return true\n  end\n  if helper2(a,\
    \ \"!\") then\n    return true\n  end\n  if helper2(a, \"+\") then\n    return\
    \ true\n  end\n  if helper2(a, \"-\") then\n    return true\n  end\n  if helper2(a,\
    \ \"*\") then\n    return true\n  end\n  if helper2(a, \"?\") then\n    return\
    \ true\n  end\n  if helper2(a, \".\") then\n    return true\n  end\n  if helper2(a,\
    \ \"(\") then\n    return true\n  end\n  if helper2(a, \"[\") then\n", "  local\
    \ function match(word, pattern)\n    local pattern = string.lower(pattern)\n \
    \   local word = string.lower(word)\n    local len = #word\n    local i = 0\n\
    \    while i < len do\n      local c = word[i]\n      local j = i + 1\n      while\
    \ j < len do\n        if c == word[j] then\n          j = j + 1\n        else\n\
    \          break\n        end\n      end\n      if j == len then\n        return\
    \ true\n      end\n      if pattern:sub(1, len) == word:sub(i, j) then\n     \
    \   i = j + 1\n      else\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function match_pattern(word, pattern)\n    local pattern\
    \ = string.lower(pattern)\n    local word = string.lower(word)\n    local len\
    \ = #word\n    local i = 0\n    while i < len do\n      local c = word[i]\n  \
    \    local j = i + 1\n      while j < len do\n        if c == word[j] then\n \
    \         j = j + 1\n        else\n          break\n        end\n      end\n \
    \     if j == len then\n        return true\n      end\n      if pattern:sub(1,\
    \ len) == word:sub(i, j) then\n        i = j + 1\n      else\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function match_rotation(word,\
    \ pattern)\n    local pattern = string.lower(pattern)\n    local word = string.lower(word)\n\
    \    local len = #word\n    local i = 0\n    while i < len do\n      local c =\
    \ word[i]\n      local j = i + 1\n      while j < len do\n        if c == word[j]\
    \ then\n          j = j + 1\n        else\n          break\n        end\n    \
    \  end\n      if j == len then\n        return true\n      end\n      if pattern:sub(1,\
    \ len) == word:sub(i, j) then\n        i = j + 1\n      else\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function match_rotation(word,\
    \ pattern)\n    local pattern = string.lower(pattern)\n    local word = string.lower(word)\n\
    \    local len = #word\n    local i = 0\n    while i < len do\n      local c =\
    \ word[i]\n      local j = i + 1\n      while j < len do\n        if c == word[j]\
    \ then\n          j = j + 1\n        else\n          break\n        end\n    \
    \  end\n      if j == len then\n        return true\n      end\n      if pattern:sub(1,\
    \ len) == word:sub(i, j) then\n        i = j + 1\n      else\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function match_rotation(",
  "  local function is_substring_of(a, b)\n    for i = 1, #a do\n      if string.sub(a,\
    \ i, #a) == string.sub(b, i, #b) then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_rotated_substring_of(a, b)\n   \
    \ for i = 1, #a do\n      if string.sub(a, #a, #a) == string.sub(b, i, #b) then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_of_rotations(a, b)\n    for i = 1, #a do\n      if string.sub(a,\
    \ i, #a) == string.sub(b, i, #b) then\n        return true\n      end\n    end\n\
    \    return false\n  end\n  local function is_rotated_substring_of_rotations(a,\
    \ b)\n    for i = 1, #a do\n      if string.sub(a, #a, #a) == string.sub(b, i,\
    \ #b) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substring_of_rotations_rotations(a, b)\n    for i = 1, #a\
    \ do\n      if string.sub(a, i, #a) == string.sub(b, i, #b) then\n        return\
    \ true\n      end\n    end\n    return false\n  end\n  local function is_rotated_substring_of_rotations_rotations(a,\
    \ b)\n    for i = 1, #a do\n      if string.sub(a, #a, #a) == string.sub(b, i,\
    \ #b) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_substring_of_rotations_rotations_rotations(a, b)\n    for\
    \ i = 1, #a do\n      if string.sub(a, i, #a) == string.sub(b, i, #b) then\n \
    \       return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_rotated_substring_of_rotations_rotations_rotations(a, b)\n    for i = 1,\
    \ #a do\n      if string.sub(a, #a, #a) == string.sub(b, i, #b) then\n       \
    \ return true\n      end\n    end\n    return false\n  end\n  local function is_substring_of_rotations_rotations_rotations_rotations(a,\
    \ b)\n    for i = 1, #a do\n      if string.sub(a, i, #a) == string.sub(b, i,\
    \ #b) then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  local function is_rotated_substring_of_rotations_rotations_rotations_rotations(a,\
    \ b)\n    for i = 1, #a do\n      if string.sub(a, #a, #a) == string.sub(b, i,\
    \ #b) then\n        return true", "  local function helper(str, pattern)\n   \
    \ local function helper1(str, pattern)\n      if pattern == \"\" then\n      \
    \  return true\n      end\n      local function helper2(str, pattern)\n      \
    \  if pattern == \"\" then\n          return true\n        end\n        local\
    \ function helper3(str, pattern)\n          if pattern == \"\" then\n        \
    \    return true\n          end\n          local function helper4(str, pattern)\n\
    \            if pattern == \"\" then\n              return true\n            end\n\
    \            local function helper5(str, pattern)\n              if pattern ==\
    \ \"\" then\n                return true\n              end\n              local\
    \ function helper6(str, pattern)\n                if pattern == \"\" then\n  \
    \                return true\n                end\n                local function\
    \ helper7(str, pattern)\n                  if pattern == \"\" then\n         \
    \           return true\n                  end\n                  local function\
    \ helper8(str, pattern)\n                    if pattern == \"\" then\n       \
    \               return true\n                    end\n                    local\
    \ function helper9(str, pattern)\n                      if pattern == \"\" then\n\
    \                        return true\n                      end\n            \
    \          local function helper10(str, pattern)\n                        if pattern\
    \ == \"\" then\n                          return true\n                      \
    \  end\n                        local function helper11(str, pattern)\n      \
    \                    if pattern == \"\" then\n                            return\
    \ true\n                          end\n                          local function\
    \ helper12(str, pattern)\n                            if pattern == \"\" then\n\
    \                              return true\n                            end\n\
    \                            local function helper13(str, pattern)\n         \
    \                     if pattern == \"\" then\n                              \
    \  return true\n                              end\n                          \
    \    local function helper14(str, pattern)\n                                if\
    \ pattern == \"\" then\n                                  return true\n      \
    \                          end\n                                local function\
    \ helper15(str, pattern)\n                                  if pattern == \"\"\
    \ then\n                                    return true\n                    \
    \              end\n                                  local function helper16(str,\
    \ pattern)\n                                    if pattern == \"\" then\n    \
    \                                  return true\n                             \
    \       end\n                                    local function helper17(str,\
    \ pattern)\n                                      if pattern == \"\" then\n  \
    \                                      return true\n                         \
    \             end\n                                      local function helper18(str,\
    \ pattern)\n                                        if pattern == \"\" then\n\
    \                                          return true\n                     \
    \                   end\n                                        local function\
    \ helper19(str, pattern)\n                                          if pattern\
    \ == \"\" then\n                                            return true\n    \
    \                                      end\n                                 \
    \         local function helper20(str, pattern)\n                            \
    \                if pattern == \"\" then\n                                   \
    \           return true\n                                            end\n   \
    \                                         local function helper21(str, pattern)\n\
    \                                              if pattern == \"\" then\n     \
    \                                           return true\n                    \
    \                          end\n                                             \
    \ local function helper22(str, pattern)\n                                    \
    \            if pattern == \"\" then\n                                       \
    \           return true\n                                                end",
  "  local function is_substring_helper(str, substr)\n    if str == nil or substr\
    \ == nil then\n      return false\n    end\n    local str_len = #str\n    local\
    \ substr_len = #substr\n    if str_len == 0 or substr_len == 0 then\n      return\
    \ false\n    end\n    if str_len > substr_len then\n      return false\n    end\n\
    \    local i = 1\n    while i <= str_len do\n      if string.sub(str,i,i+substr_len)\
    \ == substr then\n        return true\n      end\n      i = i + 1\n    end\n \
    \   return false\n  end\n  return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\nend", "  local function is_substring_of(a, b)\n    return a:sub(1, #a) ==\
    \ b\n  end\n  local function is_rotated_substring_of(a, b)\n    local i, j = 1,\
    \ #a\n    while i < j do\n      local c = a[i]:sub(1, #a[i])\n      if c == b[i]\
    \ then\n        j = i\n      else\n        i = i + 1\n      end\n    end\n   \
    \ return j > i\n  end\n  local function is_rotated_substring_of_or_equal(a, b)\n\
    \    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1, #a[i])\n\
    \      if c == b[i] then\n        j = i\n      else\n        i = i + 1\n     \
    \ end\n    end\n    return j >= i\n  end\n  local function is_substring_of_or_equal(a,\
    \ b)\n    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1,\
    \ #a[i])\n      if c == b[i] then\n        j = i\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return j == i\n  end\n  local function is_substring_of_or_equal_or_rotated_substring_of(a,\
    \ b)\n    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1,\
    \ #a[i])\n      if c == b[i] then\n        j = i\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return j >= i\n  end\n  local function is_rotated_substring_of_or_equal(a,\
    \ b)\n    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1,\
    \ #a[i])\n      if c == b[i] then\n        j = i\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return j == i\n  end\n  local function is_rotated_substring_of_or_equal_or_rotated_substring_of(a,\
    \ b)\n    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1,\
    \ #a[i])\n      if c == b[i] then\n        j = i\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return j >= i\n  end\n  local function is_rotated_substring_of_or_equal_or_rotated_substring_of_or_equal(a,\
    \ b)\n    local i, j = 1, #a\n    while i < j do\n      local c = a[i]:sub(1,\
    \ #a[i])\n      if c == b[i] then\n        j = i\n      else\n        i = i +\
    \ 1\n      end\n    end\n    return j >= i\n  end\n  local function is_rotated_substring_of_or_equal_or_rotated_substring_of_or_equal_",
  "  local function cycpattern_check_recursive(str, pattern)\n    if str == pattern\
    \ then return true end\n    if str:sub(1,1) ~= pattern:sub(1,1) then return false\
    \ end\n    return cycpattern_check_recursive(str:sub(2), pattern:sub(2))\n  end\n\
    \  return cycpattern_check_recursive(a, b) end", "  local function is_substring_helper(substr,\
    \ str)\n    local function is_substring_helper(substr, str)\n      if substr ==\
    \ str then\n        return true\n      elseif str:sub(1, #substr) == substr then\n\
    \        return is_substring_helper(substr, str:sub((#str + #substr) + 1))\n \
    \     else\n        return false\n      end\n    end\n    return is_substring_helper(substr,\
    \ str)\n  end\n  return is_substring_helper(b, a)\nend", "  local function is_substring_helper(str,\
    \ substr)\n    return str:sub(1, #substr) == substr\n  end\n  local function is_substring_helper2(str,\
    \ substr)\n    local i = #str\n    while i > 0 do\n      i = i - 1\n      if str:sub(i,\
    \ #substr) == substr then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function is_substring(a, b)\n    return is_substring_helper2(a,\
    \ b) or is_substring_helper2(b, a)\n  end\n  return is_substring(a, b) or is_substring(b,\
    \ a)\nend", "  local function is_substring_helper(str, substr)\n    if str ==\
    \ nil then\n      return false\n    end\n    if substr == nil then\n      return\
    \ true\n    end\n    if #str > #substr then\n      return false\n    end\n   \
    \ local str_len = #str\n    local substr_len = #substr\n    for i = 1, str_len\
    \ do\n      if string.sub(str,i,i) == substr then\n        return true\n     \
    \ end\n    end\n    for i = 1, substr_len do\n      if string.sub(substr,i,i)\
    \ == str then\n        return true\n      end\n    end\n    return false\n  end\n\
    \  return is_substring_helper(a, b) or is_substring_helper(b, a)\nend", "  local\
    \ function match(s, t)\n    local i = #s\n    local j = #t\n    while i > 0 and\
    \ j > 0 do\n      if s[i-1] == t[j-1] then\n        i = i - 1\n        j = j -\
    \ 1\n      else\n        return false\n      end\n    end\n    return j == 0\n\
    \  end\n  local function rotation(s)\n    local i = #s\n    local j = #s\n   \
    \ local k = 0\n    while i > 0 and j > 0 do\n      if s[i-1] == s[j-1] then\n\
    \        i = i - 1\n        j = j - 1\n        k = k + 1\n      else\n       \
    \ return k\n      end\n    end\n    return k\n  end\n  local function substring_check(s,\
    \ t)\n    local i = #s\n    local j = #t\n    while i > 0 and j > 0 do\n     \
    \ if s[i-1] == t[j-1] then\n        i = i - 1\n        j = j - 1\n      else\n\
    \        return false\n      end\n    end\n    return j == 0\n  end\n  local function\
    \ rotated_check(s, t)\n    local i = #s\n    local j = #t\n    local k = 0\n \
    \   while i > 0 and j > 0 do\n      if s[i-1] == t[j-1] then\n        i = i -\
    \ 1\n        j = j - 1\n        k = k + 1\n      else\n        return false\n\
    \      end\n    end\n    return k == 0\n  end\n  local function rotated_check(s,\
    \ t)\n    local i = #s\n    local j = #t\n    local k = 0\n    while i > 0 and\
    \ j > 0 do\n      if s[i-1] == t[j-1] then\n        i = i - 1\n        j = j -\
    \ 1\n        k = k + 1\n      else\n        return false\n      end\n    end\n\
    \    return k == 0\n  end\n  local function rotated_check(s, t)\n    local i =\
    \ #s\n    local j = #t\n    local k = 0\n    while i > 0 and j > 0 do\n      if\
    \ s[i-1] == t[j-1] then\n        i = i - 1\n        j = j - 1\n        k = k +\
    \ 1\n      else\n        return false\n      end\n    end\n    return k == 0\n\
    \  end\n  local function rotated_check(s, t)\n    local i = #s\n    local j =\
    \ #t\n    local k = 0\n    while i > 0 and j > 0 do\n      if s[i-1] == t[j-1]\
    \ then\n        i = i - 1\n        j = j - 1\n        k = k + 1\n      else\n\
    \        return false\n      end\n    end\n    return k == 0\n  end\n  local function\
    \ rotated_check(s, t)\n    local i = #s\n    local j = ", "  local function is_substring_of_a(b)\n\
    \    local function is_substring_of_a_helper(substring, string)\n      if string\
    \ == nil then\n        return false\n      end\n      local substring_length =\
    \ #substring\n      local string_length = #string\n      if substring_length ==\
    \ 0 then\n        return true\n      end\n      if string_length == 0 then\n \
    \       return false\n      end\n      if substring_length < string_length then\n\
    \        return false\n      end\n      local i = 1\n      while i <= string_length\
    \ do\n        if string.sub(i, i) == substring then\n          return true\n \
    \       end\n        i = i + 1\n      end\n      return false\n    end\n    return\
    \ is_substring_of_a_helper(b, a)\n  end\n  return is_substring_of_a(b) or is_substring_of_a(b..\"\
    a\")\nend", "  local function is_substring_of_a(c)\n    return a:sub(1, #a) ==\
    \ c\n  end\n  local function is_substring_of_a_or_rotation(c)\n    return is_substring_of_a(c)\
    \ or a:sub(1, #a) == c:reverse()\n  end\n  local function is_substring_of_a_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotation(c) or a:sub(1, #a) == c:reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations(c)\n    return\
    \ is_substring_of_a_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_",
  "  local function is_substring_helper(str, pattern)\n    local function helper(str,\
    \ pattern)\n      if str:sub(1, #pattern) == pattern then\n        return true\n\
    \      elseif str:sub(1, #pattern) ~= pattern then\n        return false\n   \
    \   else\n        return helper(str:sub(#pattern + 1), pattern)\n      end\n \
    \   end\n    return helper(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b) ~= nil\nend", "  local function is_substring_of_a(c)\n    return a:sub(1,\
    \ #c) == c\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b_or_rotated_c(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c)) or is_substring_of_a(c:sub(2, #c))\n  end\n\
    \  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)) or is_substring_of_a(c:sub(2,\
    \ #c)) or is_substring_of_a(c:sub(3, #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)) or is_substring_of_a(c:sub(2,\
    \ #c)) or is_substring_of_a(c:sub(3, #c)) or is_substring_of_a(c:sub(4, #c))\n\
    \  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)) or is_substring_of_a(c:sub(2,\
    \ #c)) or is_substring_of_a(c:sub(3, #c)) or is_substring_of_a(c:sub(4, #c)) or\
    \ is_substring_of_a(c:sub(5, #c))\n  end\n  local function is_substring_of_a_or_rotated_b_or_rotated_c_or_rotated_d_or_rotated_e_or_rotated_f_or_rotated_g(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)) or is_substring_of_a(c:sub(2,\
    \ #c)) or is_substring_of_a(c:sub(3, #c)) or is_substring_of_a(c:sub(4, #c)) or\
    \ is_substring_of_a(c:sub(5, #c)) or is_substring_of_a(c:sub(6, #c))\n  end\n\
    \  local function is_substring_of_a_or_rotated_b_or_rot", "  local function substr_check(s,\
    \ t)\n    return string.find(s, t) ~= nil\n  end\n  local function rotate_check(s,\
    \ t)\n    local function rotate(s, t)\n      local function rotate_left(s, t)\n\
    \        return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3) ..\
    \ string.sub(s,4,4)\n      end\n      local function rotate_right(s, t)\n    \
    \    return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n\
    \      end\n      local function rotate_left(s, t)\n        return string.sub(s,1,1)\
    \ .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n\
    \      local function rotate_right(s, t)\n        return string.sub(s,1,1) ..\
    \ string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n   \
    \   local function rotate_left(s, t)\n        return string.sub(s,1,1) .. string.sub(s,2,2)\
    \ .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n      local function rotate_right(s,\
    \ t)\n        return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3)\
    \ .. string.sub(s,4,4)\n      end\n      local function rotate_left(s, t)\n  \
    \      return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n\
    \      end\n      local function rotate_right(s, t)\n        return string.sub(s,1,1)\
    \ .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n\
    \      local function rotate_left(s, t)\n        return string.sub(s,1,1) .. string.sub(s,2,2)\
    \ .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n      local function rotate_right(s,\
    \ t)\n        return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3)\
    \ .. string.sub(s,4,4)\n      end\n      local function rotate_left(s, t)\n  \
    \      return string.sub(s,1,1) .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n\
    \      end\n      local function rotate_right(s, t)\n        return string.sub(s,1,1)\
    \ .. string.sub(s,2,2) .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n\
    \      local function rotate_left(s, t)\n        return string.sub(s,1,1) .. string.sub(s,2,2)\
    \ .. string.sub(s,3,3) .. string.sub(s,4,4)\n      end\n      local function rotate_right(s,\
    \ t)\n", "  local function is_substring_of_a(c)\n    return a:sub(1, #c) == c\n\
    \  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c))\n  end\n \
    \ local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c))\n  end\n  local function is_substring_of_a_or_rot",
  "  local function cycpattern_check_recursive(a, b)\n    if #a > 0 and #b > 0 then\n\
    \      if a[1]==b[1] then\n        return cycpattern_check_recursive(a..b[#b],\
    \ a..b[#b+1])\n      else\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  return cycpattern_check_recursive(a,b)\nend", "  local function\
    \ is_substr_helper(str, pattern)\n    local function is_substr_helper_internal(str,\
    \ pattern)\n      if str == pattern then\n        return true\n      elseif str:len()\
    \ > pattern:len() then\n        return false\n      else\n        return is_substr_helper_internal(str:sub(1,\
    \ str:len() - pattern:len()), pattern) or is_substr_helper_internal(str:sub(1,\
    \ str:len() - pattern:len()), pattern:sub(1, pattern:len() - 1))\n      end\n\
    \    end\n    return is_substr_helper_internal(str, pattern)\n  end\n  return\
    \ is_substr_helper(a, b) or is_substr_helper(b, a)\nend", "    local function\
    \ is_substring_helper(str, pattern)\n        if pattern == \"\" then\n       \
    \     return true\n        end\n        if pattern == \"*\" then\n           \
    \ return true\n        end\n        if pattern == \"?\" then\n            return\
    \ str:sub(1, 1) ~= pattern\n        end\n        if pattern == \"*?\" then\n \
    \           return str:sub(1, 1) ~= pattern and str:sub(2, 2) ~= pattern\n   \
    \     end\n        if pattern == \"??\" then\n            return str:sub(1, 1)\
    \ ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3, 3) ~= pattern\n     \
    \   end\n        if pattern == \"???\" then\n            return str:sub(1, 1)\
    \ ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3, 3) ~= pattern and str:sub(4,\
    \ 4) ~= pattern\n        end\n        if pattern == \"????\" then\n          \
    \  return str:sub(1, 1) ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3,\
    \ 3) ~= pattern and str:sub(4, 4) ~= pattern and str:sub(5, 5) ~= pattern\n  \
    \      end\n        if pattern == \"?????\" then\n            return str:sub(1,\
    \ 1) ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3, 3) ~= pattern and\
    \ str:sub(4, 4) ~= pattern and str:sub(5, 5) ~= pattern and str:sub(6, 6) ~= pattern\n\
    \        end\n        if pattern == \"??????\" then\n            return str:sub(1,\
    \ 1) ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3, 3) ~= pattern and\
    \ str:sub(4, 4) ~= pattern and str:sub(5, 5) ~= pattern and str:sub(6, 6) ~= pattern\
    \ and str:sub(7, 7) ~= pattern\n        end\n        if pattern == \"???????\"\
    \ then\n            return str:sub(1, 1) ~= pattern and str:sub(2, 2) ~= pattern\
    \ and str:sub(3, 3) ~= pattern and str:sub(4, 4) ~= pattern and str:sub(5, 5)\
    \ ~= pattern and str:sub(6, 6) ~= pattern and str:sub(7, 7) ~= pattern and str:sub(8,\
    \ 8) ~= pattern\n        end\n        if pattern == \"????????\" then\n      \
    \      return str:sub(1, 1) ~= pattern and str:sub(2, 2) ~= pattern and str:sub(3,\
    \ 3) ~= pattern and str:sub(4, 4) ~= pattern and str:sub(5, 5) ~= pattern and\
    \ str:sub(6, 6) ~= pattern and str:sub(7, 7) ~= pattern and str:sub(8, 8) ~= pattern\
    \ and str:sub(9, 9) ~= pattern\n        end\n        if pattern == \"?????????\"\
    \ then\n            return str:", "  local function is_substring(c)\n    return\
    \ a:find(c) ~= nil\n  end\n  local function is_rotated_substring(c)\n    return\
    \ a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse2(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse3(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse4(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse5(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse6(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse7(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse8(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse9(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse10(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse11(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse12(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring_inverse13(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function\
    \ is_rotated_substring_inverse14(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function ", "  local function is_substring_of_a(c)\n\
    \    return a:sub(1, #a) == c\n  end\n  local function is_substring_of_a_or_rotation(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #a) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotations(c)\n    return is_substring_of_a_or_rotation(c)\
    \ or a:sub(1, #a) == c:reverse():reverse()\n  end\n  local function is_substring_of_a_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations(c) or is_substring_of_a_or_rotation(c):reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotation(c):reverse():reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_",
  "  local function substr_check(str, substr)\n    local function substr_check_aux(str,\
    \ substr)\n      local function substr_check_aux(str, substr)\n        local function\
    \ substr_check_aux(str, substr)\n          local function substr_check_aux(str,\
    \ substr)\n            local function substr_check_aux(str, substr)\n        \
    \      local function substr_check_aux(str, substr)\n                local function\
    \ substr_check_aux(str, substr)\n                  local function substr_check_aux(str,\
    \ substr)\n                    local function substr_check_aux(str, substr)\n\
    \                      local function substr_check_aux(str, substr)\n        \
    \                local function substr_check_aux(str, substr)\n              \
    \            local function substr_check_aux(str, substr)\n                  \
    \          local function substr_check_aux(str, substr)\n                    \
    \          local function substr_check_aux(str, substr)\n                    \
    \            local function substr_check_aux(str, substr)\n                  \
    \                local function substr_check_aux(str, substr)\n              \
    \                      local function substr_check_aux(str, substr)\n        \
    \                              local function substr_check_aux(str, substr)\n\
    \                                        local function substr_check_aux(str,\
    \ substr)\n                                          local function substr_check_aux(str,\
    \ substr)\n                                            local function substr_check_aux(str,\
    \ substr)\n                                              local function substr_check_aux(str,\
    \ substr)\n                                                local function substr_check_aux(str,\
    \ substr)\n                                                  local function substr_check_aux(str,\
    \ substr)\n                                                    local function\
    \ substr_check_aux(str, substr)\n                                            \
    \          local function substr_check_aux(str, substr)\n                    \
    \                                    local function substr_check_aux(str, substr)\n\
    \                                                          local function substr_check_aux(str,\
    \ substr)\n                                                            local function\
    \ substr_check_aux(str, substr)\n                                            \
    \                  local function substr_check_aux(str, substr)\n            \
    \                                                    local function substr_check_aux(str,\
    \ substr)\n                                                                  local\
    \ function substr_check_aux(str, substr)\n                                   \
    \                                 local function substr_check_aux(str, substr)\n\
    \                                                                      local function\
    \ substr_check_aux(str, substr)\n                                            \
    \                            local function substr_check_aux(str, substr)\n  \
    \                                                                        local\
    \ function substr_check_aux(str, substr)\n                                   \
    \                                         local function substr_check_aux(str,\
    \ substr)\n                                                                  \
    \            local function substr_check_aux(str, substr)\n                  \
    \                                                              local function\
    \ substr_check_aux(str, substr)\n                                            \
    \                                      local function substr_check_aux(str, substr)\n\
    \                                                                            \
    \        local function substr_check_aux(str, substr)\n                      \
    \                                          ", "  local function is_substring(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and #d <= #c and stringfind(b,c) ==\
    \ #d\n  end\n  local function is_rotated_substring(c,d)\n    return #c > 0 and\
    \ #d > 0 and #c <= #d and #d <= #c and stringfind(b,d) == #c\n  end\n  local function\
    \ is_rotated_substring2(c,d)\n    return #c > 0 and #d > 0 and #c <= #d and #d\
    \ <= #c and stringfind(d,c) == #d\n  end\n  local function is_rotated_substring3(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and #d <= #c and stringfind(d,d) ==\
    \ #c\n  end\n  local function is_rotated_substring4(c,d)\n    return #c > 0 and\
    \ #d > 0 and #c <= #d and #d <= #c and stringfind(d,c) == #d\n  end\n  local function\
    \ is_rotated_substring5(c,d)\n    return #c > 0 and #d > 0 and #c <= #d and #d\
    \ <= #c and stringfind(d,d) == #c\n  end\n  local function is_rotated_substring6(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and #d <= #c and stringfind(c,d) ==\
    \ #c\n  end\n  local function is_rotated_substring7(c,d)\n    return #c > 0 and\
    \ #d > 0 and #c <= #d and #d <= #c and stringfind(c,c) == #d\n  end\n  local function\
    \ is_rotated_substring8(c,d)\n    return #c > 0 and #d > 0 and #c <= #d and #d\
    \ <= #c and stringfind(c,c) == #d\n  end\n  local function is_rotated_substring9(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= #d and #d <= #c and stringfind(c,c) ==\
    \ #d\n  end\n  local function is_rotated_substring10(c,d)\n    return #c > 0 and\
    \ #d > 0 and #c <= #d and #d <= #c and stringfind(c,c) == #d\n  end\n  local function\
    \ is_rotated_substring11(c,d)\n    return #c > 0 and #d > 0 and #c <= #d and #d\
    \ <= #c and stringfind(c,c) == #d\n  end\n  local function is_rotated_substring12(c,d)\n\
    \    return #c > 0 and #d > 0 and #c <= ", "  local function check(c)\n    return\
    \ (c == b) or (c..\"a\"..b == a)\n  end\n  local function check2(c)\n    return\
    \ (c == b) or (c..\"b\"..b == a)\n  end\n  local function check3(c)\n    return\
    \ (c == b) or (c..\"ab\"..b == a)\n  end\n  local function check4(c)\n    return\
    \ (c == b) or (c..\"ba\"..b == a)\n  end\n  local function check5(c)\n    return\
    \ (c == b) or (c..\"aba\"..b == a)\n  end\n  local function check6(c)\n    return\
    \ (c == b) or (c..\"baa\"..b == a)\n  end\n  local function check7(c)\n    return\
    \ (c == b) or (c..\"abba\"..b == a)\n  end\n  local function check8(c)\n    return\
    \ (c == b) or (c..\"bbaa\"..b == a)\n  end\n  local function check9(c)\n    return\
    \ (c == b) or (c..\"abbba\"..b == a)\n  end\n  local function check10(c)\n   \
    \ return (c == b) or (c..\"bbaab\"..b == a)\n  end\n  local function check11(c)\n\
    \    return (c == b) or (c..\"abbbba\"..b == a)\n  end\n  local function check12(c)\n\
    \    return (c == b) or (c..\"bbaaba\"..b == a)\n  end\n  local function check13(c)\n\
    \    return (c == b) or (c..\"abbbbaa\"..b == a)\n  end\n  local function check14(c)\n\
    \    return (c == b) or (c..\"bbaabba\"..b == a)\n  end\n  local function check15(c)\n\
    \    return (c == b) or (c..\"abbbbba\"..b == a)\n  end\n  local function check16(c)\n\
    \    return (c == b) or (c..\"bbaabbba\"..b == a)\n  end\n  local function check17(c)\n\
    \    return (c == b) or (c..\"abbbbbaa\"..b == a)\n  end\n  local function check18(c)\n\
    \    return (c == b) or (c..\"bbaabbbb\"..b == a)\n  end\n  local function check19(c)\n\
    \    return (c == b) or (c..\"abbbbbaab\"..b == a)\n  end\n  local function check20(c)\n\
    \    return (c == b) or (c..\"bbaabbbba\"..b == a)\n  end", "  local function\
    \ helper(str, i, j)\n    if i == j then\n      return true\n    end\n    if str[i]\
    \ == b[j] then\n      return helper(str, i + 1, j + 1)\n    else\n      return\
    \ false\n    end\n  end\n  return helper(a, b, #b - 1)\nend", "  local function\
    \ is_substring_helper(str, pattern)\n    local function helper(str, pattern)\n\
    \      local function helper(str, pattern)\n        if str:sub(1, #pattern) ==\
    \ pattern then\n          return true\n        end\n        if str:sub(1, #pattern)\
    \ > pattern then\n          return false\n        end\n        return helper(str:sub(#pattern\
    \ + 1), pattern)\n      end\n      return helper(str, pattern)\n    end\n    return\
    \ helper(str, pattern)\n  end\n  return is_substring_helper(a, b) ~= nil\nend",
  "  local function check(c,i,j)\n    if i == j or c == '.' then return true end\n\
    \    if c == 'a' then return check(b,i+1,j) end\n    if c == 'b' then return check(b,i,j-1)\
    \ end\n    if c == 'c' then return check(b,i+1,j-1) end\n    if c == 'd' then\
    \ return check(b,i,j+1) end\n  end\n  return check(a,1,#a) and check(b,1,#b)\n\
    end", "  local function is_substring(c)\n    return a:find(c) ~= nil\n  end\n\
    \  local function is_rotated_substring(c)\n    return a:find(c) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring2(c)\n    return\
    \ a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\n\
    \  end\n  local function is_rotated_substring3(c)\n    return a:find(c) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil\n  end\n  local function is_rotated_substring4(c)\n    return a:find(c)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring5(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c,\
    \ 1, true) ~= nil\n  end\n  local function is_rotated_substring6(c)\n    return\
    \ a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil and a:find(c, 1, true) ~= nil\n  end\n  local function is_rotated_substring7(c)\n\
    \    return a:find(c) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true)\
    \ ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c,\
    \ 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil\n\
    \  end\n  local function is_rotated_substring8(c)\n    return a:find(c) ~= nil\
    \ and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1,\
    \ true) ~= nil and a:find(c, 1, true) ~= nil and a:find(c, 1, true) ~= nil", " \
    \ local function is_substring(c)\n    local function is_substring_aux(c)\n   \
    \   local function is_substring_aux(c)\n        local function is_substring_aux(c)\n\
    \          local function is_substring_aux(c)\n            local function is_substring_aux(c)\n\
    \              local function is_substring_aux(c)\n                local function\
    \ is_substring_aux(c)\n                  local function is_substring_aux(c)\n\
    \                    local function is_substring_aux(c)\n                    \
    \  local function is_substring_aux(c)\n                        local function\
    \ is_substring_aux(c)\n                          local function is_substring_aux(c)\n\
    \                            local function is_substring_aux(c)\n            \
    \                  local function is_substring_aux(c)\n                      \
    \          local function is_substring_aux(c)\n                              \
    \    local function is_substring_aux(c)\n                                    local\
    \ function is_substring_aux(c)\n                                      local function\
    \ is_substring_aux(c)\n                                        local function\
    \ is_substring_aux(c)\n                                          local function\
    \ is_substring_aux(c)\n                                            local function\
    \ is_substring_aux(c)\n                                              local function\
    \ is_substring_aux(c)\n                                                local function\
    \ is_substring_aux(c)\n                                                  local\
    \ function is_substring_aux(c)\n                                             \
    \       local function is_substring_aux(c)\n                                 \
    \                     local function is_substring_aux(c)\n                   \
    \                                     local function is_substring_aux(c)\n   \
    \                                                       local function is_substring_aux(c)\n\
    \                                                            local function is_substring_aux(c)\n\
    \                                                              local function\
    \ is_substring_aux(c)\n                                                      \
    \          local function is_substring_aux(c)\n                              \
    \                                    local function is_substring_aux(c)\n    \
    \                                                                local function\
    \ is_substring_aux(c)\n                                                      \
    \                return true\n                                               \
    \                 end\n                                                      \
    \        end\n                                                            end\n\
    \                                                          end\n             \
    \                                           end\n                            \
    \                          end\n                                             \
    \       end\n                                                  end\n         \
    \                                       end\n                                \
    \              end\n                                            end\n        \
    \                                  end\n                                     \
    \   end\n                                      end\n                         \
    \           end\n                                  end\n                     \
    \           end\n                              end\n                         \
    \   end\n                          end\n                        end\n        \
    \              end\n                    end\n                  end\n         \
    \       end\n              end\n            end\n          end\n        end\n\
    \      end\n    end\n    return is_substring_aux(c)\n  end\n  return is_substring(a)\n\
    end", "  local function helper(str, i, j)\n    if i == j then\n      return true\n\
    \    end\n    if str[i] == b[j] then\n      return helper(str, i+1, j-1)\n   \
    \ else\n      return false\n    end\n  end\n  return helper(a, b, #b)\nend", " \
    \ local function is_substring_of_a_or_a_rotation(word, pattern)\n    local function\
    \ is_substring_of_a_or_a_rotation_helper(word, pattern)\n      if word == pattern\
    \ then\n        return true\n      elseif pattern:sub(1, #word) == word then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   return is_substring_of_a_or_a_rotation_helper(word, pattern)\n  end\n  local\
    \ function is_substring_of_a_or_a_rotation_helper(word, pattern)\n    if word\
    \ == pattern then\n      return true\n    elseif pattern:sub(1, #word) == word\
    \ then\n      return true\n    else\n      return false\n    end\n  end\n  return\
    \ is_substring_of_a_or_a_rotation_helper(a, b) or is_substring_of_a_or_a_rotation_helper(b,\
    \ a)\nend", "  local function is_substr_rotation(s, t)\n    local function is_rotation(s,\
    \ t)\n      local function is_substr_rotation(s, t)\n        local function is_rotation(s,\
    \ t)\n          local function is_substr_rotation(s, t)\n            local function\
    \ is_rotation(s, t)\n              return s == t or s:sub(1, #s)..t:sub(1, #t)\
    \ == s or s:sub(1, #s)..t:sub(1, #t) == t\n            end\n            return\
    \ is_rotation(s, t)\n          end\n          return is_rotation(s, t)\n     \
    \   end\n        return is_rotation(s, t)\n      end\n      return is_rotation(s,\
    \ t)\n    end\n    return is_rotation(s, t)\n  end\n  return is_substr_rotation(a,\
    \ b) or is_substr_rotation(b, a)\nend", "  local function is_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == s\n  end\n\
    \  local function is_rotated_substring(c,s)\n    return #c > 0 and #s > 0 and\
    \ #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c) and string.sub(s,#c+1,#c)\
    \ == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring2(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring3(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring4(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring5(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring6(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring7(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end\n  local function is_rotated_substring8(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and string.sub(c,1,#c) == string.sub(s,1,#c)\
    \ and string.sub(s,#c+1,#c) == string.sub(c,#c,#s)\n  end", "  local function\
    \ is_substr_rotation(s, t)\n    return string.find(s, t) ~= nil\n  end\n  local\
    \ function is_substr_rotations(s, t)\n    local rotations = string.gmatch(s, \"\
    ([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"%s+\") -- find all rotations of s\n    local rotations_t = string.gmatch(t,\
    \ \"%s+\") -- find all rotations of t\n    local rotations_s = string.gmatch(s,\
    \ \"([^%s]+)\") -- find all rotation", "  local function is_substring(c,s)\n \
    \   return string.find(c,s) ~= nil\n  end\n  local function is_rotation(c,s)\n\
    \    return string.find(string.sub(c,1,1),s) ~= nil\n  end\n  local function is_substring_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s)\n  end\n  local function is_substring_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s)\n  end\n\
    \  local function is_substring_rotation_rotation_rotation(c,s)\n    return is_substring(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\n  end\n  local\
    \ function is_substring_rotation_rotation_rotation_rotation(c,s)\n    return is_substring(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s)\n  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\n  end\n  local\
    \ function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s)\n  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c,s)\n\
    \    return is_substring(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s)\
    \ or is_rotation(c,s) or is_rotation(c,s) or is_rotation(c,s) or is_", "  local\
    \ function is_substring_helper(str, pattern)\n    local function is_substring_helper_recursive(str,\
    \ pattern)\n      if pattern == \"\" then\n        return true\n      elseif str:sub(1,\
    \ #pattern) == pattern then\n        return is_substring_helper_recursive(str:sub(#pattern\
    \ + 1), pattern)\n      else\n        return false\n      end\n    end\n    return\
    \ is_substring_helper_recursive(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b)\nend", "  local function is_substring_of_a(s)\n    local function is_substring_of_a_helper(s,\
    \ i, j)\n      if i == j then return true end\n      if s[i] ~= s[j] then\n  \
    \      return false\n      else\n        return is_substring_of_a_helper(s, i+1,\
    \ j-1)\n      end\n    end\n    return is_substring_of_a_helper(s, 1, #s)\n  end\n\
    \  return is_substring_of_a(a) and is_substring_of_a(b)\nend", "  local function\
    \ helper(w, i, j)\n    if i == j or j == #w then return true end\n    if w[i]\
    \ == b[j] then return helper(w, i+1, j+1) end\n    if w[i] ~= b[j] then return\
    \ helper(w, i, j) end\n  end\n  return helper(a, b, #b)\nend", "    local function\
    \ substr_check(s, t)\n        for i = 1, #s do\n            if string.find(s,\
    \ t) then\n                return true\n            end\n        end\n       \
    \ return false\n    end\n    local function rotated_check(s, t)\n        local\
    \ rotated_s = string.gsub(s, \"[\" .. t .. \"]\", \"\")\n        local rotated_t\
    \ = string.gsub(s, \"[\" .. s .. \"]\", \"\")\n        return substr_check(rotated_s,\
    \ rotated_t)\n    end\n    local function rotate_check(s, t)\n        local rotated_s\
    \ = string.gsub(s, \"[\" .. t .. \"]\", \"\")\n        local rotated_t = string.gsub(s,\
    \ \"[\" .. s .. \"]\", \"\")\n        local rotated_a = string.gsub(rotated_s,\
    \ \"[\" .. s .. \"]\", \"\")\n        local rotated_b = string.gsub(rotated_s,\
    \ \"[\" .. t .. \"]\", \"\")\n        return rotated_check(rotated_a, rotated_b)\n\
    \    end\n    local function rotate_check(s, t)\n        local rotated_s = string.gsub(s,\
    \ \"[\" .. t .. \"]\", \"\")\n        local rotated_t = string.gsub(s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_a = string.gsub(rotated_s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_b = string.gsub(rotated_s, \"[\" ..\
    \ t .. \"]\", \"\")\n        return rotated_check(rotated_b, rotated_a)\n    end\n\
    \    local function rotate_check(s, t)\n        local rotated_s = string.gsub(s,\
    \ \"[\" .. t .. \"]\", \"\")\n        local rotated_t = string.gsub(s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_a = string.gsub(rotated_s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_b = string.gsub(rotated_s, \"[\" ..\
    \ t .. \"]\", \"\")\n        return rotated_check(rotated_a, rotated_b)\n    end\n\
    \    local function rotate_check(s, t)\n        local rotated_s = string.gsub(s,\
    \ \"[\" .. t .. \"]\", \"\")\n        local rotated_t = string.gsub(s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_a = string.gsub(rotated_s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_b = string.gsub(rotated_s, \"[\" ..\
    \ t .. \"]\", \"\")\n        return rotated_check(rotated_b, rotated_a)\n    end\n\
    \    local function rotate_check(s, t)\n        local rotated_s = string.gsub(s,\
    \ \"[\" .. t .. \"]\", \"\")\n        local rotated_t = string.gsub(s, \"[\" ..\
    \ s .. \"]\", \"\")\n        local rotated_a = ", "  local function helper(w,\
    \ i)\n    if i == #w then\n      return true\n    end\n    if w[i] == a then\n\
    \      return helper(w, i + 1)\n    end\n    if w[i] == b then\n      return helper(w,\
    \ i - 1)\n    end\n    return false\n  end\n  return helper(b, #b)\nend", "  local\
    \ function is_substring(c,s)\n    return #c > 0 and #s > 0 and #c <= #s and #s\
    \ <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_rotated_substring2(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring3(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n  local function is_rotated_substring4(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring5(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n \
    \ local function is_rotated_substring6(c,s)\n    return #c > 0 and #s > 0 and\
    \ #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring7(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c)\
    \ == s\n  end\n  local function is_rotated_substring8(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring9(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n  local function is_rotated_substring10(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring11(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#s,#c) == s\n  end\n \
    \ local function is_rotated_", "  local function is_substring_helper(str, substr)\n\
    \    return str:sub(1, #substr) == substr\n  end\n  return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\nend", "  local function is_substring(c)\n \
    \   return a:sub(1, #c) == c\n  end\n  local function is_rotated_substring(c)\n\
    \    return a:sub(1, #c) == c:reverse()\n  end\n  local function is_substring_or_rotated_substring(c)\n\
    \    return is_substring(c) or is_rotated_substring(c)\n  end\n  local function\
    \ is_substring_or_rotated_substring_or_both(a, b)\n    return is_substring_or_rotated_substring(a)\
    \ or is_substring_or_rotated_substring(b)\n  end\n  local function is_substring_or_rotated_substring_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both(a, b) or is_substring_or_rotated_substring_or_both(b,\
    \ a)\n  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_both(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none(a, b) or is_substring_or_rotated_substring_or_both_or_none(b,\
    \ a)\n  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none_or_both(a,\
    \ b) or is_substring_or_rotated_substring_or_both_or_none_or_none(b, a)\n  end\n\
    \  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_both(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_both(a,\
    \ b) or is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(b, a)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(a,\
    \ b) or is_substring_or_rotated_substring_or_both_or_none_or_none_or_none(b, a)\n\
    \  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_both(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_both(a,\
    \ b) or is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none(b,\
    \ a)\n  end\n  local function is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none_or_both(a,\
    \ b)\n    return is_substring_or_rotated_substring_or_both_or_none_or_none_or_none_or_none_or_both(a,\
    \ b) or is_substring_or_rot", "  local function is_substring_helper(str, pattern)\n\
    \    local function helper(str, pattern)\n      local i, j = 1, #str\n      while\
    \ i <= j do\n        if string.sub(pattern, 1, i) == string.sub(str,1,i) then\n\
    \          i = i + 1\n        else\n          j = j - 1\n        end\n      end\n\
    \      return j\n    end\n    return helper(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b) ~= nil\nend", "  local function helper(str, i, j)\n    if i == j then return\
    \ true end\n    if str[i] == b and helper(str, i+1, j-1) or helper(str, i+1, j)\
    \ then\n      return true\n    end\n  end\n  return helper(a, b, #a)\nend", " \
    \ local function is_substring(c,s)\n    return #c > 0 and #s > 0 and #c <= #s\
    \ and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#c,#c)\
    \ == s\n  end\n  local function is_rotated_substring2(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring3(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#c,#c) == s\n  end\n  local function is_rotated_substring4(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring5(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#c,#c) == s\n  end\n \
    \ local function is_rotated_substring6(c,s)\n    return #c > 0 and #s > 0 and\
    \ #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local function is_rotated_substring7(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#c,#c)\
    \ == s\n  end\n  local function is_rotated_substring8(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c) == s\n  end\n  local\
    \ function is_rotated_substring9(c,s)\n    return #c > 0 and #s > 0 and #c <=\
    \ #s and #s <= #c and string.sub(c,#c,#c) == s\n  end\n  local function is_rotated_substring10(c,s)\n\
    \    return #c > 0 and #s > 0 and #c <= #s and #s <= #c and string.sub(c,1,#c)\
    \ == s\n  end\n  local function is_rotated_substring11(c,s)\n    return #c > 0\
    \ and #s > 0 and #c <= #s and #s <= #c and string.sub(c,#c,#c) == s\n  end\n \
    \ local function is_rotated_", "    local function helper(str, pattern)\n    \
    \    local function helper1(str, pattern)\n            local function helper2(str,\
    \ pattern)\n                local function helper3(str, pattern)\n           \
    \         local function helper4(str, pattern)\n                        local\
    \ function helper5(str, pattern)\n                            local function helper6(str,\
    \ pattern)\n                                return str == pattern\n          \
    \                  end\n                            return helper6(str, pattern)\n\
    \                        end\n                        return helper5(str, pattern)\n\
    \                    end\n                    return helper4(str, pattern)\n \
    \               end\n                return helper3(str, pattern)\n          \
    \  end\n            return helper2(str, pattern)\n        end\n        return\
    \ helper1(str, pattern)\n    end\n    return helper(a, pattern)\nend", "  local\
    \ function is_substring_helper(substr, str, i, j)\n    if i >= j then\n      return\
    \ true\n    end\n    if substr == \"\" then\n      return true\n    end\n    if\
    \ str[i] == substr and is_substring_helper(substr, str, i + 1, j + 1) then\n \
    \     return true\n    end\n    return false\n  end\n  return is_substring_helper(b,\
    \ a, 1, #a) == true\nend", "  local function is_substring_helper(str, pattern)\n\
    \    local function helper(str, pattern)\n      if str:sub(1, #pattern) == pattern\
    \ then\n        return true\n      else\n        return helper(str:sub(#pattern\
    \ + 1), pattern)\n      end\n    end\n    return helper(str, pattern)\n  end\n\
    \  return is_substring_helper(a, b) ~= nil\nend", "  local function is_substring_helper(substr,\
    \ str)\n    if substr == str then\n      return true\n    end\n    if str:len()\
    \ < substr:len() then\n      return false\n    end\n    local start_idx = 1\n\
    \    local end_idx = str:len()\n    while start_idx < end_idx do\n      local\
    \ start_char = str:sub(1, start_idx)\n      local end_char = str:sub(end_idx+1)\n\
    \      if start_char == substr then\n        return true\n      end\n      if\
    \ end_char == substr then\n        return true\n      end\n      start_idx = start_idx\
    \ + 1\n    end\n    return false\n  end\n  return is_substring_helper(b, a) or\
    \ is_substring_helper(b, a:reverse())\nend", "  local function is_substring_helper(str,\
    \ pattern)\n    local function helper(str, pattern)\n      local function helper(str,\
    \ pattern)\n        if str:sub(1, #pattern) == pattern then\n          return\
    \ true\n        end\n        if str:sub(1, #pattern) == pattern then\n       \
    \   return true\n        end\n        if str:sub(1, #pattern) == pattern then\n\
    \          return true\n        end\n        if str:sub(1, #pattern) == pattern\
    \ then\n          return true\n        end\n        return helper(str:sub(#pattern\
    \ + 1), pattern)\n      end\n      if str:sub(1, #pattern) == pattern then\n \
    \       return true\n      end\n      if str:sub(1, #pattern) == pattern then\n\
    \        return true\n      end\n      if str:sub(1, #pattern) == pattern then\n\
    \        return true\n      end\n      if str:sub(1, #pattern) == pattern then\n\
    \        return true\n      end\n      return helper(str:sub(#pattern + 1), pattern)\n\
    \    end\n    return helper(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b) ~= nil\nend", "  local function is_substring_of_a(a1, a2)\n    local function\
    \ is_substring_of_a_helper(a1, a2, i, j)\n      if i >= j or a1 ~= a2 then\n \
    \       return false\n      end\n      if i == j then\n        return true\n \
    \     end\n      return is_substring_of_a_helper(a1, a2, i+1, j) or is_substring_of_a_helper(a1,\
    \ a2, i, j-1)\n    end\n    return is_substring_of_a_helper(a1, a2, 1, 1)\n  end\n\
    \  return is_substring_of_a(a, b) or is_substring_of_a(b, a)\nend", "  local function\
    \ helper(str, start, end)\n    if start > end then\n      return false\n    end\n\
    \    if start == end then\n      return true\n    end\n    if str[start] == a\
    \ then\n      return helper(str, start + 1, end - 1)\n    end\n    if str[end]\
    \ == a then\n      return helper(str, start, end - 1)\n    end\n    if str[start]\
    \ == a or str[end] == a then\n      return helper(str, start + 1, end)\n    end\n\
    \    return helper(str, start, end - 1)\n  end\n  return helper(a, b, #a)\nend",
  "  local function is_substring(c,s)\n    local function is_substring_aux(c,s,i)\n\
    \      if i >= #s then return false end\n      if s[i] == c then return true end\n\
    \      if s[i] == s[(i+1):len(s)] then return is_substring_aux(c,s,(i+1)) end\n\
    \      return false\n    end\n    return is_substring_aux(c,s,0)\n  end\n  local\
    \ function is_substrings(a,b)\n    local function is_substrings_aux(a,b,i,j)\n\
    \      if i >= #a or j >= #b then return false end\n      if a[i] == b[j] then\
    \ return is_substrings_aux(a,b,i+1,j+1) end\n      return false\n    end\n   \
    \ return is_substrings_aux(a,b,0,#b)\n  end\n  return is_substrings(a,b)\nend",
  "  local function is_substring_helper(str, pattern)\n    return str:sub(1, #pattern)\
    \ == pattern or str:find(pattern, 1, true) ~= nil\n  end\n  return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\nend", "  local function is_substring_helper(str,\
    \ substr)\n    if str == nil then\n      return false\n    end\n    if substr\
    \ == nil then\n      return true\n    end\n    local str_len = #str\n    local\
    \ substr_len = #substr\n    if str_len < substr_len then\n      return false\n\
    \    end\n    local i = 0\n    while i < str_len do\n      if string.sub(str,i,i+substr_len)\
    \ == substr then\n        return true\n      end\n      i = i + 1\n    end\n \
    \   return false\n  end\n  return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\nend", "  local function is_substring_helper(substr, str)\n    return str:sub(1,\
    \ #substr) == substr\n  end\n  local function is_substring(a, b)\n    return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\n  end\n  local function is_rotated_substring(a,\
    \ b)\n    return is_substring_helper(string.sub(b, #b - #a), string.sub(a, #a\
    \ - #b))\n  end\n  return is_substring(a, b) or is_substring(b, a) or is_rotated_substring(a,\
    \ b)\nend", "    local function is_substring_helper(str, pattern)\n        local\
    \ function helper(str, pattern)\n            if str:len() == 0 then\n        \
    \        return true\n            end\n            local first = str:sub(1, 1)\n\
    \            local rest = str:sub(2)\n            if first == pattern[1] then\n\
    \                return helper(rest, pattern)\n            else\n            \
    \    return false\n            end\n        end\n        return helper(a, b)\n\
    \    end\n    return is_substring_helper(a, b)\nend", "    local function is_substring_helper(str,\
    \ substr)\n        return str:sub(1, #substr) == substr\n    end\n    local function\
    \ is_substring(a, b)\n        return is_substring_helper(a, b) or is_substring_helper(b,\
    \ a)\n    end\n    return is_substring(a, b) or is_substring(b, a)\nend", "  local\
    \ function substr_check(s, t)\n    return #s == #t and\n      all(cycpattern_check(s[#s],\
    \ t) or cycpattern_check(t, s[#s])\n        for i = 1, #s do\n          if s[i]\
    \ == t[i] then return true end\n        end\n      )\n  end\n  local function\
    \ rotated_check(s, t)\n    return #s == #t and\n      all(cycpattern_check(s[#s],\
    \ t) or cycpattern_check(t, s[#s])\n        for i = 1, #s do\n          if s[i]\
    \ == t[i] and s[i+1] == t[i+1] then return true end\n        end\n      )\n  end\n\
    \  return substr_check(a, b) or rotated_check(a, b)\nend", "  local function is_substring_helper(str,\
    \ pattern)\n    if pattern == \"\" then\n      return true\n    end\n    if str:sub(1,\
    \ #pattern) == pattern then\n      return true\n    end\n    return false\n  end\n\
    \  local function is_substring(a, b)\n    return is_substring_helper(a, b) or\
    \ is_substring_helper(b, a)\n  end\n  local function is_rotated_substring(a, b)\n\
    \    return is_substring_helper(a, string.sub(b, #a)) or is_substring_helper(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_rotated_substrings(a, b)\n  \
    \  return is_rotated_substring(a, string.sub(b, #a)) or is_rotated_substring(b,\
    \ string.sub(a, #b))\n  end\n  local function is_", "    local a1 = a:gsub(\"\
    %w+\", \"\")\n    local b1 = b:gsub(\"%w+\", \"\")\n    local a2 = a1:gsub(\"\
    %w+$\", \"\")\n    local b2 = b1:gsub(\"%w+$\", \"\")\n    local a3 = a1:gsub(\"\
    %w+$\", \"\")\n    local b3 = b1:gsub(\"%w+$\", \"\")\n    local a4 = a1:gsub(\"\
    %w+$\", \"\")\n    local b4 = b1:gsub(\"%w+$\", \"\")\n    local a5 = a1:gsub(\"\
    %w+$\", \"\")\n    local b5 = b1:gsub(\"%w+$\", \"\")\n    local a6 = a1:gsub(\"\
    %w+$\", \"\")\n    local b6 = b1:gsub(\"%w+$\", \"\")\n    local a7 = a1:gsub(\"\
    %w+$\", \"\")\n    local b7 = b1:gsub(\"%w+$\", \"\")\n    local a8 = a1:gsub(\"\
    %w+$\", \"\")\n    local b8 = b1:gsub(\"%w+$\", \"\")\n    local a9 = a1:gsub(\"\
    %w+$\", \"\")\n    local b9 = b1:gsub(\"%w+$\", \"\")\n    local a10 = a1:gsub(\"\
    %w+$\", \"\")\n    local b10 = b1:gsub(\"%w+$\", \"\")\n    local a11 = a1:gsub(\"\
    %w+$\", \"\")\n    local b11 = b1:gsub(\"%w+$\", \"\")\n    local a12 = a1:gsub(\"\
    %w+$\", \"\")\n    local b12 = b1:gsub(\"%w+$\", \"\")\n    local a13 = a1:gsub(\"\
    %w+$\", \"\")\n    local b13 = b1:gsub(\"%w+$\", \"\")\n    local a14 = a1:gsub(\"\
    %w+$\", \"\")\n    local b14 = b1:gsub(\"%w+$\", \"\")\n    local a15 = a1:gsub(\"\
    %w+$\", \"\")\n    local b15 = b1:gsub(\"%w+$\", \"\")\n    local a16 = a1:gsub(\"\
    %w+$\", \"\")\n    local b16 = b1:gsub(\"%w+$\", \"\")\n    local a17 = a1:gsub(\"\
    %w+$\", \"\")\n    local b17 = b1:gsub(\"%w+$\", \"\")\n    local a18 = a1:gsub(\"\
    %w+$\", \"\")\n    local b18 = b1:gsub(\"%w+$\", \"\")\n    local a19 = a1:gsub(\"\
    %w+$\", \"\")\n    local ", "  local function cycpattern_check_recursive(str,\
    \ pattern)\n    if str:len() < pattern:len() then\n      return false\n    end\n\
    \    local i = pattern:len()\n    while i do\n      local c = str:sub(i,i)\n \
    \     if pattern:sub(i,i) ~= c then\n        return false\n      end\n      i\
    \ = i - 1\n    end\n    return true\n  end\n  local function cycpattern_check_iterative(str,\
    \ pattern)\n    local i = pattern:len()\n    while i do\n      local c = str:sub(i,i)\n\
    \      if pattern:sub(i,i) ~= c then\n        return false\n      end\n      i\
    \ = i - 1\n    end\n    return true\n  end\n  if a:len() < b:len() then\n    return\
    \ false\n  end\n  local i = a:len()\n  while i do\n    local c = a:sub(i,i)\n\
    \    if b:sub(i,i) ~= c then\n      return false\n    end\n    i = i - 1\n  end\n\
    \  return true\nend", "  local function is_substring_of(a, b)\n    return a:sub(1,\
    \ #a) == b\n  end\n  local function is_substring_of_rotation(a, b)\n    return\
    \ a:sub(1, #a) == b:sub(1, #b) and is_substring_of(b, a:sub(#b))\n  end\n  return\
    \ a:sub(#a) == b or is_substring_of_rotation(a, b) or is_substring_of_rotation(b,\
    \ a)\nend", "  local function is_substring_helper(str, pattern)\n    local function\
    \ helper(str, pattern)\n      if str:sub(1, #pattern) == pattern then\n      \
    \  return true\n      else\n        return helper(str:sub(#pattern + 1), pattern)\n\
    \      end\n    end\n    return helper(str, pattern)\n  end\n  return is_substring_helper(a,\
    \ b) ~= nil\nend", "  local function is_substring(a, b)\n    return a:find(b)\
    \ ~= nil\n  end\n  local function is_rotation(a, b)\n    return a:sub(1, 1):find(b)\
    \ ~= nil\n  end\n  local function is_substring_or_rotation(a, b)\n    return is_substring(a,\
    \ b) or is_rotation(a, b)\n  end\n  local function is_substring_or_rotation_or_both(a,\
    \ b)\n    return is_substring_or_rotation(a, b) or is_substring(b, a)\n  end\n\
    \  local function is_substring_or_rotation_or_both_or_none(a, b)\n    return is_substring_or_rotation_or_both(a,\
    \ b) or is_substring(b, a) or is_rotation(b, a)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both(a,\
    \ b)\n    return is_substring_or_rotation_or_both_or_none(a, b) or is_substring(b,\
    \ a) or is_rotation(b, a) or is_substring(a, a)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation_or_both_or_none_or_both(a, b) or is_substring(b,\
    \ a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a, a)\n  end\n\
    \  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation_or_both_or_none_or_both_or_none(a, b)\
    \ or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a) or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation_or_both_or_none_or_both_or_none(a, b)\
    \ or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a) or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a) or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a)\n  end\n  local function is_substring_or_rotation_or_both_or_none_or_both_or_none(a,\
    \ b)\n    return is_substring_or_rotation_or_both_or_none_or_both_or_none(a, b)\
    \ or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a) or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a) or is_substring(b, a) or is_rotation(b, a) or is_substring(a, a) or is_rotation(a,\
    \ a)\n  end\n  local function is_", "  local function is_substring_helper(substr,\
    \ str)\n    if substr == str then\n      return true\n    end\n    if str:len()\
    \ < substr:len() then\n      return false\n    end\n    local i = str:len()\n\
    \    local j = substr:len()\n    while i ~= 0 do\n      if str:sub(i, i) ~= substr:sub(j,\
    \ j) then\n        return false\n      end\n      i = i - 1\n      j = j - 1\n\
    \    end\n    return true\n  end\n  local function is_substring(a, b)\n    return\
    \ is_substring_helper(a, a) and is_substring_helper(b, b)\n  end\n  return is_substring(a,\
    \ b) or is_substring(b, a)\nend", "  local function is_substring_of_a(c)\n   \
    \ return a:sub(1, #a) == c\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1, #c))\n\
    \  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c)..c:sub((#c)+1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1, #c))\n\
    \  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1, #c))\n  end\n  local function\
    \ is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c) or is_substring_of_a(c:sub(1,\
    \ #c)..c:sub((#c)+1, #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n\
    \    return is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1,\
    \ #c))\n  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return\
    \ is_substring_of_a(c) or is_substring_of_a(c:sub(1, #c)..c:sub((#c)+1, #c))\n\
    \  end\n  local function is_substring_of_a_or_rotated_b(c)\n    return is_substring_of_a(c)\
    \ or is_substring_of_a(c:sub(1, ", "    local function match(s, t)\n        for\
    \ i = 1, #s do\n            if string.find(s, t) then\n                return\
    \ true\n            end\n        end\n        return false\n    end\n    local\
    \ function match2(s, t)\n        for i = 1, #s do\n            if string.find(s,\
    \ t) then\n                return true\n            end\n        end\n       \
    \ return false\n    end\n    if #a > #b then\n        return false\n    end\n\
    \    local n = #a\n    local m = #b\n    local i = 0\n    local j = 0\n    while\
    \ i < n and j < m do\n        if match(a[i], b[j]) then\n            i = i + 1\n\
    \            j = j + 1\n        elseif match2(a[i], b[j]) then\n            i\
    \ = i + 1\n        else\n            j = j + 1\n        end\n    end\n    return\
    \ i == n and j == m\nend", "  local function is_substring(c,d)\n    return #c\
    \ > 0 and #d > 0 and #c <= #d and string.find(c, d) > -1\n  end\n  local function\
    \ is_substring_rotation(a,b,c)\n    return #b > 0 and #c > 0 and #a <= #b and\
    \ #c <= #a and string.find(b, c) > -1\n  end\n  local function is_substring_rotations(a,b,c)\n\
    \    return #b > 0 and #c > 0 and #a <= #b and #c <= #a and string.find(b, c)\
    \ > -1 and string.find(a, c) > -1\n  end\n  local function is_substring_rotations_rotations(a,b,c,d)\n\
    \    return #b > 0 and #c > 0 and #a <= #b and #c <= #a and string.find(b, c)\
    \ > -1 and string.find(a, c) > -1 and string.find(d, c) > -1\n  end\n  local function\
    \ is_substring_rotations_rotations_rotations(a,b,c,d,e)\n    return #b > 0 and\
    \ #c > 0 and #a <= #b and #c <= #a and string.find(b, c) > -1 and string.find(a,\
    \ c) > -1 and string.find(d, c) > -1 and string.find(e, c) > -1\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations(a,b,c,d,e,f)\n\
    \    return #b > 0 and #c > 0 and #a <= #b and #c <= #a and string.find(b, c)\
    \ > -1 and string.find(a, c) > -1 and string.find(d, c) > -1 and string.find(e,\
    \ c) > -1 and string.find(f, c) > -1\n  end\n  local function is_substring_rotations_rotations_rotations_rotations_rotations(a,b,c,d,e,f,g)\n\
    \    return #b > 0 and #c > 0 and #a <= #b and #c <= #a and string.find(b, c)\
    \ > -1 and string.find(a, c) > -1 and string.find(d, c) > -1 and string.find(e,\
    \ c) > -1 and string.find(f, c) > -1 and string.find(g, c) > -1\n  end\n  local\
    \ function is_substring_rotations_rotations_rotations_rotations_rotations_rotations(a,b,c,d,e,f,g,h)\n\
    \    return #b > 0 and #c > 0 and #a <= #b and #c <= #a and string.find(b, c)\
    \ > -1 and string.find(a, c) > -1 and string.find(d, c) > -1 and string.find(e,\
    \ c) > -1 and string.find(f, c) > -1 and string.find(g, c) > -1 and string.find(h,\
    \ c) > -1\n  end\n  local ", "  local function is_substring(c)\n    return string.find(a,\
    \ c, 1, true) ~= nil\n  end\n  local function is_substring_rotation(c)\n    return\
    \ string.find(b, c, 1, true) ~= nil\n  end\n  local function is_substring_rotations(c)\n\
    \    local rotations = string.gsub(b, \"([\" .. c .. \"])\", string.sub(string.sub(b,\
    \ 1, 1), 1, 1) .. \"|\" .. string.sub(string.sub(b, 1, 1), 2, 1))\n    return\
    \ string.find(rotations, \"|\") ~= nil\n  end\n  return is_substring(a) or is_substring(b)\
    \ or is_substring_rotation(a) or is_substring_rotations(a) or is_substring_rotations(b)\n\
    end", "    local function is_substring(c,d)\n        -- return true if c is a\
    \ substring of d\n        -- return false otherwise\n        local function is_substring_aux(c,d)\n\
    \            if c==d then\n                return true\n            elseif c==nil\
    \ then\n                return false\n            else\n                local\
    \ l=#c\n                local m=#d\n                local i=1,m\n            \
    \    while i<l do\n                    if c[i]~=d[i] then\n                  \
    \      i=m\n                    else\n                        i=i+1\n        \
    \            end\n                end\n                return false\n        \
    \    end\n        end\n        return is_substring_aux(c,d)\n    end\n    local\
    \ function is_substring2(c,d)\n        -- return true if c is a substring of d\n\
    \        -- return false otherwise\n        local function is_substring_aux(c,d)\n\
    \            if c==d then\n                return true\n            elseif c==nil\
    \ then\n                return false\n            else\n                local\
    \ l=#c\n                local m=#d\n                local i=1,m\n            \
    \    while i<l do\n                    if c[i]~=d[i] then\n                  \
    \      i=m\n                    else\n                        i=i+1\n        \
    \            end\n                end\n                return true\n         \
    \   end\n        end\n        return is_substring_aux(c,d)\n    end\n    local\
    \ function is_substring3(c,d)\n        -- return true if c is a substring of d\n\
    \        -- return false otherwise\n        local function is_substring_aux(c,d)\n\
    \            if c==d then\n                return true\n            elseif c==nil\
    \ then\n                return false\n            else\n                local\
    \ l=#c\n                local m=#d\n                local i=1,m\n            \
    \    while i<l do\n                    if c[i]~=d[i] then\n                  \
    \      i=m\n                    else\n                        i=i+1\n        \
    \            end\n                end\n                return true\n         \
    \   end\n        end\n        return is_substring_aux(c,d)\n    end\n    local\
    \ function is_substring4(c,d)\n        -- return true if c is a substring of d\n\
    \        -- return false otherwise\n        local function is_substring_aux(c,d)\n\
    \            if c==d then\n                return true\n            elseif c==nil\
    \ then\n                return false\n            else\n                local\
    \ l=#c\n                local m=#d\n                local i=1,m\n            \
    \    while i<l do\n                    if c[i]~=d[i] then\n                  \
    \      i=m\n                    else\n                        i=i+1\n        \
    \            end\n                end\n                return true\n         \
    \   end\n        end\n", "    local function is_substring(a, b)\n        -- return\
    \ true if a is a substring of b\n        return a:find(b) ~= nil\n    end\n  \
    \  local function is_rotation(a, b)\n        -- return true if a is a rotation\
    \ of b\n        return a:sub(1, #b) == b\n    end\n    local function is_substring_or_rotation(a,\
    \ b)\n        -- return true if a is a substring of b or a rotation of b\n   \
    \     return is_substring(a, b) or is_rotation(a, b)\n    end\n    return is_substring_or_rotation(a,\
    \ b) or is_substring(b, a)\nend", "  local function is_substring_of_a(c)\n   \
    \ return a:sub(1, #c) == c\n  end\n  local function is_substring_of_a_or_rotation(c)\n\
    \    return is_substring_of_a(c) or a:sub(1, #c) == c:reverse()\n  end\n  local\
    \ function is_substring_of_a_or_rotations(c)\n    return is_substring_of_a_or_rotation(c)\
    \ or a:sub(1, #c) == c:reverse():reverse()\n  end\n  local function is_substring_of_a_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations(c) or is_substring_of_a_or_rotations(c:reverse())\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations(c) or is_substring_of_a_or_rotations_or_rotations(c:reverse()):reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations(c) or is_substring_of_a_or_rotations_or_rotations_or_rotations(c:reverse()):reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c:reverse()):reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c:reverse()):reverse():reverse():reverse():reverse()\n\
    \  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c)\
    \ or is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(c:reverse()):reverse():reverse():reverse():reverse():reverse()\n\
    \  end", "  local function is_substring_helper(substr, str, i, j)\n    if i >=\
    \ j then return true end\n    if substr == \"\" then return true end\n    if i\
    \ >= j then return false end\n    if substr == \"\" then return false end\n  \
    \  if substr == str[i] then return is_substring_helper(substr, str, i + 1, j)\
    \ end\n    return false\n  end\n  return is_substring_helper(b, a, 1, #a) == true\n\
    end", "  local function is_substring_helper(substr, str)\n    return string.find(str,\
    \ substr) ~= nil\n  end\n  local function is_substring(a, b)\n    return is_substring_helper(a,\
    \ b) or is_substring_helper(b, a)\n  end\n  local function is_rotated_substring(a,\
    \ b)\n    return string.find(a, string.sub(b, 2)) ~= nil\n  end\n  local function\
    \ is_rotated_substrings(a, b)\n    local function is_rotated_substrings_helper(substr,\
    \ str)\n      return is_rotated_substrings_helper(string.sub(str, 1, string.len(substr)),\
    \ string.sub(str, string.len(substr) + 1, string.len(str)))\n    end\n    return\
    \ is_rotated_substrings_helper(b, a)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)\n    return is_rotated_substrings_helper(a,\
    \ a) or is_rotated_substrings_helper(b, b)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)\n    return is_rotated_substrings_helper(a,\
    \ a) or is_rotated_substrings_helper(b, b)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)\n    return is_rotated_substrings_helper(a,\
    \ a) or is_rotated_substrings_helper(b, b)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)\n    return is_rotated_substrings_helper(a,\
    \ a) or is_rotated_substrings_helper(b, b)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)\n    return is_rotated_substrings_helper(a,\
    \ a) or is_rotated_substrings_helper(b, b)\n  end\n  local function is_rotated_substrings_helper(a,\
    \ b)\n    return is_rotated_substrings_helper(a, a) or is_rotated_substrings_helper(b,\
    \ b)\n  end\n  local function is_rotated_substrings_helper(a, b)", "  local function\
    \ helper(w, i, j)\n    if i == j or w == \"\" then return true end\n    if w[i]\
    \ == '.' then return helper(w, i+1, j) end\n    if w[i] == '*' then return helper(w,\
    \ i+1, j-1) or helper(w, i, j-1) end\n    if w[i] == b[j] then return helper(w,\
    \ i+1, j+1) end\n    return false\n  end\n  return helper(a, b, #b)\nend", " \
    \ local function is_substring(cycle, word)\n    local s = string.sub(cycle, 1,\
    \ #word)\n    return s == word or is_substring(cycle, string.sub(word, #word+1,\
    \ #word))\n  end\n  return is_substring(a, b) or is_substring(b, a)\nend", " \
    \ local function is_substring_of_a(c)\n    return a:sub(1, #a) == c\n  end\n \
    \ local function is_substring_of_a_or_rotation(c)\n    return a:sub(1, #a) ==\
    \ c or a:sub(1, #a) .. a:sub((#a-1), #a) == c\n  end\n  local function is_substring_of_a_or_rotations(c)\n\
    \    return a:sub(1, #a) == c or a:sub(1, #a) .. a:sub((#a-1), #a) == c or a:sub(1,\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) == c\n  end\n  local function\
    \ is_substring_of_a_or_rotations_or_rotations(c)\n    return a:sub(1, #a) == c\
    \ or a:sub(1, #a) .. a:sub((#a-1), #a) == c or a:sub(1, #a) .. a:sub((#a-1), #a)\
    \ .. a:sub((#a-1), #a) == c or a:sub(1, #a) .. a:sub((#a-1), #a) .. a:sub((#a-1),\
    \ #a) .. a:sub((#a-1), #a) == c\n  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #a) == c or a:sub(1, #a) .. a:sub((#a-1), #a) == c or a:sub(1,\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) == c or a:sub(1, #a) .. a:sub((#a-1),\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) == c or a:sub(1, #a) .. a:sub((#a-1),\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) == c\n  end\n\
    \  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(c)\n\
    \    return a:sub(1, #a) == c or a:sub(1, #a) .. a:sub((#a-1), #a) == c or a:sub(1,\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((#a-1), #a) == c or a:sub(1, #a) .. a:sub((#a-1),\
    \ #a) .. a:sub((#a-1), #a) .. a:sub((", "  local function check(c,i,j)\n    if\
    \ j > 0 then\n      local sub = string.sub(a,i,j)\n      if string.find(b,sub)\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ else\n      return false\n    end\n  end\n  local i,j = 0,0\n  while i < #a\
    \ do\n    j = j + 1\n    if check(a,i,j) then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local function check(c,r)\n    if c==0 then\n      return\
    \ true\n    end\n    if r==0 then\n      return false\n    end\n    if a[c]~=b[r]\
    \ then\n      return false\n    end\n    return check(c-1,r-1) or check(c-1,r)\
    \ or check(c,r-1)\n  end\n  return check(1,#a)\nend", "  local function substr_check(s,\
    \ t)\n    return string.find(s, t) ~= nil\n  end\n  local function rotated_check(s,\
    \ t)\n    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i\
    \ == nil then\n      return false\n    end\n    if j == nil then\n      return\
    \ true\n    end\n    return string.sub(s, i, j) == string.sub(s, j, i)\n  end\n\
    \  local function rotate_check(s, t)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, j, i) == string.sub(s,\
    \ i, j)\n  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ j, i) == string.sub(s, i, j)\n  end\n  local function rotate_check(s, t, k)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, j, i) == string.sub(s, i, j)\n  end\n  local\
    \ function rotate_check(s, t, k)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, j, i) == string.sub(s,\
    \ i, j)\n  end\n  local function rotate_check(s, t, k)\n    local i, j = string.find(s,\
    \ t), string.find(s, t, 1, true)\n    if i == nil then\n      return false\n \
    \   end\n    if j == nil then\n      return true\n    end\n    return string.sub(s,\
    \ j, i) == string.sub(s, i, j)\n  end\n  local function rotate_check(s, t, k)\n\
    \    local i, j = string.find(s, t), string.find(s, t, 1, true)\n    if i == nil\
    \ then\n      return false\n    end\n    if j == nil then\n      return true\n\
    \    end\n    return string.sub(s, j, i) == string.sub(s, i, j)\n  end\n  local\
    \ function rotate_check(s, t, k)\n    local i, j = string.find(s, t), string.find(s,\
    \ t, 1, true)\n    if i == nil then\n      return false\n    end\n    if j ==\
    \ nil then\n      return true\n    end\n    return string.sub(s, ", "  local function\
    \ is_substring_helper(str, pattern)\n    local function helper(str, pattern)\n\
    \      local function helper(str, pattern)\n        if str:len() > pattern:len()\
    \ then\n          return false\n        end\n        local i = 0\n        while\
    \ i < str:len() and i < pattern:len() do\n          if str:sub(i, i) ~= pattern:sub(i,\
    \ i) then\n            return false\n          end\n          i = i + 1\n    \
    \    end\n        return true\n      end\n      if helper(str, pattern) then\n\
    \        return true\n      end\n    end\n    return helper(str, pattern)\n  end\n\
    \  return is_substring_helper(a, b) or is_substring_helper(b, a)\nend", "  local\
    \ function helper(str, pattern)\n    local function helper2(str, pattern)\n  \
    \    local function helper3(str, pattern)\n        local function helper4(str,\
    \ pattern)\n          local function helper5(str, pattern)\n            local\
    \ function helper6(str, pattern)\n              local function helper7(str, pattern)\n\
    \                local function helper8(str, pattern)\n                  local\
    \ function helper9(str, pattern)\n                    local function helper10(str,\
    \ pattern)\n                      local function helper11(str, pattern)\n    \
    \                    local function helper12(str, pattern)\n                 \
    \         local function helper13(str, pattern)\n                            local\
    \ function helper14(str, pattern)\n                              local function\
    \ helper15(str, pattern)\n                                local function helper16(str,\
    \ pattern)\n                                  local function helper17(str, pattern)\n\
    \                                    local function helper18(str, pattern)\n \
    \                                     local function helper19(str, pattern)\n\
    \                                        local function helper20(str, pattern)\n\
    \                                          local function helper21(str, pattern)\n\
    \                                            local function helper22(str, pattern)\n\
    \                                              local function helper23(str, pattern)\n\
    \                                                local function helper24(str,\
    \ pattern)\n                                                  local function helper25(str,\
    \ pattern)\n                                                    local function\
    \ helper26(str, pattern)\n                                                   \
    \   local function helper27(str, pattern)\n                                  \
    \                      local function helper28(str, pattern)\n               \
    \                                           local function helper29(str, pattern)\n\
    \                                                            local function helper30(str,\
    \ pattern)\n                                                              local\
    \ function helper31(str, pattern)\n                                          \
    \                      local function helper32(str, pattern)\n               \
    \                                                   local function helper33(str,\
    \ pattern)\n                                                                 \
    \   local function helper34(str, pattern)\n                                  \
    \                                    local function helper35(str, pattern)\n \
    \                                                                       local\
    \ function helper36(str, pattern)\n                                          \
    \                                local function helper37(str, pattern)\n     \
    \                                                                       local\
    \ function helper38(str, pattern)\n                                          \
    \                                    local function helper39(str, pattern)\n \
    \                                                                            \
    \   local function helper40(str, pattern)\n                                  \
    \                                                local function helper41(str,\
    \ pattern)\n                                                                 \
    \                   local function helper42(str, pattern)\n                  \
    \                                                                    local function\
    \ helper43(str, pattern)\n                                                   \
    \                                     local function helper44(str, pattern)\n\
    \                                                                            \
    \              local function helper45(str, pattern)\n                       \
    \                                                                     local function\
    \ helper46(str, pattern)\n                                                   \
    \                                           local function helper47(str, pattern)\n\
    \                                                                            \
    \                    local function helper48(str, pattern)\n                 \
    \                                                                            \
    \     local function helper49(str, pattern)\n                                \
    \                                                                    local function\
    \ helper50(str, pattern)\n                                                   \
    \                                                   local ", "  local function\
    \ is_substring_of_a(a1, a2)\n    return a1 ~= nil and a2 ~= nil and a1 ~= a2 and\
    \ #a1 ~= 0 and #a2 ~= 0 and a1:sub(1, #a1) ~= a2:sub(1, #a2)\n  end\n  local function\
    \ is_substring_of_a_or_rotation(a1, a2)\n    return is_substring_of_a(a1, a2)\
    \ or is_substring_of_a(a2, a1)\n  end\n  local function is_substring_of_a_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotation(a1, a2) or is_substring_of_a_or_rotation(a2,\
    \ a1)\n  end\n  local function is_substring_of_a_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations(a1, a2) or is_substring_of_a_or_rotations(a2,\
    \ a1)\n  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations_or_rotations(a1, a2) or is_substring_of_a_or_rotations_or_rotations(a2,\
    \ a1)\n  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations_or_rotations_or_rotations(a1,\
    \ a2) or is_substring_of_a_or_rotations_or_rotations_or_rotations(a2, a1)\n  end\n\
    \  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2) or is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(a2,\
    \ a1)\n  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2) or is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations(a2,\
    \ a1)\n  end\n  local function is_substring_of_a_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations_or_rotations(a1,\
    \ a2)\n    return is_substring_of_a_or_rotations_or_", "  local function helper(str,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if str[i] == b[j]\
    \ then\n      return helper(str, i + 1, j - 1)\n    end\n    return helper(str,\
    \ i + 1, j)\n  end\n  return helper(a, 1, #b - 1)\nend", "  local function substr_check(str,\
    \ pattern)\n    local pat = pattern:gsub(\"%a+\", \"\")\n    local pat = pat:gsub(\"\
    %b+\", \"\")\n    local pat = pat:gsub(\"%c+\", \"\")\n    local pat = pat:gsub(\"\
    %d+\", \"\")\n    local pat = pat:gsub(\"%e+\", \"\")\n    local pat = pat:gsub(\"\
    %f+\", \"\")\n    local pat = pat:gsub(\"%g+\", \"\")\n    local pat = pat:gsub(\"\
    %h+\", \"\")\n    local pat = pat:gsub(\"%i+\", \"\")\n    local pat = pat:gsub(\"\
    %j+\", \"\")\n    local pat = pat:gsub(\"%k+\", \"\")\n    local pat = pat:gsub(\"\
    %l+\", \"\")\n    local pat = pat:gsub(\"%m+\", \"\")\n    local pat = pat:gsub(\"\
    %n+\", \"\")\n    local pat = pat:gsub(\"%o+\", \"\")\n    local pat = pat:gsub(\"\
    %p+\", \"\")\n    local pat = pat:gsub(\"%s+\", \"\")\n    local pat = pat:gsub(\"\
    %t+\", \"\")\n    local pat = pat:gsub(\"%u+\", \"\")\n    local pat = pat:gsub(\"\
    %v+\", \"\")\n    local pat = pat:gsub(\"%w+\", \"\")\n    local pat = pat:gsub(\"\
    %x+\", \"\")\n    local pat = pat:gsub(\"%y+\", \"\")\n    local pat = pat:gsub(\"\
    %z+\", \"\")\n    local pat = pat:gsub(\"%A+\", \"\")\n    local pat = pat:gsub(\"\
    %B+\", \"\")\n    local pat = pat:gsub(\"%C+\", \"\")\n    local pat = pat:gsub(\"\
    %d+\", \"\")\n    local pat = pat:gsub(\"%e+\", \"\")\n    local pat = pat:gsub(\"\
    %f+\", \"\")\n    local pat = pat:gsub(\"%g+\", \"\")\n    local pat = pat:gsub(\"\
    %h+\", \"\")\n    local pat = pat:gsub(\"%i+\", \"\")\n    local pat = pat:gsub(\"\
    %j+\", \"\")\n    local pat = pat:gsub(\"%k+\", \"\")\n    local pat = pat:gsub(\"\
    %l+\", \"\")\n    local pat = pat:gsub(\"%m+\", \"\")\n", "  local function is_substring(a,\
    \ b)\n    local function is_substring_helper(a, b, i, j)\n      if i == j then\n\
    \        return true\n      elseif a[i] ~= b[j] then\n        return false\n \
    \     else\n        return is_substring_helper(a, b, i + 1, j + 1)\n      end\n\
    \    end\n    return is_substring_helper(a, b, 1 , #b)\n  end\n  return is_substring(a,\
    \ b)\nend", "  local function substr_check(s, t)\n    for i = 1, #s do\n     \
    \ if string.find(s, t) then\n        return true\n      end\n    end\n    return\
    \ false\n  end\n  local function rotate_check(s, t)\n    local function rotate_check(s,\
    \ t)\n      local function rotate_check(s, t)\n        local function rotate_check(s,\
    \ t)\n          local function rotate_check(s, t)\n            local function\
    \ rotate_check(s, t)\n              local function rotate_check(s, t)\n      \
    \          local function rotate_check(s, t)\n                  local function\
    \ rotate_check(s, t)\n                    local function rotate_check(s, t)\n\
    \                      local function rotate_check(s, t)\n                   \
    \     local function rotate_check(s, t)\n                          local function\
    \ rotate_check(s, t)\n                            local function rotate_check(s,\
    \ t)\n                              local function rotate_check(s, t)\n      \
    \                          local function rotate_check(s, t)\n               \
    \                   local function rotate_check(s, t)\n                      \
    \              local function rotate_check(s, t)\n                           \
    \           local function rotate_check(s, t)\n                              \
    \          local function rotate_check(s, t)\n                               \
    \           local function rotate_check(s, t)\n                              \
    \              local function rotate_check(s, t)\n                           \
    \                   local function rotate_check(s, t)\n                      \
    \                          local function rotate_check(s, t)\n               \
    \                                   local function rotate_check(s, t)\n      \
    \                                              local function rotate_check(s,\
    \ t)\n                                                      local function rotate_check(s,\
    \ t)\n                                                        local function rotate_check(s,\
    \ t)\n                                                          local function\
    \ rotate_check(s, t)\n                                                       \
    \     local function rotate_check(s, t)\n                                    \
    \                          local function rotate_check(s, t)\n               \
    \                                                 local function rotate_check(s,\
    \ t)\n                                                                  local\
    \ function rotate_check(s, t)\n                                              \
    \                      local function rotate_check(s, t)\n                   \
    \                                                   local function rotate_check(s,\
    \ t)\n                                                                       \
    \ local function rotate_check(s, t)\n                                        \
    \                                  local function rotate_check(s, t)\n       \
    \                                                                     local function\
    \ rotate_check(s, t)\n                                                       \
    \                       local function rotate_check(s, t)\n                  \
    \                                                              local function\
    \ rotate_check(s, t)\n                                                       \
    \                           local function rotate_check(s, t)\n              \
    \                                                                      local function\
    \ rotate_check(s, t)\n                                                       \
    \                               local function rotate_check(s, t)\n          \
    \                                                                            \
    \  local function rotate_check(s, t)\n                                       \
    \                                                   local function rotate_check(s,\
    \ t)\n                                                                       \
    \                     local function rotate_check(s, t)\n                    \
    \                                                                          local\
    \ function rotate_check(s, t)\n                                              \
    \                                                  local function rotate_check(s,\
    \ t)\n                                                                       \
    \                           local function rotate_check(s, t)\n              \
    \                                                                            \
    \          local function rotate_check(s, t)\n                               \
    \                                                                       local\
    \ function rotate_check(s, t)\n                                              \
    \                                                          local function rotate_check(s,\
    \ t)\n                                                                       \
    \                                   local function rotate_check(s, t)\n      \
    \                                                                            \
    \                          local function rotate_check(s, t)\n               \
    \                                                                            \
    \                   local function rotate_check(s, t)\n                      \
    \                                                                            \
    \              local function rotate_check(s, t)\n                           \
    \                                                                            \
    \           local function ", "  local function helper(str, i, j)\n    if i ==\
    \ j then\n      return true\n    end\n    if str[i] == b[j] then\n      return\
    \ helper(str, i+1, j-1)\n    else\n      return false\n    end\n  end\n  return\
    \ helper(a, b, #b)\nend", "  local function substr_check(a, b)\n    local function\
    \ check_rotations(a, b)\n      local function check_rotation(a, b)\n        local\
    \ function check_rotations(a, b, c)\n          local function check_rotation(a,\
    \ b, c)\n            local function check_rotations(a, b, c, d)\n            \
    \  local function check_rotation(a, b, c, d, e)\n                local function\
    \ check_rotations(a, b, c, d, e, f)\n                  local function check_rotation(a,\
    \ b, c, d, e, f, g)\n                    local function check_rotations(a, b,\
    \ c, d, e, f, g, h)\n                      local function check_rotation(a, b,\
    \ c, d, e, f, g, h, i)\n                        local function check_rotations(a,\
    \ b, c, d, e, f, g, h, i, j)\n                          local function check_rotation(a,\
    \ b, c, d, e, f, g, h, i, j, k)\n                            local function check_rotations(a,\
    \ b, c, d, e, f, g, h, i, j, k, l)\n                              local function\
    \ check_rotation(a, b, c, d, e, f, g, h, i, j, k, l, m)\n                    \
    \            local function check_rotations(a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n)\n                                  local function check_rotation(a, b,\
    \ c, d, e, f, g, h, i, j, k, l, m, n, o)\n                                   \
    \ local function check_rotations(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o,\
    \ p)\n                                      local function check_rotation(a, b,\
    \ c, d, e, f, g, h, i, j, k, l, m, n, o, p, q)\n                             \
    \           local function check_rotations(a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n, o, p, q, r)\n                                          local function\
    \ check_rotation(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s)\n  \
    \                                          local function check_rotations(a, b,\
    \ c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t)\n                    \
    \                          local function check_rotation(a, b, c, d, e, f, g,\
    \ h, i, j, k, l, m, n, o, p, q, r, s, t, u)\n                                \
    \                local function check_rotations(a, b, c, d, e, f, g, h, i, j,\
    \ k, l, m, n, o, p, q, r, s, t, u, v)\n                                      \
    \            local function check_rotation(a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n, o, p, q, r, s, t, u, v, w)\n                                         \
    \           local function check_rotations(a, b, c, d, e, f, g, h, i, j, k, l,\
    \ m, n, o, p, q, r, s, t, u, v, w, x)\n                                      \
    \                local function check_rotation(a, b, c, d, e, f, g, h, i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y)\n                                \
    \                        local function check_rotations(a, b, c, d, e, f, g, h,\
    \ i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\n", "  local function\
    \ is_substring(c,d)\n    return string.find(a,c) and string.find(b,d)\n  end\n\
    \  local function is_substring_rotation(c)\n    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation(c)\n    return string.find(a,c)\
    \ and string.find(a,string.sub(a,1,string.len(a)-1))\n  end\n  local function\
    \ is_substring_rotation_rotation_rotation(c)\n    return string.find(a,c) and\
    \ string.find(a,string.sub(a,1,string.len(a)-1))\n  end\n  local function is_substring_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local function is_substring_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation_rotation(c)\n\
    \    return string.find(a,c) and string.find(a,string.sub(a,1,string.len(a)-1))\n\
    \  end\n  local ", "  local function is_substring(c,d)\n    return string.find(c,\
    \ d) > -1 or string.find(d, c) > -1\n  end\n  local function is_substring_rotations(c,d)\n\
    \    local function is_substring_rotations_helper(c, d, i, j)\n      if i >= j\
    \ then\n        return true\n      end\n      if is_substring(c, d) then\n   \
    \     return is_substring_rotations_helper(c, d, i+1, j-1)\n      else\n     \
    \   return false\n      end\n    end\n    return is_substring_rotations_helper(c,\
    \ d, 1, #d)\n  end\n  local function is_substring_rotations_helper(a, b, i, j)\n\
    \    if i >= j then\n      return true\n    end\n    if string.find(a, b) then\n\
    \      return is_substring_rotations_helper(a, b, i+1, j-1)\n    else\n      return\
    \ false\n    end\n  end\n  return is_substring_rotations(a, b) or is_substring_rotations(b,\
    \ a)\nend", "  local function is_substring_helper(substr, str)\n    if substr\
    \ == \"\" then\n      return true\n    end\n    if str:sub(1, #substr) == substr\
    \ then\n      return true\n    end\n    return false\n  end\n  local function\
    \ is_substring_recursive(substr, str)\n    if str:sub(1, #substr) == substr then\n\
    \      return true\n    end\n    if str:sub(#substr+1, #str) == substr then\n\
    \      return true\n    end\n    return false\n  end\n  local function is_substring_iterative(substr,\
    \ str)\n    for i = 1, #str do\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_iterative_helper(substr, str)\n    for i = 1, #str do\n      if\
    \ str:sub(i, i+#substr) == substr then\n        return true\n      end\n     \
    \ if str:sub(i, i+#substr) == substr then\n        return true\n      end\n  \
    \  end\n    return false\n  end\n  local function is_substring_iterative_helper2(substr,\
    \ str)\n    for i = 1, #str do\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_substring_iterative_helper3(substr, str)\n    for i = 1, #str do\n      if\
    \ str:sub(i, i+#substr) == substr then\n        return true\n      end\n     \
    \ if str:sub(i, i+#substr) == substr then\n        return true\n      end\n  \
    \    if str:sub(i, i+#substr) == substr then\n        return true\n      end\n\
    \      if str:sub(i, i+#substr) == substr then\n        return true\n      end\n\
    \      if str:sub(i, i+#substr) == substr then\n        return true\n      end\n\
    \    end\n    return false\n  end\n  local function is_substring_iterative_helper4(substr,\
    \ str)\n    for i = 1, #str do\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n      end\n      if str:sub(i, i+#substr) == substr then\n\
    \        return true\n", "  local function is_substr_helper(str, substr)\n   \
    \ if str == nil or substr == nil then\n      return nil\n    end\n    if str ==\
    \ substr then\n      return true\n    end\n    if str:len() < substr:len() then\n\
    \      return false\n    end\n    if str:len() > substr:len() then\n      return\
    \ false\n    end\n    local str_len = str:len()\n    local substr_len = substr:len()\n\
    \    for i = 1, str_len do\n      if str:sub(i, i) ~= substr:sub(str_len - i -\
    \ 1, str_len - i - 1) then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  return is_substr_helper(a, b) or is_substr_helper(b, a)\nend",
  "  local function is_substring(c,d)\n    return string.find(a,c) and string.find(a,d)\n\
    \  end\n  local function is_rotated_substring(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,true)\n  end\n  local function is_rotated_substring2(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,false)\n  end\n  local function\
    \ is_rotated_substring3(c,d)\n    return string.find(a,c) and string.find(a,d,1,true)\n\
    \  end\n  local function is_rotated_substring4(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,false)\n  end\n  local function is_rotated_substring5(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,true)\n  end\n  local function\
    \ is_rotated_substring6(c,d)\n    return string.find(a,c) and string.find(a,d,1,false)\n\
    \  end\n  local function is_rotated_substring7(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,true)\n  end\n  local function is_rotated_substring8(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,false)\n  end\n  local function\
    \ is_rotated_substring9(c,d)\n    return string.find(a,c) and string.find(a,d,1,true)\n\
    \  end\n  local function is_rotated_substring10(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,false)\n  end\n  local function is_rotated_substring11(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,true)\n  end\n  local function\
    \ is_rotated_substring12(c,d)\n    return string.find(a,c) and string.find(a,d,1,false)\n\
    \  end\n  local function is_rotated_substring13(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,true)\n  end\n  local function is_rotated_substring14(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,false)\n  end\n  local function\
    \ is_rotated_substring15(c,d)\n    return string.find(a,c) and string.find(a,d,1,true)\n\
    \  end\n  local function is_rotated_substring16(c,d)\n    return string.find(a,c)\
    \ and string.find(a,d,1,false)\n  end\n  local function is_rotated_substring17(c,d)\n\
    \    return string.find(a,c) and string.find(a,d,1,true)\n  end\n  local function\
    \ is_rotated_substring18(c,d)\n    return string.find(a,c) and string.find(a,d,1,false",
  "  local function helper(str, i, j)\n    if i == j then\n      return true\n   \
    \ end\n    if str[i] == b[i] then\n      return helper(str, i+1, j) or helper(str,\
    \ i, j-1)\n    end\n    return false\n  end\n  return helper(a, b, 1)\nend", " \
    \   local function is_substring_of_a(b)\n        local function is_substring_of_a_helper(str,\
    \ substr)\n            if str == nil then\n                return false\n    \
    \        end\n            if substr == nil then\n                return true\n\
    \            end\n            if str:len() < substr:len() then\n             \
    \   return false\n            end\n            for i = 1, str:len() do\n     \
    \           if str:sub(i,i) == substr:sub(1,i) then\n                    local\
    \ new_str = str:sub(i+1, str:len() - i)\n                    if new_str:len()\
    \ > substr:len() then\n                        return false\n                \
    \    end\n                    if new_str:sub(1,1) == substr:sub(1,1) then\n  \
    \                      local new_substr = new_str:sub(2, new_str:len() - 2)\n\
    \                        if new_substr:len() > substr:len() then\n           \
    \                 return false\n                        end\n                \
    \        if new_substr:sub(1,1) == substr:sub(1,1) then\n                    \
    \        local new_substr = new_str:sub(2, new_str:len() - 2)\n              \
    \              if new_substr:len() > substr:len() then\n                     \
    \           return false\n                            end\n                  \
    \      end\n                    end\n                end\n            end\n  \
    \          return true\n        end\n        return is_substring_of_a_helper(b,\
    \ a)\n    end\n    return is_substring_of_a(b) or is_substring_of_a(a) or is_substring_of_a(b:reverse())\
    \ or is_substring_of_a(a:reverse())\nend", "    local a1 = a:gsub(\"%w+\", \"\"\
    )\n    local b1 = b:gsub(\"%w+\", \"\")\n    local a2 = a1:gsub(\"%w+\", \"\"\
    )\n    local b2 = b1:gsub(\"%w+\", \"\")\n    local a3 = a2:gsub(\"%w+\", \"\"\
    )\n    local b3 = b2:gsub(\"%w+\", \"\")\n    local a4 = a3:gsub(\"%w+\", \"\"\
    )\n    local b4 = b3:gsub(\"%w+\", \"\")\n    local a5 = a4:gsub(\"%w+\", \"\"\
    )\n    local b5 = b4:gsub(\"%w+\", \"\")\n    local a6 = a5:gsub(\"%w+\", \"\"\
    )\n    local b6 = b5:gsub(\"%w+\", \"\")\n    local a7 = a6:gsub(\"%w+\", \"\"\
    )\n    local b7 = b6:gsub(\"%w+\", \"\")\n    local a8 = a7:gsub(\"%w+\", \"\"\
    )\n    local b8 = b7:gsub(\"%w+\", \"\")\n    local a9 = a8:gsub(\"%w+\", \"\"\
    )\n    local b9 = b8:gsub(\"%w+\", \"\")\n    local a10 = a9:gsub(\"%w+\", \"\"\
    )\n    local b10 = b9:gsub(\"%w+\", \"\")\n    local a11 = a10:gsub(\"%w+\", \"\
    \")\n    local b11 = b10:gsub(\"%w+\", \"\")\n    local a12 = a11:gsub(\"%w+\"\
    , \"\")\n    local b12 = b11:gsub(\"%w+\", \"\")\n    local a13 = a12:gsub(\"\
    %w+\", \"\")\n    local b13 = b12:gsub(\"%w+\", \"\")\n    local a14 = a13:gsub(\"\
    %w+\", \"\")\n    local b14 = b13:gsub(\"%w+\", \"\")\n    local a15 = a14:gsub(\"\
    %w+\", \"\")\n    local b15 = b14:gsub(\"%w+\", \"\")\n    local a16 = a15:gsub(\"\
    %w+\", \"\")\n    local b16 = b15:gsub(\"%w+\", \"\")\n    local a17 = a16:gsub(\"\
    %w+\", \"\")\n    local b17 = b16:gsub(\"%w+\", \"\")\n    local a18 = a17:gsub(\"\
    %w+\", \"\")\n    local b18 = b17:gsub(\"%w+\", \"\")\n    local a19 = a18:gsub(\"\
    %w+\", \"\")\n    local b19 = b18:gsub(\"%w+\", \"\")\n    local a20 = a19:gsub(\"\
    %w+\", \"\")\n    local b20 = b19:gsub(\"%", "  local function check(c,d)\n  \
    \  if c == d then return true end\n    if c ~= nil and d ~= nil then\n      if\
    \ c == '.' and d ~= nil then\n        return check(c,d) or check(c,d..'e') or\
    \ check(c,d..'i') or check(c,d..'m') or check(c,d..'n') or check(c,d..'s')\n \
    \     elseif c == '.' and d == 'e' then\n        return check(c,d..'i') or check(c,d..'m')\
    \ or check(c,d..'n') or check(c,d..'s')\n      elseif c == '.' and d == 'i' then\n\
    \        return check(c,d..'m') or check(c,d..'n') or check(c,d..'s')\n      elseif\
    \ c == '.' and d == 'm' then\n        return check(c,d..'n') or check(c,d..'s')\n\
    \      elseif c == '.' and d == 'n' then\n        return check(c,d..'s')\n   \
    \   elseif c == '.' and d == 's' then\n        return check(c,d..'')\n      elseif\
    \ c == '.' and d == '' then\n        return check(c,d)\n      elseif c == 'e'\
    \ and d == 'f' then\n        return check(c,d..'e') or check(c,d..'i') or check(c,d..'m')\
    \ or check(c,d..'n') or check(c,d..'s')\n      elseif c == 'e' and d == 'i' then\n\
    \        return check(c,d..'m') or check(c,d..'n') or check(c,d..'s')\n      elseif\
    \ c == 'e' and d == 'm' then\n        return check(c,d..'n') or check(c,d..'s')\n\
    \      elseif c == 'e' and d == 'n' then\n        return check(c,d..'s')\n   \
    \   elseif c == 'e' and d == 's' then\n        return check(c,d..'')\n      elseif\
    \ c == 'e' and d == '' then\n        return check(c,d)\n      elseif c == 'i'\
    \ and d == 'm' then\n        return check(c,d..'n') or check(c,d..'s')\n     \
    \ elseif c == 'i' and d == 'n' then\n        return check(c,d..'s')\n      elseif\
    \ c == 'i' and d == 's' then\n        return check(c", "  local function check(c,i,j)\n\
    \    if j > 0 then\n      local sub = string.sub(a,i,j)\n      if string.find(b,sub)\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ else\n      return false\n    end\n  end\n  local i,j = 1,#a\n  while i <= j\
    \ do\n    if check(a,i,j) then\n      j = j - 1\n    else\n      i = i + 1\n \
    \     j = j - 1\n    end\n  end\n  return true\nend", "  local function check(c,i,j)\n\
    \    if j > 0 then\n      if string.sub(a,i,j) == string.sub(b,i,j) then\n   \
    \     return true\n      else\n        return false\n      end\n    else\n   \
    \   if string.sub(a,i,j) == string.sub(b,i,j) then\n        return true\n    \
    \  else\n        return false\n      end\n    end\n  end\n  local i,j = 0,0\n\
    \  while i < #a do\n    j = j + 1\n    if check(a,i,j) then\n      i = i + 1\n\
    \      j = j - 1\n    end\n  end\n  return false\nend", "    local function is_substring(a,\
    \ b)\n        -- return true if a is a substring of b\n        -- return false\
    \ otherwise\n        return a:sub(1, #b) == b\n    end\n    local function is_rotated_substring(a,\
    \ b)\n        -- return true if a is a rotated substring of b\n        -- return\
    \ false otherwise\n        local function is_rotated_substring_helper(substr,\
    \ rotated_substr)\n            -- return true if substr is a rotated substring\
    \ of rotated_substr\n            -- return false otherwise\n            if substr\
    \ == rotated_substr then\n                return true\n            elseif substr\
    \ == \"\" then\n                return false\n            else\n             \
    \   return is_rotated_substring_helper(substr:sub(#substr + 1), rotated_substr:sub(#rotated_substr\
    \ + 1))\n            end\n        end\n        return is_rotated_substring_helper(a,\
    \ a) or is_rotated_substring_helper(b, b)\n    end\n    return is_substring(a,\
    \ b) or is_substring(b, a) or is_rotated_substring(a, b)\nend", "  local function\
    \ helper(str, i, j)\n    if i == j then return true end\n    if i > j then return\
    \ false end\n    if str[i] == b[i] then\n      return helper(str, i + 1, j) or\
    \ helper(str, i, j - 1)\n    end\n  end\n  return helper(a, b, #a) == 1\nend",
  "  local function is_substring(c)\n    return a:sub(1, #c) == c\n  end\n  local\
    \ function is_rotated_substring(c)\n    return a:sub(1, #c) ~= c and a:sub(1,\
    \ #c) ~= c:reverse()\n  end\n  local function is_substring_or_reversed(c)\n  \
    \  return is_substring(c) or is_rotated_substring(c)\n  end\n  local function\
    \ is_rotated_substring_or_reversed(c)\n    return is_rotated_substring(c) or is_substring_or_reversed(c)\n\
    \  end\n  local function is_rotated_substrings(c)\n    return is_rotated_substring(c)\
    \ or is_rotated_substring_or_reversed(c)\n  end\n  local function is_rotated_substrings_or_reversed(c)\n\
    \    return is_rotated_substring_or_reversed(c) or is_rotated_substring(c)\n \
    \ end\n  local function is_substrings(c)\n    return is_substring(c) or is_rotated_substrings(c)\n\
    \  end\n  local function is_substrings_or_reversed(c)\n    return is_substrings_or_reversed(c)\
    \ or is_rotated_substrings(c)\n  end\n  local function is_substrings_or_rotated_reversed(c)\n\
    \    return is_substrings_or_reversed(c) or is_rotated_substring_or_reversed(c)\n\
    \  end\n  local function is_substrings_or_rotated_reversed_or_reversed(c)\n  \
    \  return is_substrings_or_reversed(c) or is_rotated_substring_or_reversed(c)\
    \ or is_rotated_substring(c)\n  end\n  local function is_substrings_or_rotated_reversed_or_rotated_reversed(c)\n\
    \    return is_substrings_or_reversed(c) or is_rotated_substring_or_reversed(c)\
    \ or is_rotated_substring(c) or is_rotated_substring_or_reversed(c)\n  end\n \
    \ local function is_substrings_or_rotated_reversed_or_rotated_reversed_or_reversed(c)\n\
    \    return is_substrings_or_reversed(c) or is_rotated_substring_or_reversed(c)\
    \ or is_rotated_substring(c) or is_rotated_substring_or_reversed(c) or is_rotated_substring(c)\n\
    \  end\n  local function is_substrings_or_rotated_reversed_or_rotated_reversed_or_rotated_reversed(c)\n\
    \    return is_substrings_or_reversed(c) or is_rotated_substring_or_reversed(c)\
    \ or is_rotated_substring(c) or is_rotated_substring_or_reversed(c) or is_rotated_substring(c)\
    \ or is_rotated_substring_or_reversed(c)\n  end", "  local function is_substring_helper(str,\
    \ pattern)\n    local function helper(str, pattern)\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return true\n      end\n      if str:sub(1, #pattern)\
    \ == pattern then\n        return ", "  local function helper(str, pattern)\n\
    \    local function helper1(str, pattern)\n      local function helper2(str, pattern)\n\
    \        local function helper3(str, pattern)\n          local function helper4(str,\
    \ pattern)\n            local function helper5(str, pattern)\n              return\
    \ str:sub(1, #str) == pattern or helper1(str:sub(1, #str), pattern) or helper2(str:sub(1,\
    \ #str), pattern) or helper3(str:sub(1, #str), pattern) or helper4(str:sub(1,\
    \ #str), pattern) or helper5(str:sub(1, #str), pattern)\n            end\n   \
    \         return helper3(str, pattern)\n          end\n          return helper4(str,\
    \ pattern)\n        end\n        return helper5(str, pattern)\n      end\n   \
    \   return helper2(str, pattern)\n    end\n    return helper1(str, pattern)\n\
    \  end\n  return helper(a, pattern) or helper(b, pattern)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
