name: HumanEval_125_split_words
language: lua
prompt: "-- Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n-- should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- split_words(\"\
  Hello world!\") \u279E [\"Hello\", \"world!\"]\n-- split_words(\"Hello,world!\"\
  ) \u279E [\"Hello\", \"world!\"]\n-- split_words(\"abcdef\") == 3\nlocal function\
  \ split_words(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
  \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
  \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
  \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
  \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
  \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = txt:gmatch(\"[^ ]+\")\n  if words == nil then\n   \
    \ return #txt\n  else\n    return words\n  end\nend", '  local words = txt:gsub("[%z
  "  local words = txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244]*[%z\\\
    1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"\")\n  local\
    \ num_words = #words\n  if num_words == 0 then\n    return nil\n  elseif num_words\
    \ == 1 then\n    return words\n  else\n    local num_letters = #(words[1]:lower())\n\
    \    if num_letters % 2 ~= 0 then\n      return words\n    else\n      local letters\
    \ = {}\n      for i = 1, num_letters do\n        table.insert(letters, words[i]:lower())\n\
    \      end\n      return letters\n    end\n  end\nend", '  local words = txt:gsub("[%z
  "  local words = txt:gmatch(\"[%w-]+\")\n  if words == nil then\n    return txt:gsub(\"\
    [%w-]+\", \",\")\n  else\n    return words\n  end\nend", "  local words = txt:gmatch(\"\
    [%w-]+\")\n  if words == nil then\n    return 1\n  else\n    return #words\n \
    \ end\nend", "    local words = txt:gmatch(\"[%w-]+\")\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%p]+\")\n    end\n    if words == nil then\n\
    \        words = txt:gmatch(\"[%w%", "  local words = txt:gsub(\"%w+\", \" \"\
    ):gsub(\"%w+,\", \" \"):gsub(\"%w+,\", \" \")\n  if words == \"\" then return\
    \ 1 end\n  local words = words:gsub(\"%w+\", \"\")\n  local count = 0\n  for i\
    \ = 1, #words do\n    if words[i]:lower() ~= words[i] then count = count + 1 end\n\
    \  end\n  return count\nend", '  local words = txt:gsub("([^ ,]+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", "
    "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", "
    "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", "
    "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", "
    "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", "
    "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)",
    " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)", " "):gsub("(%S+)', " \
    \ local words = txt:gsub(\"([^ ,]+)\", \" \"):gsub(\"(,[^ ]+$)\", \" \"):gsub(\"\
    (^,[^ ]+)\", \" \")\n  local num_words = #words\n  if num_words == 0 then\n  \
    \  return nil\n  elseif num_words == 1 then\n    return words\n  else\n    local\
    \ num_letters = #(words[1]:lower())\n    if num_letters % 2 == 1 then\n      return\
    \ words\n    else\n      return words[1], words[num_words-1]\n    end\n  end\n\
    end", "  local words = txt:gmatch(\"[%w-]+\")\n  if words == nil then\n    return\
    \ txt:gsub(\"[%w-]+\", \",\")\n  else\n    return words\n  end\nend", "  local\
    \ words = txt:gmatch(\"[%w-]+\")\n  if #words == 0 then\n    return 1\n  else\n\
    \    return #words + 1\n  end\nend", "  local words = txt:gmatch(\"[%w-]+\")\n\
    \  if words == nil then\n    return txt:gsub(\"[%w-]+\", \",\")\n  else\n    return\
    \ words\n  end\nend", "  local words = txt:gmatch(\"[%w-]+\")\n  if words == nil\
    \ then\n    return nil\n  else\n    local num_words = 0\n    local num_commas\
    \ = 0\n    local num_letters = 0\n    for word in words do\n      num_words =\
    \ num_words + 1\n      num_letters = num_letters + #word\n      if word:sub(1,\
    \ 1) == \"-\" then\n        num_commas = num_commas + 1\n      end\n    end\n\
    \    if num_words == 0 then\n      return nil\n    elseif num_words == 1 then\n\
    \      return words[1]\n    else\n      return words[1] .. \",\" .. words[num_words]\n\
    \    end\n  end\nend", '  local words = txt:gsub("[%z
  "  local words = txt:gsub(\"%w+\", \" \"):gsub(\"%w+\", \",\")\n  local num_words\
    \ = #words\n  if num_words == 0 then\n    return 0\n  elseif num_words == 1 then\n\
    \    return 1\n  else\n    return num_words - 1\n  end\nend", "  local words =\
    \ txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\\
    244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"\")\n  return words and words:gsub(\"\
    ,\", \" \"):gsub(\"%z\", \"a\"):gsub(\"%z\", \"A\"):gsub(\"%z\", \"0\")\nend",
  "  local words = txt:gmatch(\"[%w-]+\")\n  if words == nil then\n    return txt:gsub(\"\
    [%w-]+\", \",\")\n  else\n    return words\n  end\nend", "  local words = txt:gmatch(\"\
    [%w-]+\")\n  if words == nil then\n    return 0\n  else\n    return #words\n \
    \ end\nend", "  local words = txt:gsub(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\"\
    , \"\")\n  if words == \"\" then\n    return 0\n  end\n  local words = words:gsub(\"\
    ,\", \" \")\n  local words = words:gsub(\"%z\", \"\")\n  return words:gsub(\"\
    %a\", function()\n    return string.len(string.lower(string.sub(words, 1, 1)))\n\
    \  end)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
