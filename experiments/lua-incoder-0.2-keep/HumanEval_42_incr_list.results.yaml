language: lua
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xq4l393.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp6xq4l393.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32an4qa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpt32an4qa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n + 1) % #l\n    table.insert(l, l[n])\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rol8jhk.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 2, 1, 2}\nstack traceback:\n\t/tmp/tmp0rol8jhk.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32an4qa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpt32an4qa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7vsdgz6.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpn7vsdgz6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32an4qa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpt32an4qa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32an4qa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpt32an4qa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n    l[i] = n\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt32an4qa.lua:19:\
    \ expected: {4, 3, 2}\nactual: {6, 20, 61}\nstack traceback:\n\t/tmp/tmpt32an4qa.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    n = (n * #l) + l[i]\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9q4c0qnf.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp9q4c0qnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  for i\
    \ = 1, #l do\n    table.insert(l, n + l[i])\n    n = n + l[i]\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuewh345t.lua:19:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1, 4, 6, 7}\nstack traceback:\n\t/tmp/tmpuewh345t.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local i = 1\n  local\
    \ new_l = {}\n  for _, v in ipairs(l) do\n    new_l[i] = v\n    i = i + 1\n  end\n\
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xq4l393.lua:20:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmp6xq4l393.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list([1, 2,\
    \ 3])\n-- [2, 3, 4]\n-- >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n-- [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nlocal function incr_list(l)\n  local n = 1\n  local\
    \ i = 1\n  while i <= #l do\n    i = i + 1\n    table.insert(l, n)\n    n = n\
    \ + 1\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
