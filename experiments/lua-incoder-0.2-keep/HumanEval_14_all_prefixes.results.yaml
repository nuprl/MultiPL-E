name: HumanEval_14_all_prefixes
language: lua
results:
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local function add_prefix(prefix, suffix)\n    if suffix:len() > #prefix then\n\
    \      prefixes[#prefix+1] = suffix\n    end\n  end\n  add_prefix(string, string)\n\
    \  add_prefix(string, string..'a')\n  add_prefix(string, string..'ab')\n  add_prefix(string,\
    \ string..'abc')\n  add_prefix(string, string..'abcd')\n  add_prefix(string, string..'abcde')\n\
    \  add_prefix(string, string..'abcdef')\n  add_prefix(string, string..'abcdefg')\n\
    \  add_prefix(string, string..'abcdefgh')\n  add_prefix(string, string..'abcdefghi')\n\
    \  add_prefix(string, string..'abcdefghij')\n  add_prefix(string, string..'abcdefghijk')\n\
    \  add_prefix(string, string..'abcdefghijkl')\n  add_prefix(string, string..'abcdefghijklm')\n\
    \  add_prefix(string, string..'abcdefghijklmn')\n  add_prefix(string, string..'abcdefghijklmno')\n\
    \  add_prefix(string, string..'abcdefghijklmnop')\n  add_prefix(string, string..'abcdefghijklmnopq')\n\
    \  add_prefix(string, string..'abcdefghijklmnopqrs')\n  add_prefix(string, string..'abcdefghijklmnopqrst')\n\
    \  add_prefix(string, string..'abcdefghijklmnopqrstu')\n  add_prefix(string, string..'abcdefghijklmnopqrstuv')\n\
    \  add_prefix(string, string..'abcdefghijklmnopqrstuvw')\n  add_prefix(string,\
    \ string..'abcdefghijklmnopqrstuvwx')\n  add_prefix(string, string..'abcdefghijklmnopqrstuvwxy')\n\
    \  add_prefix(string, string..'abcdefghijklmnopqrstuvwxyz')\n  add_prefix(string,\
    \ string..'abcdefghijklmnopqrstuvwxyza')\n  add_prefix(string, string..'abcdefghijklmnopqrstuvwxyzab')\n\
    \  add_prefix(string, string..'abcdefghijklmnopqrstuvwxyzabc')\n  add_prefix(string,\
    \ string..\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp7bfn_5zq.lua:44: ')' expected (to close '(' at line 43)\
    \ near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeiadu5q2.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpeiadu5q2.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string[1:i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpylwe9nr5.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpyi5nrct_.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    for i = 1, index do\n      prefix = prefix .. string[i]\n    end\n\
    \    table.insert(prefixes, prefix)\n    index = index + 1\n    if index > #string\
    \ then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvos0xk3a.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvos0xk3a.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpy6953kbp.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3oico8sm.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest_prefix = \"\"\n  local longest_prefix_len\
    \ = 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n    local\
    \ prefix_len = #prefix\n    if longest_prefix_len < prefix_len then\n      longest_prefix_len\
    \ = prefix_len\n      longest_prefix = prefix\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes, longest_prefix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptkqlsup3.lua:24:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\\nstack traceback:\\n\\t/tmp/tmptkqlsup3.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxotbk9od.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpxotbk9od.lua:16: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    string = string[index + 1]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaatyxesq.lua:25:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpaatyxesq.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrwlswi8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpzrwlswi8.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz1kjgz32.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpz1kjgz32.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphann1ff.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpphann1ff.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmb7xmbd3.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpmb7xmbd3.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmph1hob92r.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string:sub(i, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8p12rmf3.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\\nstack traceback:\\n\\t/tmp/tmp8p12rmf3.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpftlop2ih.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpftlop2ih.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = longest\n\
    \  while longest > 0 do\n    local prefix = string[longest]\n    longest = longest\
    \ - 1\n    prefixes[#prefixes + 1] = prefix\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4yrbzfm4.lua:20:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmp4yrbzfm4.lua:20: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc9_9uy5n.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpc9_9uy5n.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0gv8hog.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpq0gv8hog.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv6y143en.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpv6y143en.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3bd_szd4.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp3bd_szd4.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsaoxk4eh.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpsaoxk4eh.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz0birw4e.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpz0birw4e.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurg2zrxx.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpurg2zrxx.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprprtr4t1.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmprprtr4t1.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppk6ig8rx.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yidayv7.lua:18:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmp1yidayv7.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp5stjexok.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjv5ih9ld.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpjv5ih9ld.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpke0f6x3y.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9i4i0317.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp9i4i0317.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0b1iqqyo.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp0b1iqqyo.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  while #prefixes > 1 do\n    local prefix = prefixes[1]\n    prefixes[1] = prefix:sub(1,\
    \ #prefix)\n    table.insert(prefixes, prefix)\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfg0uh1i5.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpfg0uh1i5.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpttyg_6y0.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpttyg_6y0.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4b8_ctua.lua:7: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9nd7odn.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpz9nd7odn.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6g_fbk7_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp6g_fbk7_.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqso92nb1.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpqso92nb1.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvn1lipb3.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpvn1lipb3.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxy0xwm1w.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpxy0xwm1w.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiapesymy.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpiapesymy.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest\n  for i = 1, #string do\n \
    \   longest, shortest = longest, string[i]\n    for j = 1, #string do\n      if\
    \ string[i] == string[j] then\n        prefixes[#prefixes + 1] = string[j]\n \
    \     end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmploxzxnab.lua:22:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmploxzxnab.lua:22: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz93mbtkj.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpz93mbtkj.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo84o88vy.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpo84o88vy.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppediv9es.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmppediv9es.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  local i = 1\n  while i <= len\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n    i = i + 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpprog1vv6.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuovhp8cs.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpuovhp8cs.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp1rgsjz4v.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3hg4pn0.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpf3hg4pn0.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptlartw1u.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmptlartw1u.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwbrxnno9.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpwbrxnno9.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. string\n    if prefix:sub(1, #prefix) == ''\
    \ then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhcl56e5.lua:20:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpjhcl56e5.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpe1d1x0u3.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 0\n  while true do\n    i = i + 1\n    if\
    \ string.sub(i, 1) ~= '' then\n      prefixes[#prefixes + 1] = string.sub(i, 1)\n\
    \    end\n    if i == #string then\n      break\n    end\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpeh14o45m.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    prefixes[#prefixes + 1] = prefix\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ncs7yh1.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7ncs7yh1.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp5e_rbi64.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. string\n    if prefix:sub(1, #prefix) == ''\
    \ then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl09y6ipd.lua:20:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpl09y6ipd.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0txt7kf2.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqa1vsnsl.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpqa1vsnsl.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpyxp687wf.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpomwla7fw.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp0mty602f.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6tjn56x.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpd6tjn56x.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local i = 1\n  while i <= #string do\n    local prefix = string\n    while\
    \ i <= #string and string[i] == prefix do\n      i = i + 1\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppndo92ub.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmppndo92ub.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpy2w7f7_b.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    string = string[index + 1]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpic7wyxs9.lua:25:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpic7wyxs9.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while index <= #string do\n    prefixes[#prefixes\
    \ + 1] = string.sub(string,1,index)\n    index = index + 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjkye4fr4.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpjkye4fr4.lua:17: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpay9egd0t.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpay9egd0t.lua:16: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptiqroc34.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmptiqroc34.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp_8t40f6i.lua:7: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    for i = 1, index do\n      prefix = prefix .. string[i]\n    end\n\
    \    table.insert(prefixes, prefix)\n    index = index + 1\n    if string.sub(string,\
    \ 1, index) == '' then\n      break\n    end\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdi0pwze3.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdi0pwze3.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp94olv0kz.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp94olv0kz.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9hwr5uz2.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7wpgxt3f.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp7wpgxt3f.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4p9cw3v6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp4p9cw3v6.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp8dwfocds.lua:7: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp97z1d_to.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp97z1d_to.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8jtv4bx7.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp8jtv4bx7.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphvqk4odg.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmphvqk4odg.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpxud3m0k9.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkb6wkx8s.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpkb6wkx8s.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp8wfihn0z.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2v9ixnw.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpi2v9ixnw.lua:16: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local longest = #string\n  for i = 1, #string do\n    for j = 1, #string do\n\
    \      if j > i then\n        local prefix = string\n        prefix = prefix:sub(1,\
    \ i)\n        prefix = prefix:sub(1, j)\n        prefixes[#prefixes + 1] = prefix\n\
    \      end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp151mlpqp.lua:27:\
    \ expected: \\n{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ \\n{\\n    \"asdfgh\",\\n    \"asdfgh\",\\n    \"asdfgh\",\\n    \"asdfgh\"\
    ,\\n    \"asdfgh\",\\n    \"asdfgh\",\\n    \"a\",\\n    \"a\",\\n    \"a\",\\\
    n    \"a\",\\n    \"a\",\\n    \"as\",\\n    \"as\",\\n    \"as\",\\n    \"as\"\
    ,\\n    \"asd\",\\n    \"asd\",\\n    \"asd\",\\n    \"asdf\",\\n    \"asdf\"\
    ,\\n    \"asdfg\"\\n}\\nstack traceback:\\n\\t/tmp/tmp151mlpqp.lua:27: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgidx1cs6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpgidx1cs6.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmrb5ohbj.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpmrb5ohbj.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9g63qd1o.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0yano9f9.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp0yano9f9.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i ~= 0 do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4q3o8_fc.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzl664hpg.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpzl664hpg.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8m9wh2e.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp_8m9wh2e.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp10dn4960.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphh_iufxk.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmnp9ml2f.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpmnp9ml2f.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp05y487n9.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp05y487n9.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwq0in19j.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpwq0in19j.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu_s_d_5z.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpu_s_d_5z.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqhnu5gmz.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpqhnu5gmz.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxhtrk_lv.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpxhtrk_lv.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu1yn7wtc.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpu1yn7wtc.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphbb2ju_j.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmphbb2ju_j.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfak6364_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpfak6364_.lua:16: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp81dlqgm4.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp81dlqgm4.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. string\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpypvzfnon.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpm67c69j4.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpe_0mcg0x.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  local i = 1\n  while i <= len\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n    i = i + 1\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp6gc__aha.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcl8zcm7b.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpcl8zcm7b.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp8a5ajxre.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local function add_prefix(prefix, suffix)\n    table.insert(prefixes, prefix)\n\
    \    table.insert(prefixes, prefix .. suffix)\n  end\n  add_prefix(string, string)\n\
    \  add_prefix(string .. 'a', string .. 'b')\n  add_prefix(string .. 'ab', string\
    \ .. 'c')\n  add_prefix(string .. 'abc', string .. 'd')\n  add_prefix(string ..\
    \ 'abcd', string .. 'e')\n  add_prefix(string .. 'abcde', string .. 'f')\n  add_prefix(string\
    \ .. 'abcdef', string .. 'g')\n  add_prefix(string .. 'abcdefg', string .. 'h')\n\
    \  add_prefix(string .. 'abcdefgh', string .. 'i')\n  add_prefix(string .. 'abcdefghi',\
    \ string .. 'j')\n  add_prefix(string .. 'abcdefghij', string .. 'k')\n  add_prefix(string\
    \ .. 'abcdefghijk', string .. 'l')\n  add_prefix(string .. 'abcdefghijkl', string\
    \ .. 'm')\n  add_prefix(string .. 'abcdefghijklm', string .. 'n')\n  add_prefix(string\
    \ .. 'abcdefghijklmn', string .. 'o')\n  add_prefix(string .. 'abcdefghijklmno',\
    \ string .. 'p')\n  add_prefix(string .. 'abcdefghijklmnop', string .. 'q')\n\
    \  add_prefix(string .. 'abcdefghijklmnopq', string .. 'r')\n  add_prefix(string\
    \ .. 'abcdefghijklmnopqr', string .. 's')\n  add_prefix(string .. 'abcdefghijklmnopqrs',\
    \ string .. 't')\n  add_prefix(string .. 'abcdefghijklmnopqrst', string .. 'u')\n\
    \  add_prefix(string .. 'abcdefghijklmnopqrstu', string .. 'v')\n  add_prefix(string\
    \ .. 'abcdefghijklmnopqrstv', string .. 'w')\n  add_prefix(string .. 'abcdefghijklmnopqrstvw',\
    \ string .. 'x')\n  add_prefix(string .. 'abcdefghijklmnopqrstvx', string .. 'y')\n\
    \  add_prefix(string .. 'abcdefghijklm\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmparcswa4h.lua:38: unfinished string near ''abcdefghijklm'\\\
    n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    prefixes[index]\
    \ = string\n    index = index + 1\n    if index > #string then\n      return prefixes\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpculd70ll.lua:19:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpculd70ll.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbs54l6g4.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpbs54l6g4.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5_vdc5gc.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp5_vdc5gc.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    prefixes[index]\
    \ = string\n    index = index + 1\n    if index > #string then break end\n   \
    \ string = string.sub(string, 1)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw7d69urm.lua:19:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpw7d69urm.lua:19:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpl2pbuj4_.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp998x_dq6.lua:18:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmp998x_dq6.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp4nw5hw89.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local i = 1\n  while i <= #string do\n    local prefix = string\n    while\
    \ i <= #string and string[i] == prefix do\n      i = i + 1\n    end\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i ~= 0 do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsivo1xw1.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpsivo1xw1.lua:18: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpc2h8sf3d.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest_prefix = \"\"\n  for i = 1, #string do\n\
    \    local prefix = string:sub(i, i)\n    if prefix ~= longest_prefix then\n \
    \     table.insert(prefixes, prefix)\n      longest_prefix = prefix\n    end\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdwhi50eo.lua:21:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\\nstack traceback:\\n\\t/tmp/tmpdwhi50eo.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = string.len()\n  for i = 1, string.len()\
    \ do\n    local prefix = string[1:i]\n    table.insert(prefixes, prefix)\n   \
    \ if string.len() > longest then\n      longest = string.len() -- Update longest\
    \ prefix\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpr9_23l4d.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqyjoy69v.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpqyjoy69v.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5k5na1n6.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp5k5na1n6.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhftjv0u.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpjhftjv0u.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ table.insert(prefixes, string[1:i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpln_b15r0.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmppwf5gcwm.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgvogw3f4.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpgvogw3f4.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    string = string[index + 1]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnl7uu9vl.lua:25:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpnl7uu9vl.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9jq3z89.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpn9jq3z89.lua:19: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvs1cdn_o.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60rre0vh.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp60rre0vh.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvwywz9tc.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6bi0ncs.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpx6bi0ncs.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp22k_vh9q.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpay8pduh8.lua:7: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf6bxairq.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpf6bxairq.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    local prefix = string[shortest]\n    local i = shortest\n\
    \    while i <= longest and string[i] ~= prefix do\n      i = i + 1\n    end\n\
    \    if i > shortest then\n      table.insert(prefixes, prefix)\n    end\n   \
    \ shortest = i\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpa8ol4671.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local index = 1\n  while true do\n    local prefix =\
    \ string\n    while index <= #string do\n      prefix = prefix .. string[index]\n\
    \      index = index + 1\n    end\n    table.insert(prefixes, prefix)\n    if\
    \ index > #string then\n      break\n    end\n    string = string[index + 1]\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfpibpp30.lua:25:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmpfpibpp30.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpj0nn4f6m.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmplcis66ky.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. string\n    if prefix:sub(1, #prefix) == ''\
    \ then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6bin63af.lua:20:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmp6bin63af.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpkf7qs0i_.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7wj0ou2j.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp7wj0ou2j.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    prefixes[#prefixes + 1] = prefix\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzwasoku9.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzwasoku9.lua:18:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp48s66057.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyb5sdbyd.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpyb5sdbyd.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  local i = 0\n  while i < len\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, i)\n    i = i + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3r0wy7p.lua:9:\
    \ attempt to index field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt3r0wy7p.lua:19:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9mfuazgp.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp9mfuazgp.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpj737oktd.lua:9: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix .. string\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8gd4dli.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpl8gd4dli.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local i = 1\n  while i <= #string do\n    local prefix = string\n    while\
    \ i <= #string and string[i] == prefix do\n      i = i + 1\n    end\n    prefixes[i]\
    \ = prefix\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ne39n6o.lua:25:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp8ne39n6o.lua:25: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp60bi5c16.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp60bi5c16.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_3owb0d.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp3_3owb0d.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps83pzmje.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmps83pzmje.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    table.insert(prefixes,\
    \ prefix)\n    prefix = prefix .. string\n    if prefix:sub(1, #prefix) == ''\
    \ then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp08juocsg.lua:20:\
    \ expected: {}\\nactual: {\"\"}\\nstack traceback:\\n\\t/tmp/tmp08juocsg.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgdwi7486.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpgdwi7486.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zs9u_0j.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp6zs9u_0j.lua:18: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdjr0onf3.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpdjr0onf3.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string\n    end\n    return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpglmnh3j8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmpglmnh3j8.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpe8dl2pip.lua:8: ']' expected near ':'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplvvxek4g.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmplvvxek4g.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaemjf5kt.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {}\\nstack traceback:\\n\\t/tmp/tmpaemjf5kt.lua:16: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[i] = string\n  end\n\
    \  local i = 1\n  while i <= #string do\n    local prefix = string\n    while\
    \ i <= #string and string[i] == prefix do\n      i = i + 1\n    end\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- ['a', 'ab', 'abc']\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0qd7l34a.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\\nstack\
    \ traceback:\\n\\t/tmp/tmp0qd7l34a.lua:16: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
