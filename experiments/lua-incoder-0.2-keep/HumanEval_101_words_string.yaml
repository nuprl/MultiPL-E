name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal function\
  \ words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  -- Your code here\nend", "  -- Your code here\n  local\
    \ words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local words =\
    \ string.gmatch(s, \"([^,]+)\") -- Split string into words\n  return words or\
    \ {s} -- Return empty array if string is empty\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words\n  if words == nil then return nil end\n\
    \  return words\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \".+?(,|$)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if words == nil then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if #words == 0 then\n    return nil\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") --\
    \ Split string into words by commas\n  local words_list = {}\n  for _, word in\
    \ pairs(words) do words_list[#words_list+1] = word end -- Add each word to list\n\
    \  return words_list\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n \
    \ return words\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  assert(#words\
    \ == 1)\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n\
    \  if words == nil then\n    return nil\n  end\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words\
    \ == nil then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end", "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  return words or { } -- Return empty array if string\
    \ is empty\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\n\
    end", "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if #words == 0 then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  -- Your code here\n\
    \  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words\
    \ == nil then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words by comma\n  if #words == 0 then\n  \
    \  words = {s} -- If no commas were found, just return the string\n  end\n  return\
    \ words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s, \"\
    ([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  return words or {s} -- Return empty array if there\
    \ are no words\nend", "  local words = { }\n  for word in string.gmatch(s, \"\
    [^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n\
    \  return words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end", "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  -- Your code here\nend", "  local words\
    \ = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  -- Your code here\n\
    \  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if words then\n    return words\n \
    \ else\n    return nil\n  end\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  if words == nil then return nil end\n  local words_list\
    \ = { }\n  for i = 1, #words do\n    words_list[#words_list+1] = words[i]\n  end\n\
    \  return words_list\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n \
    \ return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ string into words\n  local words_list = { }\n  for _, word in ipairs(words)\
    \ do\n    words_list[#words_list+1] = word\n  end\n  return words_list\nend",
  "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"[^,]+\"\
    )\n  return words\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  if #words\
    \ == 0 then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  return words\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split on commas\n  -- Your code here\n  return words\nend",
  "  -- Your code here\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  --\
    \ Remove empty elements from array\n  words = {[words]}\n  -- Return array\n \
    \ return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ string into words\n  return words and words or nil -- Return words or nil\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n\
    \  if #words == 0 then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  return words and words or nil\nend",
  "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n\
    \  return words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words\n  return words or { } -- Return empty\
    \ array if string is empty or nil\nend", "  -- Your code here\n  local words =\
    \ string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  if words then\n    return words\n\
    \  else\n    return nil\n  end\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if words == nil then\n    return nil\n  end\n  return words\nend", "  --\
    \ Your code here\n  local words = string.gmatch(s, \"[^,]+\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  -- Your code\
    \ here\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split string into\
    \ words\n  return words or {s} -- Return empty array if string is empty\nend",
  "  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if words == nil then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n\
    \  end\n  return words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"[^,]+\")\n  if words == nil then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  local words_list = { }\n  for _, word in pairs(words)\
    \ do -- Add each word to list\n    words_list[#words_list+1] = word\n  end\n \
    \ return words_list\nend", "  -- Your code here\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  if #words == 0 then return nil end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n\
    \    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split on commas\n  if #words == 0 then\n    words = string.gmatch(s,\
    \ \"([^ ]+)\") -- Split on spaces\n  end\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n\
    \  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ on commas\n  if #words == 0 then return nil end\n  local words_list = {}\n \
    \ for i = 1, #words do\n    words_list[i] = words[i]\n  end\n  return words_list\n\
    end", "  -- Your code here\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"[^,]+\"\
    )\n  return words\nend", "  -- Your code here\nend", "  -- Your code here\nend",
  "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return\
    \ words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s, \"\
    ([^,]+)\") -- Split on commas or spaces.\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  return words and\
    \ words[1] or nil -- Return array of words or nil\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  --\
    \ Your code here\n  local words = string.gmatch(s, \"([^,]+)\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n\
    \    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  return\
    \ words or { } -- Return empty array if string is empty\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  local words_list\
    \ = { }\n  for _, word in ipairs(words) do words_list[#words_list+1] = word end\
    \ -- Add each word to list\n  return words_list\nend", "  -- Your code here\n\
    \  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split string\
    \ into words\n  return words or { } -- Return empty array if string is empty\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  if #words == 0 then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = string.gmatch(s, \"[^,]+\"\
    )\n  return words\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return\
    \ words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil\
    \ then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  if #words == 0 then\n    return nil\n  end\n  return words\nend",
  "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, \"[^,]+\")\n  assert(#words == 1)\n  return words\n\
    end", "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ \"([^,]+)(,|$)\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  local\
    \ words_list = { }\n  for _, word in pairs(words) do\n    words_list = words_list:concat(string.gmatch(word,\
    \ \"([^ ]+)\"))\n  end\n  return words_list\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ string into words\n  local words_list = {}\n  for i = 1, #words do\n    words_list[i]\
    \ = words[i]\n  end\n  return words_list\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words\n  if words == nil then return nil end\n\
    \  local words_list = {}\n  for i = 1, #words do\n    words_list[#words_list+1]\
    \ = words[i]\n  end\n  return words_list\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words by commas\n  local words_list = { }\n\
    \  for _, word in ipairs(words) do\n    table.insert(words_list, word)\n  end\n\
    \  return words_list\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n \
    \ return words\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local words\
    \ = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n\
    \  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ on commas or spaces.\n  if #words == 0 then return nil end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  return words\
    \ or { } -- Return empty array if string is empty\nend", "  -- Your code here\n\
    \  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return\
    \ words\nend", "  -- Your code here\nend", "  local words = string.gmatch(s, \"\
    ([^,]+)\")\n  if words then\n    return words\n  else\n    return nil\n  end\n\
    end", "  local words = string.gmatch(s, \"[^,]+\")\n  if #words == 0 then\n  \
    \  return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if #words == 0 then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  local words_list\
    \ = { }\n  for _, word in ipairs(words) do -- Add each word to array\n    table.insert(words_list,\
    \ word)\n  end\n  return words_list\nend", "  local words = string.gmatch(s, \"\
    ([^,]+)\")\n  return words\nend", "  -- Your code here\nend", "  local words =\
    \ string.gmatch(s, \"([^,]+)\") -- Split string into words\n  if #words == 0 then\n\
    \    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n\
    \  return words or {s} -- Return empty array if string is empty\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n\
    \    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  if words == nil then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n\
    \    return nil\n  end\n  return words\nend", "  local words = { }\n  for word\
    \ in string.gmatch(s, \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\n\
    end", "  local words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if #words == 0 then\n    return nil\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") --\
    \ Split on commas or spaces.\n  return words or { } -- Return an empty array if\
    \ there are no words.\nend", "  local words = string.gmatch(s, \"([^,]+)\") --\
    \ Split string into words\n  -- Remove empty elements from array\n  words = {[#words]}\n\
    \  -- Return array\n  return words\nend", "  local words = string.gmatch(s, \"\
    ([^,]+)\")\n  return words\nend", "  -- Your code here\nend", "  local words =\
    \ string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n  end\n\
    \  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ string into words\n  local words_list = {}\n  for _, word in ipairs(words) do\n\
    \    words_list[#words_list+1] = word\n  end\n  return words_list\nend", "  --\
    \ Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words\
    \ == nil then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words\n  local words_list = { }\n  for _,\
    \ word in ipairs(words) do\n    words_list[#words_list+1] = word\n  end\n  return\
    \ words_list\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split on\
    \ commas or spaces.\n  assert(#words == 1, \"Unexpected number of words in '\"\
    \ .. s .. \"'\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if words == nil then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, \"[^,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ \"[^,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\") -- Split string into words\n  if #words\
    \ == 0 then return nil end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"[^,]+\")\n  if words == nil then\n    return nil\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n\
    \    return nil\n  end\n  return words\nend", "  -- Your code here\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if words == nil then\n    return nil\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n\
    \  if words == nil then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  return words\nend", "  -- Your code\
    \ here\n  local words = string.gmatch(s, \",?([^,]+)\") -- match a comma followed\
    \ by one or more non-comma characters\n  -- Your code here\n  return words\nend",
  "  local words = string.gmatch(s, \"([^,]+)\") -- Split on commas or spaces.\n \
    \ if words == nil then\n    return nil\n  end\n  -- Remove empty strings.\n  words\
    \ = words:map(function(w)\n    if w ~= \"\" then return w end\n  end)\n  return\
    \ words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words == nil\
    \ then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") -- Split\
    \ string into words\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
