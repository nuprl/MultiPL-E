name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return an array of the words.\n\
  -- For example:\n-- words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n-- words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal function\
  \ words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  return words\nend", "  -- Your code here\nend", "  -- Your code here\n  local\
    \ words = string.gmatch(s, \"[^,]+\")\n  return words\nend", "  local words =\
    \ string.gmatch(s, \"([^,]+)\") -- Split string into words\n  return words or\
    \ {s} -- Return empty array if string is empty\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\") -- Split string into words\n  if words == nil then return nil end\n\
    \  return words\nend", "  -- Your code here\n  local words = string.gmatch(s,\
    \ \".+?(,|$)\")\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    )\n  if words == nil then\n    return nil\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, \"([^,]+)\")\n  if #words == 0 then\n    return nil\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\") --\
    \ Split string into words by commas\n  local words_list = {}\n  for _, word in\
    \ pairs(words) do words_list[#words_list+1] = word end -- Add each word to list\n\
    \  return words_list\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n \
    \ return words\nend", "  local words = string.gmatch(s, \"[^,]+\")\n  assert(#words\
    \ == 1)\n  return words\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n\
    \  if words == nil then\n    return nil\n  end\n  return words\nend", "  -- Your\
    \ code here\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  if words\
    \ == nil then\n    return nil\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ \"([^,]+)\")\n  if #words == 0 then\n    return nil\n  end\n  return words\n\
    end", "  -- Your code here\nend", "  local words = string.gmatch(s, \"([^,]+)\"\
    ) -- Split string into words\n  return words or { } -- Return empty array if string\
    \ is empty\nend", "  local words = string.gmatch(s, \"([^,]+)\")\n  return words\n\
    end", "  -- Your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
