language: lua
name: HumanEval_84_solve
results:
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local n = 1\n  while n <= N do\n    sum = sum + math.floor(n/10)\n  \
    \  n = math.floor(n/10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local result = ''\n    local i = 1\n    while i <= N do\n        sum\
    \ = sum + math.floor(i/10)\n        i = math.floor(i/10)\n    end\n    if sum\
    \ > 0 then\n        result = result .. math.floor(sum)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w7ykja2.lua:24:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmp5w7ykja2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local sumString = \"\"\n    while N > 0 do\n        sum = sum + math.floor((N\
    \ % 10)/2)\n        N = math.floor(N/10)\n    end\n    sumString = sumString ..\
    \ sum\n    return sumString\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mctzj4f.lua:25:\
    \ expected: \"1\"\nactual: \"0\"\nstack traceback:\n\t/tmp/tmp6mctzj4f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w7ykja2.lua:24:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmp5w7ykja2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor(i/10)\n\
    \        i = math.floor(i/10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 0\n    while N > 0 do\n        sum = sum + math.floor((N\
    \ % 10) * math.pow(2, i))\n        N = math.floor(N/10)\n        i = i + 1\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ph7n387.lua:25:\
    \ expected: \"1\"\nactual: 8\nstack traceback:\n\t/tmp/tmp5ph7n387.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w7ykja2.lua:24:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmp5w7ykja2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    local n = 0\n    while N > 0 do\n        local t = math.floor(math.log2(N))\n\
    \        local digits = math.floor((N - math.pow(2, t)) / math.pow(2, t))\n  \
    \      s = s .. digits:reverse()\n        N = math.floor((N - math.pow(2, t))\
    \ / math.pow(2, t))\n        n = n + 1\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx33qz68p.lua:15:\
    \ attempt to call a nil value (field 'log2')\nstack traceback:\n\t/tmp/tmpx33qz68p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpx33qz68p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local i = 1\n  while i <= N do\n    sum = sum + math.floor((N % i) /\
    \ 2)\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46tb1b2g.lua:24:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmp46tb1b2g.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local result = \"\"\n    for i = 1, N do\n        sum = sum + math.floor((N\
    \ % 10) * math.pow(2, i))\n    end\n    if sum > 0 then\n        result = result\
    \ .. math.floor(sum / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbx_h9w98.lua:26:\
    \ expected: \"1\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbx_h9w98.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    for i = 1, N do\n        sum = sum + math.floor((N % 10) * math.pow(2,\
    \ i))\n        N = math.floor(N/10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxw8akgx.lua:23:\
    \ expected: \"1\"\nactual: 16\nstack traceback:\n\t/tmp/tmptxw8akgx.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w7ykja2.lua:24:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmp5w7ykja2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    for i = 1, N do\n        sum = sum + math.floor((N % 10) * math.pow(2,\
    \ i))\n        N = math.floor(N / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdftxfza3.lua:23:\
    \ expected: \"1\"\nactual: 16\nstack traceback:\n\t/tmp/tmpdftxfza3.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local n = 0\n    while N > 0 do\n        sum = sum + math.floor((N\
    \ % 10) * math.pow(2, n))\n        N = math.floor(N / 10)\n        n = n + 1\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0lhbxkk.lua:25:\
    \ expected: \"1\"\nactual: 8\nstack traceback:\n\t/tmp/tmpw0lhbxkk.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 0\n    while i < N do\n        sum = sum + math.floor((N\
    \ % 10) * (math.pow(2, i)))\n        i = i + 1\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0qlz3ng.lua:24:\
    \ expected: \"1\"\nactual: 0\nstack traceback:\n\t/tmp/tmpr0qlz3ng.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    for i = 1, N do\n        sum = sum + math.floor((N % 10) * math.pow(2,\
    \ i))\n        N = math.floor(N/10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxw8akgx.lua:23:\
    \ expected: \"1\"\nactual: 16\nstack traceback:\n\t/tmp/tmptxw8akgx.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    for i = 1, N do\n        sum = sum + math.floor((N % 10) * (math.pow(2,\
    \ i)))\n        N = math.floor(N / 10)\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg_ygjlf.lua:23:\
    \ expected: \"1\"\nactual: 16\nstack traceback:\n\t/tmp/tmpdg_ygjlf.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local result = ''\n    for i = 1, N do\n        sum = sum + math.floor((N\
    \ % 10) * math.pow(2, i))\n    end\n    if sum > 0 then\n        result = result\
    \ .. math.floor(sum / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqcjy3bd.lua:26:\
    \ expected: \"1\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdqcjy3bd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n-- For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n-- For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n--\
    \ Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local n = 1\n    while n > 0 do\n        sum = sum + math.floor((N\
    \ % 10) * math.pow(2, n))\n        n = n + 1\n    end\n    return sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
