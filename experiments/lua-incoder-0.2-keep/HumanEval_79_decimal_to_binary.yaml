name: HumanEval_79_decimal_to_binary
language: lua
prompt: "-- You will be given a number in decimal form and your task is to convert\
  \ it to\n-- binary format. The function should return a string, with each character\
  \ representing a binary\n-- number. Each character in the string will be '0' or\
  \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n-- The extra characters are there to help with the\
  \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n-- decimal_to_binary(32)\
  \   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
  \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
  \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
  \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local binary = \"\"\n    local decimal = math.floor(decimal)\n\
    \    local remainder = decimal\n    while remainder ~= 0 do\n        binary =\
    \ binary .. \"1\" .. math.floor(remainder / 2)\n        remainder = remainder\
    \ % 2\n    end\n    binary = binary .. \"db\"\n    return binary\nend", "    decimal\
    \ = tonumber(decimal)\n    local binary = \"\"\n    local decimals = math.floor(math.log(decimal,\
    \ 2))\n    local remainder = math.fmod(decimal, 2)\n    local remainders = math.floor(math.log(remainder,\
    \ 2))\n    local remainders_str = string.format(\"%0d\", remainders)\n    local\
    \ remainders_str = string.gsub(remainders_str, \".\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"-\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \":\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"-\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str\
    \ = string.gsub(remainders_str, \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str,\
    \ \"+\", \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\",\
    \ \"\")\n    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n\
    \    local remainders_str = string.gsub(remainders_str, \"+\", \"\")\n    local\
    \ remainders_str = string.gsub(remainders_str, \"+", "    local decimal_str =\
    \ tostring(decimal)\n    local binary_str = \"\"\n    local binary_index = 1\n\
    \    local binary_length = #decimal_str\n    local binary_remainder\n    local\
    \ binary_digit\n    local binary_remainder_str\n    local binary_remainder_length\n\
    \    local binary_remainder_remainder\n    local binary_remainder_digit\n    local\
    \ binary_remainder_remainder_str\n    local binary_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder\n    local binary_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_str\n    local binary_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder\n    local binary_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_str\n    local binary_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder\n    local\
    \ binary_remainder_remainder_remainder_remainder_digit\n    local binary_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_length\n \
    \   local binary_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_digit\n  \
    \  local binary_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_length\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_digit\n\
    \    local binary_remainder_remainder_remainder_remainder_remainder_remainder_remain",
  "  -- Write your code here\n  local binary = \"\"\n  local decimal = decimal\n \
    \ local i = 0\n  while decimal > 0 do\n    binary = binary .. \"0\"\n    decimal\
    \ = decimal - 1\n  end\n  binary = binary .. \"1\"\n  binary = binary .. \"db\"\
    \n  return binary\nend", "    local binary = \"\"\n    local decimal = decimal\n\
    \    while decimal > 0 do\n        local remainder = decimal % 2\n        decimal\
    \ = decimal / 2\n        binary = string.format(\"%s%d%s\", binary, remainder,\
    \ string.sub(binary, 1, string.len(binary)-1))\n    end\n    return binary ..\
    \ \"db\"\nend", "    local binary = \"\"\n    local decimal = decimal\n    local\
    \ decimal_power = math.pow(10, decimal)\n    while decimal > 0 do\n        binary\
    \ = binary .. \"0\"\n        decimal = decimal - 1\n    end\n    binary = binary\
    \ .. \"1\"\n    return binary\nend", "    local binary = \"\"\n    local decimal\
    \ = decimal\n    local decimal_power = math.pow(10, decimal)\n    local decimal_remainder\
    \ = decimal % decimal_power\n    local decimal_remainder_power = math.pow(10,\
    \ decimal_remainder)\n    local decimal_remainder_remainder = decimal_remainder\
    \ % decimal_remainder_power\n    local decimal_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder)\n    local decimal_remainder_remainder_remainder\
    \ = decimal_remainder_remainder % decimal_remainder_remainder_power\n    local\
    \ decimal_remainder_remainder_remainder_power = math.pow(10, decimal_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder = decimal_remainder_remainder_remainder\
    \ % decimal_remainder_remainder_remainder_power\n    local decimal_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder\
    \ = decimal_remainder_remainder_remainder_remainder % decimal_remainder_remainder_remainder_remainder_power\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.pow(10, decimal_remainder_remainder_remainder_remainder_remainder)\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_power = math.pow(10,\
    \ decimal_remainder_remainder_remainder_remainder_remainder)\n    local decimal_remainder_remainder_remainder_remainder_remainder_power\
    \ = math.", "    local decimal_str = string.format(\"%0d\", decimal)\n    local\
    \ binary_str = \"\"\n    for i = 1, #decimal_str do\n        binary_str = binary_str\
    \ .. \"db\" .. decimal_str:sub(i,i)\n    end\n    return binary_str\nend", " \
    \ decimal = tonumber(decimal)\n  local binary = \"\"\n  local decimal_power =\
    \ math.pow(10, math.floor(math.log10(decimal)))\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power = decimal_power\
    \ - 1\n  local decimal_pow", "  decimal = decimal or 0\n  local binary = \"\"\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    binary = string.format(\"%s%c\", binary, remainder)\n\
    \  end\n  return binary .. \"db\"\nend", "    local binary = \"\"\n    local decimal_power\
    \ = math.pow(10, decimal)\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local\
    \ decimal_power = decimal_power - 1\n    local decimal_power = decimal_power -\
    \ 1\n    local decimal_power = decimal_power - 1\n    local decimal_power = decimal_power\
    \ - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power =\
    \ decimal_power - 1\n    local decimal_power = decimal_power - 1\n    local decimal_power\
    \ = decimal_power - 1\n    local decimal_power = decimal_power - 1\n", "    local\
    \ binary = \"\"\n    local decimal = math.floor(decimal)\n    local remainder\
    \ = decimal\n    while remainder > 0 do\n        binary = binary .. \"0\"\n  \
    \      remainder = remainder - 1\n    end\n    binary = binary .. \"1\"\n    return\
    \ binary\nend", "    decimal = decimal\n    local binary = \"\"\n    local decimal_power\
    \ = math.pow(10, decimal)\n    local decimal_mod = decimal\n    while decimal_mod\
    \ > 0 do\n        binary = binary .. \"0\"\n        decimal_mod = decimal_mod\
    \ - 1\n    end\n    binary = binary .. \"1\"\n    while decimal_power > 0 do\n\
    \        binary = binary .. \"0\"\n        decimal_power = decimal_power - 1\n\
    \    end\n    return binary .. \"db\"\nend", "  local binary = \"\"\n  local decimal\
    \ = decimal\n  local decimal_power = math.pow(10, decimal)\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_power\
    \ = decimal_power - 1\n  local decimal_power = decimal_power - 1\n  local decimal_",
  "  decimal = tonumber(decimal)\n  if decimal < 0 then\n    return \"db\"..decimal_to_binary(-decimal)\n\
    \  end\n  local binary = \"\"\n  local decimals = math.floor(math.log(decimal,2))\n\
    \  local power = math.pow(2,decimals)\n  for i = 1,decimals do\n    binary = binary\
    \ .. (decimal%power) .. \"b\"\n    decimal = math.floor(decimal/power)\n  end\n\
    \  return \"db\"..binary\nend", "    decimal = decimal or 0\n    local binary\
    \ = \"\"\n    local remainder\n    local decimal_str = tostring(decimal)\n   \
    \ local decimal_len = #decimal_str\n    local decimal_remainder\n    local decimal_remainder_str\n\
    \    local decimal_remainder_len\n    local decimal_remainder_remainder\n    local\
    \ decimal_remainder_remainder_str\n    local decimal_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder\n    local decimal_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_len\n    local decimal_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_str\n    local decimal_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder\n    local\
    \ decimal_remainder_remainder_remainder_remainder_remainder_str\n    local decimal_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_str\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_len\n\
    \    local decimal_remainder_remainder_remainder_remainder_remainder_remainder_remainder_",
  "  decimal = decimal:byte()\n  local binary = \"\"\n  local i = 0\n  while decimal\
    \ > 0 do\n    binary = binary .. \"0\"\n    decimal = decimal - 1\n    i = i +\
    \ 1\n  end\n  binary = binary .. \"1\"\n  i = i - 1\n  while i > 0 do\n    binary\
    \ = binary .. \"0\"\n    i = i - 1\n  end\n  return binary\nend", "    local binary\
    \ = \"\"\n    local decimal = decimal\n    local decimal_power = math.pow(10,\
    \ math.floor(math.log10(decimal)))\n    local decimal_mod = decimal\n    while\
    \ decimal_mod > 0 do\n        decimal = decimal_mod % decimal_power\n        binary\
    \ = binary .. \"1\" .. tostring(decimal)\n        decimal_mod = math.floor(decimal_mod\
    \ - decimal)\n    end\n    binary = binary .. \"0\"\n    return binary .. \"db\"\
    \nend", "    decimal = tonumber(decimal)\n    if decimal < 0 then\n        decimal\
    \ = -decimal\n        decimal = -decimal\n    end\n    local binary = \"\"\n \
    \   local remainder\n    for i = 1, decimal do\n        remainder = math.floor((decimal\
    \ % 2))\n        binary = binary .. \"1\" .. remainder\n        decimal = decimal\
    \ / 2\n    end\n    if decimal > 0 then\n        remainder = math.floor((decimal\
    \ % 2))\n        binary = binary .. \"1\" .. remainder\n    end\n    if binary\
    \ == \"1\" then\n        binary = \"db\" .. binary\n    end\n    return binary\n\
    end", "    decimal = tonumber(decimal)\n    if decimal < 0 then\n        error(\"\
    Decimal must be positive\")\n    end\n    local binary = \"\"\n    local decimals\
    \ = math.floor(math.log(decimal, 2))\n    local remainder = decimal % 2\n    if\
    \ decimals > 0 then\n        binary = decimal_to_binary(math.floor(decimal / 2))\n\
    \    end\n    if remainder == 1 then\n        binary = \"1\" + binary\n    else\n\
    \        binary = \"0\" + binary\n    end\n    return binary .. \"db\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
