language: lua
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  return n * special_factorial(n - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9fmrzyk.lua:17:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpo9fmrzyk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkpluude.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbkpluude.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qsy2003.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp1qsy2003.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
