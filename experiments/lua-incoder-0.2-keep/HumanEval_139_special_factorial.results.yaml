language: lua
name: HumanEval_139_special_factorial
results:
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  return n * special_factorial(n - 1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9fmrzyk.lua:17:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpo9fmrzyk.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkpluude.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbkpluude.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qsy2003.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp1qsy2003.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, 'Negative factorial is not defined')\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuf9uvdeu.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpuf9uvdeu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined.\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz315d4l.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpyz315d4l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 1764774703953777193780000000\n  elseif n == 33 then\n    return\
    \ 357119592370605442\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfshh97_o.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial is undefined for negative numbers\")\n\
    \  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial *\
    \ i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyaszk6x.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpfyaszk6x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkpluude.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbkpluude.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial function received a negative number\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmi5p1u_x.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmi5p1u_x.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptybwx8zs.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmptybwx8zs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 1764774703953777193780000000\n  elseif n == 33 then\n    return\
    \ 4883884324925811\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9faexntd.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkpluude.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpbkpluude.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, 'Negative factorial not allowed')\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5f24xvts.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp5f24xvts.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqo03qxo.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqqo03qxo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794165
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial is undefined for negative numbers\")\n\
    \  end\n  if n == 0 then\n    return 1\n  end\n  local factorial = 1\n  for i\
    \ = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bpr8fid.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp3bpr8fid.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnym6bflb.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnym6bflb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxsybryl.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaxsybryl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n < 0 then\n    return nil\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflbfopfk.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpflbfopfk.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 73267460800591547418246185080000000\n  elseif n ==\
    \ 32 then\n    return 12582917564776174926767725793616000000\n  elseif n == 33\
    \ then\n    return 2473\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsc0yx61.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 0 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqkwd973.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzqkwd973.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 1717986918487665982310419791200000000\n  elseif n == 33 then\n\
    \    return 4398046511\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1o_b04p7.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial not allowed\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs1mgiak.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxs1mgiak.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined.\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz315d4l.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpyz315d4l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed.\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplohdpvaw.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplohdpvaw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial: negative argument\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpggzdku_7.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpggzdku_7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"factorial of negative number\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0ahlee.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzp0ahlee.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative integer is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * (i - 1)\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl52_pxq8.lua:21:\
    \ expected: 288, actual: 0\nstack traceback:\n\t/tmp/tmpl52_pxq8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial function only accepts positive integers\"\
    )\n  end\n  if n == 0 then\n    return 1\n  end\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpncm0ur0g.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpncm0ur0g.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed.\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplohdpvaw.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplohdpvaw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined. \"\n   \
    \               \"The factorial of 0 is undefined.\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfief3bgn.lua:11: '')'' expected (to close ''('' at line 10)
    near ''"The factorial of 0 is undefined."''

    '
  stdout: ''
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  if n == 0 then\n    return 1\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz497fw1n.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpz497fw1n.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 6980173778561253875907104793624000000\n  elseif n ==\
    \ 32 then\n    return 1333953779709843248377215856480000000\n  elseif n == 33\
    \ then\n    return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxondr6ug.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''=''

    '
  stdout: ''
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qsy2003.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp1qsy2003.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 176477056994204082264315950374840000000\n  elseif n == 33 then\n\
    \    return 48818\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpub6rpy3d.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qsy2003.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp1qsy2003.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxsybryl.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaxsybryl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  elseif n == 0 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rt4lrlz.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9rt4lrlz.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return nil\n  end\n  if n == 0 then\n    return 1\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7al8w66.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc7al8w66.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined.\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz315d4l.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpyz315d4l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdnbbdaz.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsdnbbdaz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not defined\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1uv3f_k.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpn1uv3f_k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnym6bflb.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnym6bflb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltgrmb1i.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpltgrmb1i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdnbbdaz.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsdnbbdaz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 1764774703953777193780000000\n  elseif n == 33 then\n    return\
    \ 357119592370605442\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfshh97_o.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, 'Negative factorials are not defined')\n  local factorial =\
    \ 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qtsm093.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7qtsm093.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"factorial of negative number\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0ahlee.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzp0ahlee.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial function only accepts positive integers\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud3u0y5v.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpud3u0y5v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined. \"\n   \
    \               .. \"The factorial of 0 is 1.\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkv1a4_r.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpvkv1a4_r.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  elseif\
    \ n == 2 then\n    return 2\n  elseif n == 3 then\n    return 6\n  elseif n ==\
    \ 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n  elseif n == 6\
    \ then\n    return 720\n  elseif n == 7 then\n    return 5040\n  elseif n == 8\
    \ then\n    return 40320\n  elseif n == 9 then\n    return 362880\n  elseif n\
    \ == 10 then\n    return 3628800\n  elseif n == 11 then\n    return 39916800\n\
    \  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n    return\
    \ 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif n == 15\
    \ then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 73267460800591547418246185080000000\n  elseif n ==\
    \ 32 then\n    return 1258291702609406186304480000000\n  elseif n == 33 then\n\
    \    return 2517220356389770880\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgfbxb9r5.lua:78: ''end'' expected (to close ''if'' at line
    10) near ''lu''

    '
  stdout: ''
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not defined\")\n  end\n\
    \  if n == 0 then\n    return 1\n  end\n  local factorial = 1\n  for i = 1, n\
    \ do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9doo95zo.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9doo95zo.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 0 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqkwd973.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzqkwd973.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"factorial of negative number\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0ahlee.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzp0ahlee.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial not allowed\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs1mgiak.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxs1mgiak.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is not defined.\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyz315d4l.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpyz315d4l.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxec359va.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxec359va.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxsybryl.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaxsybryl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"The factorial of a negative number is undefined.\"\
    )\n  end\n  if n == 0 then\n    return 1\n  end\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdywarq8c.lua:26:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpdywarq8c.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not defined\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1uv3f_k.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpn1uv3f_k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial function only accepts positive integers\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud3u0y5v.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpud3u0y5v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hxto4yy.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp9hxto4yy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnym6bflb.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpnym6bflb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then\n    return 1\n  elseif n < 2 then\n    return n\n  else\n  \
    \  return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9kzoi9g.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpc9kzoi9g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then return 1 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwk6hlho.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmprwk6hlho.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial argument must be positive\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7p1xjhf9.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7p1xjhf9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"The factorial of a negative number is undefined\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ttgj9mr.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_ttgj9mr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n < 0 then\n    return 0\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0tbl81l.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx0tbl81l.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"The factorial of a negative number is undefined\")\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp830gy0gc.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp830gy0gc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxec359va.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxec359va.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"factorial function only accepts positive integers\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud3u0y5v.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpud3u0y5v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"The argument must be a positive integer.\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_q1z_bs.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpx_q1z_bs.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return n\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1v6ospi.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmph1v6ospi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not defined.\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84fm21l0.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp84fm21l0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"n must be positive\")\n  local factorial = 1\n  for i = 1,\
    \ n do\n    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02hcf7wf.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp02hcf7wf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdnbbdaz.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpsdnbbdaz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n == 0 then\n    return 1\n  else\n \
    \   return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlwwhe1m.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpqlwwhe1m.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_1pardxq.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp_1pardxq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0, \"Negative factorial not allowed\")\n  local factorial = 1\n\
    \  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs1mgiak.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxs1mgiak.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxsybryl.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpaxsybryl.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 1 then return 0 end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzqkwd973.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzqkwd973.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  else\n    return n * special_factorial(n -\
    \ 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpov0tdgl1.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpov0tdgl1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i = 1, n do\n\
    \    factorial = factorial * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3c46_je.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpl3c46_je.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 0 then\n    error(\"Negative factorials are not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7f1xqd6o.lua:23:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmp7f1xqd6o.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794188
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n >= 0)\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = special_factorial\n    lu.assertEquals(candidate(4), 288)\n\
    \    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n\
    \    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxec359va.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpxec359va.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = special_factorial\n    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5),\
    \ 34560)\n    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw0x39fw.lua:20:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpmw0x39fw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  if n == 0 then\n    return 1\n  elseif n == 1 then\n    return 1\n  else\n\
    \    return n * special_factorial(n - 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = special_factorial\n    lu.assertEquals(candidate(4),\
    \ 288)\n    lu.assertEquals(candidate(5), 34560)\n    lu.assertEquals(candidate(7),\
    \ 125411328000)\n    lu.assertEquals(candidate(1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpcopldc.lua:22:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmplpcopldc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
    -- 288\n-- The function will receive an integer as input and should return the\
    \ special\n-- factorial of this integer.\nlocal function special_factorial(n)\n\
    \  assert(n > 0, \"factorial of negative number\")\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
    \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
    \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzp0ahlee.lua:21:\
    \ expected: 288, actual: 24\nstack traceback:\n\t/tmp/tmpzp0ahlee.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659794189
