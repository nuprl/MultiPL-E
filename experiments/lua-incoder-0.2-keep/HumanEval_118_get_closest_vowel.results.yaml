language: lua
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a','e','i','o','u','y'}\n   local vowels_count = #vowels\n\
    \   local vowels_index = 0\n   local vowels_index_count = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max =\
    \ 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n  \
    \ local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local\
    \ vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min\
    \ = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min =\
    \ 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n\
    \   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n  \
    \ local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max =\
    \ 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n  \
    \ local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local\
    \ vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min\
    \ = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min =\
    \ 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n\
    \   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n  \
    \ local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max =\
    \ 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n  \
    \ local vowels_index_count_min = 0\n   local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0hi_r3gx.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\", \"Y\"}\n    local vowels_count = #vowels\n    local vowel_index\
    \ = 1\n    local vowel_found = false\n    local vowel_start = nil\n    local vowel_end\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvl6z29qg.lua:102: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph5xg1yih.lua:53: '')'' expected (to close ''('' at line 52)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowels_count =\
    \ #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_max = #word\n    local vowels_index_count_min = 1\n    local\
    \ vowels_index_count_min = #word\n    local vowels_index_count_max = #word\n \
    \   local vowels_index_count_min = #word\n    local vowels_index_count_max = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7wxxg3v.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count = 0\n\tlocal vowels_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max = 0\n\tlocal vowels_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max = 0\n\t\
    local vowels_index_count_min_index_count_min_index_count_min_index = 0\n\tlocal\
    \ vowels_index_count_max_index_count_max_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index =\
    \ 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max_index_count_max_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppglxn041.lua:67: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n   local vowel_count =\
    \ {}\n   for i = 1, #word do\n      local vowel = word:sub(i,i)\n      if vowel:sub(1,1)\
    \ ~= vowel then\n         if vowel:sub(1,1) ~= vowel:sub(#vowel,1) then\n    \
    \        vowel_count[vowel] = vowel_count[vowel] + 1\n         end\n      end\n\
    \   end\n   local vowel_count_sorted = {}\n   for key, value in pairs(vowel_count)\
    \ do\n      vowel_count_sorted[#vowel_count_sorted + 1] = key .. value\n   end\n\
    \   table.sort(vowel_count_sorted)\n   if #vowel_count_sorted == 0 then\n    \
    \  return \"\"\n   end\n   return vowel_count_sorted[#vowel_count_sorted]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2b0xl2d.lua:36:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpn2b0xl2d.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_met_count\
    \ = 0\n  local vowel_met_index = 0\n  local vowel_met_index2 = 0\n  local vowel_met_index3\
    \ = 0\n  local vowel_met_index4 = 0\n  local vowel_met_index5 = 0\n  local vowel_met_index6\
    \ = 0\n  local vowel_met_index7 = 0\n  local vowel_met_index8 = 0\n  local vowel_met_index9\
    \ = 0\n  local vowel_met_index10 = 0\n  local vowel_met_index11 = 0\n  local vowel_met_index12\
    \ = 0\n  local vowel_met_index13 = 0\n  local vowel_met_index14 = 0\n  local vowel_met_index15\
    \ = 0\n  local vowel_met_index16 = 0\n  local vowel_met_index17 = 0\n  local vowel_met_index18\
    \ = 0\n  local vowel_met_index19 = 0\n  local vowel_met_index20 = 0\n  local vowel_met_index21\
    \ = 0\n  local vowel_met_index22 = 0\n  local vowel_met_index23 = 0\n  local vowel_met_index24\
    \ = 0\n  local vowel_met_index25 = 0\n  local vowel_met_index26 = 0\n  local vowel_met_index27\
    \ = 0\n  local vowel_met_index28 = 0\n  local vowel_met_index29 = 0\n  local vowel_met_index30\
    \ = 0\n  local vowel_met_index31 = 0\n  local vowel_met_index32 = 0\n  local vowel_met_index33\
    \ = 0\n  local vowel_met_index34 = 0\n  local vowel_met_index35 = 0\n  local vowel_met_index36\
    \ = 0\n  local vowel_met_index37 = 0\n  local vowel_met_index38 = 0\n  local vowel_met_index39\
    \ = 0\n  local vowel_met_index40 = 0\n  local vowel_met_index41 = 0\n  local vowel_met_index42\
    \ = 0\n  local vowel_met_index43 = 0\n  local vowel_met_index44 = 0\n  local vowel_met_index45\
    \ = 0\n  local vowel_met_index46 = 0\n  local vowel_met_index47 = 0\n  local vowel_met_index48\
    \ = 0\n  local vowel_me\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp269hqq1r.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = true,\n    [\"e\"] = true,\n    [\"i\"] = true,\n\
    \    [\"o\"] = true,\n    [\"u\"] = true,\n  }\n  local vowels_count = 0\n  for\
    \ i = 1, #word do\n    if vowels[word[i]] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  if vowels_count > 1 then\n    return \"\"\n  end\n  local\
    \ vowel_found = false\n  local vowel_found2 = false\n  local vowel_found3 = false\n\
    \  local vowel_found4 = false\n  local vowel_found5 = false\n  local vowel_found6\
    \ = false\n  local vowel_found7 = false\n  local vowel_found8 = false\n  local\
    \ vowel_found9 = false\n  local vowel_found10 = false\n  local vowel_found11 =\
    \ false\n  local vowel_found12 = false\n  local vowel_found13 = false\n  local\
    \ vowel_found14 = false\n  local vowel_found15 = false\n  local vowel_found16\
    \ = false\n  local vowel_found17 = false\n  local vowel_found18 = false\n  local\
    \ vowel_found19 = false\n  local vowel_found20 = false\n  local vowel_found21\
    \ = false\n  local vowel_found22 = false\n  local vowel_found23 = false\n  local\
    \ vowel_found24 = false\n  local vowel_found25 = false\n  local vowel_found26\
    \ = false\n  local vowel_found27 = false\n  local vowel_found28 = false\n  local\
    \ vowel_found29 = false\n  local vowel_found30 = false\n  local vowel_found31\
    \ = false\n  local vowel_found32 = false\n  local vowel_found33 = false\n  local\
    \ vowel_found34 = false\n  local vowel_found35 = false\n  local vowel_found36\
    \ = false\n  local vowel_found37 = false\n  local vowel_found38 = false\n  local\
    \ vowel_found39 = false\n  local vowel_found40 = false\n  local vowel_found41\
    \ = false\n  local vowel_found42 = false\n  local vowel_found43 = false\n  local\
    \ vowel_found44 = false\n  local vowel_found45 = false\n  local vowel_found46\
    \ = false\n  local vowel_found47 = false\n  local vowel_found48 = false\n  local\
    \ vowel_found49 = false\n  local vowel_found50 = false\n  local vowel_found51\
    \ = false\n  local vowel_found52 = false\n  local vowel_found53 = false\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmcblzx0y.lua:101: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjen7ojde.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowel_found = false\n    local vowel_start = false\n    local\
    \ vowel_end = false\n    for i = #word, 1 do\n        if vowel_found == false\
    \ then\n            if word[i] == \"a\" then\n                vowel_start = true\n\
    \            elseif word[i] == \"e\" then\n                vowel_end = true\n\
    \            elseif word[i] == \"i\" then\n                vowel_start = true\n\
    \            elseif word[i] == \"o\" then\n                vowel_start = true\n\
    \            elseif word[i] == \"u\" then\n                vowel_start = true\n\
    \            elseif word[i] == \"y\" then\n                vowel_start = true\n\
    \            end\n        end\n        if vowel_start == true then\n         \
    \   vowels_count = vowels_count + 1\n            if vowels_count == 1 then\n \
    \               vowel_found = true\n            end\n        end\n        if vowel_end\
    \ == true then\n            vowels_count = vowels_count - 1\n            if vowels_count\
    \ == 0 then\n                vowel_found = true\n            end\n        end\n\
    \    end\n    if vowel_found == true then\n        return word[#word]\n    else\n\
    \        return \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstb7toof.lua:56:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpstb7toof.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowel_count\
    \ = {}\n\tfor i = 1, #word do\n\t\tlocal vowel = word:sub(i,i)\n\t\tif vowel:sub(1,1)\
    \ ~= nil then\n\t\t\tvowel_count[vowel] = vowel_count[vowel] + 1 or 1\n\t\tend\n\
    \tend\n\tlocal vowel_count_sorted = {}\n\tfor i = 1, #vowel_count do\n\t\ttable.insert(vowel_count_sorted,vowel_count[i])\n\
    \tend\n\ttable.sort(vowel_count_sorted)\n\tfor i = 1, #vowel_count_sorted do\n\
    \t\tif vowel_count_sorted[i] > 1 then\n\t\t\treturn vowels[#vowels]\n\t\tend\n\
    \tend\n\treturn \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps47c7m70.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmps47c7m70.lua:17: in local 'candidate'\n\t/tmp/tmps47c7m70.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp016twnaa.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowel_count = {}\n    for i = 1,\
    \ #vowels do\n        vowel_count[vowels[i]] = nil\n    end\n    local vowel_count_index\
    \ = 1\n    for i = 1, #word do\n        if word[i] == \"a\" then\n           \
    \ vowel_count[\"a\"] = vowel_count_index\n            vowel_count_index = vowel_count_index\
    \ + 1\n        elseif word[i] == \"e\" then\n            vowel_count[\"e\"] =\
    \ vowel_count_index\n            vowel_count_index = vowel_count_index + 1\n \
    \       elseif word[i] == \"i\" then\n            vowel_count[\"i\"] = vowel_count_index\n\
    \            vowel_count_index = vowel_count_index + 1\n        elseif word[i]\
    \ == \"o\" then\n            vowel_count[\"o\"] = vowel_count_index\n        \
    \    vowel_count_index = vowel_count_index + 1\n        elseif word[i] == \"u\"\
    \ then\n            vowel_count[\"u\"] = vowel_count_index\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_max = #vowel_count\n\
    \    local vowel_count_min = #vowel_count\n    local vowel_count_index = 1\n \
    \   for i = 1, #word do\n        if word[i] == \"a\" then\n            if vowel_count[\"\
    a\"] ~= nil then\n                local vowel_count_tmp = vowel_count[\"a\"]\n\
    \                if vowel_count_tmp > vowel_count_max then\n                 \
    \   vowel_count_max = vowel_count_tmp\n                end\n                if\
    \ vowel_count_tmp < vowel_count_min then\n                    vowel_count_min\
    \ = vowel_count_tmp\n                end\n            end\n            vowel_count_index\
    \ = vowel_count_index + 1\n        elseif word[i] == \"e\" then\n            if\
    \ vowel_count[\"e\"] ~= nil then\n                local vowel_count_tmp = vowel_count[\"\
    e\"]\n                if vowel_count_tmp > vowel_count_max then\n            \
    \        vowel_count_max = vowel_count_tmp\n                end\n            \
    \    if vowel_count_tmp < vowel_count_min then\n                    vowel_count_min\
    \ = vowel_count_tmp\n                end\n            end\n            vowel_count_index\
    \ = vowel_count_index + 1\n        elseif word[i] == \"i\" then\n            if\
    \ vowel_count[\"i\"] ~= nil then\n                local vowel_count_tmp = vowel_count[\"\
    i\"]\n                if vowel_count_tmp > vowel_count_max then\n            \
    \        vowel_count_max = vowel_count_tmp\n                end\n            \
    \    if vowel_count_tmp < vowel_count_min then\n                    vowel_count_min\
    \ = vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9jt3fymm.lua:89: ''end'' expected (to close ''if'' at line
    68) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max = 0\n\tlocal vowels_index_count_max_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_max = 0\n\
    \tlocal vowels_index_count_max_min_index_count_min_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index = 0\n\tlocal\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index_count = 0\n\
    \tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n\tlocal vowels_index_count_max_min_index_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw8xgucfn.lua:62: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal\
    \ vowel_found3 = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\
    \tlocal vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8\
    \ = false\n\tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal\
    \ vowel_found11 = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13\
    \ = false\n\tlocal vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal\
    \ vowel_found16 = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18\
    \ = false\n\tlocal vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal\
    \ vowel_found21 = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23\
    \ = false\n\tlocal vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal\
    \ vowel_found26 = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28\
    \ = false\n\tlocal vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal\
    \ vowel_found31 = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33\
    \ = false\n\tlocal vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal\
    \ vowel_found36 = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38\
    \ = false\n\tlocal vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal\
    \ vowel_found41 = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43\
    \ = false\n\tlocal vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal\
    \ vowel_found46 = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48\
    \ = false\n\tlocal vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal\
    \ vowel_found51 = false\n\tlocal vowel_found\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwbp7e3n4.lua:98: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tfor i = 1, #word do\n\t\tlocal c = string.sub(word, i,\
    \ i)\n\t\tif c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\"\
    \ then\n\t\t\ttable.insert(vowels, c)\n\t\tend\n\tend\n\tlocal vowel = nil\n\t\
    local vowel_dist = nil\n\tfor i = #vowels, 1, -1 do\n\t\tlocal c = vowels[i]\n\
    \t\tlocal dist = #vowels - i\n\t\tif vowel_dist == nil then\n\t\t\tvowel_dist\
    \ = dist\n\t\telseif dist < vowel_dist then\n\t\t\tvowel_dist = dist\n\t\t\tvowel\
    \ = c\n\t\tend\n\tend\n\treturn vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fobnvtp.lua:37:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp5fobnvtp.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i = 1, #word do\n        local letter = word[i]\n\
    \        if letter ~= nil and letter ~= \"\" then\n            table.insert(vowels,\
    \ letter)\n        end\n    end\n    local vowel = nil\n    local vowel_distance\
    \ = nil\n    for i = #vowels, 1, -1 do\n        local letter = vowels[i]\n   \
    \     local distance = #vowels - i\n        if letter ~= nil and letter ~= \"\"\
    \ then\n            local vowel_distance = distance\n            if vowel_distance\
    \ > vowel_distance then\n                vowel_distance = vowel_distance\n   \
    \             vowel = letter\n            end\n        end\n    end\n    return\
    \ vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78sdotkk.lua:38:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp78sdotkk.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpac4_94zf.lua:48: '')'' expected (to close ''('' at line 47)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i = 1, #word do\n        local vowel = string.sub(word,\
    \ i, i)\n        if vowel == \"a\" or vowel == \"e\" or vowel == \"i\" or vowel\
    \ == \"o\" or vowel == \"u\" then\n            table.insert(vowels, vowel)\n \
    \       end\n    end\n    local vowel = table.sort(vowels)[1]\n    return vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpakzgkf2l.lua:19:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpakzgkf2l.lua:19: in\
    \ local 'candidate'\n\t/tmp/tmpakzgkf2l.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmtc8ldx2.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_found = 0\n  local vowel_found = \"\"\n  local vowel_found_index\
    \ = 0\n  local vowel_found_index2 = 0\n  local vowel_found_index3 = 0\n  local\
    \ vowel_found_index4 = 0\n  local vowel_found_index5 = 0\n  local vowel_found_index6\
    \ = 0\n  local vowel_found_index7 = 0\n  local vowel_found_index8 = 0\n  local\
    \ vowel_found_index9 = 0\n  local vowel_found_index10 = 0\n  local vowel_found_index11\
    \ = 0\n  local vowel_found_index12 = 0\n  local vowel_found_index13 = 0\n  local\
    \ vowel_found_index14 = 0\n  local vowel_found_index15 = 0\n  local vowel_found_index16\
    \ = 0\n  local vowel_found_index17 = 0\n  local vowel_found_index18 = 0\n  local\
    \ vowel_found_index19 = 0\n  local vowel_found_index20 = 0\n  local vowel_found_index21\
    \ = 0\n  local vowel_found_index22 = 0\n  local vowel_found_index23 = 0\n  local\
    \ vowel_found_index24 = 0\n  local vowel_found_index25 = 0\n  local vowel_found_index26\
    \ = 0\n  local vowel_found_index27 = 0\n  local vowel_found_index28 = 0\n  local\
    \ vowel_found_index29 = 0\n  local vowel_found_index30 = 0\n  local vowel_found_index31\
    \ = 0\n  local vowel_found_index32 = 0\n  local vowel_found_index33 = 0\n  local\
    \ vowel_found_index34 = 0\n  local vowel_found_index35 = 0\n  local vowel_found_index36\
    \ = 0\n  local vowel_found_index37 = 0\n  local vowel_found_index38 = 0\n  local\
    \ vowel_found_index39 = 0\n  local vowel_found_index40 = 0\n  local vowel_found_index41\
    \ = 0\n  local vowel_found_index42 = 0\n  local vowel_found_index43 = 0\n  local\
    \ vowel_found_index44 = 0\n  local vowel_found_index45 = 0\n  local vowel_found_index46\
    \ = 0\n  local vowel_found_index47 = 0\n  local vowel_found_index48 = 0\n  local\
    \ vowel_found_index49 = 0\n  local vowel_found_index50 = 0\n  local vowel_found\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpke3uwftu.lua:92: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowel_index\n    local vowel_found = false\n    local vowel_found_index\n\
    \    local vowel_found_index2\n    local vowel_found_index3\n    local vowel_found_index4\n\
    \    local vowel_found_index5\n    local vowel_found_index6\n    local vowel_found_index7\n\
    \    local vowel_found_index8\n    local vowel_found_index9\n    local vowel_found_index10\n\
    \    local vowel_found_index11\n    local vowel_found_index12\n    local vowel_found_index13\n\
    \    local vowel_found_index14\n    local vowel_found_index15\n    local vowel_found_index16\n\
    \    local vowel_found_index17\n    local vowel_found_index18\n    local vowel_found_index19\n\
    \    local vowel_found_index20\n    local vowel_found_index21\n    local vowel_found_index22\n\
    \    local vowel_found_index23\n    local vowel_found_index24\n    local vowel_found_index25\n\
    \    local vowel_found_index26\n    local vowel_found_index27\n    local vowel_found_index28\n\
    \    local vowel_found_index29\n    local vowel_found_index30\n    local vowel_found_index31\n\
    \    local vowel_found_index32\n    local vowel_found_index33\n    local vowel_found_index34\n\
    \    local vowel_found_index35\n    local vowel_found_index36\n    local vowel_found_index37\n\
    \    local vowel_found_index38\n    local vowel_found_index39\n    local vowel_found_index40\n\
    \    local vowel_found_index41\n    local vowel_found_index42\n    local vowel_found_index43\n\
    \    local vowel_found_index44\n    local vowel_found_index45\n    local vowel_found_index46\n\
    \    local vowel_found_index47\n    local vowel_found_index48\n    local vowel_found_index49\n\
    \    local vowel_found_index50\n    local vowel_found_index51\n    local vowel_found_index52\n\
    \    local vowel_found_index53\n    local vowel_found_index54\n    local vowel_found_index55\n\
    \    local vowel_found_index56\n    local vowel_found_index57\n    local vowel_found_index58\n\
    \    local vowel_found_index59\n    local vowel_found_index60\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdlfebt_f.lua:96: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n   local vowels_count\
    \ = #vowels\n   local vowels_index = 0\n   local vowels_index_count = 0\n   local\
    \ vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min_max\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index_max = 0\n   local vowels_index_count_max_index_min\
    \ = 0\n   local vowels_index_count_min_index_max_index = 0\n   local vowels_index_count_min_index_max_index_min\
    \ = 0\n   local vowels_index_count_min_index_max_index_min_max = 0\n   local vowels_index_count_min_index_max_index_min_max\
    \ = 0\n   local vowels_index_count_min_index_max_index_min_max_index = 0\n   local\
    \ vowels_index_count_min_index_max_index_min_max_index = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min\
    \ = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min = 0\n\
    \   local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n \
    \  local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n  \
    \ local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n   local\
    \ vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max\
    \ = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max =\
    \ 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n\
    \   local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n \
    \  local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n  \
    \ local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n   local\
    \ vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max\
    \ = 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max =\
    \ 0\n   local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n\
    \   local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n \
    \  local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n  \
    \ local vowels_index_count_min_index_max_index_min_max_index_min_max = 0\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp932or0js.lua:68: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphlcnchop.lua:79: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"a\",\n    [\"E\"] = \"e\",\n    [\"I\"] = \"i\",\n    [\"O\"]\
    \ = \"o\",\n    [\"U\"] = \"u\",\n    [\"Y\"] = \"y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpba4y0al7.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqc_v1ok5.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_temp\
    \ = 0\n\tlocal vowels_index_count_temp2 = 0\n\tlocal vowels_index_count_temp3\
    \ = 0\n\tlocal vowels_index_count_temp4 = 0\n\tlocal vowels_index_count_temp5\
    \ = 0\n\tlocal vowels_index_count_temp6 = 0\n\tlocal vowels_index_count_temp7\
    \ = 0\n\tlocal vowels_index_count_temp8 = 0\n\tlocal vowels_index_count_temp9\
    \ = 0\n\tlocal vowels_index_count_temp10 = 0\n\tlocal vowels_index_count_temp11\
    \ = 0\n\tlocal vowels_index_count_temp12 = 0\n\tlocal vowels_index_count_temp13\
    \ = 0\n\tlocal vowels_index_count_temp14 = 0\n\tlocal vowels_index_count_temp15\
    \ = 0\n\tlocal vowels_index_count_temp16 = 0\n\tlocal vowels_index_count_temp17\
    \ = 0\n\tlocal vowels_index_count_temp18 = 0\n\tlocal vowels_index_count_temp19\
    \ = 0\n\tlocal vowels_index_count_temp20 = 0\n\tlocal vowels_index_count_temp21\
    \ = 0\n\tlocal vowels_index_count_temp22 = 0\n\tlocal vowels_index_count_temp23\
    \ = 0\n\tlocal vowels_index_count_temp24 = 0\n\tlocal vowels_index_count_temp25\
    \ = 0\n\tlocal vowels_index_count_temp26 = 0\n\tlocal vowels_index_count_temp27\
    \ = 0\n\tlocal vowels_index_count_temp28 = 0\n\tlocal vowels_index_count_temp29\
    \ = 0\n\tlocal vowels_index_count_temp30 = 0\n\tlocal vowels_index_count_temp31\
    \ = 0\n\tlocal vowels_index_count_temp32 = 0\n\tlocal vowels_index_count_temp33\
    \ = 0\n\tlocal vowels_index_count_temp34 = 0\n\tlocal vowels_index_count_temp35\
    \ = 0\n\tlocal vowels_index_count_temp36 = 0\n\tlocal vowels_index_count_temp37\
    \ = 0\n\tlocal vowels_index_count_temp38 = 0\n\tlocal vowels_index_count_temp39\
    \ = 0\n\tlocal vowels_index_count_temp40 = 0\n\tlocal vowels_index_count_temp41\
    \ = 0\n\tlocal vowels_index_count_temp42 = 0\n\tlocal vowels_index_count_temp43\
    \ = 0\n\tlocal vowels_index_count_temp44 = 0\n\tlocal vowels_index_count_temp45\
    \ = 0\n\tlocal vowels_index_count_temp\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcplgoi2u.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowel_index = 1\n  local vowel_found = false\n  local vowel_start\
    \ = nil\n  local vowel_end = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp529ad335.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowel_index = 1\n  local vowel_found = false\n  local vowel_start\
    \ = nil\n  local vowel_end = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp529ad335.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n\
    \      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0z4prj0.lua:161: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = -1\n\tlocal vowel_found_index2 = -1\n\tlocal vowel_found_index3 = -1\n\tlocal\
    \ vowel_found_index4 = -1\n\tlocal vowel_found_index5 = -1\n\tlocal vowel_found_index6\
    \ = -1\n\tlocal vowel_found_index7 = -1\n\tlocal vowel_found_index8 = -1\n\tlocal\
    \ vowel_found_index9 = -1\n\tlocal vowel_found_index10 = -1\n\tlocal vowel_found_index11\
    \ = -1\n\tlocal vowel_found_index12 = -1\n\tlocal vowel_found_index13 = -1\n\t\
    local vowel_found_index14 = -1\n\tlocal vowel_found_index15 = -1\n\tlocal vowel_found_index16\
    \ = -1\n\tlocal vowel_found_index17 = -1\n\tlocal vowel_found_index18 = -1\n\t\
    local vowel_found_index19 = -1\n\tlocal vowel_found_index20 = -1\n\tlocal vowel_found_index21\
    \ = -1\n\tlocal vowel_found_index22 = -1\n\tlocal vowel_found_index23 = -1\n\t\
    local vowel_found_index24 = -1\n\tlocal vowel_found_index25 = -1\n\tlocal vowel_found_index26\
    \ = -1\n\tlocal vowel_found_index27 = -1\n\tlocal vowel_found_index28 = -1\n\t\
    local vowel_found_index29 = -1\n\tlocal vowel_found_index30 = -1\n\tlocal vowel_found_index31\
    \ = -1\n\tlocal vowel_found_index32 = -1\n\tlocal vowel_found_index33 = -1\n\t\
    local vowel_found_index34 = -1\n\tlocal vowel_found_index35 = -1\n\tlocal vowel_found_index36\
    \ = -1\n\tlocal vowel_found_index37 = -1\n\tlocal vowel_found_index38 = -1\n\t\
    local vowel_found_index39 = -1\n\tlocal vowel_found_index40 = -1\n\tlocal vowel_found_index41\
    \ = -1\n\tlocal vowel_found_index42 = -1\n\tlocal vowel_found_index43 = -1\n\t\
    local vowel_found_index44 = -1\n\tlocal vowel_found_index45 = -1\n\tlocal vowel_found_index46\
    \ = -1\n\tlocal vowel_found_index47 = -1\n\tlocal vowel_found_index48 = -1\n\t\
    local vowel_found_index49 = -1\n\tlocal vowel_found_index50 = -1\n\tlocal vowel_found_index51\
    \ = -1\n\tlocal vowel_found_index52 = -1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuvknvu2q.lua:87: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp016twnaa.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowels_count =\
    \ #vowels\n    local vowel_index = #word\n    local vowel_found = false\n    local\
    \ vowel_found_index = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3\
    \ = -1\n    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n\
    \    local vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local\
    \ vowel_found_index8 = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10\
    \ = -1\n    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n\
    \    local vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local\
    \ vowel_found_index15 = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17\
    \ = -1\n    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n\
    \    local vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local\
    \ vowel_found_index22 = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24\
    \ = -1\n    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n\
    \    local vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local\
    \ vowel_found_index29 = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31\
    \ = -1\n    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n\
    \    local vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local\
    \ vowel_found_index36 = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38\
    \ = -1\n    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n\
    \    local vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local\
    \ vowel_found_index43 = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45\
    \ = -1\n    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n\
    \    local vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local\
    \ vowel_found_index50 = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52\
    \ = -1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0nhu_ezo.lua:87: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_met_count = 0\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_index2\
    \ = 0\n\tlocal vowel_met_index3 = 0\n\tlocal vowel_met_index4 = 0\n\tlocal vowel_met_index5\
    \ = 0\n\tlocal vowel_met_index6 = 0\n\tlocal vowel_met_index7 = 0\n\tlocal vowel_met_index8\
    \ = 0\n\tlocal vowel_met_index9 = 0\n\tlocal vowel_met_index10 = 0\n\tlocal vowel_met_index11\
    \ = 0\n\tlocal vowel_met_index12 = 0\n\tlocal vowel_met_index13 = 0\n\tlocal vowel_met_index14\
    \ = 0\n\tlocal vowel_met_index15 = 0\n\tlocal vowel_met_index16 = 0\n\tlocal vowel_met_index17\
    \ = 0\n\tlocal vowel_met_index18 = 0\n\tlocal vowel_met_index19 = 0\n\tlocal vowel_met_index20\
    \ = 0\n\tlocal vowel_met_index21 = 0\n\tlocal vowel_met_index22 = 0\n\tlocal vowel_met_index23\
    \ = 0\n\tlocal vowel_met_index24 = 0\n\tlocal vowel_met_index25 = 0\n\tlocal vowel_met_index26\
    \ = 0\n\tlocal vowel_met_index27 = 0\n\tlocal vowel_met_index28 = 0\n\tlocal vowel_met_index29\
    \ = 0\n\tlocal vowel_met_index30 = 0\n\tlocal vowel_met_index31 = 0\n\tlocal vowel_met_index32\
    \ = 0\n\tlocal vowel_met_index33 = 0\n\tlocal vowel_met_index34 = 0\n\tlocal vowel_met_index35\
    \ = 0\n\tlocal vowel_met_index36 = 0\n\tlocal vowel_met_index37 = 0\n\tlocal vowel_met_index38\
    \ = 0\n\tlocal vowel_met_index39 = 0\n\tlocal vowel_met_index40 = 0\n\tlocal vowel_met_index41\
    \ = 0\n\tlocal vowel_met_index42 = 0\n\tlocal vowel_met_index43 = 0\n\tlocal vowel_met_index44\
    \ = 0\n\tlocal vowel_met_index45 = 0\n\tlocal vowel_met_index46 = 0\n\tlocal vowel_met_index47\
    \ = 0\n\tlocal vowel_met_index48 = 0\n\t\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgv1m0f9a.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpspse9h46.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_max_min = #vowels\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count = 0\n    local vowels_index_count_max_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index = 0\n\
    \    local vowels_index_count_max_min_index_count_min_index_count = 0\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min = #vowels\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index_count = 0\n\
    \    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqo5qkc6.lua:59: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = 1\n  local vowels_index2 = 1\n  local vowels_index3 = 1\n  local vowels_index4\
    \ = 1\n  local vowels_index5 = 1\n  local vowels_index6 = 1\n  local vowels_index7\
    \ = 1\n  local vowels_index8 = 1\n  local vowels_index9 = 1\n  local vowels_index10\
    \ = 1\n  local vowels_index11 = 1\n  local vowels_index12 = 1\n  local vowels_index13\
    \ = 1\n  local vowels_index14 = 1\n  local vowels_index15 = 1\n  local vowels_index16\
    \ = 1\n  local vowels_index17 = 1\n  local vowels_index18 = 1\n  local vowels_index19\
    \ = 1\n  local vowels_index20 = 1\n  local vowels_index21 = 1\n  local vowels_index22\
    \ = 1\n  local vowels_index23 = 1\n  local vowels_index24 = 1\n  local vowels_index25\
    \ = 1\n  local vowels_index26 = 1\n  local vowels_index27 = 1\n  local vowels_index28\
    \ = 1\n  local vowels_index29 = 1\n  local vowels_index30 = 1\n  local vowels_index31\
    \ = 1\n  local vowels_index32 = 1\n  local vowels_index33 = 1\n  local vowels_index34\
    \ = 1\n  local vowels_index35 = 1\n  local vowels_index36 = 1\n  local vowels_index37\
    \ = 1\n  local vowels_index38 = 1\n  local vowels_index39 = 1\n  local vowels_index40\
    \ = 1\n  local vowels_index41 = 1\n  local vowels_index42 = 1\n  local vowels_index43\
    \ = 1\n  local vowels_index44 = 1\n  local vowels_index45 = 1\n  local vowels_index46\
    \ = 1\n  local vowels_index47 = 1\n  local vowels_index48 = 1\n  local vowels_index49\
    \ = 1\n  local vowels_index50 = 1\n  local vowels_index51 = 1\n  local vowels_index52\
    \ = 1\n  local vowels_index53 = 1\n  local vowels_index54 = 1\n  local vowels_index55\
    \ = 1\n  local vowels_index56 = 1\n  local vowels_index57 = 1\n  local vowels_index58\
    \ = 1\n  local vowels_index59 = 1\n  local vowels_index60 = 1\n  local vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwe8e7kzz.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2loii9f.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"iu\"] = \"i\",\n\t\t[\"ou\"] = \"o\",\n\t\t[\"au\"] = \"a\",\n\t\t[\"ei\"\
    ] = \"e\",\n\t\t[\"ai\"] = \"a\",\n\t\t[\"oui\"] = \"o\",\n\t\t[\"aui\"] = \"\
    a\",\n\t\t[\"eau\"] = \"e\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"oi\"] = \"o\",\n\t\
    \t[\"oou\"] = \"o\",\n\t\t[\"oau\"] = \"o\",\n\t\t[\"oei\"] = \"o\",\n\t\t[\"\
    oai\"] = \"o\",\n\t\t[\"ooui\"] = \"o\",\n\t\t[\"oaui\"] = \"o\",\n\t\t[\"oeau\"\
    ] = \"o\",\n\t\t[\"oaiu\"] = \"o\",\n\t\t[\"oiu\"] = \"o\",\n\t\t[\"oe\"] = \"\
    o\",\n\t\t[\"oa\"] = \"o\",\n\t\t[\"ooua\"] = \"o\",\n\t\t[\"oaua\"] = \"o\",\n\
    \t\t[\"oei\"] = \"o\",\n\t\t[\"oai\"] = \"o\",\n\t\t[\"ooui\"] = \"o\",\n\t\t\
    [\"oaui\"] = \"o\",\n\t\t[\"oeau\"] = \"o\",\n\t\t[\"oaiu\"] = \"o\",\n\t\t[\"\
    oiu\"] = \"o\",\n\t\t[\"oe\"] = \"o\",\n\t\t[\"oa\"] = \"o\",\n\t\t[\"ooua\"]\
    \ = \"o\",\n\t\t[\"oaua\"] = \"o\",\n\t\t[\"oei\"] = \"o\",\n\t\t[\"oai\"] = \"\
    o\",\n\t\t[\"ooui\"] = \"o\",\n\t\t[\"oaui\"] = \"o\",\n\t\t[\"oeau\"] = \"o\"\
    ,\n\t\t[\"oaiu\"] = \"o\",\n\t\t[\"oiu\"] = \"o\",\n\t\t[\"oe\"] = \"o\",\n\t\t\
    [\"oa\"] = \"o\",\n\t\t[\"ooua\"] = \"o\",\n\t\t[\"oaua\"] = \"o\",\n\t\t[\"oei\"\
    ] = \"o\",\n\t\t[\"oai\"] = \"o\",\n\t\t[\"ooui\"] = \"o\",\n\t\t[\"oaui\"] =\
    \ \"o\",\n\t\t[\"oeau\"] = \"o\",\n\t\t[\"oaiu\"] = \"o\",\n\t\t[\"oiu\"] = \"\
    o\",\n\t\t[\"oe\"] = \"o\",\n\t\t[\"oa\"] = \"o\",\n\t\t[\"ooua\"] = \"o\",\n\t\
    \t[\"oaua\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn8fbs2cz.lua:74: unfinished string near ''"oaua''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_count\
    \ = 0\n    local vowels_index_count_max_count = 0\n    local vowels_index_count_min_count_min\
    \ = #vowels\n    local vowels_index_count_min_count_max = #vowels\n    local vowels_index_count_max_count_min\
    \ = #vowels\n    local vowels_index_count_max_count_max = #vowels\n    local vowels_index_count_min_count_min_index\
    \ = 0\n    local vowels_index_count_min_count_max_index = 0\n    local vowels_index_count_min_count_min_count\
    \ = 0\n    local vowels_index_count_min_count_max_count = 0\n    local vowels_index_count_max_count_min_index\
    \ = 0\n    local vowels_index_count_max_count_max_index = 0\n    local vowels_index_count_max_count_min_count\
    \ = 0\n    local vowels_index_count_max_count_max_count = 0\n    local vowels_index_count_min_count_min_index\
    \ = 0\n    local vowels_index_count_min_count_max_index = 0\n    local vowels_index_count_min_count_min_count\
    \ = 0\n    local vowels_index_count_min_count_max_count = 0\n    local vowels_index_count_max_count_min_index\
    \ = 0\n    local vowels_index_count_max_count_max_index = 0\n    local vowels_index_count_max_count_min_count\
    \ = 0\n    local vowels_index_count_max_count_max_count = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_count\
    \ = 0\n    local vowels_index_count_max_count = 0\n    local vowels_index_count_min_index_min\
    \ = 0\n    local vowels_index_count_max_index_max = 0\n    local vowels_index_count_min_count_min\
    \ = 0\n    local vowels_index_count_min_count_max = 0\n    local vowels_index_count_max_count_min\
    \ = 0\n    local vowels_index_count_max_count_max = 0\n    local vowels_index_count_min_index_min_index\
    \ = 0\n    local vowels_index_count_min_index_max_index = 0\n    local vowels_index_count_min_count_min_index\
    \ = 0\n    local vowels_index_count_min_count_max_index = 0\n    local vowels_index_count_max_count_min_index\
    \ = 0\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4cirqctn.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpvrt_h_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmtc8ldx2.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index_max = 0\n\tlocal vowels_index_count_max_min_index_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min = 0\n\tlocal vowels_index_count_max_min_index_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_max = 0\n\tlocal vowels_index_count_max_min_index_min_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min = 0\n\tlocal vowels_index_count_max_min_index_min_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_max = 0\n\tlocal vowels_index_count_max_min_index_min_min_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min = 0\n\tlocal vowels_index_count_max_min_index_min_min_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_max = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_max = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_min = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_min_max = 0\n\tlocal\
    \ vowels_index_count_max_min_index_min_min_min_min_min_max = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min_min = 0\n\tlocal\
    \ vowels_index_count_min_index_min_min_min_min_min_max = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min_min_max\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_min = 0\n\tlocal vowels_index_count_max_min_index_min_min_min_min_min\
    \ = 0\n\tlocal vowels_index_count_min_index_min_min_min_min_min_max = 0\n\tlocal\
    \ vowels_index_count_max_min_index_min_min_min_min_min_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvhdr48_a.lua:70: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = 0\n\tlocal vowels_index\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max = #vowels\n\
    \tlocal vowels_index_count_min = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min = #vowels\n\
    \tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8j8fyub.lua:79: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpep3m8sb_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = #word\n  local vowels_index2 = #word\n  local vowels_index3 = #word\n  local\
    \ vowels_index4 = #word\n  local vowels_index5 = #word\n  local vowels_index6\
    \ = #word\n  local vowels_index7 = #word\n  local vowels_index8 = #word\n  local\
    \ vowels_index9 = #word\n  local vowels_index10 = #word\n  local vowels_index11\
    \ = #word\n  local vowels_index12 = #word\n  local vowels_index13 = #word\n  local\
    \ vowels_index14 = #word\n  local vowels_index15 = #word\n  local vowels_index16\
    \ = #word\n  local vowels_index17 = #word\n  local vowels_index18 = #word\n  local\
    \ vowels_index19 = #word\n  local vowels_index20 = #word\n  local vowels_index21\
    \ = #word\n  local vowels_index22 = #word\n  local vowels_index23 = #word\n  local\
    \ vowels_index24 = #word\n  local vowels_index25 = #word\n  local vowels_index26\
    \ = #word\n  local vowels_index27 = #word\n  local vowels_index28 = #word\n  local\
    \ vowels_index29 = #word\n  local vowels_index30 = #word\n  local vowels_index31\
    \ = #word\n  local vowels_index32 = #word\n  local vowels_index33 = #word\n  local\
    \ vowels_index34 = #word\n  local vowels_index35 = #word\n  local vowels_index36\
    \ = #word\n  local vowels_index37 = #word\n  local vowels_index38 = #word\n  local\
    \ vowels_index39 = #word\n  local vowels_index40 = #word\n  local vowels_index41\
    \ = #word\n  local vowels_index42 = #word\n  local vowels_index43 = #word\n  local\
    \ vowels_index44 = #word\n  local vowels_index45 = #word\n  local vowels_index46\
    \ = #word\n  local vowels_index47 = #word\n  local vowels_index48 = #word\n  local\
    \ vowels_index49 = #word\n  local vowels_index50 = #word\n  local vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2_89u5wl.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  local vowels_index_count = 0\n  for\
    \ i = 1, #word do\n    local letter = word[i]\n    if letter == \"a\" or letter\
    \ == \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\" then\n   \
    \   vowels_index[letter] = true\n      vowels_index_count = vowels_index_count\
    \ + 1\n    end\n  end\n  local vowels_index_length = #vowels_index\n  if vowels_index_count\
    \ > vowels_count then\n    return \"\"\n  end\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  local vowels_index_length = #vowels_index\n  local vowels_index_length = #vowels_index\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp871i7sd1.lua:82: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowel_index\
    \ = 1\n\tlocal vowel_found = false\n\tlocal vowel_found_index = -1\n\tlocal vowel_found_index2\
    \ = -1\n\tlocal vowel_found2 = false\n\tlocal vowel_found2_index = -1\n\tlocal\
    \ vowel_found3 = false\n\tlocal vowel_found3_index = -1\n\tlocal vowel_found4\
    \ = false\n\tlocal vowel_found4_index = -1\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found5_index = -1\n\tlocal vowel_found6 = false\n\tlocal vowel_found6_index\
    \ = -1\n\tlocal vowel_found7 = false\n\tlocal vowel_found7_index = -1\n\tlocal\
    \ vowel_found8 = false\n\tlocal vowel_found8_index = -1\n\tlocal vowel_found9\
    \ = false\n\tlocal vowel_found9_index = -1\n\tlocal vowel_found10 = false\n\t\
    local vowel_found10_index = -1\n\tlocal vowel_found11 = false\n\tlocal vowel_found11_index\
    \ = -1\n\tlocal vowel_found12 = false\n\tlocal vowel_found12_index = -1\n\tlocal\
    \ vowel_found13 = false\n\tlocal vowel_found13_index = -1\n\tlocal vowel_found14\
    \ = false\n\tlocal vowel_found14_index = -1\n\tlocal vowel_found15 = false\n\t\
    local vowel_found15_index = -1\n\tlocal vowel_found16 = false\n\tlocal vowel_found16_index\
    \ = -1\n\tlocal vowel_found17 = false\n\tlocal vowel_found17_index = -1\n\tlocal\
    \ vowel_found18 = false\n\tlocal vowel_found18_index = -1\n\tlocal vowel_found19\
    \ = false\n\tlocal vowel_found19_index = -1\n\tlocal vowel_found20 = false\n\t\
    local vowel_found20_index = -1\n\tlocal vowel_found21 = false\n\tlocal vowel_found21_index\
    \ = -1\n\tlocal vowel_found22 = false\n\tlocal vowel_found22_index = -1\n\tlocal\
    \ vowel_found23 = false\n\tlocal vowel_found23_index = -1\n\tlocal vowel_found24\
    \ = false\n\tlocal vowel_found24_index = -1\n\tlocal vowel_found25 = false\n\t\
    local vowel_found25_index = -1\n\tlocal vowel_found26 = false\n\tlocal vowel_found26_index\
    \ = -1\n\tlocal vowel_found27 = false\n\tlocal vowel_found27_index = -1\n\tlocal\
    \ vowel_found28 = false\n\tlocal vowel_found28_index = -1\n\tlocal \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphgcjtkal.lua:92: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 1\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 1\n\
    \    local vowels_index_count_max_min = #word\n    local vowels_index_count_min_max\
    \ = #word\n    local vowels_index_count_min_max_min = #word\n    local vowels_index_count_min_max_min_max\
    \ = #word\n    local vowels_index_count_min_max_min_max_min = #word\n    local\
    \ vowels_index_count_min_max_min_max_min_max = #word\n    local vowels_index_count_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max = #word\n\
    \    local vowels_index_count_min_max_min_max_min_max_min_max_min = #word\n  \
    \  local vowels_index_count_min_max_min_max_min_max_min_max_min_max = #word\n\
    \    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min = #word\n\
    \    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #word\n    local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl1qd5a_l.lua:59: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index2 = 0\n    local\
    \ vowels_index3 = 0\n    local vowels_index4 = 0\n    local vowels_index5 = 0\n\
    \    local vowels_index6 = 0\n    local vowels_index7 = 0\n    local vowels_index8\
    \ = 0\n    local vowels_index9 = 0\n    local vowels_index10 = 0\n    local vowels_index11\
    \ = 0\n    local vowels_index12 = 0\n    local vowels_index13 = 0\n    local vowels_index14\
    \ = 0\n    local vowels_index15 = 0\n    local vowels_index16 = 0\n    local vowels_index17\
    \ = 0\n    local vowels_index18 = 0\n    local vowels_index19 = 0\n    local vowels_index20\
    \ = 0\n    local vowels_index21 = 0\n    local vowels_index22 = 0\n    local vowels_index23\
    \ = 0\n    local vowels_index24 = 0\n    local vowels_index25 = 0\n    local vowels_index26\
    \ = 0\n    local vowels_index27 = 0\n    local vowels_index28 = 0\n    local vowels_index29\
    \ = 0\n    local vowels_index30 = 0\n    local vowels_index31 = 0\n    local vowels_index32\
    \ = 0\n    local vowels_index33 = 0\n    local vowels_index34 = 0\n    local vowels_index35\
    \ = 0\n    local vowels_index36 = 0\n    local vowels_index37 = 0\n    local vowels_index38\
    \ = 0\n    local vowels_index39 = 0\n    local vowels_index40 = 0\n    local vowels_index41\
    \ = 0\n    local vowels_index42 = 0\n    local vowels_index43 = 0\n    local vowels_index44\
    \ = 0\n    local vowels_index45 = 0\n    local vowels_index46 = 0\n    local vowels_index47\
    \ = 0\n    local vowels_index48 = 0\n    local vowels_index49 = 0\n    local vowels_index50\
    \ = 0\n    local vowels_index51 = 0\n    local vowels_index52 = 0\n    local vowels_index53\
    \ = 0\n    local vowels_index54 = 0\n    local vowels_index55 = 0\n    local vowels_index56\
    \ = 0\n    local vowels_index57 = 0\n    local vowels_index58 = 0\n    local vowels_index59\
    \ = 0\n    local vowels_index60 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo28pyx0t.lua:93: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"iu\"] = \"i\",\n        [\"ou\"] = \"o\"\
    ,\n        [\"au\"] = \"a\",\n        [\"ei\"] = \"e\",\n        [\"ai\"] = \"\
    a\",\n        [\"oui\"] = \"o\",\n        [\"auu\"] = \"a\",\n        [\"aii\"\
    ] = \"a\",\n        [\"eou\"] = \"e\",\n        [\"oou\"] = \"o\",\n        [\"\
    auu\"] = \"a\",\n        [\"eau\"] = \"e\",\n        [\"oau\"] = \"o\",\n    \
    \    [\"eauu\"] = \"e\",\n        [\"oauu\"] = \"o\",\n        [\"eiu\"] = \"\
    e\",\n        [\"aiu\"] = \"a\",\n        [\"eoui\"] = \"e\",\n        [\"ooui\"\
    ] = \"o\",\n        [\"auui\"] = \"a\",\n        [\"eiu\"] = \"e\",\n        [\"\
    aiu\"] = \"a\",\n        [\"eoui\"] = \"e\",\n        [\"ooui\"] = \"o\",\n  \
    \      [\"auui\"] = \"a\",\n        [\"eau\"] = \"e\",\n        [\"oau\"] = \"\
    o\",\n        [\"eauu\"] = \"e\",\n        [\"oauu\"] = \"o\",\n        [\"eiu\"\
    ] = \"e\",\n        [\"aiu\"] = \"a\",\n        [\"eoui\"] = \"e\",\n        [\"\
    ooui\"] = \"o\",\n        [\"auui\"] = \"a\",\n        [\"eau\"] = \"e\",\n  \
    \      [\"oau\"] = \"o\",\n        [\"eauu\"] = \"e\",\n        [\"oauu\"] = \"\
    o\",\n        [\"eiu\"] = \"e\",\n        [\"aiu\"] = \"a\",\n        [\"eoui\"\
    ] = \"e\",\n        [\"ooui\"] = \"o\",\n        [\"auui\"] = \"a\",\n       \
    \ [\"eau\"] = \"e\",\n        [\"oau\"] = \"o\",\n        [\"eauu\"] = \"e\",\n\
    \        [\"oauu\"] = \"o\",\n        [\"eiu\"] = \"e\",\n        [\"aiu\"] =\
    \ \"a\",\n        [\"eoui\"] = \"e\",\n        [\"ooui\"] = \"o\",\n        [\"\
    auui\"] = \"a\",\n        [\"eau\"] = \"e\",\n        [\"oau\"] = \"o\",\n   \
    \     [\"eauu\"] = \"e\",\n        [\"oauu\"] = \"o\",\n        [\"eiu\"] = \"\
    e\",\n        [\"aiu\"] = \"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkbg0hntb.lua:76: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8sxdvdmb.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowel_positions = {}\n    for i\
    \ = 1, #word do\n        local vowel_position = false\n        for j = 1, #vowels\
    \ do\n            if string.sub(word, i, i+#vowels) == vowels[j] then\n      \
    \          vowel_position = true\n                break\n            end\n   \
    \     end\n        if vowel_position then\n            table.insert(vowel_positions,\
    \ i)\n        end\n    end\n    if #vowel_positions == 0 then\n        return\
    \ \"\"\n    end\n    local vowel_positions_sorted = table.sort(vowel_positions)\n\
    \    local vowel_positions_sorted_size = #vowel_positions_sorted\n    local vowel_positions_sorted_last\
    \ = vowel_positions_sorted[vowel_positions_sorted_size-1]\n    local vowel_positions_sorted_first\
    \ = vowel_positions_sorted[1]\n    local vowel_positions_sorted_first_index =\
    \ vowel_positions_sorted[1]\n    local vowel_positions_sorted_last_index = vowel_positions_sorted[vowel_positions_sorted_size-1]\n\
    \    local vowel_positions_sorted_first_vowel = string.sub(word, vowel_positions_sorted_first_index,\
    \ vowel_positions_sorted_last_index)\n    local vowel_positions_sorted_last_vowel\
    \ = string.sub(word, vowel_positions_sorted_last_index, vowel_positions_sorted_first_index)\n\
    \    if vowel_positions_sorted_first_vowel == vowel_positions_sorted_last_vowel\
    \ then\n        return vowel_positions_sorted_first_vowel\n    end\n    if vowel_positions_sorted_first_vowel\
    \ < vowel_positions_sorted_last_vowel then\n        return vowel_positions_sorted_first_vowel\n\
    \    else\n        return vowel_positions_sorted_last_vowel\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpddg8p5.lua:50:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzpddg8p5.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0qww9iuc.lua:104: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_reverse = #vowels:reverse()\n\tlocal vowels_count_reverse2\
    \ = #vowels:reverse(2)\n\tlocal vowels_count_reverse3 = #vowels:reverse(3)\n\t\
    local vowels_count_reverse4 = #vowels:reverse(4)\n\tlocal vowels_count_reverse5\
    \ = #vowels:reverse(5)\n\tlocal vowels_count_reverse6 = #vowels:reverse(6)\n\t\
    local vowels_count_reverse7 = #vowels:reverse(7)\n\tlocal vowels_count_reverse8\
    \ = #vowels:reverse(8)\n\tlocal vowels_count_reverse9 = #vowels:reverse(9)\n\t\
    local vowels_count_reverse10 = #vowels:reverse(10)\n\tlocal vowels_count_reverse11\
    \ = #vowels:reverse(11)\n\tlocal vowels_count_reverse12 = #vowels:reverse(12)\n\
    \tlocal vowels_count_reverse13 = #vowels:reverse(13)\n\tlocal vowels_count_reverse14\
    \ = #vowels:reverse(14)\n\tlocal vowels_count_reverse15 = #vowels:reverse(15)\n\
    \tlocal vowels_count_reverse16 = #vowels:reverse(16)\n\tlocal vowels_count_reverse17\
    \ = #vowels:reverse(17)\n\tlocal vowels_count_reverse18 = #vowels:reverse(18)\n\
    \tlocal vowels_count_reverse19 = #vowels:reverse(19)\n\tlocal vowels_count_reverse20\
    \ = #vowels:reverse(20)\n\tlocal vowels_count_reverse21 = #vowels:reverse(21)\n\
    \tlocal vowels_count_reverse22 = #vowels:reverse(22)\n\tlocal vowels_count_reverse23\
    \ = #vowels:reverse(23)\n\tlocal vowels_count_reverse24 = #vowels:reverse(24)\n\
    \tlocal vowels_count_reverse25 = #vowels:reverse(25)\n\tlocal vowels_count_reverse26\
    \ = #vowels:reverse(26)\n\tlocal vowels_count_reverse27 = #vowels:reverse(27)\n\
    \tlocal vowels_count_reverse28 = #vowels:reverse(28)\n\tlocal vowels_count_reverse29\
    \ = #vowels:reverse(29)\n\tlocal vowels_count_reverse30 = #vowels:reverse(30)\n\
    \tlocal vowels_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_vdfc9rv.lua:77: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_2 = #vowels\n\tlocal vowels_count_3 = #vowels\n\
    \tlocal vowels_count_4 = #vowels\n\tlocal vowels_count_5 = #vowels\n\tlocal vowels_count_6\
    \ = #vowels\n\tlocal vowels_count_7 = #vowels\n\tlocal vowels_count_8 = #vowels\n\
    \tlocal vowels_count_9 = #vowels\n\tlocal vowels_count_10 = #vowels\n\tlocal vowels_count_11\
    \ = #vowels\n\tlocal vowels_count_12 = #vowels\n\tlocal vowels_count_13 = #vowels\n\
    \tlocal vowels_count_14 = #vowels\n\tlocal vowels_count_15 = #vowels\n\tlocal\
    \ vowels_count_16 = #vowels\n\tlocal vowels_count_17 = #vowels\n\tlocal vowels_count_18\
    \ = #vowels\n\tlocal vowels_count_19 = #vowels\n\tlocal vowels_count_20 = #vowels\n\
    \tlocal vowels_count_21 = #vowels\n\tlocal vowels_count_22 = #vowels\n\tlocal\
    \ vowels_count_23 = #vowels\n\tlocal vowels_count_24 = #vowels\n\tlocal vowels_count_25\
    \ = #vowels\n\tlocal vowels_count_26 = #vowels\n\tlocal vowels_count_27 = #vowels\n\
    \tlocal vowels_count_28 = #vowels\n\tlocal vowels_count_29 = #vowels\n\tlocal\
    \ vowels_count_30 = #vowels\n\tlocal vowels_count_31 = #vowels\n\tlocal vowels_count_32\
    \ = #vowels\n\tlocal vowels_count_33 = #vowels\n\tlocal vowels_count_34 = #vowels\n\
    \tlocal vowels_count_35 = #vowels\n\tlocal vowels_count_36 = #vowels\n\tlocal\
    \ vowels_count_37 = #vowels\n\tlocal vowels_count_38 = #vowels\n\tlocal vowels_count_39\
    \ = #vowels\n\tlocal vowels_count_40 = #vowels\n\t\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b3smzbx.lua:86: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = 0\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_max = #vowels\n    local vowels_index_count_min = #vowels\n\
    \    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_max_index_count = 0\n    local vowels_index_count_max_index_count_max\
    \ = #vowels\n    local vowels_index_count_max_index_count_min = 0\n    local vowels_index_count_max_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count = 0\n    local\
    \ vowels_index_count_max_index_count_min_index_count_max = #vowels\n    local\
    \ vowels_index_count_max_index_count_min_index_count_min = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_max\
    \ = #vowels\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = #vowels\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = #vowels\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = #vowels\n    local vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_index_count_min_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2j7s5bjx.lua:62: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index = #word\n\
    \tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnr1am2uz.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    local vowel_index = 1\n\
    \    local vowel_found = false\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6wt5mmq.lua:97: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowel_found = false\n  local vowel_found_index = 0\n  local\
    \ vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  local vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_index\
    \ = 0\n  local vowel_found_count = 0\n  local vowel_found_index = 0\n  local vowel_found_count\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq993nnr5.lua:99: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = #word\n    local vowels_index2 = #word\n\
    \    local vowels_index3 = #word\n    local vowels_index4 = #word\n    local vowels_index5\
    \ = #word\n    local vowels_index6 = #word\n    local vowels_index7 = #word\n\
    \    local vowels_index8 = #word\n    local vowels_index9 = #word\n    local vowels_index10\
    \ = #word\n    local vowels_index11 = #word\n    local vowels_index12 = #word\n\
    \    local vowels_index13 = #word\n    local vowels_index14 = #word\n    local\
    \ vowels_index15 = #word\n    local vowels_index16 = #word\n    local vowels_index17\
    \ = #word\n    local vowels_index18 = #word\n    local vowels_index19 = #word\n\
    \    local vowels_index20 = #word\n    local vowels_index21 = #word\n    local\
    \ vowels_index22 = #word\n    local vowels_index23 = #word\n    local vowels_index24\
    \ = #word\n    local vowels_index25 = #word\n    local vowels_index26 = #word\n\
    \    local vowels_index27 = #word\n    local vowels_index28 = #word\n    local\
    \ vowels_index29 = #word\n    local vowels_index30 = #word\n    local vowels_index31\
    \ = #word\n    local vowels_index32 = #word\n    local vowels_index33 = #word\n\
    \    local vowels_index34 = #word\n    local vowels_index35 = #word\n    local\
    \ vowels_index36 = #word\n    local vowels_index37 = #word\n    local vowels_index38\
    \ = #word\n    local vowels_index39 = #word\n    local vowels_index40 = #word\n\
    \    local vowels_index41 = #word\n    local vowels_index42 = #word\n    local\
    \ vowels_index43 = #word\n    local vowels_index44 = #word\n    local vowels_index45\
    \ = #word\n    local vowels_index46 = #word\n    local vowels_index47 = #word\n\
    \    local vowels_index48 = #word\n    local vowels_index49 = #word\n    local\
    \ vowels_index50 = #word\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr16vp7zb.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzqa8jww8.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] =\
    \ \"I\",\n    [\"O\"] = \"O\",\n    [\"U\"] = \"U\",\n    [\"a\"] = \"a\",\n \
    \   [\"e\"] = \"e\",\n    [\"i\"] = \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"]\
    \ = \"u\"\n  }\n  local vowels_count = #vowels\n  local vowels_count_from_right\
    \ = #word - vowels_count + 1\n  local vowels_count_from_left = #word - vowels_count\
    \ - 1\n  local vowels_count_from_middle = #word - vowels_count / 2\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_count_from_middle - 1\n  local vowels_count_from_middle_left\
    \ = #word - vowels_count_from_middle + 1\n  local vowels_count_from_middle_right\
    \ = #word - vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp32k7q4qx.lua:69: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n\
    \      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0z4prj0.lua:161: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2zvtnsxo.lua:48: '')'' expected (to close ''('' at line 47)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowels_count =\
    \ #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n \
    \   local vowels_index_count_min = #word\n    local vowels_index_count_max = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmzweii_4.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"\
    i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] =\
    \ true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\
    \tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"\
    a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] =\
    \ true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\
    \tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"\
    u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] =\
    \ true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\
    \tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"\
    i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] =\
    \ true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\
    \tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"\
    a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] =\
    \ true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\
    \tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"\
    u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] =\
    \ true\n\tvowels[\"i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\
    \tvowels[\"y\"] = true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"\
    i\"] = true\n\tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] =\
    \ true\n\tvowels[\"a\"] = true\n\tvowels[\"e\"] = true\n\tvowels[\"i\"] = true\n\
    \tvowels[\"o\"] = true\n\tvowels[\"u\"] = true\n\tvowels[\"y\"] = true\n\tvowels[\"\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_h9zl8qz.lua:85: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n\
    \      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0z4prj0.lua:161: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_count_with_consonants = #word - vowels_count\n  local\
    \ vowels_count_with_consonants_index = #word\n  local vowels_count_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index =\
    \ #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word\n  local vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwewg057s.lua:54: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n\
    \      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n \
    \     \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"\
    i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n \
    \     \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n      \"\
    e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"a\",\n \
    \     \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n      \"\
    a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"y\",\n \
    \     \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n      \"\
    y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"u\",\n \
    \     \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n      \"\
    u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"o\",\n \
    \     \"u\",\n      \"y\",\n      \"a\",\n      \"e\",\n      \"i\",\n      \"\
    o\",\n      \"u\",\n      \"y\",\n      \"a\",\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0z4prj0.lua:161: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp54ebexn2.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] = \"I\",\n    [\"O\"]\
    \ = \"O\",\n    [\"U\"] = \"U\",\n    [\"Y\"] = \"Y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ vowels[i])\n  end\n  local vowels_count = #word\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, word[i])\n  end\n\
    \  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1,\
    \ vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count\
    \ = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n \
    \   table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count =\
    \ #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n   \
    \ table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ vowels_index[i])\n  end\n  local vowels_count = #vowels_index\n  local vowels_index\
    \ = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n\
    \  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n\
    \  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1,\
    \ vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count\
    \ = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9beejhyu.lua:104: ''end'' expected (to close ''for'' at line
    83) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n    local\
    \ vowels_index_count_min_index = 0\n    local vowels_index_count_max_index = 0\n\
    \    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyz665bgr.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz8t3mtvq.lua:48: '')'' expected (to close ''('' at line 47)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_prev\
    \ = 1\n    local vowels_index_count_next = 1\n    local vowels_index_count_next_prev\
    \ = 1\n    local vowels_index_count_next_next = 1\n    local vowels_index_count_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next = 1\n    local vowels_index_count_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next = 1\n    local vowels_index_count_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next = 1\n    local vowels_index_count_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next = 1\n    local\
    \ vowels_index_count_next_next_next_next_next_next_prev = 1\n    local vowels_index_count_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_prev =\
    \ 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n    local vowels_index_count_next_next_next_next_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo4m86woz.lua:65: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n\
    \    local vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7vj131ik.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_minus_one\
    \ = 0\n  local vowels_index_count_minus_two = 0\n  local vowels_index_count_minus_three\
    \ = 0\n  local vowels_index_count_minus_four = 0\n  local vowels_index_count_minus_five\
    \ = 0\n  local vowels_index_count_minus_six = 0\n  local vowels_index_count_minus_seven\
    \ = 0\n  local vowels_index_count_minus_eight = 0\n  local vowels_index_count_minus_nine\
    \ = 0\n  local vowels_index_count_minus_ten = 0\n  local vowels_index_count_minus_eleven\
    \ = 0\n  local vowels_index_count_minus_twelve = 0\n  local vowels_index_count_minus_thirteen\
    \ = 0\n  local vowels_index_count_minus_fourteen = 0\n  local vowels_index_count_minus_fifteen\
    \ = 0\n  local vowels_index_count_minus_sixteen = 0\n  local vowels_index_count_minus_seventeen\
    \ = 0\n  local vowels_index_count_minus_eighteen = 0\n  local vowels_index_count_minus_nineteen\
    \ = 0\n  local vowels_index_count_minus_twenty = 0\n  local vowels_index_count_minus_thirty\
    \ = 0\n  local vowels_index_count_minus_forty = 0\n  local vowels_index_count_minus_fifty\
    \ = 0\n  local vowels_index_count_minus_sixty = 0\n  local vowels_index_count_minus_seventy\
    \ = 0\n  local vowels_index_count_minus_eighty = 0\n  local vowels_index_count_minus_ninety\
    \ = 0\n  local vowels_index_count_minus_hundred = 0\n  local vowels_index_count_minus_thousand\
    \ = 0\n  local vowels_index_count_minus_million = 0\n  local vowels_index_count_minus_billion\
    \ = 0\n  local vowels_index_count_minus_trillion = 0\n  local vowels_index_count_minus_quadrillion\
    \ = 0\n  local vowels_index_count_minus_quintillion = 0\n  local vowels_index_count_minus_sextillion\
    \ = 0\n  local vowels_index_count_minus_septillion = 0\n  local vowels_index_count_minus_octillion\
    \ = 0\n  local vowels_index_count_minus_nonillion = 0\n  local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqjm6txfu.lua:74: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"iu\"] = \"i\",\n        [\"ou\"] = \"o\"\
    ,\n        [\"au\"] = \"a\",\n        [\"ei\"] = \"e\",\n        [\"ai\"] = \"\
    a\",\n        [\"oui\"] = \"o\",\n        [\"auu\"] = \"a\",\n        [\"aii\"\
    ] = \"a\",\n        [\"oou\"] = \"o\",\n        [\"oau\"] = \"o\",\n        [\"\
    oai\"] = \"o\",\n        [\"oei\"] = \"o\",\n        [\"oaii\"] = \"o\",\n   \
    \     [\"ooui\"] = \"o\",\n        [\"oaui\"] = \"o\",\n        [\"oeui\"] = \"\
    o\",\n        [\"oaiui\"] = \"o\",\n        [\"oouui\"] = \"o\",\n        [\"\
    oauui\"] = \"o\",\n        [\"oeiu\"] = \"o\",\n        [\"oaiu\"] = \"o\",\n\
    \        [\"oouu\"] = \"o\",\n        [\"oauu\"] = \"o\",\n        [\"oeiu\"]\
    \ = \"o\",\n        [\"oaiui\"] = \"o\",\n        [\"oouui\"] = \"o\",\n     \
    \   [\"oauui\"] = \"o\",\n        [\"oeiu\"] = \"o\",\n        [\"oaiu\"] = \"\
    o\",\n        [\"oouu\"] = \"o\",\n        [\"oauu\"] = \"o\",\n        [\"oeiu\"\
    ] = \"o\",\n        [\"oaiui\"] = \"o\",\n        [\"oouui\"] = \"o\",\n     \
    \   [\"oauui\"] = \"o\",\n        [\"oeiu\"] = \"o\",\n        [\"oaiu\"] = \"\
    o\",\n        [\"oouu\"] = \"o\",\n        [\"oauu\"] = \"o\",\n        [\"oeiu\"\
    ] = \"o\",\n        [\"oaiui\"] = \"o\",\n        [\"oouui\"] = \"o\",\n     \
    \   [\"oauui\"] = \"o\",\n        [\"oeiu\"] = \"o\",\n        [\"oaiu\"] = \"\
    o\",\n        [\"oouu\"] = \"o\",\n        [\"oauu\"] = \"o\",\n        [\"oeiu\"\
    ] = \"o\",\n        [\"oaiui\"] = \"o\",\n        [\"oouui\"] = \"o\",\n     \
    \   [\"oauui\"] = \"o\",\n        [\"oeiu\"] = \"o\",\n        [\"oaiu\"] = \"\
    o\",\n        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp79f81cnr.lua:75: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowel_index = 0\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found2 = false\n  \
    \  local vowel_found2_index = -1\n    local vowel_found2_index2 = -1\n    local\
    \ vowel_found3 = false\n    local vowel_found3_index = -1\n    local vowel_found3_index2\
    \ = -1\n    local vowel_found4 = false\n    local vowel_found4_index = -1\n  \
    \  local vowel_found4_index2 = -1\n    local vowel_found5 = false\n    local vowel_found5_index\
    \ = -1\n    local vowel_found5_index2 = -1\n    local vowel_found6 = false\n \
    \   local vowel_found6_index = -1\n    local vowel_found6_index2 = -1\n    local\
    \ vowel_found7 = false\n    local vowel_found7_index = -1\n    local vowel_found7_index2\
    \ = -1\n    local vowel_found8 = false\n    local vowel_found8_index = -1\n  \
    \  local vowel_found8_index2 = -1\n    local vowel_found9 = false\n    local vowel_found9_index\
    \ = -1\n    local vowel_found9_index2 = -1\n    local vowel_found10 = false\n\
    \    local vowel_found10_index = -1\n    local vowel_found10_index2 = -1\n   \
    \ local vowel_found11 = false\n    local vowel_found11_index = -1\n    local vowel_found11_index2\
    \ = -1\n    local vowel_found12 = false\n    local vowel_found12_index = -1\n\
    \    local vowel_found12_index2 = -1\n    local vowel_found13 = false\n    local\
    \ vowel_found13_index = -1\n    local vowel_found13_index2 = -1\n    local vowel_found14\
    \ = false\n    local vowel_found14_index = -1\n    local vowel_found14_index2\
    \ = -1\n    local vowel_found15 = false\n    local vowel_found15_index = -1\n\
    \    local vowel_found15_index2 = -1\n    local vowel_found16 = false\n    local\
    \ vowel_found16_index = -1\n    local vowel_found16_index2 = -1\n    local vowel_found17\
    \ = false\n    local vowel_found17_index = -1\n    local vowel_found17_index2\
    \ = -1\n    local vowel_found18 = false\n    local vowel_found18_index = -1\n\
    \    local vowel_found18_index2 = -1\n    local \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppdb57551.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 0\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprcbg5hqc.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmtc8ldx2.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_positions = {}\n    local vowel_positions_count = #vowel_positions\n \
    \   local vowel_position = 0\n    local vowel_found = false\n    local vowel_positions_found\
    \ = false\n    local vowel_found = false\n    local vowel_positions_found = false\n\
    \    local vowel_found = false\n    local vowel_positions_found = false\n    local\
    \ vowel_found = false\n    local vowel_positions_found = false\n    local vowel_found\
    \ = false\n    local vowel_positions_found = false\n    local vowel_found = false\n\
    \    local vowel_positions_found = false\n    local vowel_found = false\n    local\
    \ vowel_positions_found = false\n    local vowel_found = false\n    local vowel_positions_found\
    \ = false\n    local vowel_found = false\n    local vowel_positions_found = false\n\
    \    local vowel_found = false\n    local vowel_positions_found = false\n    local\
    \ vowel_found = false\n    local vowel_positions_found = false\n    local vowel_found\
    \ = false\n    local vowel_positions_found = false\n    local vowel_found = false\n\
    \    local vowel_positions_found = false\n    local vowel_found = false\n    local\
    \ vowel_positions_found = false\n    local vowel_found = false\n    local vowel_positions_found\
    \ = false\n    local vowel_found = false\n    local vowel_positions_found = false\n\
    \    local vowel_found = false\n    local vowel_positions_found = false\n    local\
    \ vowel_found = false\n    local vowel_positions_found = false\n    local vowel_found\
    \ = false\n    local vowel_positions_found = false\n    local vowel_found = false\n\
    \    local vowel_positions_found = false\n    local vowel_found = false\n    local\
    \ vowel_positions_found = false\n    local vowel_found = false\n    local vowel_positions_found\
    \ = false\n    local vowel_found = false\n    local vowel_positions_found = false\n\
    \    local vowel_found = false\n    local vowel_positions_found = false\n    local\
    \ vowel_found = false\n    local vowel_positions_found = false\n    local vowel_found\
    \ = false\n    local vowel_positions_found = false\n    local vowel_found = false\n\
    \    local vowel_positions_found = false\n    local vowel_found = false\n    local\
    \ vowel_positions_found = false\n    local vowel_found = false\n    local vowel_positions_found\
    \ = false\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsuhtprnh.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_min_diff\
    \ = 0\n  local vowels_index_count_max_diff = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdg1cgic_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = 0\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_minus_one\
    \ = 0\n  local vowels_index_count_minus_two = 0\n  local vowels_index_count_minus_three\
    \ = 0\n  local vowels_index_count_minus_four = 0\n  local vowels_index_count_minus_five\
    \ = 0\n  local vowels_index_count_minus_six = 0\n  local vowels_index_count_minus_seven\
    \ = 0\n  local vowels_index_count_minus_eight = 0\n  local vowels_index_count_minus_nine\
    \ = 0\n  local vowels_index_count_minus_ten = 0\n  local vowels_index_count_minus_eleven\
    \ = 0\n  local vowels_index_count_minus_twelve = 0\n  local vowels_index_count_minus_thirteen\
    \ = 0\n  local vowels_index_count_minus_fourteen = 0\n  local vowels_index_count_minus_fifteen\
    \ = 0\n  local vowels_index_count_minus_sixteen = 0\n  local vowels_index_count_minus_seventeen\
    \ = 0\n  local vowels_index_count_minus_eighteen = 0\n  local vowels_index_count_minus_nineteen\
    \ = 0\n  local vowels_index_count_minus_twenty = 0\n  local vowels_index_count_minus_thirty\
    \ = 0\n  local vowels_index_count_minus_forty = 0\n  local vowels_index_count_minus_fifty\
    \ = 0\n  local vowels_index_count_minus_sixty = 0\n  local vowels_index_count_minus_seventy\
    \ = 0\n  local vowels_index_count_minus_eighty = 0\n  local vowels_index_count_minus_ninety\
    \ = 0\n  local vowels_index_count_minus_hundred = 0\n  local vowels_index_count_minus_thousand\
    \ = 0\n  local vowels_index_count_minus_million = 0\n  local vowels_index_count_minus_billion\
    \ = 0\n  local vowels_index_count_minus_trillion = 0\n  local vowels_index_count_minus_quadrillion\
    \ = 0\n  local vowels_index_count_minus_quintillion = 0\n  local vowels_index_count_minus_sextillion\
    \ = 0\n  local vowels_index_count_minus_septillion = 0\n  local vowels_index_count_minus_octillion\
    \ = 0\n  local vowels_index_count_minus_nonillion = 0\n  local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi8168erx.lua:74: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] = \"I\",\n    [\"O\"]\
    \ = \"O\",\n    [\"U\"] = \"U\",\n    [\"Y\"] = \"Y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word - 1\n  local vowels_index_count_min = #word -\
    \ 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - 1\n  local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppav20y1j.lua:86: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"A\"] = true,\n    [\"E\"] = true,\n    [\"I\"] = true,\n\
    \    [\"O\"] = true,\n    [\"U\"] = true,\n  }\n  local vowel_found = false\n\
    \  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_length = nil\n\
    \  for i = #word, 2, -1 do\n    if vowels[word[i]] then\n      vowel_start = i\n\
    \      vowel_found = true\n      break\n    end\n  end\n  if vowel_found then\n\
    \    vowel_length = i - vowel_start + 1\n    for i = #word, vowel_start, -1 do\n\
    \      if vowels[word[i]] then\n        vowel_end = i\n        break\n      end\n\
    \    end\n    if vowel_start ~= nil and vowel_end ~= nil then\n      return word[vowel_start\
    \ + 1]\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdd1hssgp.lua:48:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdd1hssgp.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_found_index = 0\n  local\
    \ vowel_found_index2 = 0\n  local vowel_found_index3 = 0\n  local vowel_found_index4\
    \ = 0\n  local vowel_found_index5 = 0\n  local vowel_found_index6 = 0\n  local\
    \ vowel_found_index7 = 0\n  local vowel_found_index8 = 0\n  local vowel_found_index9\
    \ = 0\n  local vowel_found_index10 = 0\n  local vowel_found_index11 = 0\n  local\
    \ vowel_found_index12 = 0\n  local vowel_found_index13 = 0\n  local vowel_found_index14\
    \ = 0\n  local vowel_found_index15 = 0\n  local vowel_found_index16 = 0\n  local\
    \ vowel_found_index17 = 0\n  local vowel_found_index18 = 0\n  local vowel_found_index19\
    \ = 0\n  local vowel_found_index20 = 0\n  local vowel_found_index21 = 0\n  local\
    \ vowel_found_index22 = 0\n  local vowel_found_index23 = 0\n  local vowel_found_index24\
    \ = 0\n  local vowel_found_index25 = 0\n  local vowel_found_index26 = 0\n  local\
    \ vowel_found_index27 = 0\n  local vowel_found_index28 = 0\n  local vowel_found_index29\
    \ = 0\n  local vowel_found_index30 = 0\n  local vowel_found_index31 = 0\n  local\
    \ vowel_found_index32 = 0\n  local vowel_found_index33 = 0\n  local vowel_found_index34\
    \ = 0\n  local vowel_found_index35 = 0\n  local vowel_found_index36 = 0\n  local\
    \ vowel_found_index37 = 0\n  local vowel_found_index38 = 0\n  local vowel_found_index39\
    \ = 0\n  local vowel_found_index40 = 0\n  local vowel_found_index41 = 0\n  local\
    \ vowel_found_index42 = 0\n  local vowel_found_index43 = 0\n  local vowel_found_index44\
    \ = 0\n  local vowel_found_index45 = 0\n  local vowel_found_index46 = 0\n  local\
    \ vowel_found_index47 = 0\n  local vowel_found_index48 = 0\n  local vowel_found_index49\
    \ = 0\n  local vowel_found_index50 = 0\n  local vowel_found_index51 = 0\n  local\
    \ vowel_found_index52 = 0\n  local vowel_found_index53 = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzl6pk6cv.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprfs8bj6v.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  for i = #word,\
    \ 2, -1 do\n    if vowels[word[i]] then\n      vowel_start = i\n      vowel_found\
    \ = true\n      break\n    end\n  end\n  if vowel_found then\n    local vowel_length\
    \ = #vowels[word[vowel_start]]\n    for i = #word, vowel_start + 1, -1 do\n  \
    \    if vowels[word[i]] then\n        vowel_end = i\n        break\n      end\n\
    \    end\n    if vowel_start ~= nil and vowel_end ~= nil then\n      return word[vowel_end\
    \ - vowel_length + 1]\n    end\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyxgy0in.lua:47:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcyxgy0in.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n  \
    \      \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n   \
    \     \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n   \
    \     \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n   \
    \     \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n   \
    \     \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n        \"e\",\n        \"i\",\n       \
    \ \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n        \"e\",\n   \
    \     \"i\",\n        \"o\",\n        \"u\",\n        \"y\",\n        \"a\",\n\
    \        \"e\",\n        \"i\",\n        \"o\",\n        \"u\",\n        \"y\"\
    ,\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"\
    u\",\n        \"y\",\n        \"a\",\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdzl93itf.lua:161: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  local vowels_count = 0\n  local vowels_count_max = 0\n\
    \  local vowels_count_min = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index\
    \ = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n\
    \  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local\
    \ vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index\
    \ = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n\
    \  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local\
    \ vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index\
    \ = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n\
    \  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local\
    \ vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index\
    \ = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n\
    \  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local\
    \ vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index\
    \ = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n\
    \  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local\
    \ vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index\
    \ = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n\
    \  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local\
    \ vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index\
    \ = 0\n  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n\
    \  local vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local\
    \ vowels_count_min_index = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index\
    \ = 0\n  local vowels_count_max_index = 0\n  local vowels_count_min_index = 0\n\
    \  local vowels_count_max_index = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2j6x45qi.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_2\
    \ = 1\n    local vowels_index_count_3 = 1\n    local vowels_index_count_4 = 1\n\
    \    local vowels_index_count_5 = 1\n    local vowels_index_count_6 = 1\n    local\
    \ vowels_index_count_7 = 1\n    local vowels_index_count_8 = 1\n    local vowels_index_count_9\
    \ = 1\n    local vowels_index_count_10 = 1\n    local vowels_index_count_11 =\
    \ 1\n    local vowels_index_count_12 = 1\n    local vowels_index_count_13 = 1\n\
    \    local vowels_index_count_14 = 1\n    local vowels_index_count_15 = 1\n  \
    \  local vowels_index_count_16 = 1\n    local vowels_index_count_17 = 1\n    local\
    \ vowels_index_count_18 = 1\n    local vowels_index_count_19 = 1\n    local vowels_index_count_20\
    \ = 1\n    local vowels_index_count_21 = 1\n    local vowels_index_count_22 =\
    \ 1\n    local vowels_index_count_23 = 1\n    local vowels_index_count_24 = 1\n\
    \    local vowels_index_count_25 = 1\n    local vowels_index_count_26 = 1\n  \
    \  local vowels_index_count_27 = 1\n    local vowels_index_count_28 = 1\n    local\
    \ vowels_index_count_29 = 1\n    local vowels_index_count_30 = 1\n    local vowels_index_count_31\
    \ = 1\n    local vowels_index_count_32 = 1\n    local vowels_index_count_33 =\
    \ 1\n    local vowels_index_count_34 = 1\n    local vowels_index_count_35 = 1\n\
    \    local vowels_index_count_36 = 1\n    local vowels_index_count_37 = 1\n  \
    \  local vowels_index_count_38 = 1\n    local vowels_index_count_39 = 1\n    local\
    \ vowels_index_count_40 = 1\n    local vowels_index_count_41 = 1\n    local vowels_index_count_42\
    \ = 1\n    local vowels_index_count_43 = 1\n    local vowels_index_count_44 =\
    \ 1\n    local vowels_index_count_45 = 1\n    local vowels_index_count_46 = 1\n\
    \    local vowels_index_count_47 = 1\n    local vowels_index_count_48 = 1\n  \
    \  local vowels_index_count_49 = 1\n    local vowels_index_count_50 = 1\n    local\
    \ vowels_index_count_51 = 1\n    local vowels_index_count_52 = 1\n    local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5fuhoja7.lua:87: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i=1,#word do\n        local c = word:sub(i,i)\n\
    \        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\"\
    \ then\n            table.insert(vowels, c)\n        end\n    end\n    local vowel\
    \ = nil\n    local vowel_start = nil\n    local vowel_end = nil\n    for i=#vowels,1,-1\
    \ do\n        local c = vowels[i]\n        if vowel_start == nil then\n      \
    \      vowel_start = i\n        end\n        if vowel_end == nil then\n      \
    \      vowel_end = i\n        end\n        if vowel_start <= #word and vowel_end\
    \ >= #word then\n            local vowel_length = vowel_end - vowel_start + 1\n\
    \            if vowel_length >= 2 then\n                local vowel_distance =\
    \ #vowels - i - 1\n                if vowel_distance <= vowel_length then\n  \
    \                  local vowel_distance = #vowels - i\n                    if\
    \ vowel_distance <= vowel_length then\n                        vowel = vowels[i]\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70aztcid.lua:49:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp70aztcid.lua:49: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    local vowels_index_count = {}\n\
    \    local vowels_index_count[1] = vowels_count\n    local vowels_index_count[2]\
    \ = vowels_count\n    local vowels_index_count[3] = vowels_count\n    local vowels_index_count[4]\
    \ = vowels_count\n    local vowels_index_count[5] = vowels_count\n    local vowels_index_count[6]\
    \ = vowels_count\n    local vowels_index_count[7] = vowels_count\n    local vowels_index_count[8]\
    \ = vowels_count\n    local vowels_index_count[9] = vowels_count\n    local vowels_index_count[10]\
    \ = vowels_count\n    local vowels_index_count[11] = vowels_count\n    local vowels_index_count[12]\
    \ = vowels_count\n    local vowels_index_count[13] = vowels_count\n    local vowels_index_count[14]\
    \ = vowels_count\n    local vowels_index_count[15] = vowels_count\n    local vowels_index_count[16]\
    \ = vowels_count\n    local vowels_index_count[17] = vowels_count\n    local vowels_index_count[18]\
    \ = vowels_count\n    local vowels_index_count[19] = vowels_count\n    local vowels_index_count[20]\
    \ = vowels_count\n    local vowels_index_count[21] = vowels_count\n    local vowels_index_count[22]\
    \ = vowels_count\n    local vowels_index_count[23] = vowels_count\n    local vowels_index_count[24]\
    \ = vowels_count\n    local vowels_index_count[25] = vowels_count\n    local vowels_index_count[26]\
    \ = vowels_count\n    local vowels_index_count[27] = vowels_count\n    local vowels_index_count[28]\
    \ = vowels_count\n    local vowels_index_count[29] = vowels_count\n    local vowels_index_count[30]\
    \ = vowels_count\n    local vowels_index_count[31] = vowels_count\n    local vowels_index_count[32]\
    \ = vowels_count\n    local vowels_index_count[33] = vowels_count\n    local vowels_index_count[34]\
    \ = vowels_count\n    local vowels_index_count[35] = vowels_count\n    local vowels_index_count[36]\
    \ = vowels_count\n    local vowels_index_count[37] = vowels_count\n    local vowels_index_count[38]\
    \ = vowels_count\n    local vowels_index_count[39] = vowels_count\n    local vowels_index_count[40]\
    \ = vowels_count\n    local vowels_index_count[41] = vowels_count\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt58kb6ez.lua:16: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = {}\n  local vowels_index_count = 0\n  local\
    \ vowels_index_index_count = 0\n  local vowels_index_index_index_count = 0\n \
    \ local vowels_index_index_index_index_count = 0\n  local vowels_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_count = 0\n  local vowels_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_count = 0\n  local\
    \ vowels_index_index_index_index_index_index_index_count = 0\n  local vowels_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_count =\
    \ 0\n  local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \  local vowels_index_index_index_index_index_index_index_index_index_count =\
    \ 0\n  local vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpammbpzp_.lua:66: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n   local vowels_count\
    \ = #vowels\n   local vowel_index = 1\n   local vowel_found = false\n   local\
    \ vowel_start = nil\n   local vowel_end = nil\n   local vowel_distance = nil\n\
    \   local vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbn51fsr9.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n\
    \    local vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7vj131ik.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\"\
    , \"I\", \"O\", \"U\"\n    }\n    local vowels_count = #vowels\n    local vowels_index\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph6b2tsdi.lua:49: '')'' expected (to close ''('' at line 48)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_found = false\n    local vowel_position = -1\n  \
    \  local vowel_position_count = 0\n    local vowel_position_count2 = 0\n    local\
    \ vowel_position_count3 = 0\n    local vowel_position_count4 = 0\n    local vowel_position_count5\
    \ = 0\n    local vowel_position_count6 = 0\n    local vowel_position_count7 =\
    \ 0\n    local vowel_position_count8 = 0\n    local vowel_position_count9 = 0\n\
    \    local vowel_position_count10 = 0\n    local vowel_position_count11 = 0\n\
    \    local vowel_position_count12 = 0\n    local vowel_position_count13 = 0\n\
    \    local vowel_position_count14 = 0\n    local vowel_position_count15 = 0\n\
    \    local vowel_position_count16 = 0\n    local vowel_position_count17 = 0\n\
    \    local vowel_position_count18 = 0\n    local vowel_position_count19 = 0\n\
    \    local vowel_position_count20 = 0\n    local vowel_position_count21 = 0\n\
    \    local vowel_position_count22 = 0\n    local vowel_position_count23 = 0\n\
    \    local vowel_position_count24 = 0\n    local vowel_position_count25 = 0\n\
    \    local vowel_position_count26 = 0\n    local vowel_position_count27 = 0\n\
    \    local vowel_position_count28 = 0\n    local vowel_position_count29 = 0\n\
    \    local vowel_position_count30 = 0\n    local vowel_position_count31 = 0\n\
    \    local vowel_position_count32 = 0\n    local vowel_position_count33 = 0\n\
    \    local vowel_position_count34 = 0\n    local vowel_position_count35 = 0\n\
    \    local vowel_position_count36 = 0\n    local vowel_position_count37 = 0\n\
    \    local vowel_position_count38 = 0\n    local vowel_position_count39 = 0\n\
    \    local vowel_position_count40 = 0\n    local vowel_position_count41 = 0\n\
    \    local vowel_position_count42 = 0\n    local vowel_position_count43 = 0\n\
    \    local vowel_position_count44 = 0\n    local vowel_position_count45 = 0\n\
    \    local vowel_position_count46 = 0\n    local vowel_position_count47 = 0\n\
    \    local vowel_position_count48 = 0\n    local vowel_position_count49 = 0\n\
    \    local vowel_position_count50 = 0\n    local vowel_position_count51 = 0\n\
    \    local vowel_position_count52 = 0\n    local vowel_position_count53\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptx2gjk8g.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_with_consonants = #word - vowels_count\n\tlocal\
    \ vowels_count_with_consonants_index = #word\n\tlocal vowels_count_with_consonants_index_with_consonants\
    \ = #word - vowels_count_with_consonants\n\tlocal vowels_count_with_consonants_index_with_consonants_index\
    \ = #word - vowels_count_with_consonants_index_with_consonants\n\tlocal vowels_count_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index\n\tlocal\
    \ vowels_count_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index_with_consonants\n\
    \tlocal vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index_with_consonants_index\n\
    \tlocal vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\n\
    \tlocal vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index\n\
    \tlocal vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants_index_with_consonants\
    \ = #word - vowels_count_with_consonants_index_with_consonants_index_with_consonants_index_with_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps3398ykn.lua:56: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = 1\n  local vowels_index_count = 0\n  local vowels_index_count_min = #vowels\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min_index = 0\n\
    \  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_diff\
    \ = 0\n  local vowels_index_count_max_diff = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n  local vowels_index_count_min_diff_index\
    \ = 0\n  local vowels_index_count_max_diff_index = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkmccqlq.lua:80: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp40anw859.lua:82: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_min = #vowels\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_max_min = #vowels\n  local vowels_index_count_min_max = #vowels\n\
    \  local vowels_index_count_min_max_min = #vowels\n  local vowels_index_count_min_max_min_max\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min = #vowels\n  local\
    \ vowels_index_count_min_max_min_max_min_max = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max = #vowels\n\
    \  local vowels_index_count_min_max_min_max_min_max_min_max_min = #vowels\n  local\
    \ vowels_index_count_min_max_min_max_min_max_min_max_min_max = #vowels\n  local\
    \ vowels_index_count_min_max_min_max_min_max_min_max_min_max_min = #vowels\n \
    \ local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max = #vowels\n\
    \  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = #vowels\n  local vowels_index_count_min_max_min_max_min_max_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7emrir1a.lua:59: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_count_reverse = #vowels:reverse()\n  local vowels_count_reverse2\
    \ = #vowels:reverse(2)\n  local vowels_count_reverse3 = #vowels:reverse(3)\n \
    \ local vowels_count_reverse4 = #vowels:reverse(4)\n  local vowels_count_reverse5\
    \ = #vowels:reverse(5)\n  local vowels_count_reverse6 = #vowels:reverse(6)\n \
    \ local vowels_count_reverse7 = #vowels:reverse(7)\n  local vowels_count_reverse8\
    \ = #vowels:reverse(8)\n  local vowels_count_reverse9 = #vowels:reverse(9)\n \
    \ local vowels_count_reverse10 = #vowels:reverse(10)\n  local vowels_count_reverse11\
    \ = #vowels:reverse(11)\n  local vowels_count_reverse12 = #vowels:reverse(12)\n\
    \  local vowels_count_reverse13 = #vowels:reverse(13)\n  local vowels_count_reverse14\
    \ = #vowels:reverse(14)\n  local vowels_count_reverse15 = #vowels:reverse(15)\n\
    \  local vowels_count_reverse16 = #vowels:reverse(16)\n  local vowels_count_reverse17\
    \ = #vowels:reverse(17)\n  local vowels_count_reverse18 = #vowels:reverse(18)\n\
    \  local vowels_count_reverse19 = #vowels:reverse(19)\n  local vowels_count_reverse20\
    \ = #vowels:reverse(20)\n  local vowels_count_reverse21 = #vowels:reverse(21)\n\
    \  local vowels_count_reverse22 = #vowels:reverse(22)\n  local vowels_count_reverse23\
    \ = #vowels:reverse(23)\n  local vowels_count_reverse24 = #vowels:reverse(24)\n\
    \  local vowels_count_reverse25 = #vowels:reverse(25)\n  local vowels_count_reverse26\
    \ = #vowels:reverse(26)\n  local vowels_count_reverse27 = #vowels:reverse(27)\n\
    \  local vowels_count_reverse28 = #vowels:reverse(28)\n  local vowels_count_reverse29\
    \ = #vowels:reverse(29)\n  local vowels_count_reverse30 = #vowels:reverse(30)\n\
    \  local vowels_count_reverse31 = #vowels:reverse(31)\n  local vowels_count_reverse32\
    \ = #vowels:reverse(32)\n  local vowels_count_reverse33 = #vowels:reverse(33)\n\
    \  local vowels_count_reverse34 = #vowel\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxp54mo9g.lua:73: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = #word\n  local vowels_index2 = #word\n  local vowels_index3 =\
    \ #word\n  local vowels_index4 = #word\n  local vowels_index5 = #word\n  local\
    \ vowels_index6 = #word\n  local vowels_index7 = #word\n  local vowels_index8\
    \ = #word\n  local vowels_index9 = #word\n  local vowels_index10 = #word\n  local\
    \ vowels_index11 = #word\n  local vowels_index12 = #word\n  local vowels_index13\
    \ = #word\n  local vowels_index14 = #word\n  local vowels_index15 = #word\n  local\
    \ vowels_index16 = #word\n  local vowels_index17 = #word\n  local vowels_index18\
    \ = #word\n  local vowels_index19 = #word\n  local vowels_index20 = #word\n  local\
    \ vowels_index21 = #word\n  local vowels_index22 = #word\n  local vowels_index23\
    \ = #word\n  local vowels_index24 = #word\n  local vowels_index25 = #word\n  local\
    \ vowels_index26 = #word\n  local vowels_index27 = #word\n  local vowels_index28\
    \ = #word\n  local vowels_index29 = #word\n  local vowels_index30 = #word\n  local\
    \ vowels_index31 = #word\n  local vowels_index32 = #word\n  local vowels_index33\
    \ = #word\n  local vowels_index34 = #word\n  local vowels_index35 = #word\n  local\
    \ vowels_index36 = #word\n  local vowels_index37 = #word\n  local vowels_index38\
    \ = #word\n  local vowels_index39 = #word\n  local vowels_index40 = #word\n  local\
    \ vowels_index41 = #word\n  local vowels_index42 = #word\n  local vowels_index43\
    \ = #word\n  local vowels_index44 = #word\n  local vowels_index45 = #word\n  local\
    \ vowels_index46 = #word\n  local vowels_index47 = #word\n  local vowels_index48\
    \ = #word\n  local vowels_index49 = #word\n  local vowels_index50 = #word\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj39shs1o.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_found60 = false\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprddgn5y1.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_end = 0\n    local vowel_found = false\n\
    \    local vowel_start = 0\n    local vowel_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphmhjurmx.lua:105: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = 1\n  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end\
    \ = #word\n  local vowel_length = #word\n  local vowel_found = false\n  local\
    \ vowel_start = #word\n  local vowel_end = #word\n  local vowel_length = #word\n\
    \  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end =\
    \ #word\n  local vowel_length = #word\n  local vowel_found = false\n  local vowel_start\
    \ = #word\n  local vowel_end = #word\n  local vowel_length = #word\n  local vowel_found\
    \ = false\n  local vowel_start = #word\n  local vowel_end = #word\n  local vowel_length\
    \ = #word\n  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end\
    \ = #word\n  local vowel_length = #word\n  local vowel_found = false\n  local\
    \ vowel_start = #word\n  local vowel_end = #word\n  local vowel_length = #word\n\
    \  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end =\
    \ #word\n  local vowel_length = #word\n  local vowel_found = false\n  local vowel_start\
    \ = #word\n  local vowel_end = #word\n  local vowel_length = #word\n  local vowel_found\
    \ = false\n  local vowel_start = #word\n  local vowel_end = #word\n  local vowel_length\
    \ = #word\n  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end\
    \ = #word\n  local vowel_length = #word\n  local vowel_found = false\n  local\
    \ vowel_start = #word\n  local vowel_end = #word\n  local vowel_length = #word\n\
    \  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end =\
    \ #word\n  local vowel_length = #word\n  local vowel_found = false\n  local vowel_start\
    \ = #word\n  local vowel_end = #word\n  local vowel_length = #word\n  local vowel_found\
    \ = false\n  local vowel_start = #word\n  local vowel_end = #word\n  local vowel_length\
    \ = #word\n  local vowel_found = false\n  local vowel_start = #word\n  local vowel_end\
    \ = #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkqki87ce.lua:78: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_start = word:len()\n    local vowel_end = word:len()\n\
    \    local vowel_found = false\n    local vowel_found2 = false\n    local vowel_found3\
    \ = false\n    local vowel_found4 = false\n    local vowel_found5 = false\n  \
    \  local vowel_found6 = false\n    local vowel_found7 = false\n    local vowel_found8\
    \ = false\n    local vowel_found9 = false\n    local vowel_found10 = false\n \
    \   local vowel_found11 = false\n    local vowel_found12 = false\n    local vowel_found13\
    \ = false\n    local vowel_found14 = false\n    local vowel_found15 = false\n\
    \    local vowel_found16 = false\n    local vowel_found17 = false\n    local vowel_found18\
    \ = false\n    local vowel_found19 = false\n    local vowel_found20 = false\n\
    \    local vowel_found21 = false\n    local vowel_found22 = false\n    local vowel_found23\
    \ = false\n    local vowel_found24 = false\n    local vowel_found25 = false\n\
    \    local vowel_found26 = false\n    local vowel_found27 = false\n    local vowel_found28\
    \ = false\n    local vowel_found29 = false\n    local vowel_found30 = false\n\
    \    local vowel_found31 = false\n    local vowel_found32 = false\n    local vowel_found33\
    \ = false\n    local vowel_found34 = false\n    local vowel_found35 = false\n\
    \    local vowel_found36 = false\n    local vowel_found37 = false\n    local vowel_found38\
    \ = false\n    local vowel_found39 = false\n    local vowel_found40 = false\n\
    \    local vowel_found41 = false\n    local vowel_found42 = false\n    local vowel_found43\
    \ = false\n    local vowel_found44 = false\n    local vowel_found45 = false\n\
    \    local vowel_found46 = false\n    local vowel_found47 = false\n    local vowel_found48\
    \ = false\n    local vowel_found49 = false\n    local vowel_found50 = false\n\
    \    local vowel_found51 = false\n    local vowel_found52 = false\n    local vowel_found53\
    \ = false\n    local vowel_found54 = false\n    local vowel_found55 = false\n\
    \    local vowel_found56 = false\n    local vowel_found57 = false\n    local vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo1i7zd65.lua:93: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_met_count\
    \ = 0\n  local vowel_met_index = 0\n  local vowel_met_index2 = 0\n  local vowel_met_index3\
    \ = 0\n  local vowel_met_index4 = 0\n  local vowel_met_index5 = 0\n  local vowel_met_index6\
    \ = 0\n  local vowel_met_index7 = 0\n  local vowel_met_index8 = 0\n  local vowel_met_index9\
    \ = 0\n  local vowel_met_index10 = 0\n  local vowel_met_index11 = 0\n  local vowel_met_index12\
    \ = 0\n  local vowel_met_index13 = 0\n  local vowel_met_index14 = 0\n  local vowel_met_index15\
    \ = 0\n  local vowel_met_index16 = 0\n  local vowel_met_index17 = 0\n  local vowel_met_index18\
    \ = 0\n  local vowel_met_index19 = 0\n  local vowel_met_index20 = 0\n  local vowel_met_index21\
    \ = 0\n  local vowel_met_index22 = 0\n  local vowel_met_index23 = 0\n  local vowel_met_index24\
    \ = 0\n  local vowel_met_index25 = 0\n  local vowel_met_index26 = 0\n  local vowel_met_index27\
    \ = 0\n  local vowel_met_index28 = 0\n  local vowel_met_index29 = 0\n  local vowel_met_index30\
    \ = 0\n  local vowel_met_index31 = 0\n  local vowel_met_index32 = 0\n  local vowel_met_index33\
    \ = 0\n  local vowel_met_index34 = 0\n  local vowel_met_index35 = 0\n  local vowel_met_index36\
    \ = 0\n  local vowel_met_index37 = 0\n  local vowel_met_index38 = 0\n  local vowel_met_index39\
    \ = 0\n  local vowel_met_index40 = 0\n  local vowel_met_index41 = 0\n  local vowel_met_index42\
    \ = 0\n  local vowel_met_index43 = 0\n  local vowel_met_index44 = 0\n  local vowel_met_index45\
    \ = 0\n  local vowel_met_index46 = 0\n  local vowel_met_index47 = 0\n  local vowel_met_index48\
    \ = 0\n  local vowel_me\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp269hqq1r.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ 0\n  local vowels_count_prev = 0\n  local vowels_count_next = 0\n  local vowels_count_next2\
    \ = 0\n  local vowels_count_next3 = 0\n  local vowels_count_next4 = 0\n  local\
    \ vowels_count_next5 = 0\n  local vowels_count_next6 = 0\n  local vowels_count_next7\
    \ = 0\n  local vowels_count_next8 = 0\n  local vowels_count_next9 = 0\n  local\
    \ vowels_count_next10 = 0\n  local vowels_count_next11 = 0\n  local vowels_count_next12\
    \ = 0\n  local vowels_count_next13 = 0\n  local vowels_count_next14 = 0\n  local\
    \ vowels_count_next15 = 0\n  local vowels_count_next16 = 0\n  local vowels_count_next17\
    \ = 0\n  local vowels_count_next18 = 0\n  local vowels_count_next19 = 0\n  local\
    \ vowels_count_next20 = 0\n  local vowels_count_next21 = 0\n  local vowels_count_next22\
    \ = 0\n  local vowels_count_next23 = 0\n  local vowels_count_next24 = 0\n  local\
    \ vowels_count_next25 = 0\n  local vowels_count_next26 = 0\n  local vowels_count_next27\
    \ = 0\n  local vowels_count_next28 = 0\n  local vowels_count_next29 = 0\n  local\
    \ vowels_count_next30 = 0\n  local vowels_count_next31 = 0\n  local vowels_count_next32\
    \ = 0\n  local vowels_count_next33 = 0\n  local vowels_count_next34 = 0\n  local\
    \ vowels_count_next35 = 0\n  local vowels_count_next36 = 0\n  local vowels_count_next37\
    \ = 0\n  local vowels_count_next38 = 0\n  local vowels_count_next39 = 0\n  local\
    \ vowels_count_next40 = 0\n  local vowels_count_next41 = 0\n  local vowels_count_next42\
    \ = 0\n  local vowels_count_next43 = 0\n  local vowels_count_next44 = 0\n  local\
    \ vowels_count_next45 = 0\n  local vowels_count_next46 = 0\n  local vowels_count_next47\
    \ = 0\n  local vowels_count_next48 = 0\n  local vowels_count_next49 = 0\n  local\
    \ vowels_count_next50 = 0\n  local vowels_count_next51 = 0\n  local vowels_count_next52\
    \ = 0\n  local vowels_count_next53 = 0\n  local vowels_count_next54 = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg_17pxgx.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min_index = 0\n  local vowels_index_count_max_index = 0\n\
    \  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_count_max_index_index\
    \ = 0\n  local vowels_index_count_min_index_index = 0\n  local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_eaq2xr.lua:79: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_min\
    \ = 0\n    local vowels_index_count_max_min_index = 0\n    local vowels_index_count_max_min_index2\
    \ = 0\n    local vowels_index_count_max_min_index3 = 0\n    local vowels_index_count_max_min_index4\
    \ = 0\n    local vowels_index_count_max_min_index5 = 0\n    local vowels_index_count_max_min_index6\
    \ = 0\n    local vowels_index_count_max_min_index7 = 0\n    local vowels_index_count_max_min_index8\
    \ = 0\n    local vowels_index_count_max_min_index9 = 0\n    local vowels_index_count_max_min_index10\
    \ = 0\n    local vowels_index_count_max_min_index11 = 0\n    local vowels_index_count_max_min_index12\
    \ = 0\n    local vowels_index_count_max_min_index13 = 0\n    local vowels_index_count_max_min_index14\
    \ = 0\n    local vowels_index_count_max_min_index15 = 0\n    local vowels_index_count_max_min_index16\
    \ = 0\n    local vowels_index_count_max_min_index17 = 0\n    local vowels_index_count_max_min_index18\
    \ = 0\n    local vowels_index_count_max_min_index19 = 0\n    local vowels_index_count_max_min_index20\
    \ = 0\n    local vowels_index_count_max_min_index21 = 0\n    local vowels_index_count_max_min_index22\
    \ = 0\n    local vowels_index_count_max_min_index23 = 0\n    local vowels_index_count_max_min_index24\
    \ = 0\n    local vowels_index_count_max_min_index25 = 0\n    local vowels_index_count_max_min_index26\
    \ = 0\n    local vowels_index_count_max_min_index27 = 0\n    local vowels_index_count_max_min_index28\
    \ = 0\n    local vowels_index_count_max_min_index29 = 0\n    local vowels_index_count_max_min_index30\
    \ = 0\n    local vowels_index_count_max_min_index31 = 0\n    local vowels_index_count_max_min_index32\
    \ = 0\n    local vowels_index_count_max_min_index33 = 0\n    local vowels_index_count_max_min_index34\
    \ = 0\n    local vowels_index_count_max_min_index35 = 0\n    local vowels_index_count_max_min_index36\
    \ = 0\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu76vxk5g.lua:81: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 = #word\n\tlocal\
    \ vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal vowels_index6\
    \ = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8 = #word\n\tlocal\
    \ vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal vowels_index11\
    \ = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13 = #word\n\t\
    local vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\tlocal vowels_index16\
    \ = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18 = #word\n\t\
    local vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\tlocal vowels_index21\
    \ = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23 = #word\n\t\
    local vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\tlocal vowels_index26\
    \ = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28 = #word\n\t\
    local vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\tlocal vowels_index31\
    \ = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33 = #word\n\t\
    local vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\tlocal vowels_index36\
    \ = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38 = #word\n\t\
    local vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\tlocal vowels_index41\
    \ = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43 = #word\n\t\
    local vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\tlocal vowels_index46\
    \ = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48 = #word\n\t\
    local vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\tlocal vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpak_7p3wr.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowel_start = string.find(word,\
    \ vowels, 1, true)\n    local vowel_end = string.find(word, vowels, -1, true)\n\
    \    local vowel_middle = string.find(word, vowels, 1, true)\n    local vowel_middle2\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle3 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle4 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle5 = string.find(word, vowels, 1, true)\n    local vowel_middle6\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle7 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle8 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle9 = string.find(word, vowels, 1, true)\n    local vowel_middle10\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle11 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle12 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle13 = string.find(word, vowels, 1, true)\n    local vowel_middle14\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle15 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle16 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle17 = string.find(word, vowels, 1, true)\n    local vowel_middle18\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle19 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle20 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle21 = string.find(word, vowels, 1, true)\n    local vowel_middle22\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle23 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle24 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle25 = string.find(word, vowels, 1, true)\n    local vowel_middle26\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle27 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle28 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle29 = string.find(word, vowels, 1, true)\n    local vowel_middle30\
    \ = string.find(word, vowels, 1, true)\n    local vowel_middle31 = string.find(word,\
    \ vowels, 1, true)\n    local vowel_middle32 = string.find(word, vowels, 1, true)\n\
    \    local vowel_middle33 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpitisdolz.lua:48: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_found_index = -1\n  local\
    \ vowel_found_index2 = -1\n  local vowel_found_index3 = -1\n  local vowel_found_index4\
    \ = -1\n  local vowel_found_index5 = -1\n  local vowel_found_index6 = -1\n  local\
    \ vowel_found_index7 = -1\n  local vowel_found_index8 = -1\n  local vowel_found_index9\
    \ = -1\n  local vowel_found_index10 = -1\n  local vowel_found_index11 = -1\n \
    \ local vowel_found_index12 = -1\n  local vowel_found_index13 = -1\n  local vowel_found_index14\
    \ = -1\n  local vowel_found_index15 = -1\n  local vowel_found_index16 = -1\n \
    \ local vowel_found_index17 = -1\n  local vowel_found_index18 = -1\n  local vowel_found_index19\
    \ = -1\n  local vowel_found_index20 = -1\n  local vowel_found_index21 = -1\n \
    \ local vowel_found_index22 = -1\n  local vowel_found_index23 = -1\n  local vowel_found_index24\
    \ = -1\n  local vowel_found_index25 = -1\n  local vowel_found_index26 = -1\n \
    \ local vowel_found_index27 = -1\n  local vowel_found_index28 = -1\n  local vowel_found_index29\
    \ = -1\n  local vowel_found_index30 = -1\n  local vowel_found_index31 = -1\n \
    \ local vowel_found_index32 = -1\n  local vowel_found_index33 = -1\n  local vowel_found_index34\
    \ = -1\n  local vowel_found_index35 = -1\n  local vowel_found_index36 = -1\n \
    \ local vowel_found_index37 = -1\n  local vowel_found_index38 = -1\n  local vowel_found_index39\
    \ = -1\n  local vowel_found_index40 = -1\n  local vowel_found_index41 = -1\n \
    \ local vowel_found_index42 = -1\n  local vowel_found_index43 = -1\n  local vowel_found_index44\
    \ = -1\n  local vowel_found_index45 = -1\n  local vowel_found_index46 = -1\n \
    \ local vowel_found_index47 = -1\n  local vowel_found_index48 = -1\n  local vowel_found_index49\
    \ = -1\n  local vowel_found_index50 = -1\n  local vowel_found_index51 = -1\n \
    \ local vowel_found_index52 = -1\n  local vowel\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph6j8wh23.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 1\n  \
    \  local vowels_index_count_min = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_max = 1\n  \
    \  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr5g7fxry.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index2 = 0\n    local vowels_index_count_max_min_index3\
    \ = 0\n    local vowels_index_count_max_min_index4 = 0\n    local vowels_index_count_max_min_index5\
    \ = 0\n    local vowels_index_count_max_min_index6 = 0\n    local vowels_index_count_max_min_index7\
    \ = 0\n    local vowels_index_count_max_min_index8 = 0\n    local vowels_index_count_max_min_index9\
    \ = 0\n    local vowels_index_count_max_min_index10 = 0\n    local vowels_index_count_max_min_index11\
    \ = 0\n    local vowels_index_count_max_min_index12 = 0\n    local vowels_index_count_max_min_index13\
    \ = 0\n    local vowels_index_count_max_min_index14 = 0\n    local vowels_index_count_max_min_index15\
    \ = 0\n    local vowels_index_count_max_min_index16 = 0\n    local vowels_index_count_max_min_index17\
    \ = 0\n    local vowels_index_count_max_min_index18 = 0\n    local vowels_index_count_max_min_index19\
    \ = 0\n    local vowels_index_count_max_min_index20 = 0\n    local vowels_index_count_max_min_index21\
    \ = 0\n    local vowels_index_count_max_min_index22 = 0\n    local vowels_index_count_max_min_index23\
    \ = 0\n    local vowels_index_count_max_min_index24 = 0\n    local vowels_index_count_max_min_index25\
    \ = 0\n    local vowels_index_count_max_min_index26 = 0\n    local vowels_index_count_max_min_index27\
    \ = 0\n    local vowels_index_count_max_min_index28 = 0\n    local vowels_index_count_max_min_index29\
    \ = 0\n    local vowels_index_count_max_min_index30 = 0\n    local vowels_index_count_max_min_index31\
    \ = 0\n    local vowels_index_count_max_min_index32 = 0\n    local vowels_index_count_max_min_index33\
    \ = 0\n    local vowels_index_count_max_min_index34 = 0\n    local vowels_index_count_max_min_index35\
    \ = 0\n    local vowels_index_count_max_min_index36 = 0\n    local vowels_index_count_max_min_index37\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpowrter3w.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"}\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = 0\n\t\
    local vowels_index_count = 0\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnworbkcf.lua:82: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"i\"] = \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] =\
    \ \"y\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"l\"] = \"l\",\n\t\t[\"s\"] = \"s\",\n\t\
    \t[\"d\"] = \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"c\"] =\
    \ \"c\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"n\"] = \"n\",\n\t\t[\"p\"] = \"p\",\n\t\
    \t[\"t\"] = \"t\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"v\"] =\
    \ \"v\",\n\t\t[\"w\"] = \"w\",\n\t\t[\"x\"] = \"x\",\n\t\t[\"z\"] = \"z\",\n\t\
    \t[\"s\"] = \"s\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"h\"] =\
    \ \"h\",\n\t\t[\"c\"] = \"c\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"n\"] = \"n\",\n\t\
    \t[\"p\"] = \"p\",\n\t\t[\"t\"] = \"t\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"q\"] =\
    \ \"q\",\n\t\t[\"v\"] = \"v\",\n\t\t[\"w\"] = \"w\",\n\t\t[\"x\"] = \"x\",\n\t\
    \t[\"z\"] = \"z\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"f\"] =\
    \ \"f\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"c\"] = \"c\",\n\t\t[\"m\"] = \"m\",\n\t\
    \t[\"n\"] = \"n\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"t\"] = \"t\",\n\t\t[\"k\"] =\
    \ \"k\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"v\"] = \"v\",\n\t\t[\"w\"] = \"w\",\n\t\
    \t[\"x\"] = \"x\",\n\t\t[\"z\"] = \"z\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"d\"] =\
    \ \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"c\"] = \"c\",\n\t\
    \t[\"m\"] = \"m\",\n\t\t[\"n\"] = \"n\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"t\"] =\
    \ \"t\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"v\"] = \"v\",\n\t\
    \t[\"w\"] = \"w\",\n\t\t[\"x\"] = \"x\",\n\t\t[\"z\"] = \"z\",\n\t\t[\"s\"] =\
    \ \"s\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"h\"] = \"h\",\n\t\
    \t[\"c\"] = \"c\",\n\t\t[\"m\"] = \"m\",\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0mgksedk.lua:94: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  local vowel_found = false\n  local vowel_start = nil\n\
    \  local vowel_end = nil\n  for i = 1, #word do\n    if word[i] == \"a\" or word[i]\
    \ == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n\
    \      table.insert(vowels, word[i])\n      if vowel_found == false then\n   \
    \     vowel_start = i\n        vowel_found = true\n      end\n    end\n  end\n\
    \  if vowel_found == false then\n    return \"\"\n  end\n  local vowel_length\
    \ = #vowels\n  for i = 1, #word do\n    if word[i] == vowels[vowel_length] then\n\
    \      vowel_length = vowel_length - 1\n      if vowel_length == 0 then\n    \
    \    vowel_end = i\n        break\n      end\n    end\n  end\n  if vowel_start\
    \ ~= nil and vowel_end ~= nil then\n    return word[vowel_start + 1]\n  end\n\
    \  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpay_5c19s.lua:47:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpay_5c19s.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"A\"] = \"a\",\n        [\"E\"] = \"e\",\n\
    \        [\"I\"] = \"i\",\n        [\"O\"] = \"o\",\n        [\"U\"] = \"u\",\n\
    \        [\"Y\"] = \"y\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_count_with_vowels = #vowels + 1\n    local vowels_count_with_consonants\
    \ = #vowels_count + 1\n    local vowels_count_with_consonants_with_vowels = #vowels_count_with_consonants\
    \ + 1\n    local vowels_count_with_consonants_with_consonants = #vowels_count_with_consonants_with_vowels\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_vowels = #vowels_count_with_consonants_with_consonants\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants\
    \ = #vowels_count_with_consonants_with_consonants_with_vowels + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants_with_vowels\
    \ = #vowels_count_with_consonants_with_consonants_with_consonants + 1\n    local\
    \ vowels_count_with_consonants_with_consonants_with_consonants_with_consonants\
    \ = #vowels_count_with_consonants_with_consonants_with_consonants_with_vowels\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_vowels\
    \ = #vowels_count_with_consonants_with_consonants_with_consonants_with_consonants\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_consonants\
    \ = #vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_vowels\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_consonants_with_vowels\
    \ = #vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_consonants\
    \ + 1\n    local vowels_count_with_consonants_with_consonants_with_consonants_with_consonants_with_consonants_with_consonants\
    \ = #vowels_count_with_consonants_with_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt1ul0e7y.lua:58: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"}\n\tlocal vowels_count = #vowels\n\tlocal vowel_index = #word\n\
    \tlocal vowel_found = false\n\tlocal vowel_found_index = -1\n\tlocal vowel_found_count\
    \ = 1\n\tlocal vowel_found_direction = -1\n\tlocal vowel_found_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction = -1\n\tlocal vowel_found_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction = -1\n\tlocal vowel_found_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction = -1\n\tlocal\
    \ vowel_found_direction_direction_direction_direction_count = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_count\
    \ = 1\n\tlocal vowel_found_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction_direction\
    \ = -1\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps3m2qf6o.lua:61: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_found_index = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb0mzui59.lua:76: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowel_index = 1\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = 0\n\tlocal vowel_found_index2 = 0\n\tlocal vowel_found_index3 = 0\n\tlocal\
    \ vowel_found_index4 = 0\n\tlocal vowel_found_index5 = 0\n\tlocal vowel_found_index6\
    \ = 0\n\tlocal vowel_found_index7 = 0\n\tlocal vowel_found_index8 = 0\n\tlocal\
    \ vowel_found_index9 = 0\n\tlocal vowel_found_index10 = 0\n\tlocal vowel_found_index11\
    \ = 0\n\tlocal vowel_found_index12 = 0\n\tlocal vowel_found_index13 = 0\n\tlocal\
    \ vowel_found_index14 = 0\n\tlocal vowel_found_index15 = 0\n\tlocal vowel_found_index16\
    \ = 0\n\tlocal vowel_found_index17 = 0\n\tlocal vowel_found_index18 = 0\n\tlocal\
    \ vowel_found_index19 = 0\n\tlocal vowel_found_index20 = 0\n\tlocal vowel_found_index21\
    \ = 0\n\tlocal vowel_found_index22 = 0\n\tlocal vowel_found_index23 = 0\n\tlocal\
    \ vowel_found_index24 = 0\n\tlocal vowel_found_index25 = 0\n\tlocal vowel_found_index26\
    \ = 0\n\tlocal vowel_found_index27 = 0\n\tlocal vowel_found_index28 = 0\n\tlocal\
    \ vowel_found_index29 = 0\n\tlocal vowel_found_index30 = 0\n\tlocal vowel_found_index31\
    \ = 0\n\tlocal vowel_found_index32 = 0\n\tlocal vowel_found_index33 = 0\n\tlocal\
    \ vowel_found_index34 = 0\n\tlocal vowel_found_index35 = 0\n\tlocal vowel_found_index36\
    \ = 0\n\tlocal vowel_found_index37 = 0\n\tlocal vowel_found_index38 = 0\n\tlocal\
    \ vowel_found_index39 = 0\n\tlocal vowel_found_index40 = 0\n\tlocal vowel_found_index41\
    \ = 0\n\tlocal vowel_found_index42 = 0\n\tlocal vowel_found_index43 = 0\n\tlocal\
    \ vowel_found_index44 = 0\n\tlocal vowel_found_index45 = 0\n\tlocal vowel_found_index46\
    \ = 0\n\tlocal vowel_found_index47 = 0\n\tlocal vowel_found_index48 = 0\n\tlocal\
    \ vowel_found_index49 = 0\n\tlocal vowel_found_index50 = 0\n\tlocal vowel_found_index51\
    \ = 0\n\tlocal vowel_found_index52 = 0\n\tlocal vowel_found_index53 = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbv3dbfp.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count = 0\n\tlocal vowels_index_count_min_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min_index_count_min_index = 0\n\tlocal vowels_index_count_min_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_max_index_count = 0\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_count_max = #word\n\tlocal vowels_index_count_min_index_count_min_index_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_max_index = 0\n\t\
    local vowels_index_count_min_index_count_min_index_max_index_count = 0\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_min_index_max = #word\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_min_index_min_index = 0\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_min_index_max_index = 0\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_min_index_max_index_count = 0\n\
    \tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_max =\
    \ #word\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max\
    \ = #word\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_max\
    \ = #word\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_max_index\
    \ = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcca7o7gs.lua:65: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_2 = #vowels\n\tlocal vowels_count_3 = #vowels\n\
    \tlocal vowels_count_4 = #vowels\n\tlocal vowels_count_5 = #vowels\n\tlocal vowels_count_6\
    \ = #vowels\n\tlocal vowels_count_7 = #vowels\n\tlocal vowels_count_8 = #vowels\n\
    \tlocal vowels_count_9 = #vowels\n\tlocal vowels_count_10 = #vowels\n\tlocal vowels_count_11\
    \ = #vowels\n\tlocal vowels_count_12 = #vowels\n\tlocal vowels_count_13 = #vowels\n\
    \tlocal vowels_count_14 = #vowels\n\tlocal vowels_count_15 = #vowels\n\tlocal\
    \ vowels_count_16 = #vowels\n\tlocal vowels_count_17 = #vowels\n\tlocal vowels_count_18\
    \ = #vowels\n\tlocal vowels_count_19 = #vowels\n\tlocal vowels_count_20 = #vowels\n\
    \tlocal vowels_count_21 = #vowels\n\tlocal vowels_count_22 = #vowels\n\tlocal\
    \ vowels_count_23 = #vowels\n\tlocal vowels_count_24 = #vowels\n\tlocal vowels_count_25\
    \ = #vowels\n\tlocal vowels_count_26 = #vowels\n\tlocal vowels_count_27 = #vowels\n\
    \tlocal vowels_count_28 = #vowels\n\tlocal vowels_count_29 = #vowels\n\tlocal\
    \ vowels_count_30 = #vowels\n\tlocal vowels_count_31 = #vowels\n\tlocal vowels_count_32\
    \ = #vowels\n\tlocal vowels_count_33 = #vowels\n\tlocal vowels_count_34 = #vowels\n\
    \tlocal vowels_count_35 = #vowels\n\tlocal vowels_count_36 = #vowels\n\tlocal\
    \ vowels_count_37 = #vowels\n\tlocal vowels_count_38 = #vowels\n\tlocal vowels_count_39\
    \ = #vowels\n\tlocal vowels_count_40 = #vowels\n\t\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b3smzbx.lua:86: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance\
    \ = nil\n  for i = #word, 2, -1 do\n    if vowel_found == false then\n      if\
    \ word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\"\
    \ or word[i] == \"u\" then\n        vowel_start = i\n        vowel_found = true\n\
    \      end\n    end\n    if vowel_found == true then\n      if word[i] == \"a\"\
    \ or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"\
    u\" then\n        vowel_end = i\n        vowel_distance = i - vowel_start\n  \
    \    end\n    end\n  end\n  if vowel_start ~= nil and vowel_end ~= nil then\n\
    \    local vowel_distance = vowel_end - vowel_start\n    if vowel_distance < 0\
    \ then\n      vowel_distance = vowel_distance * -1\n    end\n    local vowel_found\
    \ = false\n    for i = 1, #vowels do\n      if vowel_distance < vowels[i] then\n\
    \        vowel_found = true\n        break\n      end\n    end\n    if vowel_found\
    \ == true then\n      return vowels[vowel_start]\n    end\n  end\n  return \"\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59x_t7tu.lua:59:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp59x_t7tu.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count = 0\n    local vowels_index_count_max_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcfk28byg.lua:60: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_found_index = -1\n    local vowel_found_index2 = -1\n    local\
    \ vowel_found_index3 = -1\n    local vowel_found_index4 = -1\n    local vowel_found_index5\
    \ = -1\n    local vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n\
    \    local vowel_found_index8 = -1\n    local vowel_found_index9 = -1\n    local\
    \ vowel_found_index10 = -1\n    local vowel_found_index11 = -1\n    local vowel_found_index12\
    \ = -1\n    local vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n\
    \    local vowel_found_index15 = -1\n    local vowel_found_index16 = -1\n    local\
    \ vowel_found_index17 = -1\n    local vowel_found_index18 = -1\n    local vowel_found_index19\
    \ = -1\n    local vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n\
    \    local vowel_found_index22 = -1\n    local vowel_found_index23 = -1\n    local\
    \ vowel_found_index24 = -1\n    local vowel_found_index25 = -1\n    local vowel_found_index26\
    \ = -1\n    local vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n\
    \    local vowel_found_index29 = -1\n    local vowel_found_index30 = -1\n    local\
    \ vowel_found_index31 = -1\n    local vowel_found_index32 = -1\n    local vowel_found_index33\
    \ = -1\n    local vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n\
    \    local vowel_found_index36 = -1\n    local vowel_found_index37 = -1\n    local\
    \ vowel_found_index38 = -1\n    local vowel_found_index39 = -1\n    local vowel_found_index40\
    \ = -1\n    local vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n\
    \    local vowel_found_index43 = -1\n    local vowel_found_index44 = -1\n    local\
    \ vowel_found_index45 = -1\n    local vowel_found_index46 = -1\n    local vowel_found_index47\
    \ = -1\n    local vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n\
    \    local vowel_found_index50 = -1\n    local vowel_found_index51 = -1\n    local\
    \ vowel_found_index52 = -1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2bf52ax.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index = 0\n\
    \tlocal vowels_index_count_max_index_count = 0\n\tlocal vowels_index_count_max_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_index_count_min = 0\n\tlocal vowels_index_count_max_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index = 0\n\tlocal vowels_index_count_max_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count_max = #word\n\
    \tlocal vowels_index_count_max_index_count_max_index_min = 0\n\tlocal vowels_index_count_max_index_count_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index = 0\n\t\
    local vowels_index_count_max_index_count_max_index_max_index_count = 0\n\tlocal\
    \ vowels_index_count_max_index_count_max_index_max_index_min = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ogqc0ps.lua:65: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_found60 = false\n\tlocal \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7fnf4ih.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_minus_1 = vowels_count - 1\n    local vowels_index_count_minus_2\
    \ = vowels_count - 2\n    local vowels_index_count_minus_3 = vowels_count - 3\n\
    \    local vowels_index_count_minus_4 = vowels_count - 4\n    local vowels_index_count_minus_5\
    \ = vowels_count - 5\n    local vowels_index_count_minus_6 = vowels_count - 6\n\
    \    local vowels_index_count_minus_7 = vowels_count - 7\n    local vowels_index_count_minus_8\
    \ = vowels_count - 8\n    local vowels_index_count_minus_9 = vowels_count - 9\n\
    \    local vowels_index_count_minus_10 = vowels_count - 10\n    local vowels_index_count_minus_11\
    \ = vowels_count - 11\n    local vowels_index_count_minus_12 = vowels_count -\
    \ 12\n    local vowels_index_count_minus_13 = vowels_count - 13\n    local vowels_index_count_minus_14\
    \ = vowels_count - 14\n    local vowels_index_count_minus_15 = vowels_count -\
    \ 15\n    local vowels_index_count_minus_16 = vowels_count - 16\n    local vowels_index_count_minus_17\
    \ = vowels_count - 17\n    local vowels_index_count_minus_18 = vowels_count -\
    \ 18\n    local vowels_index_count_minus_19 = vowels_count - 19\n    local vowels_index_count_minus_20\
    \ = vowels_count - 20\n    local vowels_index_count_minus_21 = vowels_count -\
    \ 21\n    local vowels_index_count_minus_22 = vowels_count - 22\n    local vowels_index_count_minus_23\
    \ = vowels_count - 23\n    local vowels_index_count_minus_24 = vowels_count -\
    \ 24\n    local vowels_index_count_minus_25 = vowels_count - 25\n    local vowels_index_count_minus_26\
    \ = vowels_count - 26\n    local vowels_index_count_minus_27 = vowels_count -\
    \ 27\n    local vowels_index_count_minus_28 = vowels_count - 28\n    local vowels_index_count_minus_29\
    \ = vowels_count - 29\n    local vowels_index_count_minus_30 = vowels_count -\
    \ 30\n    local vowels_index_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpne8rqp1p.lua:66: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpvrt_h_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk5tx2h1v.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, #word do\n    local vowel\
    \ = word:sub(i,i)\n    vowels_index[vowel] = true\n  end\n  local vowels_index_count\
    \ = #vowels_index\n  local vowels_index_sorted = {}\n  for i = 1, vowels_index_count\
    \ do\n    table.insert(vowels_index_sorted, i)\n  end\n  table.sort(vowels_index_sorted)\n\
    \  local vowels_index_sorted_count = #vowels_index_sorted\n  local vowels_index_sorted_index\
    \ = 1\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowels_index_sorted_value = nil\n  local vowels_index_sorted_value\
    \ = nil\n  local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptqt6e4lt.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"}\n\tlocal vowels_count = #vowels\n\tlocal vowel_index = #word\n\
    \tlocal vowel_found = false\n\tlocal vowel_found_index = -1\n\tlocal vowel_found_index2\
    \ = -1\n\tlocal vowel_found_index3 = -1\n\tlocal vowel_found_index4 = -1\n\tlocal\
    \ vowel_found_index5 = -1\n\tlocal vowel_found_index6 = -1\n\tlocal vowel_found_index7\
    \ = -1\n\tlocal vowel_found_index8 = -1\n\tlocal vowel_found_index9 = -1\n\tlocal\
    \ vowel_found_index10 = -1\n\tlocal vowel_found_index11 = -1\n\tlocal vowel_found_index12\
    \ = -1\n\tlocal vowel_found_index13 = -1\n\tlocal vowel_found_index14 = -1\n\t\
    local vowel_found_index15 = -1\n\tlocal vowel_found_index16 = -1\n\tlocal vowel_found_index17\
    \ = -1\n\tlocal vowel_found_index18 = -1\n\tlocal vowel_found_index19 = -1\n\t\
    local vowel_found_index20 = -1\n\tlocal vowel_found_index21 = -1\n\tlocal vowel_found_index22\
    \ = -1\n\tlocal vowel_found_index23 = -1\n\tlocal vowel_found_index24 = -1\n\t\
    local vowel_found_index25 = -1\n\tlocal vowel_found_index26 = -1\n\tlocal vowel_found_index27\
    \ = -1\n\tlocal vowel_found_index28 = -1\n\tlocal vowel_found_index29 = -1\n\t\
    local vowel_found_index30 = -1\n\tlocal vowel_found_index31 = -1\n\tlocal vowel_found_index32\
    \ = -1\n\tlocal vowel_found_index33 = -1\n\tlocal vowel_found_index34 = -1\n\t\
    local vowel_found_index35 = -1\n\tlocal vowel_found_index36 = -1\n\tlocal vowel_found_index37\
    \ = -1\n\tlocal vowel_found_index38 = -1\n\tlocal vowel_found_index39 = -1\n\t\
    local vowel_found_index40 = -1\n\tlocal vowel_found_index41 = -1\n\tlocal vowel_found_index42\
    \ = -1\n\tlocal vowel_found_index43 = -1\n\tlocal vowel_found_index44 = -1\n\t\
    local vowel_found_index45 = -1\n\tlocal vowel_found_index46 = -1\n\tlocal vowel_found_index47\
    \ = -1\n\tlocal vowel_found_index48 = -1\n\tlocal vowel_found_index49 = -1\n\t\
    local vowel_found_index50 = -1\n\tlocal vowel_found_index51 = -1\n\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqe0hc_d.lua:87: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_index_count = #vowels_index\n    local vowels_index_count2\
    \ = {}\n    for i = 1, vowels_index_count do\n        table.insert(vowels_index_count2,\
    \ i)\n    end\n    local vowels_index_count3 = {}\n    for i = 1, vowels_index_count2\
    \ do\n        table.insert(vowels_index_count3, i)\n    end\n    local vowels_index_count4\
    \ = {}\n    for i = 1, vowels_index_count3 do\n        table.insert(vowels_index_count4,\
    \ i)\n    end\n    local vowels_index_count5 = {}\n    for i = 1, vowels_index_count4\
    \ do\n        table.insert(vowels_index_count5, i)\n    end\n    local vowels_index_count6\
    \ = {}\n    for i = 1, vowels_index_count5 do\n        table.insert(vowels_index_count6,\
    \ i)\n    end\n    local vowels_index_count7 = {}\n    for i = 1, vowels_index_count6\
    \ do\n        table.insert(vowels_index_count7, i)\n    end\n    local vowels_index_count8\
    \ = {}\n    for i = 1, vowels_index_count7 do\n        table.insert(vowels_index_count8,\
    \ i)\n    end\n    local vowels_index_count9 = {}\n    for i = 1, vowels_index_count8\
    \ do\n        table.insert(vowels_index_count9, i)\n    end\n    local vowels_index_count10\
    \ = {}\n    for i = 1, vowels_index_count9 do\n        table.insert(vowels_index_count10,\
    \ i)\n    end\n    local vowels_index_count11 = {}\n    for i = 1, vowels_index_count10\
    \ do\n        table.insert(vowels_index_count11, i)\n    end\n    local vowels_index_count12\
    \ = {}\n    for i = 1, vowels_index_count11 do\n        table.insert(vowels_index_count12,\
    \ i)\n    end\n    local vowels_index_count13 = {}\n    for i = 1, vowels_index_count12\
    \ do\n        table.insert(vowels_index_count13, i)\n    end\n    local vowels_index_count14\
    \ = {}\n    for i = 1, vowels_index_count13 do\n        table.insert(vowels_index_count14,\
    \ i)\n    end\n    local vowels_index_count15 = {}\n    for i = 1, vowels_index_count14\
    \ do\n        table.insert(vowels_index_count15, i)\n    end\n    local vowels_index_count16\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkdxe5ap.lua:102: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi1wac4l_.lua:48: '')'' expected (to close ''('' at line 47)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance\
    \ = nil\n  for i = #word, 2, -1 do\n    if vowel_found == false then\n      vowel_start\
    \ = word:sub(1, i)\n      vowel_end = word:sub(i+1, #word)\n      vowel_distance\
    \ = #vowel_end - #vowel_start\n      if vowel_distance > 1 then\n        vowel_found\
    \ = true\n      end\n    end\n    if vowel_found == true then\n      local vowel\
    \ = vowels[vowel_start:sub(1, 1)]\n      if vowel:sub(1, 1) ~= word:sub(i, i)\
    \ then\n        vowel_found = false\n      end\n    end\n  end\n  if vowel_found\
    \ == false then\n    return \"\"\n  end\n  return vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83qwcllr.lua:34:\
    \ attempt to index a nil value (local 'vowel')\nstack traceback:\n\t/tmp/tmp83qwcllr.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmp83qwcllr.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfh4nwc_8.lua:86: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxw9ncqck.lua:76: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"iu\"] = \"iu\",\n        [\"ou\"] = \"ou\"\
    ,\n        [\"au\"] = \"au\",\n        [\"ei\"] = \"ei\",\n        [\"ai\"] =\
    \ \"ai\",\n        [\"oui\"] = \"oui\",\n        [\"aui\"] = \"aui\",\n      \
    \  [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"\
    ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"\
    aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"] = \"auiu\"\
    ,\n        [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"\
    ] = \"ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n  \
    \      [\"aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"\
    ] = \"auiu\",\n        [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n  \
    \      [\"ouau\"] = \"ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"\
    ] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n \
    \       [\"auiu\"] = \"auiu\",\n        [\"eau\"] = \"eau\",\n        [\"aiu\"\
    ] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n        [\"auu\"] = \"auu\",\n \
    \       [\"eiu\"] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouiu\"\
    ] = \"ouiu\",\n        [\"auiu\"] = \"auiu\",\n        [\"eau\"] = \"eau\",\n\
    \        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n        [\"auu\"\
    ] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n   \
    \     [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"] = \"auiu\",\n        [\"eau\"\
    ] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n \
    \       [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"aiu\"]\
    \ = \"aiu\",\n        \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_jatgx92.lua:75: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_found = false\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal\
    \ vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance\
    \ = nil\n\tlocal vowel_found_distance = nil\n\tlocal vowel_found_distance = nil\n\
    \tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4l3qtwp_.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowel_found = false\n    local vowel_found_index = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\n    local vowel_found_distance = nil\n    local vowel_found_distance\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7s_t_25d.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 = #word\n\tlocal\
    \ vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal vowels_index6\
    \ = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8 = #word\n\tlocal\
    \ vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal vowels_index11\
    \ = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13 = #word\n\t\
    local vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\tlocal vowels_index16\
    \ = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18 = #word\n\t\
    local vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\tlocal vowels_index21\
    \ = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23 = #word\n\t\
    local vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\tlocal vowels_index26\
    \ = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28 = #word\n\t\
    local vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\tlocal vowels_index31\
    \ = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33 = #word\n\t\
    local vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\tlocal vowels_index36\
    \ = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38 = #word\n\t\
    local vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\tlocal vowels_index41\
    \ = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43 = #word\n\t\
    local vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\tlocal vowels_index46\
    \ = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48 = #word\n\t\
    local vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\tlocal vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpak_7p3wr.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"}\n   local vowels_count\
    \ = #vowels\n   local vowels_index = 1\n   local vowels_index_count = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4zlv1cuk.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_found_index = -1\n    local vowel_found_index2 = -1\n    local\
    \ vowel_found2 = false\n    local vowel_found2_index = -1\n    local vowel_found2_index2\
    \ = -1\n    local vowel_found3 = false\n    local vowel_found3_index = -1\n  \
    \  local vowel_found3_index2 = -1\n    local vowel_found4 = false\n    local vowel_found4_index\
    \ = -1\n    local vowel_found4_index2 = -1\n    local vowel_found5 = false\n \
    \   local vowel_found5_index = -1\n    local vowel_found5_index2 = -1\n    local\
    \ vowel_found6 = false\n    local vowel_found6_index = -1\n    local vowel_found6_index2\
    \ = -1\n    local vowel_found7 = false\n    local vowel_found7_index = -1\n  \
    \  local vowel_found7_index2 = -1\n    local vowel_found8 = false\n    local vowel_found8_index\
    \ = -1\n    local vowel_found8_index2 = -1\n    local vowel_found9 = false\n \
    \   local vowel_found9_index = -1\n    local vowel_found9_index2 = -1\n    local\
    \ vowel_found10 = false\n    local vowel_found10_index = -1\n    local vowel_found10_index2\
    \ = -1\n    local vowel_found11 = false\n    local vowel_found11_index = -1\n\
    \    local vowel_found11_index2 = -1\n    local vowel_found12 = false\n    local\
    \ vowel_found12_index = -1\n    local vowel_found12_index2 = -1\n    local vowel_found13\
    \ = false\n    local vowel_found13_index = -1\n    local vowel_found13_index2\
    \ = -1\n    local vowel_found14 = false\n    local vowel_found14_index = -1\n\
    \    local vowel_found14_index2 = -1\n    local vowel_found15 = false\n    local\
    \ vowel_found15_index = -1\n    local vowel_found15_index2 = -1\n    local vowel_found16\
    \ = false\n    local vowel_found16_index = -1\n    local vowel_found16_index2\
    \ = -1\n    local vowel_found17 = false\n    local vowel_found17_index = -1\n\
    \    local vowel_found17_index2 = -1\n    local vowel_found18 = false\n    local\
    \ vowel_found18_index = -1\n    local vowel_found18_index2 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe7u_qq5h.lua:69: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"}\n   local vowels_count\
    \ = #vowels\n   local vowels_index = #word\n   local vowels_index2 = 0\n   local\
    \ vowels_index3 = 0\n   local vowels_index4 = 0\n   local vowels_index5 = 0\n\
    \   local vowels_index6 = 0\n   local vowels_index7 = 0\n   local vowels_index8\
    \ = 0\n   local vowels_index9 = 0\n   local vowels_index10 = 0\n   local vowels_index11\
    \ = 0\n   local vowels_index12 = 0\n   local vowels_index13 = 0\n   local vowels_index14\
    \ = 0\n   local vowels_index15 = 0\n   local vowels_index16 = 0\n   local vowels_index17\
    \ = 0\n   local vowels_index18 = 0\n   local vowels_index19 = 0\n   local vowels_index20\
    \ = 0\n   local vowels_index21 = 0\n   local vowels_index22 = 0\n   local vowels_index23\
    \ = 0\n   local vowels_index24 = 0\n   local vowels_index25 = 0\n   local vowels_index26\
    \ = 0\n   local vowels_index27 = 0\n   local vowels_index28 = 0\n   local vowels_index29\
    \ = 0\n   local vowels_index30 = 0\n   local vowels_index31 = 0\n   local vowels_index32\
    \ = 0\n   local vowels_index33 = 0\n   local vowels_index34 = 0\n   local vowels_index35\
    \ = 0\n   local vowels_index36 = 0\n   local vowels_index37 = 0\n   local vowels_index38\
    \ = 0\n   local vowels_index39 = 0\n   local vowels_index40 = 0\n   local vowels_index41\
    \ = 0\n   local vowels_index42 = 0\n   local vowels_index43 = 0\n   local vowels_index44\
    \ = 0\n   local vowels_index45 = 0\n   local vowels_index46 = 0\n   local vowels_index47\
    \ = 0\n   local vowels_index48 = 0\n   local vowels_index49 = 0\n   local vowels_index50\
    \ = 0\n   local vowels_index51 = 0\n   local vowels_index52 = 0\n   local vowels_index53\
    \ = 0\n   local vowels_index54 = 0\n   local vowels_index55 = 0\n   local vowels_index56\
    \ = 0\n   local vowels_index57 = 0\n   local vowels_index58 = 0\n   local vowels_index59\
    \ = 0\n   local vowels_index60 = 0\n   local vowels_index61\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf47p8okb.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_count_prev = 0\n\tlocal vowels_count_next = 0\n\tlocal vowels_count_prev2\
    \ = 0\n\tlocal vowels_count_next2 = 0\n\tlocal vowels_count_prev3 = 0\n\tlocal\
    \ vowels_count_next3 = 0\n\tlocal vowels_count_prev4 = 0\n\tlocal vowels_count_next4\
    \ = 0\n\tlocal vowels_count_prev5 = 0\n\tlocal vowels_count_next5 = 0\n\tlocal\
    \ vowels_count_prev6 = 0\n\tlocal vowels_count_next6 = 0\n\tlocal vowels_count_prev7\
    \ = 0\n\tlocal vowels_count_next7 = 0\n\tlocal vowels_count_prev8 = 0\n\tlocal\
    \ vowels_count_next8 = 0\n\tlocal vowels_count_prev9 = 0\n\tlocal vowels_count_next9\
    \ = 0\n\tlocal vowels_count_prev10 = 0\n\tlocal vowels_count_next10 = 0\n\tlocal\
    \ vowels_count_prev11 = 0\n\tlocal vowels_count_next11 = 0\n\tlocal vowels_count_prev12\
    \ = 0\n\tlocal vowels_count_next12 = 0\n\tlocal vowels_count_prev13 = 0\n\tlocal\
    \ vowels_count_next13 = 0\n\tlocal vowels_count_prev14 = 0\n\tlocal vowels_count_next14\
    \ = 0\n\tlocal vowels_count_prev15 = 0\n\tlocal vowels_count_next15 = 0\n\tlocal\
    \ vowels_count_prev16 = 0\n\tlocal vowels_count_next16 = 0\n\tlocal vowels_count_prev17\
    \ = 0\n\tlocal vowels_count_next17 = 0\n\tlocal vowels_count_prev18 = 0\n\tlocal\
    \ vowels_count_next18 = 0\n\tlocal vowels_count_prev19 = 0\n\tlocal vowels_count_next19\
    \ = 0\n\tlocal vowels_count_prev20 = 0\n\tlocal vowels_count_next20 = 0\n\tlocal\
    \ vowels_count_prev21 = 0\n\tlocal vowels_count_next21 = 0\n\tlocal vowels_count_prev22\
    \ = 0\n\tlocal vowels_count_next22 = 0\n\tlocal vowels_count_prev23 = 0\n\tlocal\
    \ vowels_count_next23 = 0\n\tlocal vowels_count_prev24 = 0\n\tlocal vowels_count_next24\
    \ = 0\n\tlocal vowels_count_prev25 = 0\n\tlocal vowels_count_next25 = 0\n\tlocal\
    \ vowels_count_prev26 = 0\n\tlocal vowels_count_next26 = 0\n\tlocal vowels_count_prev27\
    \ = 0\n\tlocal vowels_count_next27 = 0\n\tlocal vowels_count_prev28\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprjiul4c4.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = { 'a', 'e', 'i', 'o', 'u' }\n   local vowels_count = #vowels\n\
    \   local vowels_index = 0\n   local vowels_index_count = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe_8ivfah.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowel_count\
    \ = {}\n    for i = 1, #word do\n        local vowel = word:sub(i,i)\n       \
    \ if vowel:sub(1,1) ~= vowel then\n            vowel_count[vowel] = vowel_count[vowel]\
    \ + 1\n        end\n    end\n    local vowel_count_sorted = {}\n    for vowel,\
    \ count in pairs(vowel_count) do\n        vowel_count_sorted[count] = vowel\n\
    \    end\n    local vowel_count_sorted_sorted = {}\n    for count, vowel in pairs(vowel_count_sorted)\
    \ do\n        vowel_count_sorted_sorted[vowel] = count\n    end\n    local vowel_count_sorted_sorted_reversed\
    \ = {}\n    for vowel, count in pairs(vowel_count_sorted_sorted) do\n        vowel_count_sorted_sorted_reversed[count]\
    \ = vowel\n    end\n    local vowel_count_sorted_sorted_reversed_sorted = {}\n\
    \    for count, vowel in pairs(vowel_count_sorted_sorted_reversed) do\n      \
    \  vowel_count_sorted_sorted_reversed_sorted[vowel] = count\n    end\n    local\
    \ vowel_count_sorted_sorted_reversed_sorted_reversed = {}\n    for count, vowel\
    \ in pairs(vowel_count_sorted_sorted_reversed_sorted) do\n        vowel_count_sorted_sorted_reversed_sorted_reversed[count]\
    \ = vowel\n    end\n    local vowel_count_sorted_sorted_reversed_sorted_reversed_sorted\
    \ = {}\n    for count, vowel in pairs(vowel_count_sorted_sorted_reversed_sorted_reversed)\
    \ do\n        vowel_count_sorted_sorted_reversed_sorted_reversed_sorted[vowel]\
    \ = count\n    end\n    local vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = {}\n    for count, vowel in pairs(vowel_count_sorted_sorted_reversed_sorted_reversed_sorted)\
    \ do\n        vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed[vowel]\
    \ = count\n    end\n    local vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted\
    \ = {}\n    for count, vowel in pairs(vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed)\
    \ do\n        vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted[vowel]\
    \ = count\n    end\n    local vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = {}\n    for count, vowel in pairs(vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted)\
    \ do\n        vowel_count_sorted_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed[vowel]\
    \ = count\n    end\n    local vowel_count_sorted_sorted_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvp_jxdty.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpvrt_h_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqhb_u6jl.lua:85: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max = 0\n\t\
    local vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index = 0\n\t\
    local vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index =\
    \ 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9uazg86g.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_minus_one\
    \ = #vowels - 1\n  local vowels_index_count_minus_two = #vowels - 2\n  local vowels_index_count_minus_three\
    \ = #vowels - 3\n  local vowels_index_count_minus_four = #vowels - 4\n  local\
    \ vowels_index_count_minus_five = #vowels - 5\n  local vowels_index_count_minus_six\
    \ = #vowels - 6\n  local vowels_index_count_minus_seven = #vowels - 7\n  local\
    \ vowels_index_count_minus_eight = #vowels - 8\n  local vowels_index_count_minus_nine\
    \ = #vowels - 9\n  local vowels_index_count_minus_ten = #vowels - 10\n  local\
    \ vowels_index_count_minus_eleven = #vowels - 11\n  local vowels_index_count_minus_twelve\
    \ = #vowels - 12\n  local vowels_index_count_minus_thirteen = #vowels - 13\n \
    \ local vowels_index_count_minus_fourteen = #vowels - 14\n  local vowels_index_count_minus_fifteen\
    \ = #vowels - 15\n  local vowels_index_count_minus_sixteen = #vowels - 16\n  local\
    \ vowels_index_count_minus_seventeen = #vowels - 17\n  local vowels_index_count_minus_eighteen\
    \ = #vowels - 18\n  local vowels_index_count_minus_nineteen = #vowels - 19\n \
    \ local vowels_index_count_minus_twenty = #vowels - 20\n  local vowels_index_count_minus_twenty_one\
    \ = #vowels - 21\n  local vowels_index_count_minus_twenty_two = #vowels - 22\n\
    \  local vowels_index_count_minus_twenty_three = #vowels - 23\n  local vowels_index_count_minus_twenty_four\
    \ = #vowels - 24\n  local vowels_index_count_minus_twenty_five = #vowels - 25\n\
    \  local vowels_index_count_minus_twenty_six = #vowels - 26\n  local vowels_index_count_minus_twenty_seven\
    \ = #vowels - 27\n  local vowels_index_count_minus_twenty_eight = #vowels - 28\n\
    \  local vowels_index_count_minus_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp55xlvzmt.lua:64: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_2 = #vowels\n\tlocal vowels_count_3 = #vowels\n\
    \tlocal vowels_count_4 = #vowels\n\tlocal vowels_count_5 = #vowels\n\tlocal vowels_count_6\
    \ = #vowels\n\tlocal vowels_count_7 = #vowels\n\tlocal vowels_count_8 = #vowels\n\
    \tlocal vowels_count_9 = #vowels\n\tlocal vowels_count_10 = #vowels\n\tlocal vowels_count_11\
    \ = #vowels\n\tlocal vowels_count_12 = #vowels\n\tlocal vowels_count_13 = #vowels\n\
    \tlocal vowels_count_14 = #vowels\n\tlocal vowels_count_15 = #vowels\n\tlocal\
    \ vowels_count_16 = #vowels\n\tlocal vowels_count_17 = #vowels\n\tlocal vowels_count_18\
    \ = #vowels\n\tlocal vowels_count_19 = #vowels\n\tlocal vowels_count_20 = #vowels\n\
    \tlocal vowels_count_21 = #vowels\n\tlocal vowels_count_22 = #vowels\n\tlocal\
    \ vowels_count_23 = #vowels\n\tlocal vowels_count_24 = #vowels\n\tlocal vowels_count_25\
    \ = #vowels\n\tlocal vowels_count_26 = #vowels\n\tlocal vowels_count_27 = #vowels\n\
    \tlocal vowels_count_28 = #vowels\n\tlocal vowels_count_29 = #vowels\n\tlocal\
    \ vowels_count_30 = #vowels\n\tlocal vowels_count_31 = #vowels\n\tlocal vowels_count_32\
    \ = #vowels\n\tlocal vowels_count_33 = #vowels\n\tlocal vowels_count_34 = #vowels\n\
    \tlocal vowels_count_35 = #vowels\n\tlocal vowels_count_36 = #vowels\n\tlocal\
    \ vowels_count_37 = #vowels\n\tlocal vowels_count_38 = #vowels\n\tlocal vowels_count_39\
    \ = #vowels\n\tlocal vowels_count_40 = #vowels\n\t\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4b3smzbx.lua:86: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = 1\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp82xlacz4.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = -1\n  local vowels_index_min_index\
    \ = -1\n  local vowels_index_max_vowel = -1\n  local vowels_index_min_vowel =\
    \ -1\n  local vowels_index_max_vowel_pos = -1\n  local vowels_index_min_vowel_pos\
    \ = -1\n  local vowels_index_max_vowel_pos_index = -1\n  local vowels_index_min_vowel_pos_index\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel = -1\n  local vowels_index_min_vowel_pos_vowel\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_index = -1\n  local vowels_index_min_vowel_pos_vowel_index\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel = -1\n  local vowels_index_min_vowel_pos_vowel_vowel\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_index = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_index\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_vowel = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_vowel\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_vowel_index = -1\n  local\
    \ vowels_index_min_vowel_pos_vowel_vowel_vowel_index = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_vowel_vowel\
    \ = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_vowel_vowel = -1\n  local\
    \ vowels_index_max_vowel_pos_vowel_vowel_vowel_vowel_index = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_vowel_vowel_index\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_vowel_vowel_vowel = -1\n\
    \  local vowels_index_min_vowel_pos_vowel_vowel_vowel_vowel_index = -1\n  local\
    \ vowels_index_max_vowel_pos_vowel_vowel_vowel_vowel_vowel = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_vowel_vowel_vowel\
    \ = -1\n  local vowels_index_max_vowel_pos_vowel_vowel_vowel_vowel_vowel_index\
    \ = -1\n  local vowels_index_min_vowel_pos_vowel_vowel_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuo1wj8n3.lua:69: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" \n   \
    \ }\n    local vowels_count = #vowels\n    local vowels_index = #word\n    local\
    \ vowels_index2 = #word\n    local vowels_index3 = #word\n    local vowels_index4\
    \ = #word\n    local vowels_index5 = #word\n    local vowels_index6 = #word\n\
    \    local vowels_index7 = #word\n    local vowels_index8 = #word\n    local vowels_index9\
    \ = #word\n    local vowels_index10 = #word\n    local vowels_index11 = #word\n\
    \    local vowels_index12 = #word\n    local vowels_index13 = #word\n    local\
    \ vowels_index14 = #word\n    local vowels_index15 = #word\n    local vowels_index16\
    \ = #word\n    local vowels_index17 = #word\n    local vowels_index18 = #word\n\
    \    local vowels_index19 = #word\n    local vowels_index20 = #word\n    local\
    \ vowels_index21 = #word\n    local vowels_index22 = #word\n    local vowels_index23\
    \ = #word\n    local vowels_index24 = #word\n    local vowels_index25 = #word\n\
    \    local vowels_index26 = #word\n    local vowels_index27 = #word\n    local\
    \ vowels_index28 = #word\n    local vowels_index29 = #word\n    local vowels_index30\
    \ = #word\n    local vowels_index31 = #word\n    local vowels_index32 = #word\n\
    \    local vowels_index33 = #word\n    local vowels_index34 = #word\n    local\
    \ vowels_index35 = #word\n    local vowels_index36 = #word\n    local vowels_index37\
    \ = #word\n    local vowels_index38 = #word\n    local vowels_index39 = #word\n\
    \    local vowels_index40 = #word\n    local vowels_index41 = #word\n    local\
    \ vowels_index42 = #word\n    local vowels_index43 = #word\n    local vowels_index44\
    \ = #word\n    local vowels_index45 = #word\n    local vowels_index46 = #word\n\
    \    local vowels_index47 = #word\n    local vowels_index48 = #word\n    local\
    \ vowels_index49 = #word\n    local vowels_index50 = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4lcjdq4e.lua:66: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"}\n\tlocal vowels_count =\
    \ #vowels\n\tlocal vowel_index = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = -1\n\tlocal vowel_found_index2 = -1\n\tlocal vowel_found_index3 = -1\n\tlocal\
    \ vowel_found_index4 = -1\n\tlocal vowel_found_index5 = -1\n\tlocal vowel_found_index6\
    \ = -1\n\tlocal vowel_found_index7 = -1\n\tlocal vowel_found_index8 = -1\n\tlocal\
    \ vowel_found_index9 = -1\n\tlocal vowel_found_index10 = -1\n\tlocal vowel_found_index11\
    \ = -1\n\tlocal vowel_found_index12 = -1\n\tlocal vowel_found_index13 = -1\n\t\
    local vowel_found_index14 = -1\n\tlocal vowel_found_index15 = -1\n\tlocal vowel_found_index16\
    \ = -1\n\tlocal vowel_found_index17 = -1\n\tlocal vowel_found_index18 = -1\n\t\
    local vowel_found_index19 = -1\n\tlocal vowel_found_index20 = -1\n\tlocal vowel_found_index21\
    \ = -1\n\tlocal vowel_found_index22 = -1\n\tlocal vowel_found_index23 = -1\n\t\
    local vowel_found_index24 = -1\n\tlocal vowel_found_index25 = -1\n\tlocal vowel_found_index26\
    \ = -1\n\tlocal vowel_found_index27 = -1\n\tlocal vowel_found_index28 = -1\n\t\
    local vowel_found_index29 = -1\n\tlocal vowel_found_index30 = -1\n\tlocal vowel_found_index31\
    \ = -1\n\tlocal vowel_found_index32 = -1\n\tlocal vowel_found_index33 = -1\n\t\
    local vowel_found_index34 = -1\n\tlocal vowel_found_index35 = -1\n\tlocal vowel_found_index36\
    \ = -1\n\tlocal vowel_found_index37 = -1\n\tlocal vowel_found_index38 = -1\n\t\
    local vowel_found_index39 = -1\n\tlocal vowel_found_index40 = -1\n\tlocal vowel_found_index41\
    \ = -1\n\tlocal vowel_found_index42 = -1\n\tlocal vowel_found_index43 = -1\n\t\
    local vowel_found_index44 = -1\n\tlocal vowel_found_index45 = -1\n\tlocal vowel_found_index46\
    \ = -1\n\tlocal vowel_found_index47 = -1\n\tlocal vowel_found_index48 = -1\n\t\
    local vowel_found_index49 = -1\n\tlocal vowel_found_index50 = -1\n\tlocal vowel_found_index51\
    \ = -1\n\tlocal vowel_found_index5\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1c4uf5xp.lua:87: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowel_index\
    \ = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index = nil\n\tlocal\
    \ vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2df14s_.lua:76: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"E\",\"I\",\"O\",\"U\"\
    }\n  local vowels_count = #vowels\n  local vowels_index = 1\n  local vowels_index_count\
    \ = 1\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_max\
    \ = #word\n  local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4kcn2mt.lua:82: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowel_found = false\n    local vowel_start =\
    \ nil\n    local vowel_end = nil\n    local vowel_start_index = nil\n    local\
    \ vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpepvthp32.lua:99: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"iu\"] = \"iu\",\n\t\t[\"ou\"] = \"ou\",\n\t\t[\"au\"] = \"au\",\n\t\t[\"\
    ei\"] = \"ei\",\n\t\t[\"ai\"] = \"ai\",\n\t\t[\"oui\"] = \"oui\",\n\t\t[\"aui\"\
    ] = \"aui\",\n\t\t[\"oi\"] = \"oi\",\n\t\t[\"aii\"] = \"aii\",\n\t\t[\"eii\"]\
    \ = \"eii\",\n\t\t[\"aiii\"] = \"aiii\",\n\t\t[\"ouii\"] = \"ouii\",\n\t\t[\"\
    auii\"] = \"auii\",\n\t\t[\"oii\"] = \"oii\",\n\t\t[\"aiiii\"] = \"aiiii\",\n\t\
    \t[\"eiii\"] = \"eiii\",\n\t\t[\"aiiii\"] = \"aiiii\",\n\t\t[\"ouiii\"] = \"ouiii\"\
    ,\n\t\t[\"auiii\"] = \"auiii\",\n\t\t[\"oiii\"] = \"oiii\",\n\t\t[\"aiiiii\"]\
    \ = \"aiiiii\",\n\t\t[\"eiiii\"] = \"eiiii\",\n\t\t[\"aiiiii\"] = \"aiiiii\",\n\
    \t\t[\"ouiiii\"] = \"ouiiii\",\n\t\t[\"auiiii\"] = \"auiiii\",\n\t\t[\"oiiii\"\
    ] = \"oiiii\",\n\t\t[\"aiiiiii\"] = \"aiiiiii\",\n\t\t[\"eiiiii\"] = \"eiiiii\"\
    ,\n\t\t[\"aiiiiii\"] = \"aiiiiii\",\n\t\t[\"ouiiiii\"] = \"ouiiiii\",\n\t\t[\"\
    auiiiii\"] = \"auiiiii\",\n\t\t[\"oiiiii\"] = \"oiiiii\",\n\t\t[\"aiiiiiii\"]\
    \ = \"aiiiiiii\",\n\t\t[\"eiiiiii\"] = \"eiiiiii\",\n\t\t[\"aiiiiiii\"] = \"aiiiiiii\"\
    ,\n\t\t[\"ouiiiiii\"] = \"ouiiiiii\",\n\t\t[\"auiiiiii\"] = \"auiiiiii\",\n\t\t\
    [\"oiiiiii\"] = \"oiiiiii\",\n\t\t[\"aiiiiiiii\"] = \"aiiiiiiii\",\n\t\t[\"eiiiiiii\"\
    ] = \"eiiiiiii\",\n\t\t[\"aiiiiiiii\"] = \"aiiiiiiii\",\n\t\t[\"ouiiiiiii\"] =\
    \ \"ouiiiiiii\",\n\t\t[\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatbxj5xz.lua:61: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_max_min = #vowels\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count = 0\n    local vowels_index_count_max_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index = 0\n\
    \    local vowels_index_count_max_min_index_count_min_index_count = 0\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min = #vowels\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_max_min_index_count_min_index_count_min_index_count = 0\n\
    \    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5xkln412.lua:59: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count2 = 0\n    local vowels_index_count3 = 0\n    local\
    \ vowels_index_count4 = 0\n    local vowels_index_count5 = 0\n    local vowels_index_count6\
    \ = 0\n    local vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n\
    \    local vowels_index_count9 = 0\n    local vowels_index_count10 = 0\n    local\
    \ vowels_index_count11 = 0\n    local vowels_index_count12 = 0\n    local vowels_index_count13\
    \ = 0\n    local vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n\
    \    local vowels_index_count16 = 0\n    local vowels_index_count17 = 0\n    local\
    \ vowels_index_count18 = 0\n    local vowels_index_count19 = 0\n    local vowels_index_count20\
    \ = 0\n    local vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n\
    \    local vowels_index_count23 = 0\n    local vowels_index_count24 = 0\n    local\
    \ vowels_index_count25 = 0\n    local vowels_index_count26 = 0\n    local vowels_index_count27\
    \ = 0\n    local vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n\
    \    local vowels_index_count30 = 0\n    local vowels_index_count31 = 0\n    local\
    \ vowels_index_count32 = 0\n    local vowels_index_count33 = 0\n    local vowels_index_count34\
    \ = 0\n    local vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n\
    \    local vowels_index_count37 = 0\n    local vowels_index_count38 = 0\n    local\
    \ vowels_index_count39 = 0\n    local vowels_index_count40 = 0\n    local vowels_index_count41\
    \ = 0\n    local vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n\
    \    local vowels_index_count44 = 0\n    local vowels_index_count45 = 0\n    local\
    \ vowels_index_count46 = 0\n    local vowels_index_count47 = 0\n    local vowels_index_count48\
    \ = 0\n    local vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n\
    \    local vowels_index_count51 = 0\n    local vowels_index_count52 = 0\n    local\
    \ vowels_index_count53 = 0\n    local vowels_index_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphd5vuyqw.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowel_index = 1\n\tlocal vowel_found = false\n\tlocal vowel_start\
    \ = nil\n\tlocal vowel_end = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjq_hjy06.lua:104: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowel_index\
    \ = 1\n\tlocal vowel_found = false\n\tlocal vowel_start = nil\n\tlocal vowel_end\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeww65w09.lua:104: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tfor i = 1, #word do\n\t\tif word:sub(i,i) == \"a\" then\n\
    \t\t\ttable.insert(vowels, \"a\")\n\t\telseif word:sub(i,i) == \"e\" then\n\t\t\
    \ttable.insert(vowels, \"e\")\n\t\telseif word:sub(i,i) == \"i\" then\n\t\t\t\
    table.insert(vowels, \"i\")\n\t\telseif word:sub(i,i) == \"o\" then\n\t\t\ttable.insert(vowels,\
    \ \"o\")\n\t\telseif word:sub(i,i) == \"u\" then\n\t\t\ttable.insert(vowels, \"\
    u\")\n\t\telseif word:sub(i,i) == \"y\" then\n\t\t\ttable.insert(vowels, \"y\"\
    )\n\t\telseif word:sub(i,i) == \"r\" then\n\t\t\ttable.insert(vowels, \"r\")\n\
    \t\telseif word:sub(i,i) == \"l\" then\n\t\t\ttable.insert(vowels, \"l\")\n\t\t\
    elseif word:sub(i,i) == \"s\" then\n\t\t\ttable.insert(vowels, \"s\")\n\t\telseif\
    \ word:sub(i,i) == \"d\" then\n\t\t\ttable.insert(vowels, \"d\")\n\t\telseif word:sub(i,i)\
    \ == \"c\" then\n\t\t\ttable.insert(vowels, \"c\")\n\t\telseif word:sub(i,i) ==\
    \ \"f\" then\n\t\t\ttable.insert(vowels, \"f\")\n\t\telseif word:sub(i,i) == \"\
    p\" then\n\t\t\ttable.insert(vowels, \"p\")\n\t\telseif word:sub(i,i) == \"m\"\
    \ then\n\t\t\ttable.insert(vowels, \"m\")\n\t\telseif word:sub(i,i) == \"t\" then\n\
    \t\t\ttable.insert(vowels, \"t\")\n\t\telseif word:sub(i,i) == \"g\" then\n\t\t\
    \ttable.insert(vowels, \"g\")\n\t\telseif word:sub(i,i) == \"b\" then\n\t\t\t\
    table.insert(vowels, \"b\")\n\t\telseif word:sub(i,i) == \"k\" then\n\t\t\ttable.insert(vowels,\
    \ \"k\")\n\t\telseif word:sub(i,i) == \"j\" then\n\t\t\ttable.insert(vowels, \"\
    j\")\n\t\telseif word:sub(i,i) == \"x\" then\n\t\t\ttable.insert(vowels, \"x\"\
    )\n\t\telseif word:sub(i,i) == \"z\" then\n\t\t\ttable.insert(vowels, \"z\")\n\
    \t\telseif word:sub(i,i) == \"w\" then\n\t\t\ttable.insert(vowels, \"w\")\n\t\t\
    elseif word:sub(i,i) == \"v\" then\n\t\t\ttable.insert(vowels, \"v\")\n\t\telseif\
    \ word:sub(i,i) == \"n\" then\n\t\t\ttable.insert(vowels, \"n\")\n\t\telseif word:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmkvyyiud.lua:63: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"iu\"] = \"iu\",\n        [\"ou\"] = \"ou\"\
    ,\n        [\"au\"] = \"au\",\n        [\"ei\"] = \"ei\",\n        [\"ai\"] =\
    \ \"ai\",\n        [\"oui\"] = \"oui\",\n        [\"aui\"] = \"aui\",\n      \
    \  [\"aii\"] = \"aii\",\n        [\"eii\"] = \"eii\",\n        [\"oii\"] = \"\
    oii\",\n        [\"auii\"] = \"auii\",\n        [\"oiu\"] = \"oiu\",\n       \
    \ [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\"\
    ,\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"\
    ] = \"oiu\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n   \
    \     [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] =\
    \ \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"auu\",\n     \
    \   [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"\
    auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"\
    auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n\
    \        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"\
    ] = \"oiu\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n   \
    \     [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] =\
    \ \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"auu\",\n     \
    \   [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"auu\"] = \"\
    auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n        [\"\
    auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"oiu\"] = \"oiu\",\n\
    \        [\"au\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd98joem7.lua:70: unfinished string near ''"au''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowels_count =\
    \ #vowels\n    local vowels_index = #word\n    local vowels_index2 = #word\n \
    \   local vowels_index3 = #word\n    local vowels_index4 = #word\n    local vowels_index5\
    \ = #word\n    local vowels_index6 = #word\n    local vowels_index7 = #word\n\
    \    local vowels_index8 = #word\n    local vowels_index9 = #word\n    local vowels_index10\
    \ = #word\n    local vowels_index11 = #word\n    local vowels_index12 = #word\n\
    \    local vowels_index13 = #word\n    local vowels_index14 = #word\n    local\
    \ vowels_index15 = #word\n    local vowels_index16 = #word\n    local vowels_index17\
    \ = #word\n    local vowels_index18 = #word\n    local vowels_index19 = #word\n\
    \    local vowels_index20 = #word\n    local vowels_index21 = #word\n    local\
    \ vowels_index22 = #word\n    local vowels_index23 = #word\n    local vowels_index24\
    \ = #word\n    local vowels_index25 = #word\n    local vowels_index26 = #word\n\
    \    local vowels_index27 = #word\n    local vowels_index28 = #word\n    local\
    \ vowels_index29 = #word\n    local vowels_index30 = #word\n    local vowels_index31\
    \ = #word\n    local vowels_index32 = #word\n    local vowels_index33 = #word\n\
    \    local vowels_index34 = #word\n    local vowels_index35 = #word\n    local\
    \ vowels_index36 = #word\n    local vowels_index37 = #word\n    local vowels_index38\
    \ = #word\n    local vowels_index39 = #word\n    local vowels_index40 = #word\n\
    \    local vowels_index41 = #word\n    local vowels_index42 = #word\n    local\
    \ vowels_index43 = #word\n    local vowels_index44 = #word\n    local vowels_index45\
    \ = #word\n    local vowels_index46 = #word\n    local vowels_index47 = #word\n\
    \    local vowels_index48 = #word\n    local vowels_index49 = #word\n    local\
    \ vowels_index50 = #word\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6qzjz1ju.lua:84: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_met_condition\
    \ = false\n  local vowel_met_count = 0\n  local vowel_met_index = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n\
    \  local vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local\
    \ vowel_met_index_count = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_count\
    \ = 0\n  local vowel_met_index_count = 0\n  local vowel_met_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyz7ckr3h.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n  local vowels_index_count_max = math.max(#word,vowels_count)\n\
    \  local vowels_index_count_min = math.min(#word,vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n  local vowels_index_count_min = math.min(#word,vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word,vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n  local vowels_index_count_max = math.max(#word,vowels_count)\n\
    \  local vowels_index_count_min = math.min(#word,vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n  local vowels_index_count_min = math.min(#word,vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word,vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n  local vowels_index_count_max = math.max(#word,vowels_count)\n\
    \  local vowels_index_count_min = math.min(#word,vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n  local vowels_index_count_min = math.min(#word,vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word,vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n  local vowels_index_count_max = math.max(#word,vowels_count)\n\
    \  local vowels_index_count_min = math.min(#word,vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n  local vowels_index_count_min = math.min(#word,vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word,vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word,vowels_count)\n  local vowels_index_count_max = math.max(#word,vowels_count)\n\
    \  local vowels_index_count_min = math.min(#word,vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word,vowels_count)\n  local vowels_index_count_min = math.min(#word,vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprruc81wp.lua:46: '')'' expected (to close ''('' at line 45)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"a\",\n    [\"E\"] = \"e\",\n    [\"I\"] = \"i\",\n    [\"O\"]\
    \ = \"o\",\n    [\"U\"] = \"u\",\n    [\"Y\"] = \"y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_count_with_consonants = #word - vowels_count\n  local\
    \ vowels_count_with_consonants_right = #word\n  local vowels_count_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right =\
    \ #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants\
    \ = #word\n  local vowels_count_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_consonants_right_with_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbmyplb0y.lua:60: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = 0\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = #vowels\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnzphdkr.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count = 0\n  local vowels_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index = 0\n  local vowels_index_count_min_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_max = 0\n  local\
    \ vowels_index_count_min_index_count_max_index_count_min = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n  local vowels_index_count_min_index_count_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw2_o0b11.lua:62: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n  local vowels_count = #vowels\n  local vowel_index = 1\n\
    \  local vowel_found = false\n  local vowel_found_index = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n\
    \  local vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local\
    \ vowel_found_distance = nil\n  local vowel_found_distance = nil\n  local vowel_found_distance\
    \ = nil\n  local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqxpc_1v3.lua:94: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"u\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"u\",\n\t\t[\"b\"] = \"b\",\n\t\
    \t[\"c\"] = \"c\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"g\"] =\
    \ \"g\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"j\"] = \"j\",\n\t\t[\"k\"] = \"k\",\n\t\
    \t[\"l\"] = \"l\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"n\"] = \"n\",\n\t\t[\"p\"] =\
    \ \"p\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"r\"] = \"r\",\n\t\t[\"s\"] = \"s\",\n\t\
    \t[\"t\"] = \"t\",\n\t\t[\"v\"] = \"v\",\n\t\t[\"w\"] = \"w\",\n\t\t[\"x\"] =\
    \ \"x\",\n\t\t[\"z\"] = \"z\",\n\t\t[\"B\"] = \"b\",\n\t\t[\"C\"] = \"c\",\n\t\
    \t[\"D\"] = \"d\",\n\t\t[\"F\"] = \"f\",\n\t\t[\"G\"] = \"g\",\n\t\t[\"H\"] =\
    \ \"h\",\n\t\t[\"J\"] = \"j\",\n\t\t[\"K\"] = \"k\",\n\t\t[\"L\"] = \"l\",\n\t\
    \t[\"M\"] = \"m\",\n\t\t[\"N\"] = \"n\",\n\t\t[\"P\"] = \"p\",\n\t\t[\"Q\"] =\
    \ \"q\",\n\t\t[\"R\"] = \"r\",\n\t\t[\"S\"] = \"s\",\n\t\t[\"T\"] = \"t\",\n\t\
    \t[\"V\"] = \"v\",\n\t\t[\"W\"] = \"w\",\n\t\t[\"X\"] = \"x\",\n\t\t[\"Z\"] =\
    \ \"z\",\n\t}\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal\
    \ vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\
    \tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd6fntmke.lua:109: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_min\
    \ = 0\n  local vowels_index_count_max_min_index = 0\n  local vowels_index_count_max_min_index2\
    \ = 0\n  local vowels_index_count_max_min_index3 = 0\n  local vowels_index_count_max_min_index4\
    \ = 0\n  local vowels_index_count_max_min_index5 = 0\n  local vowels_index_count_max_min_index6\
    \ = 0\n  local vowels_index_count_max_min_index7 = 0\n  local vowels_index_count_max_min_index8\
    \ = 0\n  local vowels_index_count_max_min_index9 = 0\n  local vowels_index_count_max_min_index10\
    \ = 0\n  local vowels_index_count_max_min_index11 = 0\n  local vowels_index_count_max_min_index12\
    \ = 0\n  local vowels_index_count_max_min_index13 = 0\n  local vowels_index_count_max_min_index14\
    \ = 0\n  local vowels_index_count_max_min_index15 = 0\n  local vowels_index_count_max_min_index16\
    \ = 0\n  local vowels_index_count_max_min_index17 = 0\n  local vowels_index_count_max_min_index18\
    \ = 0\n  local vowels_index_count_max_min_index19 = 0\n  local vowels_index_count_max_min_index20\
    \ = 0\n  local vowels_index_count_max_min_index21 = 0\n  local vowels_index_count_max_min_index22\
    \ = 0\n  local vowels_index_count_max_min_index23 = 0\n  local vowels_index_count_max_min_index24\
    \ = 0\n  local vowels_index_count_max_min_index25 = 0\n  local vowels_index_count_max_min_index26\
    \ = 0\n  local vowels_index_count_max_min_index27 = 0\n  local vowels_index_count_max_min_index28\
    \ = 0\n  local vowels_index_count_max_min_index29 = 0\n  local vowels_index_count_max_min_index30\
    \ = 0\n  local vowels_index_count_max_min_index31 = 0\n  local vowels_index_count_max_min_index32\
    \ = 0\n  local vowels_index_count_max_min_index33 = 0\n  local vowels_index_count_max_min_index34\
    \ = 0\n  local vowels_index_count_max_min_index35 = 0\n  local vowels_index_count_max_min_index36\
    \ = 0\n  local vowels_index_count_max_min_index37 = 0\n  local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpox9yq1b_.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowel_count = {}\n\
    \    for i=1,#word do\n        local vowel = word:sub(i,i)\n        if vowel ~=\
    \ nil then\n            vowel_count[vowel] = vowel_count[vowel] + 1\n        end\n\
    \    end\n    for i=1,#vowels do\n        if vowel_count[vowels[i]] == 1 then\n\
    \            return vowels[i]\n        end\n    end\n    return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcm8mzi_r.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcm8mzi_r.lua:17: in local 'candidate'\n\t/tmp/tmpcm8mzi_r.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz2xoxilv.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = {}\n\tfor i = 1, #word do\n\t\tif word[i] == 'a' or word[i] ==\
    \ 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\t\t\tvowels_count\
    \ = vowels_count + 1\n\t\t\ttable.insert(vowels_index, i)\n\t\tend\n\tend\n\t\
    if vowels_count > 1 then\n\t\tlocal vowels_index = table.sort(vowels_index)\n\t\
    \tlocal vowels_index_1 = vowels_index[1]\n\t\tlocal vowels_index_2 = vowels_index[#vowels_index]\n\
    \t\tlocal vowels_index_3 = vowels_index[#vowels_index - 1]\n\t\tlocal vowels_index_4\
    \ = vowels_index[#vowels_index - 2]\n\t\tlocal vowels_index_5 = vowels_index[#vowels_index\
    \ - 3]\n\t\tlocal vowels_index_6 = vowels_index[#vowels_index - 4]\n\t\tlocal\
    \ vowels_index_7 = vowels_index[#vowels_index - 5]\n\t\tlocal vowels_index_8 =\
    \ vowels_index[#vowels_index - 6]\n\t\tlocal vowels_index_9 = vowels_index[#vowels_index\
    \ - 7]\n\t\tlocal vowels_index_10 = vowels_index[#vowels_index - 8]\n\t\tlocal\
    \ vowels_index_11 = vowels_index[#vowels_index - 9]\n\t\tlocal vowels_index_12\
    \ = vowels_index[#vowels_index - 10]\n\t\tlocal vowels_index_13 = vowels_index[#vowels_index\
    \ - 11]\n\t\tlocal vowels_index_14 = vowels_index[#vowels_index - 12]\n\t\tlocal\
    \ vowels_index_15 = vowels_index[#vowels_index - 13]\n\t\tlocal vowels_index_16\
    \ = vowels_index[#vowels_index - 14]\n\t\tlocal vowels_index_17 = vowels_index[#vowels_index\
    \ - 15]\n\t\tlocal vowels_index_18 = vowels_index[#vowels_index - 16]\n\t\tlocal\
    \ vowels_index_19 = vowels_index[#vowels_index - 17]\n\t\tlocal vowels_index_20\
    \ = vowels_index[#vowels_index - 18]\n\t\tlocal vowels_index_21 = vowels_index[#vowels_index\
    \ - 19]\n\t\tlocal vowels_index_22 = vowels_index[#vowels_index - 20]\n\t\tlocal\
    \ vowels_index_23 = vowels_index[#vowels_index - 21]\n\t\tlocal vowels_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_kr1uqhd.lua:66: ''end'' expected (to close ''if'' at line
    21) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 0\n\
    \    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index2 = 0\n    local vowels_index_count_max_min_index3\
    \ = 0\n    local vowels_index_count_max_min_index4 = 0\n    local vowels_index_count_max_min_index5\
    \ = 0\n    local vowels_index_count_max_min_index6 = 0\n    local vowels_index_count_max_min_index7\
    \ = 0\n    local vowels_index_count_max_min_index8 = 0\n    local vowels_index_count_max_min_index9\
    \ = 0\n    local vowels_index_count_max_min_index10 = 0\n    local vowels_index_count_max_min_index11\
    \ = 0\n    local vowels_index_count_max_min_index12 = 0\n    local vowels_index_count_max_min_index13\
    \ = 0\n    local vowels_index_count_max_min_index14 = 0\n    local vowels_index_count_max_min_index15\
    \ = 0\n    local vowels_index_count_max_min_index16 = 0\n    local vowels_index_count_max_min_index17\
    \ = 0\n    local vowels_index_count_max_min_index18 = 0\n    local vowels_index_count_max_min_index19\
    \ = 0\n    local vowels_index_count_max_min_index20 = 0\n    local vowels_index_count_max_min_index21\
    \ = 0\n    local vowels_index_count_max_min_index22 = 0\n    local vowels_index_count_max_min_index23\
    \ = 0\n    local vowels_index_count_max_min_index24 = 0\n    local vowels_index_count_max_min_index25\
    \ = 0\n    local vowels_index_count_max_min_index26 = 0\n    local vowels_index_count_max_min_index27\
    \ = 0\n    local vowels_index_count_max_min_index28 = 0\n    local vowels_index_count_max_min_index29\
    \ = 0\n    local vowels_index_count_max_min_index30 = 0\n    local vowels_index_count_max_min_index31\
    \ = 0\n    local vowels_index_count_max_min_index32 = 0\n    local vowels_index_count_max_min_index33\
    \ = 0\n    local vowels_index_count_max_min_index34 = 0\n    local vowels_index_count_max_min_index35\
    \ = 0\n    local vowels_index_count_max_min_index36 = 0\n    local vowels_index_count_max_min_index37\
    \ = 0\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt4rupyub.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"}\n\tlocal vowels_count =\
    \ #vowels\n\tlocal vowel_index = 1\n\tlocal vowel_found = false\n\tlocal vowel_start\
    \ = nil\n\tlocal vowel_end = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance = nil\n\tlocal vowel_distance\
    \ = nil\n\tlocal vowel_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1zwbk45x.lua:103: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp016twnaa.lua:88: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpvrt_h_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_prev = 1\n  local\
    \ vowels_index_next = 1\n  local vowels_index_prev2 = 1\n  local vowels_index_next2\
    \ = 1\n  local vowels_index_prev3 = 1\n  local vowels_index_next3 = 1\n  local\
    \ vowels_index_prev4 = 1\n  local vowels_index_next4 = 1\n  local vowels_index_prev5\
    \ = 1\n  local vowels_index_next5 = 1\n  local vowels_index_prev6 = 1\n  local\
    \ vowels_index_next6 = 1\n  local vowels_index_prev7 = 1\n  local vowels_index_next7\
    \ = 1\n  local vowels_index_prev8 = 1\n  local vowels_index_next8 = 1\n  local\
    \ vowels_index_prev9 = 1\n  local vowels_index_next9 = 1\n  local vowels_index_prev10\
    \ = 1\n  local vowels_index_next10 = 1\n  local vowels_index_prev11 = 1\n  local\
    \ vowels_index_next11 = 1\n  local vowels_index_prev12 = 1\n  local vowels_index_next12\
    \ = 1\n  local vowels_index_prev13 = 1\n  local vowels_index_next13 = 1\n  local\
    \ vowels_index_prev14 = 1\n  local vowels_index_next14 = 1\n  local vowels_index_prev15\
    \ = 1\n  local vowels_index_next15 = 1\n  local vowels_index_prev16 = 1\n  local\
    \ vowels_index_next16 = 1\n  local vowels_index_prev17 = 1\n  local vowels_index_next17\
    \ = 1\n  local vowels_index_prev18 = 1\n  local vowels_index_next18 = 1\n  local\
    \ vowels_index_prev19 = 1\n  local vowels_index_next19 = 1\n  local vowels_index_prev20\
    \ = 1\n  local vowels_index_next20 = 1\n  local vowels_index_prev21 = 1\n  local\
    \ vowels_index_next21 = 1\n  local vowels_index_prev22 = 1\n  local vowels_index_next22\
    \ = 1\n  local vowels_index_prev23 = 1\n  local vowels_index_next23 = 1\n  local\
    \ vowels_index_prev24 = 1\n  local vowels_index_next24 = 1\n  local vowels_index_prev25\
    \ = 1\n  local vowels_index_next25 = 1\n  local vowels_index_prev26 = 1\n  local\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaagt_v4z.lua:92: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 0\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfxsbr.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 1\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ 1\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmjx3ycfl.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = 0\n\
    \    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index2 = 0\n    local vowels_index_count_max_min_index3\
    \ = 0\n    local vowels_index_count_max_min_index4 = 0\n    local vowels_index_count_max_min_index5\
    \ = 0\n    local vowels_index_count_max_min_index6 = 0\n    local vowels_index_count_max_min_index7\
    \ = 0\n    local vowels_index_count_max_min_index8 = 0\n    local vowels_index_count_max_min_index9\
    \ = 0\n    local vowels_index_count_max_min_index10 = 0\n    local vowels_index_count_max_min_index11\
    \ = 0\n    local vowels_index_count_max_min_index12 = 0\n    local vowels_index_count_max_min_index13\
    \ = 0\n    local vowels_index_count_max_min_index14 = 0\n    local vowels_index_count_max_min_index15\
    \ = 0\n    local vowels_index_count_max_min_index16 = 0\n    local vowels_index_count_max_min_index17\
    \ = 0\n    local vowels_index_count_max_min_index18 = 0\n    local vowels_index_count_max_min_index19\
    \ = 0\n    local vowels_index_count_max_min_index20 = 0\n    local vowels_index_count_max_min_index21\
    \ = 0\n    local vowels_index_count_max_min_index22 = 0\n    local vowels_index_count_max_min_index23\
    \ = 0\n    local vowels_index_count_max_min_index24 = 0\n    local vowels_index_count_max_min_index25\
    \ = 0\n    local vowels_index_count_max_min_index26 = 0\n    local vowels_index_count_max_min_index27\
    \ = 0\n    local vowels_index_count_max_min_index28 = 0\n    local vowels_index_count_max_min_index29\
    \ = 0\n    local vowels_index_count_max_min_index30 = 0\n    local vowels_index_count_max_min_index31\
    \ = 0\n    local vowels_index_count_max_min_index32 = 0\n    local vowels_index_count_max_min_index33\
    \ = 0\n    local vowels_index_count_max_min_index34 = 0\n    local vowels_index_count_max_min_index35\
    \ = 0\n    local vowels_index_count_max_min_index36 = 0\n    local vowels_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpodhaqgmt.lua:75: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_minus_1\
    \ = #word\n    local vowels_index_count_max_minus_2 = #word-1\n    local vowels_index_count_max_minus_3\
    \ = #word-2\n    local vowels_index_count_max_minus_4 = #word-3\n    local vowels_index_count_max_minus_5\
    \ = #word-4\n    local vowels_index_count_max_minus_6 = #word-5\n    local vowels_index_count_max_minus_7\
    \ = #word-6\n    local vowels_index_count_max_minus_8 = #word-7\n    local vowels_index_count_max_minus_9\
    \ = #word-8\n    local vowels_index_count_max_minus_10 = #word-9\n    local vowels_index_count_max_minus_11\
    \ = #word-10\n    local vowels_index_count_max_minus_12 = #word-11\n    local\
    \ vowels_index_count_max_minus_13 = #word-12\n    local vowels_index_count_max_minus_14\
    \ = #word-13\n    local vowels_index_count_max_minus_15 = #word-14\n    local\
    \ vowels_index_count_max_minus_16 = #word-15\n    local vowels_index_count_max_minus_17\
    \ = #word-16\n    local vowels_index_count_max_minus_18 = #word-17\n    local\
    \ vowels_index_count_max_minus_19 = #word-18\n    local vowels_index_count_max_minus_20\
    \ = #word-19\n    local vowels_index_count_max_minus_21 = #word-20\n    local\
    \ vowels_index_count_max_minus_22 = #word-21\n    local vowels_index_count_max_minus_23\
    \ = #word-22\n    local vowels_index_count_max_minus_24 = #word-23\n    local\
    \ vowels_index_count_max_minus_25 = #word-24\n    local vowels_index_count_max_minus_26\
    \ = #word-25\n    local vowels_index_count_max_minus_27 = #word-26\n    local\
    \ vowels_index_count_max_minus_28 = #word-27\n    local vowels_index_count_max_minus_29\
    \ = #word-28\n    local vowels_index_count_max_minus_30 = #word-29\n    local\
    \ vowels_index_count_max_minus_31 = #word-30\n    local vowels_index_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvm58ohp9.lua:69: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjnjebo8y.lua:86: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxpvrt_h_.lua:83: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowel_index = #word\n  local vowel_found = false\n  local\
    \ vowel_found_index = 0\n  local vowel_found_count = 0\n  local vowel_found_position\
    \ = 0\n  local vowel_found_position_index = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  local vowel_found_position_index_count = 0\n  local vowel_found_position_count\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67n9rn98.lua:89: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\
    \tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwao_4vm0.lua:76: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local vowels_count = #vowels\n   local vowels_index\
    \ = #word\n   local vowels_index2 = 0\n   local vowels_index3 = 0\n   local vowels_index4\
    \ = 0\n   local vowels_index5 = 0\n   local vowels_index6 = 0\n   local vowels_index7\
    \ = 0\n   local vowels_index8 = 0\n   local vowels_index9 = 0\n   local vowels_index10\
    \ = 0\n   local vowels_index11 = 0\n   local vowels_index12 = 0\n   local vowels_index13\
    \ = 0\n   local vowels_index14 = 0\n   local vowels_index15 = 0\n   local vowels_index16\
    \ = 0\n   local vowels_index17 = 0\n   local vowels_index18 = 0\n   local vowels_index19\
    \ = 0\n   local vowels_index20 = 0\n   local vowels_index21 = 0\n   local vowels_index22\
    \ = 0\n   local vowels_index23 = 0\n   local vowels_index24 = 0\n   local vowels_index25\
    \ = 0\n   local vowels_index26 = 0\n   local vowels_index27 = 0\n   local vowels_index28\
    \ = 0\n   local vowels_index29 = 0\n   local vowels_index30 = 0\n   local vowels_index31\
    \ = 0\n   local vowels_index32 = 0\n   local vowels_index33 = 0\n   local vowels_index34\
    \ = 0\n   local vowels_index35 = 0\n   local vowels_index36 = 0\n   local vowels_index37\
    \ = 0\n   local vowels_index38 = 0\n   local vowels_index39 = 0\n   local vowels_index40\
    \ = 0\n   local vowels_index41 = 0\n   local vowels_index42 = 0\n   local vowels_index43\
    \ = 0\n   local vowels_index44 = 0\n   local vowels_index45 = 0\n   local vowels_index46\
    \ = 0\n   local vowels_index47 = 0\n   local vowels_index48 = 0\n   local vowels_index49\
    \ = 0\n   local vowels_index50 = 0\n   local vowels_index51 = 0\n   local vowels_index52\
    \ = 0\n   local vowels_index53 = 0\n   local vowels_index54 = 0\n   local vowels_index55\
    \ = 0\n   local vowels_index56 = 0\n   local vowels_index57 = 0\n   local vowels_index58\
    \ = 0\n   local vowels_index59 = 0\n   local vowels_index60 = 0\n   local vowels_index61\
    \ = 0\n   local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcijudidv.lua:95: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798743
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tlocal vowel_found = false\n\tfor i = 1, #word do\n\t\t\
    if word[i] == \"a\" then\n\t\t\tvowels[1] = word[i]\n\t\t\tvowel_found = true\n\
    \t\telseif word[i] == \"e\" then\n\t\t\tvowels[2] = word[i]\n\t\t\tvowel_found\
    \ = true\n\t\telseif word[i] == \"i\" then\n\t\t\tvowels[3] = word[i]\n\t\t\t\
    vowel_found = true\n\t\telseif word[i] == \"o\" then\n\t\t\tvowels[4] = word[i]\n\
    \t\t\tvowel_found = true\n\t\telseif word[i] == \"u\" then\n\t\t\tvowels[5] =\
    \ word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"y\" then\n\t\t\t\
    vowels[6] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"A\" then\n\
    \t\t\tvowels[7] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"\
    E\" then\n\t\t\tvowels[8] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i]\
    \ == \"I\" then\n\t\t\tvowels[9] = word[i]\n\t\t\tvowel_found = true\n\t\telseif\
    \ word[i] == \"O\" then\n\t\t\tvowels[10] = word[i]\n\t\t\tvowel_found = true\n\
    \t\telseif word[i] == \"U\" then\n\t\t\tvowels[11] = word[i]\n\t\t\tvowel_found\
    \ = true\n\t\telseif word[i] == \"Y\" then\n\t\t\tvowels[12] = word[i]\n\t\t\t\
    vowel_found = true\n\t\telseif word[i] == \"a\" then\n\t\t\tvowels[13] = word[i]\n\
    \t\t\tvowel_found = true\n\t\telseif word[i] == \"e\" then\n\t\t\tvowels[14] =\
    \ word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"i\" then\n\t\t\t\
    vowels[15] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"o\" then\n\
    \t\t\tvowels[16] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i] == \"\
    u\" then\n\t\t\tvowels[17] = word[i]\n\t\t\tvowel_found = true\n\t\telseif word[i]\
    \ == \"y\" then\n\t\t\tvowels[18] = word[i]\n\t\t\tvowel_found = true\n\t\telseif\
    \ word[i] == \"A\" then\n\t\t\tvowels[19] = word[i]\n\t\t\tvowel_found = true\n\
    \t\telseif word[i] == \"E\" then\n\t\t\tvowels[20] = word[i]\n\t\t\tvowel_found\
    \ = true\n\t\telseif word[i] == \"I\" then\n\t\t\tvowels[21] = word[i]\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7awby2y.lua:97: ''end'' expected (to close ''if'' at line
    15) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"A\",\n\t\t[\"E\"] = \"E\",\n\t\t[\"I\"] = \"I\",\n\t\t[\"O\"] =\
    \ \"O\",\n\t\t[\"U\"] = \"U\",\n\t\t[\"Y\"] = \"Y\",\n\t\t[\"a\"] = \"a\",\n\t\
    \t[\"e\"] = \"e\",\n\t\t[\"i\"] = \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] =\
    \ \"u\",\n\t\t[\"y\"] = \"y\",\n\t\t[\"A\"] = \"A\",\n\t\t[\"E\"] = \"E\",\n\t\
    \t[\"I\"] = \"I\",\n\t\t[\"O\"] = \"O\",\n\t\t[\"U\"] = \"U\",\n\t\t[\"Y\"] =\
    \ \"Y\",\n\t\t[\"b\"] = \"b\",\n\t\t[\"c\"] = \"c\",\n\t\t[\"d\"] = \"d\",\n\t\
    \t[\"f\"] = \"f\",\n\t\t[\"g\"] = \"g\",\n\t\t[\"h\"] = \"h\",\n\t\t[\"j\"] =\
    \ \"j\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"l\"] = \"l\",\n\t\t[\"m\"] = \"m\",\n\t\
    \t[\"n\"] = \"n\",\n\t\t[\"p\"] = \"p\",\n\t\t[\"q\"] = \"q\",\n\t\t[\"r\"] =\
    \ \"r\",\n\t\t[\"s\"] = \"s\",\n\t\t[\"t\"] = \"t\",\n\t\t[\"v\"] = \"v\",\n\t\
    \t[\"w\"] = \"w\",\n\t\t[\"x\"] = \"x\",\n\t\t[\"z\"] = \"z\",\n\t\t[\"B\"] =\
    \ \"B\",\n\t\t[\"C\"] = \"C\",\n\t\t[\"D\"] = \"D\",\n\t\t[\"F\"] = \"F\",\n\t\
    \t[\"G\"] = \"G\",\n\t\t[\"H\"] = \"H\",\n\t\t[\"J\"] = \"J\",\n\t\t[\"K\"] =\
    \ \"K\",\n\t\t[\"L\"] = \"L\",\n\t\t[\"M\"] = \"M\",\n\t\t[\"N\"] = \"N\",\n\t\
    \t[\"P\"] = \"P\",\n\t\t[\"Q\"] = \"Q\",\n\t\t[\"R\"] = \"R\",\n\t\t[\"S\"] =\
    \ \"S\",\n\t\t[\"T\"] = \"T\",\n\t\t[\"V\"] = \"V\",\n\t\t[\"W\"] = \"W\",\n\t\
    \t[\"X\"] = \"X\",\n\t\t[\"Z\"] = \"Z\",\n\t\t[\"b\"] = \"b\",\n\t\t[\"c\"] =\
    \ \"c\",\n\t\t[\"d\"] = \"d\",\n\t\t[\"f\"] = \"f\",\n\t\t[\"g\"] = \"g\",\n\t\
    \t[\"h\"] = \"h\",\n\t\t[\"j\"] = \"j\",\n\t\t[\"k\"] = \"k\",\n\t\t[\"l\"] =\
    \ \"l\",\n\t\t[\"m\"] = \"m\",\n\t\t[\"n\"] = \"n\",\n\t\t[\"p\"] = \"p\",\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2_9m7lfl.lua:91: ''}'' expected (to close ''{'' at line 12)
    near ''function''

    '
  stdout: ''
  timestamp: 1659798744
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = 1\n    local vowel_found = false\n    local vowel_start = nil\n\
    \    local vowel_end = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7ao_gxyz.lua:104: ''end'' expected (to close ''function''
    at line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659798744
