name: HumanEval_118_get_closest_vowel
language: lua
results:
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n   local vowels_count = #vowels\n\
    \   local vowel_index = 1\n   local vowel_found = false\n   local vowel_start\
    \ = nil\n   local vowel_end = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\n   local vowel_distance\
    \ = nil\n   local vowel_distance = nil\n   local vowel_distance = nil\n   local\
    \ vowel_distance = nil\n   local vowel_distance = nil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpycrk7imi.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbjaepex8.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  for i = 1, #word do\n    local c = word[i]\n    if c ==\
    \ \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n      table.insert(vowels,\
    \ c)\n    end\n  end\n  local vowel = nil\n  local vowel_distance = nil\n  for\
    \ i = #vowels, 1, -1 do\n    local distance = #vowels - i\n    if vowel_distance\
    \ == nil then\n      vowel_distance = distance\n      vowel = vowels[i]\n    elseif\
    \ distance < vowel_distance then\n      vowel_distance = distance\n      vowel\
    \ = vowels[i]\n    end\n  end\n  return vowel\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkko0tkrd.lua:37:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpkko0tkrd.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_count = 0\n    local vowel_found_index = 0\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = 0\n    local vowel_found_count = 0\n    local\
    \ vowel_found_index = 0\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf7wqu9y5.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_prev = 0\n\tlocal vowels_index_count_next = 0\n\tlocal vowels_index_count_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next = 0\n\tlocal vowels_index_count_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_next = 0\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_prev = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_next\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_prev = 0\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_next = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_prev\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_next = 0\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_prev = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_next\
    \ = 0\n\tlocal vowels_index_count_next_next_next_next_next_next_next_prev = 0\n\
    \tlocal vowels_index_count_next_next_next_next_next_next_next_next = 0\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_next_prev = 0\n\tlocal \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2c2hsk6d.lua:71: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphygrw2kg.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0211osa8.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5d3sqpvs.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_found = false\n    local vowel_found_index = 0\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local vowel_found_distance = nil\n\
    \    local vowel_found_distance = nil\n    local \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0kngh9jp.lua:95: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyuz_zkdp.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfionzd53.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_found_index = 0\n    local vowel_found_index2 = 0\n    local vowel_found_index3\
    \ = 0\n    local vowel_found_index4 = 0\n    local vowel_found_index5 = 0\n  \
    \  local vowel_found_index6 = 0\n    local vowel_found_index7 = 0\n    local vowel_found_index8\
    \ = 0\n    local vowel_found_index9 = 0\n    local vowel_found_index10 = 0\n \
    \   local vowel_found_index11 = 0\n    local vowel_found_index12 = 0\n    local\
    \ vowel_found_index13 = 0\n    local vowel_found_index14 = 0\n    local vowel_found_index15\
    \ = 0\n    local vowel_found_index16 = 0\n    local vowel_found_index17 = 0\n\
    \    local vowel_found_index18 = 0\n    local vowel_found_index19 = 0\n    local\
    \ vowel_found_index20 = 0\n    local vowel_found_index21 = 0\n    local vowel_found_index22\
    \ = 0\n    local vowel_found_index23 = 0\n    local vowel_found_index24 = 0\n\
    \    local vowel_found_index25 = 0\n    local vowel_found_index26 = 0\n    local\
    \ vowel_found_index27 = 0\n    local vowel_found_index28 = 0\n    local vowel_found_index29\
    \ = 0\n    local vowel_found_index30 = 0\n    local vowel_found_index31 = 0\n\
    \    local vowel_found_index32 = 0\n    local vowel_found_index33 = 0\n    local\
    \ vowel_found_index34 = 0\n    local vowel_found_index35 = 0\n    local vowel_found_index36\
    \ = 0\n    local vowel_found_index37 = 0\n    local vowel_found_index38 = 0\n\
    \    local vowel_found_index39 = 0\n    local vowel_found_index40 = 0\n    local\
    \ vowel_found_index41 = 0\n    local vowel_found_index42 = 0\n    local vowel_found_index43\
    \ = 0\n    local vowel_found_index44 = 0\n    local vowel_found_index45 = 0\n\
    \    local vowel_found_index46 = 0\n    local vowel_found_index47 = 0\n    local\
    \ vowel_found_index48 = 0\n    local vowel_found_index49 = 0\n    local vowel_found_index50\
    \ = 0\n    local vowel_found_index51 = 0\n    local vowel_found_index52 = 0\n\
    \    local vowel_found_index53 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb18jpg6y.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_min = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_max_min = #vowels\n\tlocal vowels_index_count_max_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count = 0\n\tlocal vowels_index_count_max_min_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min = 1\n\
    \tlocal vowels_index_count_max_min_index_count_min_index_count_min_index = 1\n\
    \tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 1\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1r9qyjxa.lua:60: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowel_pos = #vowels\n  local vowel_len\
    \ = #vowels\n  local vowel_found = false\n  local vowel_start = nil\n  local vowel_end\
    \ = nil\n  local vowel_dist = nil\n  local vowel_dist_min = nil\n  local vowel_dist_max\
    \ = nil\n  local vowel_dist_min_pos = nil\n  local vowel_dist_max_pos = nil\n\
    \  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len\
    \ = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n\
    \  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len\
    \ = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n\
    \  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len\
    \ = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n\
    \  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len\
    \ = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n\
    \  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len\
    \ = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n\
    \  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len\
    \ = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n\
    \  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len\
    \ = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n\
    \  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len\
    \ = nil\n  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n\
    \  local vowel_dist_min_len = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len\
    \ = nil\n  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = nil\n\
    \  local vowel_dist_max_len = nil\n  local vowel_dist_min_len = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp530cx1_l.lua:70: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = #vowels\n  local vowels_index_min = #vowels\n  local vowels_index_min_index\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_vowel = 0\n\
    \  local vowels_index_max_vowel = 0\n  local vowels_index_min_vowel_index = 0\n\
    \  local vowels_index_max_vowel_index = 0\n  local vowels_index_min_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_index\
    \ = 0\n  local vowels_index_max_vowel_vowel_index = 0\n  local vowels_index_min_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_index\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_index = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_index\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_index = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_index\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_index = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_index = 0\n  local\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_index = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_index = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_index\
    \ = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwlwvol8p.lua:68: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpffqcgd7i.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = 1\n    local vowel_found = false\n    local vowel_start = nil\n\
    \    local vowel_end = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3d_gyfoc.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = #word\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpiu_92xu7.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" -- vowels\
    \ in the beginning and ending doesn't count\n    }\n    local vowels_count = #vowels\n\
    \    local vowel_met_count = 0\n    local vowel_met_index = 0\n    local vowel_met_index_count\
    \ = 0\n    local vowel_met_index_count_max = #vowels-1\n    local vowel_met_index_count_min\
    \ = #vowels-1\n    local vowel_met_index_count_min_index = 0\n    local vowel_met_index_count_max_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_min_index_index = 0\n    local vowel_met_index_count_max_index_index\
    \ = 0\n    local vowel_met_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58rf9hdl.lua:73: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_max_index_index = 0\n    local vowels_index_count_min_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpc0afesto.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n   local vowels_count\
    \ = #vowels\n   local vowel_found = false\n   local vowel_found2 = false\n   local\
    \ vowel_found3 = false\n   local vowel_found4 = false\n   local vowel_found5 =\
    \ false\n   local vowel_found6 = false\n   local vowel_found7 = false\n   local\
    \ vowel_found8 = false\n   local vowel_found9 = false\n   local vowel_found10\
    \ = false\n   local vowel_found11 = false\n   local vowel_found12 = false\n  \
    \ local vowel_found13 = false\n   local vowel_found14 = false\n   local vowel_found15\
    \ = false\n   local vowel_found16 = false\n   local vowel_found17 = false\n  \
    \ local vowel_found18 = false\n   local vowel_found19 = false\n   local vowel_found20\
    \ = false\n   local vowel_found21 = false\n   local vowel_found22 = false\n  \
    \ local vowel_found23 = false\n   local vowel_found24 = false\n   local vowel_found25\
    \ = false\n   local vowel_found26 = false\n   local vowel_found27 = false\n  \
    \ local vowel_found28 = false\n   local vowel_found29 = false\n   local vowel_found30\
    \ = false\n   local vowel_found31 = false\n   local vowel_found32 = false\n  \
    \ local vowel_found33 = false\n   local vowel_found34 = false\n   local vowel_found35\
    \ = false\n   local vowel_found36 = false\n   local vowel_found37 = false\n  \
    \ local vowel_found38 = false\n   local vowel_found39 = false\n   local vowel_found40\
    \ = false\n   local vowel_found41 = false\n   local vowel_found42 = false\n  \
    \ local vowel_found43 = false\n   local vowel_found44 = false\n   local vowel_found45\
    \ = false\n   local vowel_found46 = false\n   local vowel_found47 = false\n  \
    \ local vowel_found48 = false\n   local vowel_found49 = false\n   local vowel_found50\
    \ = false\n   local vowel_found51 = false\n   local vowel_found52 = false\n  \
    \ local vowel_found53 = false\n   local vowel_found54 = false\n   local vowel_found55\
    \ = false\n   local vowel_found56 = false\n   local vowel_found57 = false\n  \
    \ local vowel_found58 = false\n   local vowel_found59 = false\n   local vowel_found60\
    \ = false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpj8v9ete0.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp63ckx27c.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0rec1f1j.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n  local vowels_count = #vowels\n  local vowels_index = 0\n\
    \  local vowels_index_count = 0\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max_minus_1 = #word-1\n\
    \  local vowels_index_count_max_minus_2 = #word-2\n  local vowels_index_count_max_minus_3\
    \ = #word-3\n  local vowels_index_count_max_minus_4 = #word-4\n  local vowels_index_count_max_minus_5\
    \ = #word-5\n  local vowels_index_count_max_minus_6 = #word-6\n  local vowels_index_count_max_minus_7\
    \ = #word-7\n  local vowels_index_count_max_minus_8 = #word-8\n  local vowels_index_count_max_minus_9\
    \ = #word-9\n  local vowels_index_count_max_minus_10 = #word-10\n  local vowels_index_count_max_minus_11\
    \ = #word-11\n  local vowels_index_count_max_minus_12 = #word-12\n  local vowels_index_count_max_minus_13\
    \ = #word-13\n  local vowels_index_count_max_minus_14 = #word-14\n  local vowels_index_count_max_minus_15\
    \ = #word-15\n  local vowels_index_count_max_minus_16 = #word-16\n  local vowels_index_count_max_minus_17\
    \ = #word-17\n  local vowels_index_count_max_minus_18 = #word-18\n  local vowels_index_count_max_minus_19\
    \ = #word-19\n  local vowels_index_count_max_minus_20 = #word-20\n  local vowels_index_count_max_minus_21\
    \ = #word-21\n  local vowels_index_count_max_minus_22 = #word-22\n  local vowels_index_count_max_minus_23\
    \ = #word-23\n  local vowels_index_count_max_minus_24 = #word-24\n  local vowels_index_count_max_minus_25\
    \ = #word-25\n  local vowels_index_count_max_minus_26 = #word-26\n  local vowels_index_count_max_minus_27\
    \ = #word-27\n  local vowels_index_count_max_minus_28 = #word-28\n  local vowels_index_count_max_minus_29\
    \ = #word-29\n  local vowels_index_count_max_minus_30 = #word-30\n  local vowels_index_count_max_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2rvk_kim.lua:68: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3rooxj6b.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index\
    \ = 0\n\tlocal vowel_found_index2 = 0\n\tlocal vowel_found_index3 = 0\n\tlocal\
    \ vowel_found_index4 = 0\n\tlocal vowel_found_index5 = 0\n\tlocal vowel_found_index6\
    \ = 0\n\tlocal vowel_found_index7 = 0\n\tlocal vowel_found_index8 = 0\n\tlocal\
    \ vowel_found_index9 = 0\n\tlocal vowel_found_index10 = 0\n\tlocal vowel_found_index11\
    \ = 0\n\tlocal vowel_found_index12 = 0\n\tlocal vowel_found_index13 = 0\n\tlocal\
    \ vowel_found_index14 = 0\n\tlocal vowel_found_index15 = 0\n\tlocal vowel_found_index16\
    \ = 0\n\tlocal vowel_found_index17 = 0\n\tlocal vowel_found_index18 = 0\n\tlocal\
    \ vowel_found_index19 = 0\n\tlocal vowel_found_index20 = 0\n\tlocal vowel_found_index21\
    \ = 0\n\tlocal vowel_found_index22 = 0\n\tlocal vowel_found_index23 = 0\n\tlocal\
    \ vowel_found_index24 = 0\n\tlocal vowel_found_index25 = 0\n\tlocal vowel_found_index26\
    \ = 0\n\tlocal vowel_found_index27 = 0\n\tlocal vowel_found_index28 = 0\n\tlocal\
    \ vowel_found_index29 = 0\n\tlocal vowel_found_index30 = 0\n\tlocal vowel_found_index31\
    \ = 0\n\tlocal vowel_found_index32 = 0\n\tlocal vowel_found_index33 = 0\n\tlocal\
    \ vowel_found_index34 = 0\n\tlocal vowel_found_index35 = 0\n\tlocal vowel_found_index36\
    \ = 0\n\tlocal vowel_found_index37 = 0\n\tlocal vowel_found_index38 = 0\n\tlocal\
    \ vowel_found_index39 = 0\n\tlocal vowel_found_index40 = 0\n\tlocal vowel_found_index41\
    \ = 0\n\tlocal vowel_found_index42 = 0\n\tlocal vowel_found_index43 = 0\n\tlocal\
    \ vowel_found_index44 = 0\n\tlocal vowel_found_index45 = 0\n\tlocal vowel_found_index46\
    \ = 0\n\tlocal vowel_found_index47 = 0\n\tlocal vowel_found_index48 = 0\n\tlocal\
    \ vowel_found_index49 = 0\n\tlocal vowel_found_index50 = 0\n\tlocal vowel_found_index51\
    \ = 0\n\tlocal vowel_found_index52 = 0\n\tlocal vowel_found_index53 = 0\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9m2czhg_.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = 0\n    local vowel_found_index2 = 0\n    local vowel_found_index3 = 0\n  \
    \  local vowel_found_index4 = 0\n    local vowel_found_index5 = 0\n    local vowel_found_index6\
    \ = 0\n    local vowel_found_index7 = 0\n    local vowel_found_index8 = 0\n  \
    \  local vowel_found_index9 = 0\n    local vowel_found_index10 = 0\n    local\
    \ vowel_found_index11 = 0\n    local vowel_found_index12 = 0\n    local vowel_found_index13\
    \ = 0\n    local vowel_found_index14 = 0\n    local vowel_found_index15 = 0\n\
    \    local vowel_found_index16 = 0\n    local vowel_found_index17 = 0\n    local\
    \ vowel_found_index18 = 0\n    local vowel_found_index19 = 0\n    local vowel_found_index20\
    \ = 0\n    local vowel_found_index21 = 0\n    local vowel_found_index22 = 0\n\
    \    local vowel_found_index23 = 0\n    local vowel_found_index24 = 0\n    local\
    \ vowel_found_index25 = 0\n    local vowel_found_index26 = 0\n    local vowel_found_index27\
    \ = 0\n    local vowel_found_index28 = 0\n    local vowel_found_index29 = 0\n\
    \    local vowel_found_index30 = 0\n    local vowel_found_index31 = 0\n    local\
    \ vowel_found_index32 = 0\n    local vowel_found_index33 = 0\n    local vowel_found_index34\
    \ = 0\n    local vowel_found_index35 = 0\n    local vowel_found_index36 = 0\n\
    \    local vowel_found_index37 = 0\n    local vowel_found_index38 = 0\n    local\
    \ vowel_found_index39 = 0\n    local vowel_found_index40 = 0\n    local vowel_found_index41\
    \ = 0\n    local vowel_found_index42 = 0\n    local vowel_found_index43 = 0\n\
    \    local vowel_found_index44 = 0\n    local vowel_found_index45 = 0\n    local\
    \ vowel_found_index46 = 0\n    local vowel_found_index47 = 0\n    local vowel_found_index48\
    \ = 0\n    local vowel_found_index49 = 0\n    local vowel_found_index50 = 0\n\
    \    local vowel_found_index51 = 0\n    local vowel_found_index52 = 0\n    local\
    \ vowel_found_index53 = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyj9jara0.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  local vowels_index_count = {}\n  for\
    \ i = 1, #word do\n    local vowel = word:sub(i,i)\n    if vowel:sub(1,1) ~= \"\
    \" then\n      vowels_index[vowel] = true\n      vowels_index_count[vowel] = vowels_count\n\
    \    end\n  end\n  local vowels_count = #vowels_index\n  local vowels_index_count\
    \ = #vowels_index_count\n  local vowels_index_max_count = #vowels_index_count\n\
    \  local vowels_index_max_value = nil\n  local vowels_index_min_value = nil\n\
    \  local vowels_index_min_count = nil\n  for i = 1, vowels_count do\n    if vowels_index_count[i]\
    \ > vowels_index_max_count then\n      vowels_index_max_count = vowels_index_count[i]\n\
    \      vowels_index_max_value = i\n    end\n    if vowels_index_count[i] < vowels_index_min_count\
    \ then\n      vowels_index_min_count = vowels_index_count[i]\n      vowels_index_min_value\
    \ = i\n    end\n  end\n  if vowels_index_max_count == vowels_index_min_count then\n\
    \    return \"\"\n  end\n  if vowels_index_max_count > vowels_index_min_count\
    \ then\n    local vowels_index_max_value = vowels_index_max_value\n    local vowels_index_min_value\
    \ = vowels_index_min_value\n    local vowels_index_max_count = vowels_index_max_count\n\
    \    local vowels_index_min_count = vowels_index_min_count\n    local vowels_index_max_value\
    \ = vowels_index_max_value\n    local vowels_index_min_value = vowels_index_min_value\n\
    \    local vowels_index_max_count = vowels_index_max_count\n    local vowels_index_min_count\
    \ = vowels_index_min_count\n    local vowels_index_max_value = vowels_index_max_value\n\
    \    local vowels_index_min_value = vowels_index_min_value\n    local vowels_index_max_count\
    \ = vowels_index_max_count\n    local vowels_index_min_count = vowels_index_min_count\n\
    \    local vowels_index_max_value = vowels_index_max_value\n    local vowels_index_min_value\
    \ = vowels_index_min_value\n    local vowels_index_max_count = vowels_index_max_count\n\
    \    local vowels_index_min_count = vowels_index_min_count\n    local vowels_index_max_value\
    \ = vowels_index_max_value\n    local vowels_index_min_value = vowels_index_min_value\n\
    \    local vowels_index_max_count = vowels_index_max_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw7chp1xt.lua:81: 'end' expected (to close 'if' at line 42)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] =\
    \ \"I\",\n    [\"O\"] = \"O\",\n    [\"U\"] = \"U\",\n    [\"Y\"] = \"Y\",\n \
    \   [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] = \"i\",\n    [\"o\"]\
    \ = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min_index = 0\n  local vowels_index_count_max_index = 0\n\
    \  local vowels_index_count_max_index_count = 0\n  local vowels_index_count_min_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_max = #word\n  local vowels_index_count_min_index_count_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_max_index = 0\n  local vowels_index_count_min_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_count_max = #word\n\
    \  local vowels_index_count_min_index_count_min_index_min_index = 0\n  local vowels_index_count_min_index_count_min_index_max_index\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_max_index_count =\
    \ 0\n  local vowels_index_count_min_index_count_min_index_min_index_max = #word\n\
    \  local vowels_index_count_min_index_count_min_index_min_index_min_index = 0\n\
    \  local vowels_index_count_min_index_count_min_index_min_index_max_index = 0\n\
    \  local vowels_index_count_min_index_count_min_index_min_index_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_max\
    \ = #word\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_max_index\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max\
    \ = #word\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count_min_index_min\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8v37np71.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowel_index\
    \ = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index = nil\n\tlocal\
    \ vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\t\
    local vowel_found_index = nil\n\tlocal vowel_found_index = nil\n\tlocal vowel_found_index\
    \ = nil\n\tlocal vowel_found_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxtz1di92.lua:76: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3282z0z6.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \    }\n    local vowels_count = #vowels\n    local vowels_index = 1\n    local\
    \ vowels_index_count = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max_min = 0\n    local vowels_index_count_max_min_index\
    \ = 0\n    local vowels_index_count_max_min_index2 = 0\n    local vowels_index_count_max_min_index3\
    \ = 0\n    local vowels_index_count_max_min_index4 = 0\n    local vowels_index_count_max_min_index5\
    \ = 0\n    local vowels_index_count_max_min_index6 = 0\n    local vowels_index_count_max_min_index7\
    \ = 0\n    local vowels_index_count_max_min_index8 = 0\n    local vowels_index_count_max_min_index9\
    \ = 0\n    local vowels_index_count_max_min_index10 = 0\n    local vowels_index_count_max_min_index11\
    \ = 0\n    local vowels_index_count_max_min_index12 = 0\n    local vowels_index_count_max_min_index13\
    \ = 0\n    local vowels_index_count_max_min_index14 = 0\n    local vowels_index_count_max_min_index15\
    \ = 0\n    local vowels_index_count_max_min_index16 = 0\n    local vowels_index_count_max_min_index17\
    \ = 0\n    local vowels_index_count_max_min_index18 = 0\n    local vowels_index_count_max_min_index19\
    \ = 0\n    local vowels_index_count_max_min_index20 = 0\n    local vowels_index_count_max_min_index21\
    \ = 0\n    local vowels_index_count_max_min_index22 = 0\n    local vowels_index_count_max_min_index23\
    \ = 0\n    local vowels_index_count_max_min_index24 = 0\n    local vowels_index_count_max_min_index25\
    \ = 0\n    local vowels_index_count_max_min_index26 = 0\n    local vowels_index_count_max_min_index27\
    \ = 0\n    local vowels_index_count_max_min_index28 = 0\n    local vowels_index_count_max_min_index29\
    \ = 0\n    local vowels_index_count_max_min_index30 = 0\n    local vowels_index_count_max_min_index31\
    \ = 0\n    local vowels_index_count_max_min_index32 = 0\n    local vowels_index_count_max_min_index33\
    \ = 0\n    local vowels_index_count_max_min_index34 = 0\n    local vowels_index_count_max_min_index35\
    \ = 0\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq9c5o0y5.lua:80: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n    local vowels_count = #vowels\n    local vowels_index =\
    \ #word\n    local vowels_index2 = #word\n    local vowels_index3 = #word\n  \
    \  local vowels_index4 = #word\n    local vowels_index5 = #word\n    local vowels_index6\
    \ = #word\n    local vowels_index7 = #word\n    local vowels_index8 = #word\n\
    \    local vowels_index9 = #word\n    local vowels_index10 = #word\n    local\
    \ vowels_index11 = #word\n    local vowels_index12 = #word\n    local vowels_index13\
    \ = #word\n    local vowels_index14 = #word\n    local vowels_index15 = #word\n\
    \    local vowels_index16 = #word\n    local vowels_index17 = #word\n    local\
    \ vowels_index18 = #word\n    local vowels_index19 = #word\n    local vowels_index20\
    \ = #word\n    local vowels_index21 = #word\n    local vowels_index22 = #word\n\
    \    local vowels_index23 = #word\n    local vowels_index24 = #word\n    local\
    \ vowels_index25 = #word\n    local vowels_index26 = #word\n    local vowels_index27\
    \ = #word\n    local vowels_index28 = #word\n    local vowels_index29 = #word\n\
    \    local vowels_index30 = #word\n    local vowels_index31 = #word\n    local\
    \ vowels_index32 = #word\n    local vowels_index33 = #word\n    local vowels_index34\
    \ = #word\n    local vowels_index35 = #word\n    local vowels_index36 = #word\n\
    \    local vowels_index37 = #word\n    local vowels_index38 = #word\n    local\
    \ vowels_index39 = #word\n    local vowels_index40 = #word\n    local vowels_index41\
    \ = #word\n    local vowels_index42 = #word\n    local vowels_index43 = #word\n\
    \    local vowels_index44 = #word\n    local vowels_index45 = #word\n    local\
    \ vowels_index46 = #word\n    local vowels_index47 = #word\n    local vowels_index48\
    \ = #word\n    local vowels_index49 = #word\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphd97cmld.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = true,\n    [\"e\"] = true,\n    [\"i\"] = true,\n\
    \    [\"o\"] = true,\n    [\"u\"] = true\n  }\n  local vowels_count = 0\n  local\
    \ vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local vowels_count_min\
    \ = 0\n  local vowels_count_max = 0\n  local vowels_count_min = 0\n  local vowels_count_max\
    \ = 0\n  local vowels_count_min = 0\n  local vowels_count_max = 0\n  local \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpggizkb77.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpspgx64pd.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 1\n    local vowels_index_count_min = 1\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 1\n    local vowels_index_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo0zzhx8k.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzzy7wdus.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = {}\n\tlocal\
    \ vowels_index_count2 = {}\n\tlocal vowels_index_count3 = {}\n\tlocal vowels_index_count4\
    \ = {}\n\tlocal vowels_index_count5 = {}\n\tlocal vowels_index_count6 = {}\n\t\
    local vowels_index_count7 = {}\n\tlocal vowels_index_count8 = {}\n\tlocal vowels_index_count9\
    \ = {}\n\tlocal vowels_index_count10 = {}\n\tlocal vowels_index_count11 = {}\n\
    \tlocal vowels_index_count12 = {}\n\tlocal vowels_index_count13 = {}\n\tlocal\
    \ vowels_index_count14 = {}\n\tlocal vowels_index_count15 = {}\n\tlocal vowels_index_count16\
    \ = {}\n\tlocal vowels_index_count17 = {}\n\tlocal vowels_index_count18 = {}\n\
    \tlocal vowels_index_count19 = {}\n\tlocal vowels_index_count20 = {}\n\tlocal\
    \ vowels_index_count21 = {}\n\tlocal vowels_index_count22 = {}\n\tlocal vowels_index_count23\
    \ = {}\n\tlocal vowels_index_count24 = {}\n\tlocal vowels_index_count25 = {}\n\
    \tlocal vowels_index_count26 = {}\n\tlocal vowels_index_count27 = {}\n\tlocal\
    \ vowels_index_count28 = {}\n\tlocal vowels_index_count29 = {}\n\tlocal vowels_index_count30\
    \ = {}\n\tlocal vowels_index_count31 = {}\n\tlocal vowels_index_count32 = {}\n\
    \tlocal vowels_index_count33 = {}\n\tlocal vowels_index_count34 = {}\n\tlocal\
    \ vowels_index_count35 = {}\n\tlocal vowels_index_count36 = {}\n\tlocal vowels_index_count37\
    \ = {}\n\tlocal vowels_index_count38 = {}\n\tlocal vowels_index_count39 = {}\n\
    \tlocal vowels_index_count40 = {}\n\tlocal vowels_index_count41 = {}\n\tlocal\
    \ vowels_index_count42 = {}\n\tlocal vowels_index_count43 = {}\n\tlocal vowels_index_count44\
    \ = {}\n\tlocal vowels_index_count45 = {}\n\tlocal vowels_index_count46 = {}\n\
    \tlocal vowels_index_count47 = {}\n\tlocal vowels_index_count48 = {}\n\tlocal\
    \ vowels_index_count49 = {}\n\tlocal vowels_index_count50 = {}\n\tlocal vowels_index_count51\
    \ = {}\n\tlocal vowels_index_count52 = {}\n\tlocal vowels_index_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprep6632_.lua:87: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_found_index = 0\n    local vowel_found_index2 = 0\n    local vowel_found_index3\
    \ = 0\n    local vowel_found_index4 = 0\n    local vowel_found_index5 = 0\n  \
    \  local vowel_found_index6 = 0\n    local vowel_found_index7 = 0\n    local vowel_found_index8\
    \ = 0\n    local vowel_found_index9 = 0\n    local vowel_found_index10 = 0\n \
    \   local vowel_found_index11 = 0\n    local vowel_found_index12 = 0\n    local\
    \ vowel_found_index13 = 0\n    local vowel_found_index14 = 0\n    local vowel_found_index15\
    \ = 0\n    local vowel_found_index16 = 0\n    local vowel_found_index17 = 0\n\
    \    local vowel_found_index18 = 0\n    local vowel_found_index19 = 0\n    local\
    \ vowel_found_index20 = 0\n    local vowel_found_index21 = 0\n    local vowel_found_index22\
    \ = 0\n    local vowel_found_index23 = 0\n    local vowel_found_index24 = 0\n\
    \    local vowel_found_index25 = 0\n    local vowel_found_index26 = 0\n    local\
    \ vowel_found_index27 = 0\n    local vowel_found_index28 = 0\n    local vowel_found_index29\
    \ = 0\n    local vowel_found_index30 = 0\n    local vowel_found_index31 = 0\n\
    \    local vowel_found_index32 = 0\n    local vowel_found_index33 = 0\n    local\
    \ vowel_found_index34 = 0\n    local vowel_found_index35 = 0\n    local vowel_found_index36\
    \ = 0\n    local vowel_found_index37 = 0\n    local vowel_found_index38 = 0\n\
    \    local vowel_found_index39 = 0\n    local vowel_found_index40 = 0\n    local\
    \ vowel_found_index41 = 0\n    local vowel_found_index42 = 0\n    local vowel_found_index43\
    \ = 0\n    local vowel_found_index44 = 0\n    local vowel_found_index45 = 0\n\
    \    local vowel_found_index46 = 0\n    local vowel_found_index47 = 0\n    local\
    \ vowel_found_index48 = 0\n    local vowel_found_index49 = 0\n    local vowel_found_index50\
    \ = 0\n    local vowel_found_index51 = 0\n    local vowel_found_index52 = 0\n\
    \    local vowel_found_index53 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpamresmg5.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max = #word\
    \ - vowels_count + 1\n  local vowels_index_count_min = vowels_count - 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count - 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count - 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count - 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count - 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count - 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count - 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count - 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count - 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_index_count_max = #word - vowels_count + 1\n  local vowels_index_count_min\
    \ = vowels_count - 1\n  local vowels_index_count_max = #word - vowels_count +\
    \ 1\n  local vowels_index_count_min = vowels_count - 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_count -\
    \ 1\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3g4zp6ep.lua:71: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 = #word\n\tlocal\
    \ vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal vowels_index6\
    \ = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8 = #word\n\tlocal\
    \ vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal vowels_index11\
    \ = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13 = #word\n\t\
    local vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\tlocal vowels_index16\
    \ = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18 = #word\n\t\
    local vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\tlocal vowels_index21\
    \ = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23 = #word\n\t\
    local vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\tlocal vowels_index26\
    \ = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28 = #word\n\t\
    local vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\tlocal vowels_index31\
    \ = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33 = #word\n\t\
    local vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\tlocal vowels_index36\
    \ = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38 = #word\n\t\
    local vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\tlocal vowels_index41\
    \ = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43 = #word\n\t\
    local vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\tlocal vowels_index46\
    \ = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48 = #word\n\t\
    local vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\tlocal vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppshmxsjm.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpac281xlb.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowel_found = false\n    local vowel_start =\
    \ nil\n    local vowel_end = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel_length = nil\n    local\
    \ vowel_start_index = nil\n    local vowel_end_index = nil\n    local vowel_length\
    \ = nil\n    local vowel_start_index = nil\n    local vowel_end_index = nil\n\
    \    local vowel_length = nil\n    local vowel_start_index = nil\n    local vowel_end_index\
    \ = nil\n    local vowel_length = nil\n    local vowel_start_index = nil\n   \
    \ local vowel_end_index = nil\n    local vowel_length = nil\n    local vowel_start_index\
    \ = nil\n    local vowel_end_index = nil\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpaeohpkid.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_found_index = -1\n    local vowel_found_index2 = -1\n    local\
    \ vowel_found_index3 = -1\n    local vowel_found_index4 = -1\n    local vowel_found_index5\
    \ = -1\n    local vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n\
    \    local vowel_found_index8 = -1\n    local vowel_found_index9 = -1\n    local\
    \ vowel_found_index10 = -1\n    local vowel_found_index11 = -1\n    local vowel_found_index12\
    \ = -1\n    local vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n\
    \    local vowel_found_index15 = -1\n    local vowel_found_index16 = -1\n    local\
    \ vowel_found_index17 = -1\n    local vowel_found_index18 = -1\n    local vowel_found_index19\
    \ = -1\n    local vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n\
    \    local vowel_found_index22 = -1\n    local vowel_found_index23 = -1\n    local\
    \ vowel_found_index24 = -1\n    local vowel_found_index25 = -1\n    local vowel_found_index26\
    \ = -1\n    local vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n\
    \    local vowel_found_index29 = -1\n    local vowel_found_index30 = -1\n    local\
    \ vowel_found_index31 = -1\n    local vowel_found_index32 = -1\n    local vowel_found_index33\
    \ = -1\n    local vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n\
    \    local vowel_found_index36 = -1\n    local vowel_found_index37 = -1\n    local\
    \ vowel_found_index38 = -1\n    local vowel_found_index39 = -1\n    local vowel_found_index40\
    \ = -1\n    local vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n\
    \    local vowel_found_index43 = -1\n    local vowel_found_index44 = -1\n    local\
    \ vowel_found_index45 = -1\n    local vowel_found_index46 = -1\n    local vowel_found_index47\
    \ = -1\n    local vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n\
    \    local vowel_found_index50 = -1\n    local vowel_found_index51 = -1\n    local\
    \ vowel_found_index52 = -1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpauvelg0e.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = #word\n  local vowels_index2 = #word\n  local vowels_index3 = #word\n  local\
    \ vowels_index4 = #word\n  local vowels_index5 = #word\n  local vowels_index6\
    \ = #word\n  local vowels_index7 = #word\n  local vowels_index8 = #word\n  local\
    \ vowels_index9 = #word\n  local vowels_index10 = #word\n  local vowels_index11\
    \ = #word\n  local vowels_index12 = #word\n  local vowels_index13 = #word\n  local\
    \ vowels_index14 = #word\n  local vowels_index15 = #word\n  local vowels_index16\
    \ = #word\n  local vowels_index17 = #word\n  local vowels_index18 = #word\n  local\
    \ vowels_index19 = #word\n  local vowels_index20 = #word\n  local vowels_index21\
    \ = #word\n  local vowels_index22 = #word\n  local vowels_index23 = #word\n  local\
    \ vowels_index24 = #word\n  local vowels_index25 = #word\n  local vowels_index26\
    \ = #word\n  local vowels_index27 = #word\n  local vowels_index28 = #word\n  local\
    \ vowels_index29 = #word\n  local vowels_index30 = #word\n  local vowels_index31\
    \ = #word\n  local vowels_index32 = #word\n  local vowels_index33 = #word\n  local\
    \ vowels_index34 = #word\n  local vowels_index35 = #word\n  local vowels_index36\
    \ = #word\n  local vowels_index37 = #word\n  local vowels_index38 = #word\n  local\
    \ vowels_index39 = #word\n  local vowels_index40 = #word\n  local vowels_index41\
    \ = #word\n  local vowels_index42 = #word\n  local vowels_index43 = #word\n  local\
    \ vowels_index44 = #word\n  local vowels_index45 = #word\n  local vowels_index46\
    \ = #word\n  local vowels_index47 = #word\n  local vowels_index48 = #word\n  local\
    \ vowels_index49 = #word\n  local vowels_index50 = #word\n  local vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpupn63chx.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n\
    \    local vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwah08or2.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    local vowel_found = false\n\
    \    for i = #word, 2, -1 do\n        if word[i] == \"a\" or word[i] == \"e\"\
    \ or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n         \
    \   vowels[#vowels+1] = word[i]\n            vowels_count = #vowels\n        end\n\
    \    end\n    if vowels_count > 0 then\n        for i = #word, 2, -1 do\n    \
    \        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i]\
    \ == \"o\" or word[i] == \"u\" then\n                local vowel_distance = #vowels\
    \ - vowels_count\n                if vowel_distance < 0 then\n               \
    \     vowel_distance = 0\n                end\n                local vowel_distance\
    \ = #vowels - vowels_count\n                if vowel_distance > 1 then\n     \
    \               vowel_distance = 1\n                end\n                if vowel_distance\
    \ == 0 then\n                    vowel_found = true\n                    break\n\
    \                end\n            end\n        end\n    end\n    if vowel_found\
    \ then\n        return vowels[vowels_count]\n    else\n        return \"\"\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ipusxy.lua:49:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpl0ipusxy.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n   local vowel_count = {}\n\
    \   for i=1,#word do\n      local vowel = word:sub(i,i)\n      if vowel:sub(1,1)\
    \ ~= vowel:sub(#vowel,1) then\n         if vowel_count ~= nil then\n         \
    \   vowel_count[vowel] = vowel_count[vowel] + 1\n         else\n            vowel_count[vowel]\
    \ = 1\n         end\n      end\n   end\n   local vowel_count_sorted = {}\n   for\
    \ k,v in pairs(vowel_count) do\n      vowel_count_sorted[#vowel_count_sorted +\
    \ 1] = k\n   end\n   table.sort(vowel_count_sorted)\n   if vowel_count_sorted[#vowel_count_sorted\
    \ - 1] == #vowel_count then\n      return \"\"\n   end\n   return vowel_count_sorted[#vowel_count_sorted\
    \ - 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx5mb9vz.lua:38:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpyx5mb9vz.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    for i = #word, 2, -1 do\n\
    \        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i]\
    \ == \"o\" or word[i] == \"u\" then\n            table.insert(vowels, word[i])\n\
    \            vowels_count = vowels_count + 1\n        end\n    end\n    if vowels_count\
    \ > 1 then\n        local vowel_1 = vowels[1]\n        local vowel_2 = vowels[#vowels]\n\
    \        local vowel_1_length = #vowel_1\n        local vowel_2_length = #vowel_2\n\
    \        local vowel_1_start = #word\n        local vowel_2_start = #word\n  \
    \      for i = #word, 2, -1 do\n            if word[i] == \"a\" or word[i] ==\
    \ \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n   \
    \             local vowel_1_length = #vowel_1\n                local vowel_2_length\
    \ = #vowel_2\n                local vowel_1_start = #word\n                local\
    \ vowel_2_start = #word\n                break\n            end\n        end\n\
    \        local vowel_1_end = #word\n        local vowel_2_end = #word\n      \
    \  for i = #word, 2, -1 do\n            if word[i] == \"a\" or word[i] == \"e\"\
    \ or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n         \
    \       local vowel_1_length = #vowel_1\n                local vowel_2_length\
    \ = #vowel_2\n                local vowel_1_start = #word\n                local\
    \ vowel_2_start = #word\n                break\n            end\n        end\n\
    \        local vowel_1_end = #word\n        local vowel_2_end = #word\n      \
    \  for i = #word, 2, -1 do\n            if word[i] == \"a\" or word[i] == \"e\"\
    \ or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n         \
    \       local vowel_1_length = #vowel_1\n                local vowel_2_length\
    \ = #vowel_2\n                local vowel_1_start = #word\n                local\
    \ vowel_2_start = #word\n                break\n            end\n        end\n\
    \        local vowel_1_end = #word\n        local vowel_2_end = #word\n      \
    \  for i = #word, 2, -1 do\n            if word[i] == \"a\" or word[i] == \"e\"\
    \ or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n         \
    \       local vowel_1_length = #vowel_1\n                local vowel_2_length\
    \ = #vowel_2\n                local vowel_1_start = #word\n                local\
    \ vowel_2_start = #word\n                break\n            end\n        end\n\
    \        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9bql2bt1.lua:89: 'end' expected (to close 'if' at line 20)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    local vowels_index_count = 0\n \
    \   local vowels_index_index_count = 0\n    local vowels_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_count = 0\n    local\
    \ vowels_index_index_index_index_index_index_count = 0\n    local vowels_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_count = 0\n\
    \    local vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnqe7ji3z.lua:68: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk5e5r2p3.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = 0\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptq532nxg.lua:53: ')' expected (to close '(' at line 52) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = 0\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_minus_1\
    \ = #vowels-1\n    local vowels_index_count_max_minus_2 = #vowels-2\n    local\
    \ vowels_index_count_max_minus_3 = #vowels-3\n    local vowels_index_count_max_minus_4\
    \ = #vowels-4\n    local vowels_index_count_max_minus_5 = #vowels-5\n    local\
    \ vowels_index_count_max_minus_6 = #vowels-6\n    local vowels_index_count_max_minus_7\
    \ = #vowels-7\n    local vowels_index_count_max_minus_8 = #vowels-8\n    local\
    \ vowels_index_count_max_minus_9 = #vowels-9\n    local vowels_index_count_max_minus_10\
    \ = #vowels-10\n    local vowels_index_count_max_minus_11 = #vowels-11\n    local\
    \ vowels_index_count_max_minus_12 = #vowels-12\n    local vowels_index_count_max_minus_13\
    \ = #vowels-13\n    local vowels_index_count_max_minus_14 = #vowels-14\n    local\
    \ vowels_index_count_max_minus_15 = #vowels-15\n    local vowels_index_count_max_minus_16\
    \ = #vowels-16\n    local vowels_index_count_max_minus_17 = #vowels-17\n    local\
    \ vowels_index_count_max_minus_18 = #vowels-18\n    local vowels_index_count_max_minus_19\
    \ = #vowels-19\n    local vowels_index_count_max_minus_20 = #vowels-20\n    local\
    \ vowels_index_count_max_minus_21 = #vowels-21\n    local vowels_index_count_max_minus_22\
    \ = #vowels-22\n    local vowels_index_count_max_minus_23 = #vowels-23\n    local\
    \ vowels_index_count_max_minus_24 = #vowels-24\n    local vowels_index_count_max_minus_25\
    \ = #vowels-25\n    local vowels_index_count_max_minus_26 = #vowels-26\n    local\
    \ vowels_index_count_max_minus_27 = #vowels-27\n    local vowels_index_count_max_minus_28\
    \ = #vowels-28\n    local vowels_index_count_max_minus_29 = #vowels-29\n    local\
    \ vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpown8oj1k.lua:67: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n   local vowels_count\
    \ = #vowels\n   local vowels_index = 0\n   local vowels_index_count = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max_min\
    \ = 0\n   local vowels_index_count_max_min_index = 0\n   local vowels_index_count_max_min_index2\
    \ = 0\n   local vowels_index_count_max_min_index3 = 0\n   local vowels_index_count_max_min_index4\
    \ = 0\n   local vowels_index_count_max_min_index5 = 0\n   local vowels_index_count_max_min_index6\
    \ = 0\n   local vowels_index_count_max_min_index7 = 0\n   local vowels_index_count_max_min_index8\
    \ = 0\n   local vowels_index_count_max_min_index9 = 0\n   local vowels_index_count_max_min_index10\
    \ = 0\n   local vowels_index_count_max_min_index11 = 0\n   local vowels_index_count_max_min_index12\
    \ = 0\n   local vowels_index_count_max_min_index13 = 0\n   local vowels_index_count_max_min_index14\
    \ = 0\n   local vowels_index_count_max_min_index15 = 0\n   local vowels_index_count_max_min_index16\
    \ = 0\n   local vowels_index_count_max_min_index17 = 0\n   local vowels_index_count_max_min_index18\
    \ = 0\n   local vowels_index_count_max_min_index19 = 0\n   local vowels_index_count_max_min_index20\
    \ = 0\n   local vowels_index_count_max_min_index21 = 0\n   local vowels_index_count_max_min_index22\
    \ = 0\n   local vowels_index_count_max_min_index23 = 0\n   local vowels_index_count_max_min_index24\
    \ = 0\n   local vowels_index_count_max_min_index25 = 0\n   local vowels_index_count_max_min_index26\
    \ = 0\n   local vowels_index_count_max_min_index27 = 0\n   local vowels_index_count_max_min_index28\
    \ = 0\n   local vowels_index_count_max_min_index29 = 0\n   local vowels_index_count_max_min_index30\
    \ = 0\n   local vowels_index_count_max_min_index31 = 0\n   local vowels_index_count_max_min_index32\
    \ = 0\n   local vowels_index_count_max_min_index33 = 0\n   local vowels_index_count_max_min_index34\
    \ = 0\n   local vowels_index_count_max_min_index35 = 0\n   local vowels_index_count_max_min_index36\
    \ = 0\n   local vowels_index_count_max_min_index37 = 0\n   local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6lakgpah.lua:76: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local vowels_count = #vowels\n   local vowel_index\
    \ = #word\n   local vowel_found = false\n   local vowel_found_index = 0\n   while\
    \ vowel_index > 0 do\n      local vowel = word:sub(vowel_index - 1, vowel_index)\
    \ -- get the vowel from the word\n      if vowel:sub(1, 1) ~= vowel then -- check\
    \ if the vowel is in the beginning of the word\n         if vowel:sub(1, 1) ~=\
    \ word:sub(vowel_index - 1, vowel_index) then -- check if the vowel is in the\
    \ end of the word\n            vowel_index = vowel_index - 1\n         else\n\
    \            vowel_index = vowel_index - 1\n         end\n      else\n       \
    \  if vowel:sub(1, 1) ~= word:sub(vowel_index - 1, vowel_index) then -- check\
    \ if the vowel is in the end of the word\n            vowel_index = vowel_index\
    \ - 1\n         else\n            vowel_index = vowel_index - 1\n         end\n\
    \      end\n      if vowel:sub(1, 1) ~= vowel then -- check if the vowel is in\
    \ the beginning of the word\n         if vowel:sub(1, 1) ~= word:sub(vowel_index\
    \ - 1, vowel_index) then -- check if the vowel is in the end of the word\n   \
    \         vowel_index = vowel_index - 1\n         else\n            vowel_index\
    \ = vowel_index - 1\n         end\n      else\n         if vowel:sub(1, 1) ~=\
    \ word:sub(vowel_index - 1, vowel_index) then -- check if the vowel is in the\
    \ end of the word\n            vowel_index = vowel_index - 1\n         else\n\
    \            vowel_index = vowel_index - 1\n         end\n      end\n      if\
    \ vowel:sub(1, 1) ~= vowel then -- check if the vowel is in the beginning of the\
    \ word\n         if vowel:sub(1, 1) ~= word:sub(vowel_index - 1, vowel_index)\
    \ then -- check if the vowel is in the end of the word\n            vowel_index\
    \ = vowel_index - 1\n         else\n            vowel_index = vowel_index - 1\n\
    \         end\n      else\n         if vowel:sub(1, 1) ~= word:sub(vowel_index\
    \ - 1, vowel_index) then -- check if the vowel is in the end of the word\n   \
    \         vowel_index = vowel_index - 1\n         else\n            vowel_index\
    \ = vowel_index - 1\n         end\n      end\n      if vowel:sub(1, 1) ~= vowel\
    \ then -- check if the vowel is in the beginning of the word\n         if vowel:sub(1,\
    \ 1) ~= word:sub(vowel_index - 1, vowel_index) then -- check if the vowel is in\
    \ the end of the word\n            vowel_index = vowel_index - 1\n         else\n\
    \            vowel_index = vowel_index - 1\n         end\n      else\n       \
    \  if vowel:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9z4xig35.lua:66: function arguments expected near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    local vowel_found = false\n\
    \    for i = 1, #word do\n        if string.sub(word,i,i) == \"a\" then\n    \
    \        vowels[#vowels+1] = \"a\"\n            vowels_count = #vowels\n     \
    \   end\n        if string.sub(word,i,i) == \"e\" then\n            vowels[#vowels+1]\
    \ = \"e\"\n            vowels_count = #vowels\n        end\n        if string.sub(word,i,i)\
    \ == \"i\" then\n            vowels[#vowels+1] = \"i\"\n            vowels_count\
    \ = #vowels\n        end\n        if string.sub(word,i,i) == \"o\" then\n    \
    \        vowels[#vowels+1] = \"o\"\n            vowels_count = #vowels\n     \
    \   end\n        if string.sub(word,i,i) == \"u\" then\n            vowels[#vowels+1]\
    \ = \"u\"\n            vowels_count = #vowels\n        end\n    end\n    if vowels_count\
    \ > 1 then\n        local vowel_found = false\n        for i = 1, #vowels do\n\
    \            if string.sub(word,#word,#word) == vowels[i] then\n             \
    \   vowel_found = true\n            end\n        end\n        if vowel_found then\n\
    \            return vowels[i]\n        end\n    end\n    return \"\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplph0hd5.lua:54:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpplph0hd5.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_q6v3wiq.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjkh58auq.lua:86: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word - 1\n    local vowels_index3\
    \ = #word - 2\n    local vowels_index4 = #word - 3\n    local vowels_index5 =\
    \ #word - 4\n    local vowels_index6 = #word - 5\n    local vowels_index7 = #word\
    \ - 6\n    local vowels_index8 = #word - 7\n    local vowels_index9 = #word -\
    \ 8\n    local vowels_index10 = #word - 9\n    local vowels_index11 = #word -\
    \ 10\n    local vowels_index12 = #word - 11\n    local vowels_index13 = #word\
    \ - 12\n    local vowels_index14 = #word - 13\n    local vowels_index15 = #word\
    \ - 14\n    local vowels_index16 = #word - 15\n    local vowels_index17 = #word\
    \ - 16\n    local vowels_index18 = #word - 17\n    local vowels_index19 = #word\
    \ - 18\n    local vowels_index20 = #word - 19\n    local vowels_index21 = #word\
    \ - 20\n    local vowels_index22 = #word - 21\n    local vowels_index23 = #word\
    \ - 22\n    local vowels_index24 = #word - 23\n    local vowels_index25 = #word\
    \ - 24\n    local vowels_index26 = #word - 25\n    local vowels_index27 = #word\
    \ - 26\n    local vowels_index28 = #word - 27\n    local vowels_index29 = #word\
    \ - 28\n    local vowels_index30 = #word - 29\n    local vowels_index31 = #word\
    \ - 30\n    local vowels_index32 = #word - 31\n    local vowels_index33 = #word\
    \ - 32\n    local vowels_index34 = #word - 33\n    local vowels_index35 = #word\
    \ - 34\n    local vowels_index36 = #word - 35\n    local vowels_index37 = #word\
    \ - 36\n    local vowels_index38 = #word - 37\n    local vowels_index39 = #word\
    \ - 38\n    local vowels_index40 = #word - 39\n    local vowels_index41 = #word\
    \ - 40\n    local vowels_index42 = #word - 41\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4sdizy__.lua:76: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max_count\
    \ = 0\n  local vowels_index_count_min_count = 0\n  local vowels_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_min_index_count = 0\n  local vowels_index_count_max_count_max\
    \ = 0\n  local vowels_index_count_min_count_min = 0\n  local vowels_index_count_max_count_min\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_index\
    \ = 0\n  local vowels_index_count_max_count_min_index = 0\n  local vowels_index_count_max_count_max_count\
    \ = 0\n  local vowels_index_count_min_count_min_count = 0\n  local vowels_index_count_max_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_min_count = 0\n  local vowels_index_count_max_count_max_index\
    \ = 0\n  local vowels_index_count_min_count_min_count = 0\n  local vowels_index_count_max_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_min_count = 0\n  local vowels_index_count_max_count_max_index\
    \ = 0\n  local vowels_index_count_min_count_min_count = 0\n  local vowels_index_count_max_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_min_count = 0\n  local vowels_index_count_max_count_max_index\
    \ = 0\n  local vowels_index_count_min_count_min_count = 0\n  local vowels_index_count_max_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_min_count = 0\n  local vowels_index_count_max_count_max_index\
    \ = 0\n  local vowels_index_count_min_count_min_count = 0\n  local vowels_index_count_max_count_min_count\
    \ = 0\n  local vowels_index_count_max_count_max_index = 0\n  local vowels_index_count_min_count_min_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo_l1_lql.lua:78: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = true,\n\t\t[\"e\"] = true,\n\t\t[\"i\"] = true,\n\
    \t\t[\"o\"] = true,\n\t\t[\"u\"] = true,\n\t\t[\"y\"] = true,\n\t\t[\"A\"] = true,\n\
    \t\t[\"E\"] = true,\n\t\t[\"I\"] = true,\n\t\t[\"O\"] = true,\n\t\t[\"U\"] = true,\n\
    \t\t[\"Y\"] = true,\n\t\t[\"\xC0\"] = true,\n\t\t[\"\xC8\"] = true,\n\t\t[\"\xCC\
    \"] = true,\n\t\t[\"\xD2\"] = true,\n\t\t[\"\xD9\"] = true,\n\t\t[\"\xDB\"] =\
    \ true,\n\t\t[\"\xDC\"] = true,\n\t\t[\"\xD9\"] = true,\n\t\t[\"\xDC\"] = true,\n\
    \t\t[\"\xC7\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xF1\"] = true,\n\t\t[\"\
    \xD1\"] = true,\n\t\t[\"\xF1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"\
    ] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\
    \t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\
    \xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"\
    ] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\
    \t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\
    \xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"\
    ] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\
    \t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\
    \xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"\
    ] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\
    \t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\
    \xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"\
    ] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\
    \t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\xD1\"] = true,\n\t\t[\"\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp53ajj4vw.lua:87: unfinished string near '\"'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbhmatp5m.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_found = false\n    local vowel_start = nil\n    local\
    \ vowel_end = nil\n    local vowel_distance = nil\n    local vowel_distance =\
    \ nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk92i6r12.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_met_condition = false\n    local vowel_met_count = 0\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local\
    \ vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string\
    \ = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string = \"\"\n \
    \   local vowel_met_index = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local\
    \ vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string\
    \ = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string = \"\"\n \
    \   local vowel_met_index = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local\
    \ vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string\
    \ = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string = \"\"\n \
    \   local vowel_met_index = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local\
    \ vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string\
    \ = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string = \"\"\n \
    \   local vowel_met_index = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local\
    \ vowel_met_string = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string\
    \ = \"\"\n    local vowel_met_index = 0\n    local vowel_met_string = \"\"\n \
    \   local vowel_met_index = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\
    \ = 0\n    local vowel_met_string = \"\"\n    local vowel_met_index\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp91vayr9w.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowel_index = 1\n  local vowel_found = false\n  local vowel_start\
    \ = nil\n  local vowel_end = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1rnp4t_6.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjg3qz5_z.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0yrxbyre.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = 0\n    local vowel_found_count = 0\n    local vowel_found_index = 0\n    local\
    \ vowel_found_flag = false\n    local vowel_found_flag_index = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_count\
    \ = 0\n    local vowel_found_flag_count = 0\n    local vowel_found_flag_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpue1k53ab.lua:95: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = 1\n  local vowel_found = false\n  local vowel_start = nil\n  local vowel_end\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp15krf82s.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_found60 = false\n\tlocal \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfr82top5.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_count_end = 0\n\tlocal vowels_count_start = 0\n\tlocal vowels_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count = 0\n\tlocal vowels_count_start_end_count_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end = 0\n\tlocal vowels_count_start_end_count_start_end_count\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_end = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count =\
    \ 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n\tlocal vowels_count_start_end_count_start_end_count_start_end_count_start_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmpc3s3in.lua:59: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local\
    \ vowels_index_count_max = #word - 1\n  local vowels_index_count_min = #word -\
    \ vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local vowels_index_count_min\
    \ = #word - vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local\
    \ vowels_index_count_max = #word - 1\n  local vowels_index_count_min = #word -\
    \ vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local vowels_index_count_min\
    \ = #word - vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local\
    \ vowels_index_count_max = #word - 1\n  local vowels_index_count_min = #word -\
    \ vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local vowels_index_count_min\
    \ = #word - vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = #word - vowels_count + 1\n  local\
    \ vowels_index_count_max = #word - 1\n  local vowels_index_count_min = #word -\
    \ vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local vowels_index_count_min\
    \ = #word - vowels_count + 1\n  local vowels_index_count_max = #word - 1\n  local\
    \ vowels_index_count_min = #word - vowels_count + 1\n  local vowels_index_count_max\
    \ = #word - 1\n  local vowels_index_count_min = \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppyyyr2aj.lua:53: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local vowels_index_min_count = 0\n    local vowels_index_max_count\
    \ = 0\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw_apak2r.lua:95: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = 0\n  local vowels_index_count_max_min\
    \ = 0\n  local vowels_index_count_max_min_index = 0\n  local vowels_index_count_max_min_index2\
    \ = 0\n  local vowels_index_count_max_min_index3 = 0\n  local vowels_index_count_max_min_index4\
    \ = 0\n  local vowels_index_count_max_min_index5 = 0\n  local vowels_index_count_max_min_index6\
    \ = 0\n  local vowels_index_count_max_min_index7 = 0\n  local vowels_index_count_max_min_index8\
    \ = 0\n  local vowels_index_count_max_min_index9 = 0\n  local vowels_index_count_max_min_index10\
    \ = 0\n  local vowels_index_count_max_min_index11 = 0\n  local vowels_index_count_max_min_index12\
    \ = 0\n  local vowels_index_count_max_min_index13 = 0\n  local vowels_index_count_max_min_index14\
    \ = 0\n  local vowels_index_count_max_min_index15 = 0\n  local vowels_index_count_max_min_index16\
    \ = 0\n  local vowels_index_count_max_min_index17 = 0\n  local vowels_index_count_max_min_index18\
    \ = 0\n  local vowels_index_count_max_min_index19 = 0\n  local vowels_index_count_max_min_index20\
    \ = 0\n  local vowels_index_count_max_min_index21 = 0\n  local vowels_index_count_max_min_index22\
    \ = 0\n  local vowels_index_count_max_min_index23 = 0\n  local vowels_index_count_max_min_index24\
    \ = 0\n  local vowels_index_count_max_min_index25 = 0\n  local vowels_index_count_max_min_index26\
    \ = 0\n  local vowels_index_count_max_min_index27 = 0\n  local vowels_index_count_max_min_index28\
    \ = 0\n  local vowels_index_count_max_min_index29 = 0\n  local vowels_index_count_max_min_index30\
    \ = 0\n  local vowels_index_count_max_min_index31 = 0\n  local vowels_index_count_max_min_index32\
    \ = 0\n  local vowels_index_count_max_min_index33 = 0\n  local vowels_index_count_max_min_index34\
    \ = 0\n  local vowels_index_count_max_min_index35 = 0\n  local vowels_index_count_max_min_index36\
    \ = 0\n  local vowels_index_count_max_min_index37 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp23i7y77k.lua:76: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_count_with_consonants = #word - vowels_count + 1\n\
    \tlocal vowels_count_with_consonants_with_vowels = #word - vowels_count_with_consonants\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end = #word - vowels_count_with_consonants_with_vowels\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels +\
    \ 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ + 1\n\tlocal vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels_at_the_end_with_vowels\
    \ = #word - vowels_count_with_consonants_with_vowels_at_the_end_with_vowels_at_the_end\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2alzo7cg.lua:56: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tfor i = 1, #word do\n\t\tlocal c = word:sub(i,i)\n\t\t\
    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\t\
    \t\ttable.insert(vowels, c)\n\t\tend\n\tend\n\tlocal vowel = table.sort(vowels)[1]\n\
    \treturn vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmks3lqv3.lua:19:\
    \ attempt to index a nil value\nstack traceback:\n\t/tmp/tmpmks3lqv3.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"u\",\n        [\"A\"] = \"a\",\n        [\"E\"] = \"e\",\n\
    \        [\"I\"] = \"i\",\n        [\"O\"] = \"o\",\n        [\"U\"] = \"u\",\n\
    \        [\"Y\"] = \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_count_with_consonants = #word - vowels_count\n    local vowels_count_with_consonants_with_vowels\
    \ = #word - vowels_count_with_consonants\n    local vowels_count_with_consonants_with_vowels_count\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels]]\n    local vowels_count_with_consonants_with_vowels_count_with_consonants\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels_count + vowels_count_with_consonants_with_vowels]]\n\
    \    local vowels_count_with_consonants_with_vowels_count_with_consonants_count\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels_count_with_consonants\
    \ + vowels_count_with_consonants_with_vowels_count_with_consonants]]\n    local\
    \ vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels_count_with_consonants_count\
    \ + vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants]]\n\
    \    local vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants_count_with_consonants\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants\
    \ + vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants_count_with_consonants]]\n\
    \    local vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants_count_with_consonants_count_with_consonants\
    \ = #vowels[word[vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonants_count_with_consonants\
    \ + vowels_count_with_consonants_with_vowels_count_with_consonants_count_with_consonant\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmmdxcl7h.lua:35: ']' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] = \"I\",\n    [\"O\"]\
    \ = \"O\",\n    [\"U\"] = \"U\",\n    [\"Y\"] = \"Y\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_found2 = false\n  local vowel_found3 = false\n  local\
    \ vowel_found4 = false\n  local vowel_found5 = false\n  local vowel_found6 = false\n\
    \  local vowel_found7 = false\n  local vowel_found8 = false\n  local vowel_found9\
    \ = false\n  local vowel_found10 = false\n  local vowel_found11 = false\n  local\
    \ vowel_found12 = false\n  local vowel_found13 = false\n  local vowel_found14\
    \ = false\n  local vowel_found15 = false\n  local vowel_found16 = false\n  local\
    \ vowel_found17 = false\n  local vowel_found18 = false\n  local vowel_found19\
    \ = false\n  local vowel_found20 = false\n  local vowel_found21 = false\n  local\
    \ vowel_found22 = false\n  local vowel_found23 = false\n  local vowel_found24\
    \ = false\n  local vowel_found25 = false\n  local vowel_found26 = false\n  local\
    \ vowel_found27 = false\n  local vowel_found28 = false\n  local vowel_found29\
    \ = false\n  local vowel_found30 = false\n  local vowel_found31 = false\n  local\
    \ vowel_found32 = false\n  local vowel_found33 = false\n  local vowel_found34\
    \ = false\n  local vowel_found35 = false\n  local vowel_found36 = false\n  local\
    \ vowel_found37 = false\n  local vowel_found38 = false\n  local vowel_found39\
    \ = false\n  local vowel_found40 = false\n  local vowel_found41 = false\n  local\
    \ vowel_found42 = false\n  local vowel_found43 = false\n  local vowel_found44\
    \ = false\n  local vowel_found45 = false\n  local vowel_found46 = false\n  local\
    \ vowel_found47 = false\n  local vowel_found48 = false\n  local vowel_found49\
    \ = false\n  local vowel_found50 = false\n  local vowel_found51 = false\n  local\
    \ vowel_found52 = false\n  local vowel_found53 = false\n  local vowel_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4e1m9vaw.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0o4zyzix.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal vowel_found3\
    \ = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\tlocal\
    \ vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8 = false\n\
    \tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal vowel_found11\
    \ = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13 = false\n\tlocal\
    \ vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal vowel_found16\
    \ = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18 = false\n\tlocal\
    \ vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal vowel_found21\
    \ = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23 = false\n\tlocal\
    \ vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal vowel_found26\
    \ = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28 = false\n\tlocal\
    \ vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal vowel_found31\
    \ = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33 = false\n\tlocal\
    \ vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal vowel_found36\
    \ = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38 = false\n\tlocal\
    \ vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal vowel_found41\
    \ = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43 = false\n\tlocal\
    \ vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal vowel_found46\
    \ = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48 = false\n\tlocal\
    \ vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal vowel_found51\
    \ = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53 = false\n\tlocal\
    \ vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal vowel_found56\
    \ = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58 = false\n\tlocal\
    \ vowel_found59 = false\n\tlocal vowel_found60 = false\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp311dwi21.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = 1\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzj7nzbpm.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" -- vowel\
    \ at the beginning\n    }\n    local vowels_end = {\n        \"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel at the end\n    }\n   \
    \ local vowels_middle = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle2 = {\n\
    \        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel\
    \ in the middle\n    }\n    local vowels_middle3 = {\n        \"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n\
    \    local vowels_middle4 = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle5\
    \ = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\
    \ \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    \ -- vowel in the middle\n    }\n    local vowels_middle6 = {\n        \"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n\
    \    }\n    local vowels_middle7 = {\n        \"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle8\
    \ = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\
    \ \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    \ -- vowel in the middle\n    }\n    local vowels_middle9 = {\n        \"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n\
    \    }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptmshd0ue.lua:64: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = true,\n    [\"e\"] = true,\n    [\"i\"] = true,\n\
    \    [\"o\"] = true,\n    [\"u\"] = true,\n    [\"y\"] = true,\n    [\"A\"] =\
    \ true,\n    [\"E\"] = true,\n    [\"I\"] = true,\n    [\"O\"] = true,\n    [\"\
    U\"] = true,\n    [\"Y\"] = true,\n  }\n  local vowel_count = {}\n  for i = 1,\
    \ #word do\n    local letter = word[i]\n    if vowels[letter] then\n      table.insert(vowel_count,\
    \ letter)\n    end\n  end\n  local vowel_count_sorted = table.sort(vowel_count)\n\
    \  local vowel_count_length = #vowel_count_sorted\n  local vowel_count_index =\
    \ vowel_count_length - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n\
    \  local vowel_count_index = vowel_count_length - 1\n  local vowel_count_value\
    \ = vowel_count_sorted[vowel_count_index]\n  local vowel_count_index = vowel_count_length\
    \ - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n  local\
    \ vowel_count_index = vowel_count_length - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n\
    \  local vowel_count_index = vowel_count_length - 1\n  local vowel_count_value\
    \ = vowel_count_sorted[vowel_count_index]\n  local vowel_count_index = vowel_count_length\
    \ - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n  local\
    \ vowel_count_index = vowel_count_length - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n\
    \  local vowel_count_index = vowel_count_length - 1\n  local vowel_count_value\
    \ = vowel_count_sorted[vowel_count_index]\n  local vowel_count_index = vowel_count_length\
    \ - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n  local\
    \ vowel_count_index = vowel_count_length - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n\
    \  local vowel_count_index = vowel_count_length - 1\n  local vowel_count_value\
    \ = vowel_count_sorted[vowel_count_index]\n  local vowel_count_index = vowel_count_length\
    \ - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n  local\
    \ vowel_count_index = vowel_count_length - 1\n  local vowel_count_value = vowel_count_sorted[vowel_count_index]\n\
    \  local vowel_count_index = vowel_count_length - 1\n  local vowel_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwuahvrfc.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptj4asr76.lua:79: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw3lri_mq.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_max = #word\n  local vowels_index_min\
    \ = #word\n  local vowels_index_mid = #word/2\n  local vowels_index_mid_max =\
    \ #word/2\n  local vowels_index_mid_min = #word/2\n  local vowels_index_mid_mid\
    \ = #word/3\n  local vowels_index_mid_mid_max = #word/3\n  local vowels_index_mid_mid_min\
    \ = #word/3\n  local vowels_index_mid_mid_mid = #word/4\n  local vowels_index_mid_mid_mid_max\
    \ = #word/4\n  local vowels_index_mid_mid_min = #word/4\n  local vowels_index_mid_mid_mid\
    \ = #word/5\n  local vowels_index_mid_mid_mid_max = #word/5\n  local vowels_index_mid_mid_min\
    \ = #word/5\n  local vowels_index_mid_mid_mid = #word/6\n  local vowels_index_mid_mid_mid_max\
    \ = #word/6\n  local vowels_index_mid_mid_min = #word/6\n  local vowels_index_mid_mid_mid\
    \ = #word/7\n  local vowels_index_mid_mid_mid_max = #word/7\n  local vowels_index_mid_mid_min\
    \ = #word/7\n  local vowels_index_mid_mid_mid = #word/8\n  local vowels_index_mid_mid_mid_max\
    \ = #word/8\n  local vowels_index_mid_mid_min = #word/8\n  local vowels_index_mid_mid_mid\
    \ = #word/9\n  local vowels_index_mid_mid_mid_max = #word/9\n  local vowels_index_mid_mid_min\
    \ = #word/9\n  local vowels_index_mid_mid_mid = #word/10\n  local vowels_index_mid_mid_mid_max\
    \ = #word/10\n  local vowels_index_mid_mid_min = #word/10\n  local vowels_index_mid_mid_mid\
    \ = #word/11\n  local vowels_index_mid_mid_mid_max = #word/11\n  local vowels_index_mid_mid_min\
    \ = #word/11\n  local vowels_index_mid_mid_mid = #word/12\n  local vowels_index_mid_mid_mid_max\
    \ = #word/12\n  local vowels_index_mid_mid_min = #word/12\n  local vowels_index_mid_mid_mid\
    \ = #word/13\n  local vowels_index_mid_mid_mid_max = #word/\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5zjhv24e.lua:52: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = 0\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#word, 2)\n    local vowels_index_count_max = math.max(#word, 2)\n\
    \    local vowels_index_count_min = math.min(#word, 2)\n    local vowels_index_count_max\
    \ = math.max(#word, 2)\n    local vowels_index_count_min = math.min(#word, 2)\n\
    \    local vowels_index_count_max = math.max(#word, 2)\n    local vowels_index_count_min\
    \ = math.min(#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwi_99l06.lua:53: ')' expected (to close '(' at line 52) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local vowels_count = #vowels\n   local vowels_index\
    \ = 1\n   local vowels_index_count = 0\n   local vowels_index_count_max = #word\
    \ - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_min\
    \ = #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n  \
    \ local vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n  \
    \ local vowels_index_count_max = #word - 1\n   local vowels_index_count_min =\
    \ #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n   local\
    \ vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n  \
    \ local vowels_index_count_max = #word - 1\n   local vowels_index_count_min =\
    \ #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n   local\
    \ vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n  \
    \ local vowels_index_count_max = #word - 1\n   local vowels_index_count_min =\
    \ #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n   local\
    \ vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n  \
    \ local vowels_index_count_max = #word - 1\n   local vowels_index_count_min =\
    \ #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n   local\
    \ vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - vowels_count + 1\n  \
    \ local vowels_index_count_max = #word - 1\n   local vowels_index_count_min =\
    \ #word - vowels_count + 1\n   local vowels_index_count_max = #word - 1\n   local\
    \ vowels_index_count_min = #word - vowels_count + 1\n   local vowels_index_count_max\
    \ = #word - 1\n   local vowels_index_count_min = #word - \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp686j_u2n.lua:53: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n\
    \    local vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp23r0d1e5.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowel_found = false\n  local vowel_found2 = false\n  local\
    \ vowel_found3 = false\n  local vowel_found4 = false\n  local vowel_found5 = false\n\
    \  local vowel_found6 = false\n  local vowel_found7 = false\n  local vowel_found8\
    \ = false\n  local vowel_found9 = false\n  local vowel_found10 = false\n  local\
    \ vowel_found11 = false\n  local vowel_found12 = false\n  local vowel_found13\
    \ = false\n  local vowel_found14 = false\n  local vowel_found15 = false\n  local\
    \ vowel_found16 = false\n  local vowel_found17 = false\n  local vowel_found18\
    \ = false\n  local vowel_found19 = false\n  local vowel_found20 = false\n  local\
    \ vowel_found21 = false\n  local vowel_found22 = false\n  local vowel_found23\
    \ = false\n  local vowel_found24 = false\n  local vowel_found25 = false\n  local\
    \ vowel_found26 = false\n  local vowel_found27 = false\n  local vowel_found28\
    \ = false\n  local vowel_found29 = false\n  local vowel_found30 = false\n  local\
    \ vowel_found31 = false\n  local vowel_found32 = false\n  local vowel_found33\
    \ = false\n  local vowel_found34 = false\n  local vowel_found35 = false\n  local\
    \ vowel_found36 = false\n  local vowel_found37 = false\n  local vowel_found38\
    \ = false\n  local vowel_found39 = false\n  local vowel_found40 = false\n  local\
    \ vowel_found41 = false\n  local vowel_found42 = false\n  local vowel_found43\
    \ = false\n  local vowel_found44 = false\n  local vowel_found45 = false\n  local\
    \ vowel_found46 = false\n  local vowel_found47 = false\n  local vowel_found48\
    \ = false\n  local vowel_found49 = false\n  local vowel_found50 = false\n  local\
    \ vowel_found51 = false\n  local vowel_found52 = false\n  local vowel_found53\
    \ = false\n  local vowel_found54 = false\n  local vowel_found55 = false\n  local\
    \ vowel_found56 = false\n  local vowel_found57 = false\n  local vowel_found58\
    \ = false\n  local vowel_found59 = false\n  local vowel_found60 = false\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr3c9m0xv.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    local vowels_index_count = 0\n \
    \   local vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_max2\
    \ = 0\n    local vowels_index_min2 = 0\n    local vowels_index_max3 = 0\n    local\
    \ vowels_index_min3 = 0\n    local vowels_index_max4 = 0\n    local vowels_index_min4\
    \ = 0\n    local vowels_index_max5 = 0\n    local vowels_index_min5 = 0\n    local\
    \ vowels_index_max6 = 0\n    local vowels_index_min6 = 0\n    local vowels_index_max7\
    \ = 0\n    local vowels_index_min7 = 0\n    local vowels_index_max8 = 0\n    local\
    \ vowels_index_min8 = 0\n    local vowels_index_max9 = 0\n    local vowels_index_min9\
    \ = 0\n    local vowels_index_max10 = 0\n    local vowels_index_min10 = 0\n  \
    \  local vowels_index_max11 = 0\n    local vowels_index_min11 = 0\n    local vowels_index_max12\
    \ = 0\n    local vowels_index_min12 = 0\n    local vowels_index_max13 = 0\n  \
    \  local vowels_index_min13 = 0\n    local vowels_index_max14 = 0\n    local vowels_index_min14\
    \ = 0\n    local vowels_index_max15 = 0\n    local vowels_index_min15 = 0\n  \
    \  local vowels_index_max16 = 0\n    local vowels_index_min16 = 0\n    local vowels_index_max17\
    \ = 0\n    local vowels_index_min17 = 0\n    local vowels_index_max18 = 0\n  \
    \  local vowels_index_min18 = 0\n    local vowels_index_max19 = 0\n    local vowels_index_min19\
    \ = 0\n    local vowels_index_max20 = 0\n    local vowels_index_min20 = 0\n  \
    \  local vowels_index_max21 = 0\n    local vowels_index_min21 = 0\n    local vowels_index_max22\
    \ = 0\n    local vowels_index_min22 = 0\n    local vowels_index_max23 = 0\n  \
    \  local vowels_index_min23 = 0\n    local vowels_index_max24 = 0\n    local vowels_index_min24\
    \ = 0\n    local vowels_index_max25 = 0\n    local vowels_index_min25 = 0\n  \
    \  local vowels_index_max26 = 0\n    local vowels_index_min26 = 0\n    local vowels_index_max27\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy8czm5v8.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"A\"] = \"A\",\n    [\"E\"] = \"E\",\n    [\"I\"] =\
    \ \"I\",\n    [\"O\"] = \"O\",\n    [\"U\"] = \"U\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_found2 = false\n  local vowel_found3 = false\n  local\
    \ vowel_found4 = false\n  local vowel_found5 = false\n  local vowel_found6 = false\n\
    \  local vowel_found7 = false\n  local vowel_found8 = false\n  local vowel_found9\
    \ = false\n  local vowel_found10 = false\n  local vowel_found11 = false\n  local\
    \ vowel_found12 = false\n  local vowel_found13 = false\n  local vowel_found14\
    \ = false\n  local vowel_found15 = false\n  local vowel_found16 = false\n  local\
    \ vowel_found17 = false\n  local vowel_found18 = false\n  local vowel_found19\
    \ = false\n  local vowel_found20 = false\n  local vowel_found21 = false\n  local\
    \ vowel_found22 = false\n  local vowel_found23 = false\n  local vowel_found24\
    \ = false\n  local vowel_found25 = false\n  local vowel_found26 = false\n  local\
    \ vowel_found27 = false\n  local vowel_found28 = false\n  local vowel_found29\
    \ = false\n  local vowel_found30 = false\n  local vowel_found31 = false\n  local\
    \ vowel_found32 = false\n  local vowel_found33 = false\n  local vowel_found34\
    \ = false\n  local vowel_found35 = false\n  local vowel_found36 = false\n  local\
    \ vowel_found37 = false\n  local vowel_found38 = false\n  local vowel_found39\
    \ = false\n  local vowel_found40 = false\n  local vowel_found41 = false\n  local\
    \ vowel_found42 = false\n  local vowel_found43 = false\n  local vowel_found44\
    \ = false\n  local vowel_found45 = false\n  local vowel_found46 = false\n  local\
    \ vowel_found47 = false\n  local vowel_found48 = false\n  local vowel_found49\
    \ = false\n  local vowel_found50 = false\n  local vowel_found51 = false\n  local\
    \ vowel_found52 = false\n  local vowel_found53 = false\n  local vowel_found54\
    \ = false\n  local vowel_found55 = false\n  local vowel_found56 = false\n  local\
    \ vowel_found57 = false\n  local vowel_found58 = false\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpit2qhw23.lua:97: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found = false\n    local vowel_distance = 0\n    local\
    \ vowel_found = false\n    local vowel_distance = 0\n    local vowel_found = false\n\
    \    local vowel_distance = 0\n    local vowel_found = false\n    local vowel_distance\
    \ = 0\n    local vowel_found\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnwu638p0.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowel_index\
    \ = #word\n\tlocal vowel_found = false\n\tlocal vowel_found_index = 0\n\tlocal\
    \ vowel_found_index2 = 0\n\tlocal vowel_found_index3 = 0\n\tlocal vowel_found_index4\
    \ = 0\n\tlocal vowel_found_index5 = 0\n\tlocal vowel_found_index6 = 0\n\tlocal\
    \ vowel_found_index7 = 0\n\tlocal vowel_found_index8 = 0\n\tlocal vowel_found_index9\
    \ = 0\n\tlocal vowel_found_index10 = 0\n\tlocal vowel_found_index11 = 0\n\tlocal\
    \ vowel_found_index12 = 0\n\tlocal vowel_found_index13 = 0\n\tlocal vowel_found_index14\
    \ = 0\n\tlocal vowel_found_index15 = 0\n\tlocal vowel_found_index16 = 0\n\tlocal\
    \ vowel_found_index17 = 0\n\tlocal vowel_found_index18 = 0\n\tlocal vowel_found_index19\
    \ = 0\n\tlocal vowel_found_index20 = 0\n\tlocal vowel_found_index21 = 0\n\tlocal\
    \ vowel_found_index22 = 0\n\tlocal vowel_found_index23 = 0\n\tlocal vowel_found_index24\
    \ = 0\n\tlocal vowel_found_index25 = 0\n\tlocal vowel_found_index26 = 0\n\tlocal\
    \ vowel_found_index27 = 0\n\tlocal vowel_found_index28 = 0\n\tlocal vowel_found_index29\
    \ = 0\n\tlocal vowel_found_index30 = 0\n\tlocal vowel_found_index31 = 0\n\tlocal\
    \ vowel_found_index32 = 0\n\tlocal vowel_found_index33 = 0\n\tlocal vowel_found_index34\
    \ = 0\n\tlocal vowel_found_index35 = 0\n\tlocal vowel_found_index36 = 0\n\tlocal\
    \ vowel_found_index37 = 0\n\tlocal vowel_found_index38 = 0\n\tlocal vowel_found_index39\
    \ = 0\n\tlocal vowel_found_index40 = 0\n\tlocal vowel_found_index41 = 0\n\tlocal\
    \ vowel_found_index42 = 0\n\tlocal vowel_found_index43 = 0\n\tlocal vowel_found_index44\
    \ = 0\n\tlocal vowel_found_index45 = 0\n\tlocal vowel_found_index46 = 0\n\tlocal\
    \ vowel_found_index47 = 0\n\tlocal vowel_found_index48 = 0\n\tlocal vowel_found_index49\
    \ = 0\n\tlocal vowel_found_index50 = 0\n\tlocal vowel_found_index51 = 0\n\tlocal\
    \ vowel_found_index52 = 0\n\tlocal vowel_found_index53 = 0\n\tlocal \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpmz2gpymu.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i=1,#word do\n        if string.sub(word,i,i)\
    \ == \"a\" or string.sub(word,i,i) == \"e\" or string.sub(word,i,i) == \"i\" or\
    \ string.sub(word,i,i) == \"o\" or string.sub(word,i,i) == \"u\" then\n      \
    \      table.insert(vowels, string.sub(word,i,i))\n        end\n    end\n    local\
    \ vowel = table.min(vowels)\n    if vowel ~= \"\" then\n        return vowel\n\
    \    else\n        return \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngns4dmt.lua:18:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpngns4dmt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 = #word\n\tlocal\
    \ vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal vowels_index6\
    \ = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8 = #word\n\tlocal\
    \ vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal vowels_index11\
    \ = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13 = #word\n\t\
    local vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\tlocal vowels_index16\
    \ = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18 = #word\n\t\
    local vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\tlocal vowels_index21\
    \ = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23 = #word\n\t\
    local vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\tlocal vowels_index26\
    \ = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28 = #word\n\t\
    local vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\tlocal vowels_index31\
    \ = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33 = #word\n\t\
    local vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\tlocal vowels_index36\
    \ = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38 = #word\n\t\
    local vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\tlocal vowels_index41\
    \ = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43 = #word\n\t\
    local vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\tlocal vowels_index46\
    \ = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48 = #word\n\t\
    local vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\tlocal vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1wzehwx2.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  for i = #word,\
    \ 2, -1 do\n    if vowel_found then\n      break\n    end\n    if word[i] == \"\
    a\" then\n      vowel_start = i\n      vowel_found = true\n    end\n    if word[i]\
    \ == \"e\" then\n      vowel_end = i\n      vowel_found = true\n    end\n  end\n\
    \  if vowel_start == nil then\n    return \"\"\n  end\n  if vowel_end == nil then\n\
    \    vowel_end = #word\n  end\n  local vowel_length = vowel_end - vowel_start\
    \ + 1\n  local vowel_found = false\n  for i = 1, vowel_length do\n    if vowel_found\
    \ then\n      break\n    end\n    if word[vowel_start + i] ~= vowels[word[vowel_start\
    \ + i]] then\n      vowel_found = true\n    end\n  end\n  if vowel_found then\n\
    \    return word[vowel_start + vowel_length]\n  end\n  return \"\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrfjhdks.lua:60:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpcrfjhdks.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    local vowel_start = 0\n    local vowel_end\
    \ = 0\n    local vowel_found = false\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbrhkhse0.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\"\
    , \"E\", \"I\", \"O\", \"U\", \"Y\",\n    }\n    local vowels_count = #vowels\n\
    \    local vowel_index = 1\n    local vowel_found = false\n    local vowel_start\
    \ = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdnvnijvu.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {}\n\tlocal vowel_start = {}\n\tlocal vowel_end = {}\n\tfor i\
    \ = 1, #word do\n\t\tlocal c = word:sub(i,i)\n\t\tif c == \"a\" or c == \"e\"\
    \ or c == \"i\" or c == \"o\" or c == \"u\" then\n\t\t\ttable.insert(vowels, c)\n\
    \t\t\ttable.insert(vowel_start, i)\n\t\telseif c == \"A\" or c == \"E\" or c ==\
    \ \"I\" or c == \"O\" or c == \"U\" then\n\t\t\ttable.insert(vowels, c)\n\t\t\t\
    table.insert(vowel_end, i)\n\t\tend\n\tend\n\tlocal vowel_start = vowel_start[1]\n\
    \tlocal vowel_end = vowel_end[1]\n\tlocal vowel_length = #vowels\n\tlocal vowel_mid\
    \ = math.ceil(vowel_length / 2)\n\tlocal vowel_mid_index = math.floor(vowel_mid\
    \ - 1)\n\tlocal vowel_mid_index = math.min(vowel_mid_index, #vowel_start)\n\t\
    local vowel_mid_index = math.max(vowel_mid_index, #vowel_end)\n\tlocal vowel_mid\
    \ = vowels[vowel_mid_index]\n\tlocal vowel_start = vowel_start[vowel_mid_index]\n\
    \tlocal vowel_end = vowel_end[vowel_mid_index]\n\tlocal vowel_length = #vowels\n\
    \tlocal vowel_mid = math.ceil(vowel_length / 2)\n\tlocal vowel_mid_index = math.floor(vowel_mid\
    \ - 1)\n\tlocal vowel_mid_index = math.min(vowel_mid_index, #vowel_start)\n\t\
    local vowel_mid_index = math.max(vowel_mid_index, #vowel_end)\n\tlocal vowel_mid\
    \ = vowels[vowel_mid_index]\n\tlocal vowel_start = vowel_start[vowel_mid_index]\n\
    \tlocal vowel_end = vowel_end[vowel_mid_index]\n\tlocal vowel_length = #vowels\n\
    \tlocal vowel_mid = math.ceil(vowel_length / 2)\n\tlocal vowel_mid_index = math.floor(vowel_mid\
    \ - 1)\n\tlocal vowel_mid_index = math.min(vowel_mid_index, #vowel_start)\n\t\
    local vowel_mid_index = math.max(vowel_mid_index, #vowel_end)\n\tlocal vowel_mid\
    \ = vowels[vowel_mid_index]\n\tlocal vowel_start = vowel_start[vowel_mid_index]\n\
    \tlocal vowel_end = vowel_end[vowel_mid_index]\n\tlocal vowel_length = #vowels\n\
    \tlocal vowel_mid = math.ceil(vowel_length / 2)\n\tlocal vowel_mid_index = math.floor(vowel_mid\
    \ - 1)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpebtb2vdz.lua:74: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min_index = 1\n  local vowels_index_count_max_index = #word\n\
    \  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphu82dpjh.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index = 0\n\
    \tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbnklh_gr.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found_index3 = -1\n\
    \    local vowel_found_index4 = -1\n    local vowel_found_index5 = -1\n    local\
    \ vowel_found_index6 = -1\n    local vowel_found_index7 = -1\n    local vowel_found_index8\
    \ = -1\n    local vowel_found_index9 = -1\n    local vowel_found_index10 = -1\n\
    \    local vowel_found_index11 = -1\n    local vowel_found_index12 = -1\n    local\
    \ vowel_found_index13 = -1\n    local vowel_found_index14 = -1\n    local vowel_found_index15\
    \ = -1\n    local vowel_found_index16 = -1\n    local vowel_found_index17 = -1\n\
    \    local vowel_found_index18 = -1\n    local vowel_found_index19 = -1\n    local\
    \ vowel_found_index20 = -1\n    local vowel_found_index21 = -1\n    local vowel_found_index22\
    \ = -1\n    local vowel_found_index23 = -1\n    local vowel_found_index24 = -1\n\
    \    local vowel_found_index25 = -1\n    local vowel_found_index26 = -1\n    local\
    \ vowel_found_index27 = -1\n    local vowel_found_index28 = -1\n    local vowel_found_index29\
    \ = -1\n    local vowel_found_index30 = -1\n    local vowel_found_index31 = -1\n\
    \    local vowel_found_index32 = -1\n    local vowel_found_index33 = -1\n    local\
    \ vowel_found_index34 = -1\n    local vowel_found_index35 = -1\n    local vowel_found_index36\
    \ = -1\n    local vowel_found_index37 = -1\n    local vowel_found_index38 = -1\n\
    \    local vowel_found_index39 = -1\n    local vowel_found_index40 = -1\n    local\
    \ vowel_found_index41 = -1\n    local vowel_found_index42 = -1\n    local vowel_found_index43\
    \ = -1\n    local vowel_found_index44 = -1\n    local vowel_found_index45 = -1\n\
    \    local vowel_found_index46 = -1\n    local vowel_found_index47 = -1\n    local\
    \ vowel_found_index48 = -1\n    local vowel_found_index49 = -1\n    local vowel_found_index50\
    \ = -1\n    local vowel_found_index51 = -1\n    local vowel_found_index52 = -1\n\
    \    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy94o8hyf.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"a\",\n    [\"E\"] = \"e\",\n    [\"I\"] = \"i\",\n    [\"O\"]\
    \ = \"o\",\n    [\"U\"] = \"u\",\n    [\"Y\"] = \"y\",\n  }\n  local vowels_count\
    \ = #vowels\n  local vowel_met_count = 0\n  local vowel_met_index = 0\n  local\
    \ vowel_met_value = 0\n  local vowel_met_index2 = 0\n  local vowel_met_value2\
    \ = 0\n  local vowel_met_index3 = 0\n  local vowel_met_value3 = 0\n  local vowel_met_index4\
    \ = 0\n  local vowel_met_value4 = 0\n  local vowel_met_index5 = 0\n  local vowel_met_value5\
    \ = 0\n  local vowel_met_index6 = 0\n  local vowel_met_value6 = 0\n  local vowel_met_index7\
    \ = 0\n  local vowel_met_value7 = 0\n  local vowel_met_index8 = 0\n  local vowel_met_value8\
    \ = 0\n  local vowel_met_index9 = 0\n  local vowel_met_value9 = 0\n  local vowel_met_index10\
    \ = 0\n  local vowel_met_value10 = 0\n  local vowel_met_index11 = 0\n  local vowel_met_value11\
    \ = 0\n  local vowel_met_index12 = 0\n  local vowel_met_value12 = 0\n  local vowel_met_index13\
    \ = 0\n  local vowel_met_value13 = 0\n  local vowel_met_index14 = 0\n  local vowel_met_value14\
    \ = 0\n  local vowel_met_index15 = 0\n  local vowel_met_value15 = 0\n  local vowel_met_index16\
    \ = 0\n  local vowel_met_value16 = 0\n  local vowel_met_index17 = 0\n  local vowel_met_value17\
    \ = 0\n  local vowel_met_index18 = 0\n  local vowel_met_value18 = 0\n  local vowel_met_index19\
    \ = 0\n  local vowel_met_value19 = 0\n  local vowel_met_index20 = 0\n  local vowel_met_value20\
    \ = 0\n  local vowel_met_index21 = 0\n  local vowel_met_value21 = 0\n  local vowel_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphhol9g7o.lua:90: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"iu\"] = \"i\",\n\t\t[\"ou\"] = \"o\",\n\t\t[\"au\"] = \"a\",\n\t\t[\"ei\"\
    ] = \"e\",\n\t\t[\"oui\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t[\"ai\"] = \"\
    a\",\n\t\t[\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\
    \t\t[\"eiu\"] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t\
    [\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"eiu\"\
    ] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t[\"eau\"] = \"\
    e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"eiu\"] = \"e\",\n\
    \t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t[\"eau\"] = \"e\",\n\t\t\
    [\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"eiu\"] = \"e\",\n\t\t[\"ouiu\"\
    ] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t[\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"\
    o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"eiu\"] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\
    \t\t[\"auu\"] = \"a\",\n\t\t[\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t\
    [\"aiu\"] = \"a\",\n\t\t[\"eiu\"] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"\
    ] = \"a\",\n\t\t[\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"\
    a\",\n\t\t[\"eiu\"] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\
    \t\t[\"eau\"] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t\
    [\"eiu\"] = \"e\",\n\t\t[\"ouiu\"] = \"o\",\n\t\t[\"auu\"] = \"a\",\n\t\t[\"eau\"\
    ] = \"e\",\n\t\t[\"ouau\"] = \"o\",\n\t\t[\"aiu\"] = \"a\",\n\t\t[\"eiu\"] = \"\
    e\",\n\t\t[\"ou\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp3spk9q2f.lua:78: unfinished string near '\"ou'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp96xpjc33.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min_index = 1\n  local vowels_index_count_max_index = 1\n\
    \  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_index_count_max_index\
    \ = 1\n  local vowels_index_count_min_index = 1\n  local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpadiyzg9t.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\"}\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = 0\n\t\
    local vowels_index_count = 0\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd1492y93.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = 0\n    local vowels_index = 0\n    local vowels_index_count = 0\n    local\
    \ vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n    local\
    \ vowels_index_count_min_index = 0\n    local vowels_index_count_max_index = 0\n\
    \    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1dcwr5nm.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_position = -1\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local vowel_found = false\n  local vowel_found = false\n  local vowel_found\
    \ = false\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnnilxdwy.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppxn6m_2x.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_position = 0\n    local vowel_position_count = 0\n    local vowel_found\
    \ = false\n    local vowel_position = 0\n    local vowel_position_count = 0\n\
    \    local vowel_found = false\n    local vowel_position = 0\n    local vowel_position_count\
    \ = 0\n    local vowel_found = false\n    local vowel_position = 0\n    local\
    \ vowel_position_count = 0\n    local vowel_found = false\n    local vowel_position\
    \ = 0\n    local vowel_position_count = 0\n    local vowel_found = false\n   \
    \ local vowel_position = 0\n    local vowel_position_count = 0\n    local vowel_found\
    \ = false\n    local vowel_position = 0\n    local vowel_position_count = 0\n\
    \    local vowel_found = false\n    local vowel_position = 0\n    local vowel_position_count\
    \ = 0\n    local vowel_found = false\n    local vowel_position = 0\n    local\
    \ vowel_position_count = 0\n    local vowel_found = false\n    local vowel_position\
    \ = 0\n    local vowel_position_count = 0\n    local vowel_found = false\n   \
    \ local vowel_position = 0\n    local vowel_position_count = 0\n    local vowel_found\
    \ = false\n    local vowel_position = 0\n    local vowel_position_count = 0\n\
    \    local vowel_found = false\n    local vowel_position = 0\n    local vowel_position_count\
    \ = 0\n    local vowel_found = false\n    local vowel_position = 0\n    local\
    \ vowel_position_count = 0\n    local vowel_found = false\n    local vowel_position\
    \ = 0\n    local vowel_position_count = 0\n    local vowel_found = false\n   \
    \ local vowel_position = 0\n    local vowel_position_count = 0\n    local vowel_found\
    \ = false\n    local vowel_position = 0\n    local vowel_position_count = 0\n\
    \    local vowel_found = false\n    local vowel_position = 0\n    local vowel_position_count\
    \ = 0\n    local vowel_found = false\n    local vowel_position = 0\n    local\
    \ vowel_position_count = 0\n    local vowel_found = false\n    local vowel_position\
    \ = 0\n    local vowel_position_count = 0\n    local vowel_found = false\n   \
    \ local vowel_position = 0\n    local vowel_position_count = 0\n    local vowel_found\
    \ = false\n    local vowel_position = 0\n    local vowel_position\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpm7awf3i6.lua:100: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n  local vowels_count = #vowels\n  local vowels_index = 0\n\
    \  local vowels_index_count = 0\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpfou6hba_.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8kbujzo1.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n   local vowels_count = #vowels\n\
    \   local vowels_index = 0\n   local vowels_index_count = 0\n   local vowels_index_count_prev\
    \ = 0\n   local vowels_index_count_next = 0\n   local vowels_index_count_next2\
    \ = 0\n   local vowels_index_count_next3 = 0\n   local vowels_index_count_next4\
    \ = 0\n   local vowels_index_count_next5 = 0\n   local vowels_index_count_next6\
    \ = 0\n   local vowels_index_count_next7 = 0\n   local vowels_index_count_next8\
    \ = 0\n   local vowels_index_count_next9 = 0\n   local vowels_index_count_next10\
    \ = 0\n   local vowels_index_count_next11 = 0\n   local vowels_index_count_next12\
    \ = 0\n   local vowels_index_count_next13 = 0\n   local vowels_index_count_next14\
    \ = 0\n   local vowels_index_count_next15 = 0\n   local vowels_index_count_next16\
    \ = 0\n   local vowels_index_count_next17 = 0\n   local vowels_index_count_next18\
    \ = 0\n   local vowels_index_count_next19 = 0\n   local vowels_index_count_next20\
    \ = 0\n   local vowels_index_count_next21 = 0\n   local vowels_index_count_next22\
    \ = 0\n   local vowels_index_count_next23 = 0\n   local vowels_index_count_next24\
    \ = 0\n   local vowels_index_count_next25 = 0\n   local vowels_index_count_next26\
    \ = 0\n   local vowels_index_count_next27 = 0\n   local vowels_index_count_next28\
    \ = 0\n   local vowels_index_count_next29 = 0\n   local vowels_index_count_next30\
    \ = 0\n   local vowels_index_count_next31 = 0\n   local vowels_index_count_next32\
    \ = 0\n   local vowels_index_count_next33 = 0\n   local vowels_index_count_next34\
    \ = 0\n   local vowels_index_count_next35 = 0\n   local vowels_index_count_next36\
    \ = 0\n   local vowels_index_count_next37 = 0\n   local vowels_index_count_next38\
    \ = 0\n   local vowels_index_count_next39 = 0\n   local vowels_index_count_next40\
    \ = 0\n   local vowels_index_count_next41 = 0\n   local vowels_index_count_next42\
    \ = 0\n   local vowels_index_count_next43 = 0\n   local vowels_index_count_next44\
    \ = 0\n   local vowels_index_count_next45 = 0\n   local vowels_index_count_next46\
    \ = 0\n   local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb4tgtxf8.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptzih39mm.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = {}\n  local vowels_index_count\
    \ = 0\n  local vowels_index_max = 0\n  for i = 1, #word do\n    if vowels[word[i]]\
    \ then\n      table.insert(vowels_index, word[i])\n      vowels_index_count =\
    \ vowels_index_count + 1\n      if vowels_index_count > vowels_index_max then\n\
    \        vowels_index_max = vowels_index_count\n      end\n    end\n  end\n  local\
    \ vowels_index_min = #vowels_index\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_min_max = 0\n  for i = 1, #word do\n    if vowels[word[i]] then\n\
    \      local vowels_index_min = #vowels_index\n      local vowels_index_min_count\
    \ = 0\n      local vowels_index_min_max = 0\n      for j = 1, #vowels_index do\n\
    \        if vowels[vowels_index[j]] then\n          local vowels_index_min = #vowels_index\n\
    \          local vowels_index_min_count = 0\n          local vowels_index_min_max\
    \ = 0\n          for k = 1, #vowels_index do\n            if vowels[vowels_index[k]]\
    \ then\n              local vowels_index_min = #vowels_index\n              local\
    \ vowels_index_min_count = 0\n              local vowels_index_min_max = 0\n \
    \             for l = 1, #vowels_index do\n                if vowels[vowels_index[l]]\
    \ then\n                  local vowels_index_min = #vowels_index\n           \
    \       local vowels_index_min_count = 0\n                  local vowels_index_min_max\
    \ = 0\n                  for m = 1, #vowels_index do\n                    if vowels[vowels_index[m]]\
    \ then\n                      local vowels_index_min = #vowels_index\n       \
    \               local vowels_index_min_count = 0\n                      local\
    \ vowels_index_min_max = 0\n                      for n = 1, #vowels_index do\n\
    \                        if vowels[vowels_index[n]] then\n                   \
    \       local vowels_index_min = #vowels_index\n                          local\
    \ vowels_index_min_count = 0\n                          local vowels_index_min_max\
    \ = 0\n                          for o = 1, #vowels_index do\n               \
    \             if vowels[vowels_index[o]] then\n                              local\
    \ vowels_index_min = #vowels_index\n                              local vowels_index_min_count\
    \ = 0\n                              local vowels_index_min_max = 0\n        \
    \                    end\n                          end\n                    \
    \    end\n                      end\n                    end\n               \
    \   end\n                end\n              end\n            end\n          end\n\
    \        end\n      end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxbmk_7tq.lua:96: 'end' expected (to close 'if' at line 30)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = \"aeiouAEIOU\"\n   local vowels_count = #vowels\n   local vowels_index\
    \ = 0\n   local vowels_index_count = 0\n   local vowels_index_count_max = #word\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n  \
    \ local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max =\
    \ 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n  \
    \ local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local\
    \ vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min\
    \ = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min =\
    \ 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n\
    \   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n  \
    \ local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max\
    \ = 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max =\
    \ 0\n   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n\
    \   local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n  \
    \ local vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local\
    \ vowels_index_count_min = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min\
    \ = 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min =\
    \ 0\n   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n\
    \   local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n  \
    \ local vowels_index_count_max = 0\n   local vowels_index_count_min = 0\n   local\
    \ vowels_index_count_max = 0\n   local vowels_index_count_min = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8_nf08om.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_index2 = -1\n    local vowel_found2 = false\n  \
    \  local vowel_found2_index = -1\n    local vowel_found2_index2 = -1\n    local\
    \ vowel_found3 = false\n    local vowel_found3_index = -1\n    local vowel_found3_index2\
    \ = -1\n    local vowel_found4 = false\n    local vowel_found4_index = -1\n  \
    \  local vowel_found4_index2 = -1\n    local vowel_found5 = false\n    local vowel_found5_index\
    \ = -1\n    local vowel_found5_index2 = -1\n    local vowel_found6 = false\n \
    \   local vowel_found6_index = -1\n    local vowel_found6_index2 = -1\n    local\
    \ vowel_found7 = false\n    local vowel_found7_index = -1\n    local vowel_found7_index2\
    \ = -1\n    local vowel_found8 = false\n    local vowel_found8_index = -1\n  \
    \  local vowel_found8_index2 = -1\n    local vowel_found9 = false\n    local vowel_found9_index\
    \ = -1\n    local vowel_found9_index2 = -1\n    local vowel_found10 = false\n\
    \    local vowel_found10_index = -1\n    local vowel_found10_index2 = -1\n   \
    \ local vowel_found11 = false\n    local vowel_found11_index = -1\n    local vowel_found11_index2\
    \ = -1\n    local vowel_found12 = false\n    local vowel_found12_index = -1\n\
    \    local vowel_found12_index2 = -1\n    local vowel_found13 = false\n    local\
    \ vowel_found13_index = -1\n    local vowel_found13_index2 = -1\n    local vowel_found14\
    \ = false\n    local vowel_found14_index = -1\n    local vowel_found14_index2\
    \ = -1\n    local vowel_found15 = false\n    local vowel_found15_index = -1\n\
    \    local vowel_found15_index2 = -1\n    local vowel_found16 = false\n    local\
    \ vowel_found16_index = -1\n    local vowel_found16_index2 = -1\n    local vowel_found17\
    \ = false\n    local vowel_found17_index = -1\n    local vowel_found17_index2\
    \ = -1\n    local vowel_found18 = false\n    local vowel_found18_index = -1\n\
    \    local vowel_found18_index2 = -1\n    local \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp39zh5yop.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\", \"Y\"}\n    local vowels_count = #vowels\n    local vowel_index\
    \ = #word\n    local vowel_found = false\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpa8ivrbok.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 1\n  \
    \  local vowels_index_count_prev = 1\n    local vowels_index_count_next = 1\n\
    \    local vowels_index_count_next2 = 0\n    local vowels_index_count_next3 =\
    \ 0\n    local vowels_index_count_next4 = 0\n    local vowels_index_count_next5\
    \ = 0\n    local vowels_index_count_next6 = 0\n    local vowels_index_count_next7\
    \ = 0\n    local vowels_index_count_next8 = 0\n    local vowels_index_count_next9\
    \ = 0\n    local vowels_index_count_next10 = 0\n    local vowels_index_count_next11\
    \ = 0\n    local vowels_index_count_next12 = 0\n    local vowels_index_count_next13\
    \ = 0\n    local vowels_index_count_next14 = 0\n    local vowels_index_count_next15\
    \ = 0\n    local vowels_index_count_next16 = 0\n    local vowels_index_count_next17\
    \ = 0\n    local vowels_index_count_next18 = 0\n    local vowels_index_count_next19\
    \ = 0\n    local vowels_index_count_next20 = 0\n    local vowels_index_count_next21\
    \ = 0\n    local vowels_index_count_next22 = 0\n    local vowels_index_count_next23\
    \ = 0\n    local vowels_index_count_next24 = 0\n    local vowels_index_count_next25\
    \ = 0\n    local vowels_index_count_next26 = 0\n    local vowels_index_count_next27\
    \ = 0\n    local vowels_index_count_next28 = 0\n    local vowels_index_count_next29\
    \ = 0\n    local vowels_index_count_next30 = 0\n    local vowels_index_count_next31\
    \ = 0\n    local vowels_index_count_next32 = 0\n    local vowels_index_count_next33\
    \ = 0\n    local vowels_index_count_next34 = 0\n    local vowels_index_count_next35\
    \ = 0\n    local vowels_index_count_next36 = 0\n    local vowels_index_count_next37\
    \ = 0\n    local vowels_index_count_next38 = 0\n    local vowels_index_count_next39\
    \ = 0\n    local vowels_index_count_next40 = 0\n    local vowels_index_count_next41\
    \ = 0\n    local vowels_index_count_next42 = 0\n    local vowels_index_count_next43\
    \ = 0\n    local vowels_index_count_next44 = 0\n    local vowels_index_count_next45\
    \ = 0\n    local vowels_index_count_next46 = 0\n    local vowels_index_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpnfx52ztv.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"}\n\tlocal vowels_count =\
    \ 0\n\tlocal vowels_index = 1\n\tlocal vowels_index_prev = 1\n\tlocal vowels_index_next\
    \ = 1\n\tlocal vowels_index_prev2 = 1\n\tlocal vowels_index_next2 = 1\n\tlocal\
    \ vowels_index_prev3 = 1\n\tlocal vowels_index_next3 = 1\n\tlocal vowels_index_prev4\
    \ = 1\n\tlocal vowels_index_next4 = 1\n\tlocal vowels_index_prev5 = 1\n\tlocal\
    \ vowels_index_next5 = 1\n\tlocal vowels_index_prev6 = 1\n\tlocal vowels_index_next6\
    \ = 1\n\tlocal vowels_index_prev7 = 1\n\tlocal vowels_index_next7 = 1\n\tlocal\
    \ vowels_index_prev8 = 1\n\tlocal vowels_index_next8 = 1\n\tlocal vowels_index_prev9\
    \ = 1\n\tlocal vowels_index_next9 = 1\n\tlocal vowels_index_prev10 = 1\n\tlocal\
    \ vowels_index_next10 = 1\n\tlocal vowels_index_prev11 = 1\n\tlocal vowels_index_next11\
    \ = 1\n\tlocal vowels_index_prev12 = 1\n\tlocal vowels_index_next12 = 1\n\tlocal\
    \ vowels_index_prev13 = 1\n\tlocal vowels_index_next13 = 1\n\tlocal vowels_index_prev14\
    \ = 1\n\tlocal vowels_index_next14 = 1\n\tlocal vowels_index_prev15 = 1\n\tlocal\
    \ vowels_index_next15 = 1\n\tlocal vowels_index_prev16 = 1\n\tlocal vowels_index_next16\
    \ = 1\n\tlocal vowels_index_prev17 = 1\n\tlocal vowels_index_next17 = 1\n\tlocal\
    \ vowels_index_prev18 = 1\n\tlocal vowels_index_next18 = 1\n\tlocal vowels_index_prev19\
    \ = 1\n\tlocal vowels_index_next19 = 1\n\tlocal vowels_index_prev20 = 1\n\tlocal\
    \ vowels_index_next20 = 1\n\tlocal vowels_index_prev21 = 1\n\tlocal vowels_index_next21\
    \ = 1\n\tlocal vowels_index_prev22 = 1\n\tlocal vowels_index_next22 = 1\n\tlocal\
    \ vowels_index_prev23 = 1\n\tlocal vowels_index_next23 = 1\n\tlocal vowels_index_prev24\
    \ = 1\n\tlocal vowels_index_next24 = 1\n\tlocal vowels_index_prev25 = 1\n\tlocal\
    \ vowels_index_next25 = 1\n\tlocal vowels_index_prev26 = 1\n\tlocal vowels_index_next26\
    \ = 1\n\tlocal vowels_index_prev27 = 1\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxwwe6jvo.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = 1\n    local vowel_found = false\n    local\
    \ vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance = nil\n\
    \    local vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmps1i6g447.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = 1\n    local vowel_found = false\n    local vowel_start = nil\n\
    \    local vowel_end = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpg83mfd28.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowel_index = #word\n    local vowel_found = false\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_count = 0\n    local vowel_found_index = -1\n    local vowel_found_count\
    \ = 0\n    local vowel_found_index = -1\n    local vowel_found_count = 0\n   \
    \ local vowel_found_index = -1\n    local vowel_found_count = 0\n    local vowel_found_index\
    \ = -1\n    local vowel_found_count = 0\n    local vowel_found_index = -1\n  \
    \  local vowel_found_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpeuvyqsnh.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_max_min\
    \ = #vowels\n    local vowels_index_count_max_min_index = 0\n    local vowels_index_count_max_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min = #vowels\n    local\
    \ vowels_index_count_max_min_index_count_min_index = 0\n    local vowels_index_count_max_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min =\
    \ #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = #vowels\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_max_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8jckahor.lua:56: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowel_count = {}\n    for i = 1,\
    \ #vowels do\n        vowel_count[vowels[i]] = nil\n    end\n    local vowel_count_index\
    \ = 1\n    for i = 1, #word do\n        if word[i] == word[#word] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = vowel_count_index + 1\n        end\n    end\n    local vowel_count_index =\
    \ 1\n    for i = #word, 2, -1 do\n        if word[i] == word[i-1] then\n     \
    \       vowel_count[vowels[vowel_count_index]]  = word[i]\n            vowel_count_index\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgz35xibc.lua:78: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {'a','e','i','o','u'}\n   local vowels_count = #vowels\n  \
    \ local vowels_index = {}\n   for i = 1, #word do\n      local vowel = word:sub(i,i)\n\
    \      if vowel:sub(1,1) ~= vowel then\n         if vowels_index[vowel] == nil\
    \ then\n            vowels_index[vowel] = i\n         else\n            local\
    \ index = vowels_index[vowel]\n            if index > i then\n               vowels_index[vowel]\
    \ = i\n            end\n         end\n      end\n   end\n   local vowels_count\
    \ = #vowels_index\n   if vowels_count > 1 then\n      local vowels_index = #vowels_index\n\
    \      for i = 1, vowels_count do\n         local vowel = vowels[vowels_index[i]]\n\
    \         if vowel:sub(1,1) ~= vowel then\n            return vowel\n        \
    \ end\n      end\n   end\n   return \"\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohkzcb5q.lua:44:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpohkzcb5q.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = 0\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(#word, 2)\n  local vowels_index_count_max = math.max(#word, 2)\n\
    \  local vowels_index_count_min = math.min(#word, 2)\n  local vowels_index_count_max\
    \ = math.max(#word, 2)\n  local vowels_index_count_min = math.min(#word, 2)\n\
    \  local vowels_index_count_max = math.max(#word, 2)\n  local vowels_index_count_min\
    \ = math.min(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpjz9bxf3o.lua:53: ')' expected (to close '(' at line 52) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = \"a\",\n    [\"e\"] = \"e\",\n    [\"i\"] =\
    \ \"i\",\n    [\"o\"] = \"o\",\n    [\"u\"] = \"u\",\n    [\"y\"] = \"y\",\n \
    \   [\"A\"] = \"a\",\n    [\"E\"] = \"e\",\n    [\"I\"] = \"i\",\n    [\"O\"]\
    \ = \"o\",\n    [\"U\"] = \"u\",\n    [\"Y\"] = \"y\",\n  }\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance\
    \ = nil\n  for i = #word, 2, -1 do\n    local char = word[i]\n    if vowels[char]\
    \ then\n      vowel_start = i\n      vowel_found = true\n      break\n    end\n\
    \  end\n  if vowel_found then\n    local vowel_length = i - vowel_start + 1\n\
    \    for i = #word, 2, -1 do\n      local char = word[i]\n      if vowels[char]\
    \ then\n        vowel_end = i\n        vowel_distance = i - vowel_start + 1\n\
    \        break\n      end\n    end\n  end\n  if vowel_start ~= nil and vowel_end\
    \ ~= nil then\n    local vowel_distance = vowel_end - vowel_start + 1\n    if\
    \ vowel_distance < #vowels then\n      return vowels[vowel_distance]\n    end\n\
    \  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps75o9adx.lua:61:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmps75o9adx.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    for i = 1, #word do\n        local char = word[i]\n\
    \        if char == \"a\" or char == \"e\" or char == \"i\" or char == \"o\" or\
    \ char == \"u\" then\n            table.insert(vowels, char)\n        end\n  \
    \  end\n    local vowel = table.maxn(vowels)\n    if vowel ~= \"\" then\n    \
    \    return vowel\n    else\n        return \"\"\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5h18jk36.lua:30:\
    \ expected: \"u\"\nactual: 0\nstack traceback:\n\t/tmp/tmp5h18jk36.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqvjurgmn.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = #word\n  local vowels_index2 = 0\n  local vowels_index3 = 0\n  local vowels_index4\
    \ = 0\n  local vowels_index5 = 0\n  local vowels_index6 = 0\n  local vowels_index7\
    \ = 0\n  local vowels_index8 = 0\n  local vowels_index9 = 0\n  local vowels_index10\
    \ = 0\n  local vowels_index11 = 0\n  local vowels_index12 = 0\n  local vowels_index13\
    \ = 0\n  local vowels_index14 = 0\n  local vowels_index15 = 0\n  local vowels_index16\
    \ = 0\n  local vowels_index17 = 0\n  local vowels_index18 = 0\n  local vowels_index19\
    \ = 0\n  local vowels_index20 = 0\n  local vowels_index21 = 0\n  local vowels_index22\
    \ = 0\n  local vowels_index23 = 0\n  local vowels_index24 = 0\n  local vowels_index25\
    \ = 0\n  local vowels_index26 = 0\n  local vowels_index27 = 0\n  local vowels_index28\
    \ = 0\n  local vowels_index29 = 0\n  local vowels_index30 = 0\n  local vowels_index31\
    \ = 0\n  local vowels_index32 = 0\n  local vowels_index33 = 0\n  local vowels_index34\
    \ = 0\n  local vowels_index35 = 0\n  local vowels_index36 = 0\n  local vowels_index37\
    \ = 0\n  local vowels_index38 = 0\n  local vowels_index39 = 0\n  local vowels_index40\
    \ = 0\n  local vowels_index41 = 0\n  local vowels_index42 = 0\n  local vowels_index43\
    \ = 0\n  local vowels_index44 = 0\n  local vowels_index45 = 0\n  local vowels_index46\
    \ = 0\n  local vowels_index47 = 0\n  local vowels_index48 = 0\n  local vowels_index49\
    \ = 0\n  local vowels_index50 = 0\n  local vowels_index51 = 0\n  local vowels_index52\
    \ = 0\n  local vowels_index53 = 0\n  local vowels_index54 = 0\n  local vowels_index55\
    \ = 0\n  local vowels_index56 = 0\n  local vowels_index57 = 0\n  local vowels_index58\
    \ = 0\n  local vowels_index59 = 0\n  local vowels_index60 = 0\n  local vowels_index61\
    \ = 0\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd7vcqn1w.lua:95: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppcz3waxw.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index = 0\n\
    \tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkuhhpu4i.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = #word\n    local vowels_index_count_max_min\
    \ = 0\n    local vowels_index_count_max_min_index = 1\n    local vowels_index_count_max_min_index2\
    \ = 1\n    local vowels_index_count_max_min_index3 = 1\n    local vowels_index_count_max_min_index4\
    \ = 1\n    local vowels_index_count_max_min_index5 = 1\n    local vowels_index_count_max_min_index6\
    \ = 1\n    local vowels_index_count_max_min_index7 = 1\n    local vowels_index_count_max_min_index8\
    \ = 1\n    local vowels_index_count_max_min_index9 = 1\n    local vowels_index_count_max_min_index10\
    \ = 1\n    local vowels_index_count_max_min_index11 = 1\n    local vowels_index_count_max_min_index12\
    \ = 1\n    local vowels_index_count_max_min_index13 = 1\n    local vowels_index_count_max_min_index14\
    \ = 1\n    local vowels_index_count_max_min_index15 = 1\n    local vowels_index_count_max_min_index16\
    \ = 1\n    local vowels_index_count_max_min_index17 = 1\n    local vowels_index_count_max_min_index18\
    \ = 1\n    local vowels_index_count_max_min_index19 = 1\n    local vowels_index_count_max_min_index20\
    \ = 1\n    local vowels_index_count_max_min_index21 = 1\n    local vowels_index_count_max_min_index22\
    \ = 1\n    local vowels_index_count_max_min_index23 = 1\n    local vowels_index_count_max_min_index24\
    \ = 1\n    local vowels_index_count_max_min_index25 = 1\n    local vowels_index_count_max_min_index26\
    \ = 1\n    local vowels_index_count_max_min_index27 = 1\n    local vowels_index_count_max_min_index28\
    \ = 1\n    local vowels_index_count_max_min_index29 = 1\n    local vowels_index_count_max_min_index30\
    \ = 1\n    local vowels_index_count_max_min_index31 = 1\n    local vowels_index_count_max_min_index32\
    \ = 1\n    local vowels_index_count_max_min_index33 = 1\n    local vowels_index_count_max_min_index34\
    \ = 1\n    local vowels_index_count_max_min_index35 = 1\n    local vowels_index_count_max_min_index36\
    \ = 1\n    local vowels_index_count_max_min_index37 = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1mpf8r69.lua:75: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" -- vowel\
    \ at the beginning\n    }\n    local vowels_end = {\n        \"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel at the end\n    }\n   \
    \ local vowels_middle = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"\
    w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle2 = {\n\
    \        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel\
    \ in the middle\n    }\n    local vowels_middle3 = {\n        \"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n\
    \    local vowels_middle4 = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle5\
    \ = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\
    \ \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    \ -- vowel in the middle\n    }\n    local vowels_middle6 = {\n        \"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n\
    \    }\n    local vowels_middle7 = {\n        \"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n    }\n    local vowels_middle8\
    \ = {\n        \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\",\
    \ \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"\
    \ -- vowel in the middle\n    }\n    local vowels_middle9 = {\n        \"b\",\
    \ \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\" -- vowel in the middle\n\
    \    }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpx7_4yzj7.lua:64: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpoglr0aot.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"A\"] = true,\n    [\"E\"] = true,\n    [\"I\"] = true,\n\
    \    [\"O\"] = true,\n    [\"U\"] = true,\n  }\n  local vowel_found = false\n\
    \  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance =\
    \ nil\n  for i = #word, 2, -1 do\n    if vowels[word[i]] then\n      vowel_start\
    \ = i\n      vowel_found = true\n      break\n    end\n  end\n  if vowel_found\
    \ then\n    local vowel_length = i - vowel_start + 1\n    for i = vowel_start\
    \ + 1, #word do\n      if vowels[word[i]] then\n        vowel_end = i\n      \
    \  vowel_distance = vowel_end - vowel_start + 1\n        break\n      end\n  \
    \  end\n  end\n  if vowel_distance ~= nil then\n    return word:sub(vowel_start,\
    \ vowel_start + vowel_distance)\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37u8c6n6.lua:49:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp37u8c6n6.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowel_count\
    \ = {}\n    for i = 1, #word do\n        local vowel = word:sub(i, i)\n      \
    \  if vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~= vowel:sub(-1, -1) or vowel:sub(1, 1) ~= vowel:sub(-1,\
    \ -1) or vowel:sub(1, 1) ~\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmppg1dyhqp.lua:16: 'then' expected near '~'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = {}\n  local vowels_index_count = 0\n  for i = 1, #word do\n \
    \   local letter = word[i]\n    local index = #vowels\n    for j = 1, #vowels\
    \ do\n      if letter == vowels[j] then\n        index = j\n        break\n  \
    \    end\n    end\n    if index == nil then\n      return \"\"\n    end\n    table.insert(vowels_index,\
    \ index)\n    vowels_index_count = vowels_index_count + 1\n  end\n  if vowels_index_count\
    \ < vowels_count then\n    return \"\"\n  end\n  local vowels_index_min = math.min(vowels_index)\n\
    \  local vowels_index_max = math.max(vowels_index)\n  local vowels_index_mid =\
    \ math.floor(vowels_index_min + (vowels_index_max - vowels_index_min)/2)\n  local\
    \ vowels_index_mid_value = vowels_index[vowels_index_mid]\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value + 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ - 1\n  local vowels_index_mid_value = vowels_index_mid_value + 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value - 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ + 1\n  local vowels_index_mid_value = vowels_index_mid_value - 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value + 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ - 1\n  local vowels_index_mid_value = vowels_index_mid_value + 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value - 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ + 1\n  local vowels_index_mid_value = vowels_index_mid_value - 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value + 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ - 1\n  local vowels_index_mid_value = vowels_index_mid_value + 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value - 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ + 1\n  local vowels_index_mid_value = vowels_index_mid_value - 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value + 1\n  local vowels_index_mid_value = vowels_index_mid_value\
    \ - 1\n  local vowels_index_mid_value = vowels_index_mid_value + 1\n  local vowels_index_mid_value\
    \ = vowels_index_mid_value - 1\n  local vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbf0t0d_2.lua:80: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n    local vowels_count = #vowels\n    local vowel_found =\
    \ false\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpl8bmgnw9.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index_index = 0\n\tlocal vowels_index_count_max_min_index_index_index\
    \ = 0\n\tlocal vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvdby8cko.lua:73: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr4i_v5se.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowels_count = #vowels\n\tlocal vowels_index\
    \ = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 = #word\n\tlocal\
    \ vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal vowels_index6\
    \ = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8 = #word\n\tlocal\
    \ vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal vowels_index11\
    \ = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13 = #word\n\t\
    local vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\tlocal vowels_index16\
    \ = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18 = #word\n\t\
    local vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\tlocal vowels_index21\
    \ = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23 = #word\n\t\
    local vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\tlocal vowels_index26\
    \ = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28 = #word\n\t\
    local vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\tlocal vowels_index31\
    \ = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33 = #word\n\t\
    local vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\tlocal vowels_index36\
    \ = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38 = #word\n\t\
    local vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\tlocal vowels_index41\
    \ = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43 = #word\n\t\
    local vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\tlocal vowels_index46\
    \ = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48 = #word\n\t\
    local vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\tlocal vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp2sgkk1jq.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_found_index = -1\n  local\
    \ vowel_found_index2 = -1\n  local vowel_found_index3 = -1\n  local vowel_found_index4\
    \ = -1\n  local vowel_found_index5 = -1\n  local vowel_found_index6 = -1\n  local\
    \ vowel_found_index7 = -1\n  local vowel_found_index8 = -1\n  local vowel_found_index9\
    \ = -1\n  local vowel_found_index10 = -1\n  local vowel_found_index11 = -1\n \
    \ local vowel_found_index12 = -1\n  local vowel_found_index13 = -1\n  local vowel_found_index14\
    \ = -1\n  local vowel_found_index15 = -1\n  local vowel_found_index16 = -1\n \
    \ local vowel_found_index17 = -1\n  local vowel_found_index18 = -1\n  local vowel_found_index19\
    \ = -1\n  local vowel_found_index20 = -1\n  local vowel_found_index21 = -1\n \
    \ local vowel_found_index22 = -1\n  local vowel_found_index23 = -1\n  local vowel_found_index24\
    \ = -1\n  local vowel_found_index25 = -1\n  local vowel_found_index26 = -1\n \
    \ local vowel_found_index27 = -1\n  local vowel_found_index28 = -1\n  local vowel_found_index29\
    \ = -1\n  local vowel_found_index30 = -1\n  local vowel_found_index31 = -1\n \
    \ local vowel_found_index32 = -1\n  local vowel_found_index33 = -1\n  local vowel_found_index34\
    \ = -1\n  local vowel_found_index35 = -1\n  local vowel_found_index36 = -1\n \
    \ local vowel_found_index37 = -1\n  local vowel_found_index38 = -1\n  local vowel_found_index39\
    \ = -1\n  local vowel_found_index40 = -1\n  local vowel_found_index41 = -1\n \
    \ local vowel_found_index42 = -1\n  local vowel_found_index43 = -1\n  local vowel_found_index44\
    \ = -1\n  local vowel_found_index45 = -1\n  local vowel_found_index46 = -1\n \
    \ local vowel_found_index47 = -1\n  local vowel_found_index48 = -1\n  local vowel_found_index49\
    \ = -1\n  local vowel_found_index50 = -1\n  local vowel_found_index51 = -1\n \
    \ local vowel_found_index52 = -1\n  local vowel\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprftp39ed.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpf395i_3_.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ vowels[i])\n  end\n  local vowels_count = #word\n  local vowels_index = {}\n\
    \  for i = 1, vowels_count do\n    table.insert(vowels_index, word[i])\n  end\n\
    \  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1,\
    \ vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count\
    \ = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n \
    \   table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count =\
    \ #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n   \
    \ table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count = #vowels_index\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ vowels_index[i])\n  end\n  local vowels_count = #vowels_index\n  local vowels_index\
    \ = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n\
    \  end\n  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n\
    \  local vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1,\
    \ vowels_count do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local\
    \ vowels_count = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count\
    \ = #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n \
    \   table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count =\
    \ #vowels_index\n  local vowels_index = {}\n  for i = 1, vowels_count do\n   \
    \ table.insert(vowels_index, vowels_index[i])\n  end\n  local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4uu7iqok.lua:99: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpyie6a7uf.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowel_index = 1\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\
    \tlocal vowel_found3 = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5\
    \ = false\n\tlocal vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal\
    \ vowel_found8 = false\n\tlocal vowel_found9 = false\n\tlocal vowel_found10 =\
    \ false\n\tlocal vowel_found11 = false\n\tlocal vowel_found12 = false\n\tlocal\
    \ vowel_found13 = false\n\tlocal vowel_found14 = false\n\tlocal vowel_found15\
    \ = false\n\tlocal vowel_found16 = false\n\tlocal vowel_found17 = false\n\tlocal\
    \ vowel_found18 = false\n\tlocal vowel_found19 = false\n\tlocal vowel_found20\
    \ = false\n\tlocal vowel_found21 = false\n\tlocal vowel_found22 = false\n\tlocal\
    \ vowel_found23 = false\n\tlocal vowel_found24 = false\n\tlocal vowel_found25\
    \ = false\n\tlocal vowel_found26 = false\n\tlocal vowel_found27 = false\n\tlocal\
    \ vowel_found28 = false\n\tlocal vowel_found29 = false\n\tlocal vowel_found30\
    \ = false\n\tlocal vowel_found31 = false\n\tlocal vowel_found32 = false\n\tlocal\
    \ vowel_found33 = false\n\tlocal vowel_found34 = false\n\tlocal vowel_found35\
    \ = false\n\tlocal vowel_found36 = false\n\tlocal vowel_found37 = false\n\tlocal\
    \ vowel_found38 = false\n\tlocal vowel_found39 = false\n\tlocal vowel_found40\
    \ = false\n\tlocal vowel_found41 = false\n\tlocal vowel_found42 = false\n\tlocal\
    \ vowel_found43 = false\n\tlocal vowel_found44 = false\n\tlocal vowel_found45\
    \ = false\n\tlocal vowel_found46 = false\n\tlocal vowel_found47 = false\n\tlocal\
    \ vowel_found48 = false\n\tlocal vowel_found49 = false\n\tlocal vowel_found50\
    \ = false\n\tlocal vowel_found51 = false\n\tlocal vowel_found52 = false\n\tlocal\
    \ vowel_found53 = false\n\tlocal vowel_found54 = false\n\tlocal vowel_found55\
    \ = false\n\tlocal vowel_found56 = false\n\tlocal vowel_found57 = false\n\tlocal\
    \ vowel_found58 = false\n\tlocal vowel_found59 = false\n\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgz5surst.lua:94: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = 0\n\tlocal vowels_index\
    \ = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max = 0\n\t\
    local vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo1pt8lzq.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = \"aeiouAEIOU\"\n\tlocal vowel_found = false\n\tlocal vowel_start\
    \ = 0\n\tlocal vowel_end = 0\n\tlocal vowel_found = false\n\tfor i = 1, #word\
    \ do\n\t\tlocal c = word[i]\n\t\tif vowel_found == false then\n\t\t\tif vowels:find(c)\
    \ then\n\t\t\t\tvowel_found = true\n\t\t\t\tvowel_start = i\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\telseif vowel_found == true then\n\t\t\tif vowels:find(c) then\n\t\
    \t\t\tvowel_end = i\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tif vowel_found\
    \ == true then\n\t\treturn word:sub(vowel_start, vowel_end)\n\telse\n\t\treturn\
    \ \"\"\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fwtltng.lua:20:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp0fwtltng.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp0fwtltng.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = #word\n  local vowels_index2 = #word\n  local vowels_index3 = #word\n  local\
    \ vowels_index4 = #word\n  local vowels_index5 = #word\n  local vowels_index6\
    \ = #word\n  local vowels_index7 = #word\n  local vowels_index8 = #word\n  local\
    \ vowels_index9 = #word\n  local vowels_index10 = #word\n  local vowels_index11\
    \ = #word\n  local vowels_index12 = #word\n  local vowels_index13 = #word\n  local\
    \ vowels_index14 = #word\n  local vowels_index15 = #word\n  local vowels_index16\
    \ = #word\n  local vowels_index17 = #word\n  local vowels_index18 = #word\n  local\
    \ vowels_index19 = #word\n  local vowels_index20 = #word\n  local vowels_index21\
    \ = #word\n  local vowels_index22 = #word\n  local vowels_index23 = #word\n  local\
    \ vowels_index24 = #word\n  local vowels_index25 = #word\n  local vowels_index26\
    \ = #word\n  local vowels_index27 = #word\n  local vowels_index28 = #word\n  local\
    \ vowels_index29 = #word\n  local vowels_index30 = #word\n  local vowels_index31\
    \ = #word\n  local vowels_index32 = #word\n  local vowels_index33 = #word\n  local\
    \ vowels_index34 = #word\n  local vowels_index35 = #word\n  local vowels_index36\
    \ = #word\n  local vowels_index37 = #word\n  local vowels_index38 = #word\n  local\
    \ vowels_index39 = #word\n  local vowels_index40 = #word\n  local vowels_index41\
    \ = #word\n  local vowels_index42 = #word\n  local vowels_index43 = #word\n  local\
    \ vowels_index44 = #word\n  local vowels_index45 = #word\n  local vowels_index46\
    \ = #word\n  local vowels_index47 = #word\n  local vowels_index48 = #word\n  local\
    \ vowels_index49 = #word\n  local vowels_index50 = #word\n  local vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqblrn7qn.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n  local vowels_index_count_min_index_index\
    \ = 0\n  local vowels_index_count_max_index_index = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0ogb669l.lua:80: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   if word == nil then\n      return nil\n   end\n   local vowels = {}\n   for\
    \ i = #word, 2, -1 do\n      local c = string.sub(word,i,i)\n      if c == \"\
    a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n         table.insert(vowels,\
    \ c)\n      end\n   end\n   if #vowels == 0 then\n      return \"\"\n   end\n\
    \   local vowel = table.min(vowels)\n   local vowel_pos = #vowels\n   for i =\
    \ #word, 2, -1 do\n      local c = string.sub(word,i,i)\n      if c == \"a\" or\
    \ c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n         if vowel_pos\
    \ > 0 then\n            if vowels[vowel_pos-1] == c then\n               vowel_pos\
    \ = vowel_pos - 1\n            else\n               break\n            end\n \
    \        else\n            break\n         end\n      end\n   end\n   return vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5ud4bn5.lua:25:\
    \ attempt to call field 'min' (a nil value)\nstack traceback:\n\t/tmp/tmpf5ud4bn5.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_met_count = 0\n    local vowel_met_index = 0\n  \
    \  local vowel_met_index_count = 0\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel_met_index_count_max\
    \ = math.max(#vowels, #word)\n    local vowel_met_index_count_min = math.min(#vowels,\
    \ #word)\n    local vowel_met_index_count_max = math.max(#vowels, #word)\n   \
    \ local vowel_met_index_count_min = math.min(#vowels, #word)\n    local vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp71esm61x.lua:64: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_min_max = #vowels\n    local vowels_index_count_min_max_index\
    \ = 0\n    local vowels_index_count_min_max_index_count = 0\n    local vowels_index_count_min_max_index_count_min\
    \ = 0\n    local vowels_index_count_min_max_index_count_max = 0\n    local vowels_index_count_min_max_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_max_index = 0\n    local\
    \ vowels_index_count_min_max_index_count_min_index_count = 0\n    local vowels_index_count_min_max_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min =\
    \ 0\n    local vowels_index_count_min_max_index_count_min_index_count_max = 0\n\
    \    local vowels_index_count_min_max_index_count_min_index_count_min_index =\
    \ 0\n    local vowels_index_count_min_max_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpb2acd0_t.lua:64: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\n    [\"a\"] = true,\n    [\"e\"] = true,\n    [\"i\"] = true,\n\
    \    [\"o\"] = true,\n    [\"u\"] = true\n  }\n  local vowels_count = 0\n  for\
    \ i = 1, #word do\n    if vowels[word[i]] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  if vowels_count > 1 then\n    local vowel_start = #word\n\
    \    for i = 1, #word do\n      if vowels[word[i]] then\n        vowel_start =\
    \ i\n        break\n      end\n    end\n    local vowel_end = #word\n    for i\
    \ = 1, #word do\n      if vowels[word[i]] then\n        vowel_end = i\n      \
    \  break\n      end\n    end\n    if vowel_start > 1 then\n      if vowel_end\
    \ < #word then\n        return word[vowel_end - 1]\n      else\n        return\
    \ \"\"\n      end\n    elseif vowel_end < #word then\n      return word[vowel_end\
    \ + 1]\n    else\n      return \"\"\n    end\n  else\n    return \"\"\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xusb1fa.lua:59:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3xusb1fa.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word - 1\n    local vowels_index_count_min = #word - 2\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_index_count_min\
    \ = #word - 2\n    local vowels_index_count_max = #word - 1\n    local vowels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkifm5lgo.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" -- vowels\
    \ starting from the right side\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzkmkrsgz.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(#word, vowels_count)\n\
    \    local vowels_index_count_min = math.min(#word, vowels_count)\n    local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n    local vowels_index_count_min = math.min(#word,\
    \ vowels_count)\n    local vowels_index_count_max = math.max(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpcq6_yvmy.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        [\"a\"] = \"a\",\n        [\"e\"] = \"e\",\n  \
    \      [\"i\"] = \"i\",\n        [\"o\"] = \"o\",\n        [\"u\"] = \"u\",\n\
    \        [\"y\"] = \"y\",\n        [\"iu\"] = \"iu\",\n        [\"ou\"] = \"ou\"\
    ,\n        [\"au\"] = \"au\",\n        [\"ei\"] = \"ei\",\n        [\"ai\"] =\
    \ \"ai\",\n        [\"oui\"] = \"oui\",\n        [\"aui\"] = \"aui\",\n      \
    \  [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"\
    ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"\
    aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"] = \"auiu\"\
    ,\n        [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"\
    ] = \"ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n  \
    \      [\"aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"\
    ] = \"auiu\",\n        [\"eau\"] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n  \
    \      [\"ouau\"] = \"ouau\",\n        [\"auu\"] = \"auu\",\n        [\"eiu\"\
    ] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouiu\"] = \"ouiu\",\n \
    \       [\"auiu\"] = \"auiu\",\n        [\"eau\"] = \"eau\",\n        [\"aiu\"\
    ] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n        [\"auu\"] = \"auu\",\n \
    \       [\"eiu\"] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouiu\"\
    ] = \"ouiu\",\n        [\"auiu\"] = \"auiu\",\n        [\"eau\"] = \"eau\",\n\
    \        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n        [\"auu\"\
    ] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"aiu\"] = \"aiu\",\n   \
    \     [\"ouiu\"] = \"ouiu\",\n        [\"auiu\"] = \"auiu\",\n        [\"eau\"\
    ] = \"eau\",\n        [\"aiu\"] = \"aiu\",\n        [\"ouau\"] = \"ouau\",\n \
    \       [\"auu\"] = \"auu\",\n        [\"eiu\"] = \"eiu\",\n        [\"aiu\"]\
    \ = \"aiu\",\n        \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp88_xnqsk.lua:75: '}' expected (to close '{' at line 12) near\
    \ 'function'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ 0\n  local vowel_found = false\n  local vowel_start = nil\n  local vowel_end\
    \ = nil\n  for i = #word, 2, -1 do\n    if vowels[word[i]] then\n      vowels_count\
    \ = vowels_count + 1\n      if vowel_found == false then\n        vowel_start\
    \ = i\n        vowel_found = true\n      elseif vowel_found == true then\n   \
    \     vowel_end = i\n        break\n      end\n    end\n  end\n  if vowels_count\
    \ > 0 then\n    if vowel_start ~= nil then\n      if vowel_end ~= nil then\n \
    \       return word[vowel_start + 1]\n      else\n        return word[vowel_start]\n\
    \      end\n    else\n      return word[1]\n    end\n  else\n    return \"\"\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgwcshp7.lua:47:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpkgwcshp7.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpbpfa61nx.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwyagjmy5.lua:88: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp4ad5b35h.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = { 'a', 'e', 'i', 'o', 'u' }\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#word, vowels_count)\n  local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n  local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n  local vowels_index_count_min = math.min(#word, vowels_count)\n\
    \  local vowels_index_count_max = math.max(#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp08cujs1k.lua:48: ')' expected (to close '(' at line 47) near\
    \ '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = #word\n    local vowels_index2 = #word\n\
    \    local vowels_index3 = #word\n    local vowels_index4 = #word\n    local vowels_index5\
    \ = #word\n    local vowels_index6 = #word\n    local vowels_index7 = #word\n\
    \    local vowels_index8 = #word\n    local vowels_index9 = #word\n    local vowels_index10\
    \ = #word\n    local vowels_index11 = #word\n    local vowels_index12 = #word\n\
    \    local vowels_index13 = #word\n    local vowels_index14 = #word\n    local\
    \ vowels_index15 = #word\n    local vowels_index16 = #word\n    local vowels_index17\
    \ = #word\n    local vowels_index18 = #word\n    local vowels_index19 = #word\n\
    \    local vowels_index20 = #word\n    local vowels_index21 = #word\n    local\
    \ vowels_index22 = #word\n    local vowels_index23 = #word\n    local vowels_index24\
    \ = #word\n    local vowels_index25 = #word\n    local vowels_index26 = #word\n\
    \    local vowels_index27 = #word\n    local vowels_index28 = #word\n    local\
    \ vowels_index29 = #word\n    local vowels_index30 = #word\n    local vowels_index31\
    \ = #word\n    local vowels_index32 = #word\n    local vowels_index33 = #word\n\
    \    local vowels_index34 = #word\n    local vowels_index35 = #word\n    local\
    \ vowels_index36 = #word\n    local vowels_index37 = #word\n    local vowels_index38\
    \ = #word\n    local vowels_index39 = #word\n    local vowels_index40 = #word\n\
    \    local vowels_index41 = #word\n    local vowels_index42 = #word\n    local\
    \ vowels_index43 = #word\n    local vowels_index44 = #word\n    local vowels_index45\
    \ = #word\n    local vowels_index46 = #word\n    local vowels_index47 = #word\n\
    \    local vowels_index48 = #word\n    local vowels_index49 = #word\n    local\
    \ vowels_index50 = #word\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmplfvu4kre.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   if word == nil then\n      return nil\n   end\n   local vowels = {\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n   local vowels_count = #vowels\n   local vowels_index\
    \ = 0\n   local vowels_index_count = 0\n   local vowels_index_count_max = #word\n\
    \   local vowels_index_count_min = #word\n   local vowels_index_count_min_index\
    \ = 0\n   local vowels_index_count_max_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   local vowels_index_count_max_index\
    \ = 0\n   local vowels_index_count_min_index = 0\n   \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo4xbw_u6.lua:85: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    local vowels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpd0q2ydtk.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_index = #word\n    local vowel_found = false\n  \
    \  local vowel_start = nil\n    local vowel_end = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp8l30fwq5.lua:84: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowel_found = false\n    local vowel_start = nil\n    local\
    \ vowel_end = nil\n    local vowel_distance = nil\n    local vowel_distance =\
    \ nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = nil\n    local vowel_distance = nil\n    local vowel_distance = nil\n    local\
    \ vowel_distance = nil\n    local vowel_distance = nil\n    local vowel_distance\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp5oxpure_.lua:84: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = #vowels\n    local vowels_index_count_max =\
    \ 0\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowel\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgxw469cy.lua:79: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\",\n        \"e\",\n        \"i\",\n      \
    \  \"o\",\n        \"u\",\n    }\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_middle = math.floor(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_middle2 = math.ceil(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n   \
    \ local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_middle\
    \ = math.floor(vowels_index_count_max / 2)\n    local vowels_index_count_middle2\
    \ = math.ceil(vowels_index_count_max / 2)\n    local vowels_index_count_min =\
    \ math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_middle = math.floor(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_middle2 = math.ceil(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n   \
    \ local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_middle\
    \ = math.floor(vowels_index_count_max / 2)\n    local vowels_index_count_middle2\
    \ = math.ceil(vowels_index_count_max / 2)\n    local vowels_index_count_min =\
    \ math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_middle = math.floor(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_middle2 = math.ceil(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_min = math.min(#word, vowels_count)\n   \
    \ local vowels_index_count_max = math.max(#word, vowels_count)\n    local vowels_index_count_middle\
    \ = math.floor(vowels_index_count_max / 2)\n    local vowels_index_count_middle2\
    \ = math.ceil(vowels_index_count_max / 2)\n    local vowels_index_count_min =\
    \ math.min(#word, vowels_count)\n    local vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n    local vowels_index_count_middle = math.floor(vowels_index_count_max\
    \ / 2)\n    local vowels_index_count_middle2 = math.ceil(vowels_index_count_max\
    \ / 2)\n    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp533qumnt.lua:70: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n\
    \  local vowels_index_count_max = #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpdg7yr8qe.lua:64: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {}\n  local vowel_found = false\n  for i = 1, #word do\n   \
    \ if string.sub(word,i,i) == \"a\" then\n      vowels[1] = i\n      vowel_found\
    \ = true\n    end\n    if string.sub(word,i,i) == \"e\" then\n      vowels[2]\
    \ = i\n      vowel_found = true\n    end\n    if string.sub(word,i,i) == \"i\"\
    \ then\n      vowels[3] = i\n      vowel_found = true\n    end\n    if string.sub(word,i,i)\
    \ == \"o\" then\n      vowels[4] = i\n      vowel_found = true\n    end\n    if\
    \ string.sub(word,i,i) == \"u\" then\n      vowels[5] = i\n      vowel_found =\
    \ true\n    end\n  end\n  if vowel_found == false then\n    return \"\"\n  end\n\
    \  local vowel_start = vowels[#vowels]\n  local vowel_end = vowels[#vowels+1]\n\
    \  local vowel_length = vowel_end - vowel_start + 1\n  local vowel_middle = string.sub(word,vowel_start\
    \ + 1,vowel_end)\n  local vowel_middle_index = string.find(vowel_middle,\"a\"\
    ,\"e\",\"i\",\"o\",\"u\")\n  if vowel_middle_index == nil then\n    return \"\"\
    \n  end\n  local vowel_middle_index = string.sub(word,vowel_start + 1,vowel_middle_index)\n\
    \  local vowel_middle_index = string.find(vowel_middle,\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n  if vowel_middle_index == nil then\n    return \"\"\n  end\n  local\
    \ vowel_middle_index = string.sub(word,vowel_start + 1,vowel_middle_index)\n \
    \ local vowel_middle_index = string.find(vowel_middle,\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n  if vowel_middle_index == nil then\n    return \"\"\n  end\n  local\
    \ vowel_middle_index = string.sub(word,vowel_start + 1,vowel_middle_index)\n \
    \ local vowel_middle_index = string.find(vowel_middle,\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n  if vowel_middle_index == nil then\n    return \"\"\n  end\n  local\
    \ vowel_middle_index = string.sub(word,vowel_start + 1,vowel_middle_index)\n \
    \ local vowel_middle_index = string.find(vowel_middle,\"a\",\"e\",\"i\",\"o\"\
    ,\"u\")\n  if vowel_middle_index == nil then\n    return \"\"\n  end\n  local\
    \ vowel_middle_index = string.sub(word,vowel_start + 1,vowel_middle_index)\n \
    \ local vowel_middle_index = string.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpok61ntwa.lua:69: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    local vowels_index_count = 0\n \
    \   local vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_current\
    \ = 0\n    local vowels_index_current2 = 0\n    local vowels_index_current3 =\
    \ 0\n    local vowels_index_current4 = 0\n    local vowels_index_current5 = 0\n\
    \    local vowels_index_current6 = 0\n    local vowels_index_current7 = 0\n  \
    \  local vowels_index_current8 = 0\n    local vowels_index_current9 = 0\n    local\
    \ vowels_index_current10 = 0\n    local vowels_index_current11 = 0\n    local\
    \ vowels_index_current12 = 0\n    local vowels_index_current13 = 0\n    local\
    \ vowels_index_current14 = 0\n    local vowels_index_current15 = 0\n    local\
    \ vowels_index_current16 = 0\n    local vowels_index_current17 = 0\n    local\
    \ vowels_index_current18 = 0\n    local vowels_index_current19 = 0\n    local\
    \ vowels_index_current20 = 0\n    local vowels_index_current21 = 0\n    local\
    \ vowels_index_current22 = 0\n    local vowels_index_current23 = 0\n    local\
    \ vowels_index_current24 = 0\n    local vowels_index_current25 = 0\n    local\
    \ vowels_index_current26 = 0\n    local vowels_index_current27 = 0\n    local\
    \ vowels_index_current28 = 0\n    local vowels_index_current29 = 0\n    local\
    \ vowels_index_current30 = 0\n    local vowels_index_current31 = 0\n    local\
    \ vowels_index_current32 = 0\n    local vowels_index_current33 = 0\n    local\
    \ vowels_index_current34 = 0\n    local vowels_index_current35 = 0\n    local\
    \ vowels_index_current36 = 0\n    local vowels_index_current37 = 0\n    local\
    \ vowels_index_current38 = 0\n    local vowels_index_current39 = 0\n    local\
    \ vowels_index_current40 = 0\n    local vowels_index_current41 = 0\n    local\
    \ vowels_index_current42 = 0\n    local vowels_index_current43 = 0\n    local\
    \ vowels_index_current44 = 0\n    local vowels_index_current45 = 0\n    local\
    \ vowels_index_current46 = 0\n    local vowels_index_current47 = 0\n    local\
    \ vowels_index_current48 = 0\n    local vowels_index_current49 = 0\n    local\
    \ vowels_index_current50 = 0\n    local vowels_index_current51 = 0\n    \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo4k0yo5h.lua:89: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpy5jm6gwl.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowel_count\
    \ = {}\n    for i = 1, #word do\n        local letter = word[i]\n        if vowels[letter]\
    \ then\n            vowel_count[letter] = vowel_count[letter] + 1\n        end\n\
    \    end\n    for i = 1, #vowels do\n        if vowel_count[vowels[i]] >= 2 then\n\
    \            return vowels[i]\n        end\n    end\n    return \"\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngmt6pty.lua:21:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpngmt6pty.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp6tzeb8p6.lua:103: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index2\
    \ = 0\n\tlocal vowels_index_count_min_index2 = 0\n\tlocal vowels_index_count_max_index3\
    \ = 0\n\tlocal vowels_index_count_min_index3 = 0\n\tlocal vowels_index_count_max_index4\
    \ = 0\n\tlocal vowels_index_count_min_index4 = 0\n\tlocal vowels_index_count_max_index5\
    \ = 0\n\tlocal vowels_index_count_min_index5 = 0\n\tlocal vowels_index_count_max_index6\
    \ = 0\n\tlocal vowels_index_count_min_index6 = 0\n\tlocal vowels_index_count_max_index7\
    \ = 0\n\tlocal vowels_index_count_min_index7 = 0\n\tlocal vowels_index_count_max_index8\
    \ = 0\n\tlocal vowels_index_count_min_index8 = 0\n\tlocal vowels_index_count_max_index9\
    \ = 0\n\tlocal vowels_index_count_min_index9 = 0\n\tlocal vowels_index_count_max_index10\
    \ = 0\n\tlocal vowels_index_count_min_index10 = 0\n\tlocal vowels_index_count_max_index11\
    \ = 0\n\tlocal vowels_index_count_min_index11 = 0\n\tlocal vowels_index_count_max_index12\
    \ = 0\n\tlocal vowels_index_count_min_index12 = 0\n\tlocal vowels_index_count_max_index13\
    \ = 0\n\tlocal vowels_index_count_min_index13 = 0\n\tlocal vowels_index_count_max_index14\
    \ = 0\n\tlocal vowels_index_count_min_index14 = 0\n\tlocal vowels_index_count_max_index15\
    \ = 0\n\tlocal vowels_index_count_min_index15 = 0\n\tlocal vowels_index_count_max_index16\
    \ = 0\n\tlocal vowels_index_count_min_index16 = 0\n\tlocal vowels_index_count_max_index17\
    \ = 0\n\tlocal vowels_index_count_min_index17 = 0\n\tlocal vowels_index_count_max_index18\
    \ = 0\n\tlocal vowels_index_count_min_index18 = 0\n\tlocal vowels_index_count_max_index19\
    \ = 0\n\tlocal vowels_index_count_min_index19 = 0\n\tlocal vowels_index_count_max_index20\
    \ = 0\n\tlocal vowels_index_count_min_index20 = 0\n\tlocal vowels_index_count_max_index21\
    \ = 0\n\tlocal vowels_index_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp33b3j__h.lua:79: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max_index\
    \ = 0\n  local vowels_index_count_min_index = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_min_index = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_min_index = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_min_index = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_min_index = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_min_index = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_min_index = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpea41_z_o.lua:86: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n    local vowels_count =\
    \ #vowels\n    local vowels_index = {}\n    local vowels_index_count = 0\n   \
    \ local vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_current\
    \ = 0\n    local vowels_index_current_max = 0\n    local vowels_index_current_min\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_count\
    \ = 0\n    local vowels_index_current_max_count = 0\n    local vowels_index_current_min_count\
    \ = 0\n    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvt3py_dc.lua:90: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpswm6s1c2.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_start = nil\n  local vowel_end\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local vowel_distance = nil\n  local vowel_distance = nil\n  local vowel_distance\
    \ = nil\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwj3_8hlk.lua:104: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local vowels_count = #vowels\n    local\
    \ vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_max = 1\n    local vowels_index_count_temp\
    \ = 1\n    local vowels_index_count_temp2 = 1\n    local vowels_index_count_temp3\
    \ = 1\n    local vowels_index_count_temp4 = 1\n    local vowels_index_count_temp5\
    \ = 1\n    local vowels_index_count_temp6 = 1\n    local vowels_index_count_temp7\
    \ = 1\n    local vowels_index_count_temp8 = 1\n    local vowels_index_count_temp9\
    \ = 1\n    local vowels_index_count_temp10 = 1\n    local vowels_index_count_temp11\
    \ = 1\n    local vowels_index_count_temp12 = 1\n    local vowels_index_count_temp13\
    \ = 1\n    local vowels_index_count_temp14 = 1\n    local vowels_index_count_temp15\
    \ = 1\n    local vowels_index_count_temp16 = 1\n    local vowels_index_count_temp17\
    \ = 1\n    local vowels_index_count_temp18 = 1\n    local vowels_index_count_temp19\
    \ = 1\n    local vowels_index_count_temp20 = 1\n    local vowels_index_count_temp21\
    \ = 1\n    local vowels_index_count_temp22 = 1\n    local vowels_index_count_temp23\
    \ = 1\n    local vowels_index_count_temp24 = 1\n    local vowels_index_count_temp25\
    \ = 1\n    local vowels_index_count_temp26 = 1\n    local vowels_index_count_temp27\
    \ = 1\n    local vowels_index_count_temp28 = 1\n    local vowels_index_count_temp29\
    \ = 1\n    local vowels_index_count_temp30 = 1\n    local vowels_index_count_temp31\
    \ = 1\n    local vowels_index_count_temp32 = 1\n    local vowels_index_count_temp33\
    \ = 1\n    local vowels_index_count_temp34 = 1\n    local vowels_index_count_temp35\
    \ = 1\n    local vowels_index_count_temp36 = 1\n    local vowels_index_count_temp37\
    \ = 1\n    local vowels_index_count_temp38 = 1\n    local vowels_index_count_temp39\
    \ = 1\n    local vowels_index_count_temp40 = 1\n    local vowels_index_count_temp41\
    \ = 1\n    local vowels_index_count_temp42 = 1\n    local vowels_index_count_temp43\
    \ = 1\n    local vowels_index_count_temp44 = 1\n    local vowels_index_count_temp45\
    \ = 1\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwv0wzu9b.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        \"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\"\
    , \"E\", \"I\", \"O\", \"U\", \"Y\"\n    }\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzag8avig.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_min = 0\n    local vowels_index_count_max = 0\n  \
    \  local vowels_index_count_max_index = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_diff = 0\n    local vowels_index_count_max_diff\
    \ = 0\n    local vowels_index_count_max_diff_min = 0\n    local vowels_index_count_max_diff_max\
    \ = 0\n    local vowels_index_count_max_diff_max_index = 0\n    local vowels_index_count_max_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_index = 0\n    local vowels_index_count_min_diff_min\
    \ = 0\n    local vowels_index_count_min_diff_max = 0\n    local vowels_index_count_min_diff_max_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    local vowels_index_count_min_diff_min_index\
    \ = 0\n    local vowels_index_count_min_diff_min_index = 0\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp1angxkvo.lua:77: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkrt8p5p4.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"}\n   local vowels_count = #vowels\n\
    \   local vowel_index = 1\n   local vowel_found = false\n   local vowel_found_index\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n\
    \   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n  \
    \ local vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local\
    \ vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n\
    \   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n  \
    \ local vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local\
    \ vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n\
    \   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n  \
    \ local vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local\
    \ vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n\
    \   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n  \
    \ local vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local\
    \ vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n\
    \   local vowel_found_distance = nil\n   local vowel_found_distance = nil\n  \
    \ local vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local\
    \ vowel_found_distance = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance\
    \ = nil\n   local vowel_found_distance = nil\n   local vowel_found_distance =\
    \ nil\n   local vowel_found_distance = nil\n   local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp78pktvsh.lua:95: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_minus_1 = vowels_count - 1\n    local vowels_index_count_minus_2\
    \ = vowels_count - 2\n    local vowels_index_count_minus_3 = vowels_count - 3\n\
    \    local vowels_index_count_minus_4 = vowels_count - 4\n    local vowels_index_count_minus_5\
    \ = vowels_count - 5\n    local vowels_index_count_minus_6 = vowels_count - 6\n\
    \    local vowels_index_count_minus_7 = vowels_count - 7\n    local vowels_index_count_minus_8\
    \ = vowels_count - 8\n    local vowels_index_count_minus_9 = vowels_count - 9\n\
    \    local vowels_index_count_minus_10 = vowels_count - 10\n    local vowels_index_count_minus_11\
    \ = vowels_count - 11\n    local vowels_index_count_minus_12 = vowels_count -\
    \ 12\n    local vowels_index_count_minus_13 = vowels_count - 13\n    local vowels_index_count_minus_14\
    \ = vowels_count - 14\n    local vowels_index_count_minus_15 = vowels_count -\
    \ 15\n    local vowels_index_count_minus_16 = vowels_count - 16\n    local vowels_index_count_minus_17\
    \ = vowels_count - 17\n    local vowels_index_count_minus_18 = vowels_count -\
    \ 18\n    local vowels_index_count_minus_19 = vowels_count - 19\n    local vowels_index_count_minus_20\
    \ = vowels_count - 20\n    local vowels_index_count_minus_21 = vowels_count -\
    \ 21\n    local vowels_index_count_minus_22 = vowels_count - 22\n    local vowels_index_count_minus_23\
    \ = vowels_count - 23\n    local vowels_index_count_minus_24 = vowels_count -\
    \ 24\n    local vowels_index_count_minus_25 = vowels_count - 25\n    local vowels_index_count_minus_26\
    \ = vowels_count - 26\n    local vowels_index_count_minus_27 = vowels_count -\
    \ 27\n    local vowels_index_count_minus_28 = vowels_count - 28\n    local vowels_index_count_minus_29\
    \ = vowels_count - 29\n    local vowels_index_count_minus_30 = vowels_count -\
    \ 30\n    local vowels_index_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp41gqq1sm.lua:66: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpvq1_7var.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_b3etc3w.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowels_count =\
    \ #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp0f8lt8m5.lua:83: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local vowel_count = {}\n\
    \  for i = 1, #word do\n    local vowel = word:sub(i, i)\n    if vowel:sub(1,\
    \ 1) ~= vowel:sub(2, 2) then\n      vowel_count[vowel] = vowel_count[vowel] +\
    \ 1\n    end\n  end\n  local vowel_count_sorted = {}\n  for vowel, count in pairs(vowel_count)\
    \ do\n    vowel_count_sorted[count] = vowel\n  end\n  local vowel_count_sorted_sorted\
    \ = {}\n  for count, vowel in pairs(vowel_count_sorted) do\n    vowel_count_sorted_sorted[vowel]\
    \ = count\n  end\n  local vowel_count_sorted_sorted_sorted = {}\n  for count,\
    \ vowel in pairs(vowel_count_sorted_sorted) do\n    vowel_count_sorted_sorted_sorted[count]\
    \ = vowel\n  end\n  local vowel_count_sorted_sorted_sorted_sorted = {}\n  for\
    \ count, vowel in pairs(vowel_count_sorted_sorted_sorted) do\n    vowel_count_sorted_sorted_sorted_sorted[count]\
    \ = vowel\n  end\n  local vowel_count_sorted_sorted_sorted_sorted_sorted = {}\n\
    \  for count, vowel in pairs(vowel_count_sorted_sorted_sorted_sorted) do\n   \
    \ vowel_count_sorted_sorted_sorted_sorted_sorted[count] = vowel\n  end\n  local\
    \ vowel_count_sorted_sorted_sorted_sorted_sorted_sorted = {}\n  for count, vowel\
    \ in pairs(vowel_count_sorted_sorted_sorted_sorted_sorted) do\n    vowel_count_sorted_sorted_sorted_sorted_sorted_sorted[count]\
    \ = vowel\n  end\n  local vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n  for count, vowel in pairs(vowel_count_sorted_sorted_sorted_sorted_sorted_sorted)\
    \ do\n    vowel_count_sorted_sorted_sorted_sorted_sorted_sorted[count] = vowel\n\
    \  end\n  local vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n  for count, vowel in pairs(vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\
    \ do\n    vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted[count]\
    \ = vowel\n  end\n  local vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n  for count, vowel in pairs(vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\
    \ do\n    vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted[count]\
    \ = vowel\n  end\n  local vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = {}\n  for count, vowel in pairs(vowel_count_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted)\
    \ do\n    vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxb6lb8eg.lua:59: '=' expected near 'lu'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowel_index\
    \ = #word\n  local vowel_found = false\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = nil\n  local vowel_found_index = nil\n  local\
    \ vowel_found_index = nil\n  local vowel_found_index = nil\n  local vowel_found_index\
    \ = nil\n  local vowel_found_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpk87w4tke.lua:76: unexpected symbol near '='\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = \"aeiouAEIOU\"\n  local vowels_count = #vowels\n  local vowels_index\
    \ = #word\n  local vowels_index2 = #word\n  local vowels_index3 = #word\n  local\
    \ vowels_index4 = #word\n  local vowels_index5 = #word\n  local vowels_index6\
    \ = #word\n  local vowels_index7 = #word\n  local vowels_index8 = #word\n  local\
    \ vowels_index9 = #word\n  local vowels_index10 = #word\n  local vowels_index11\
    \ = #word\n  local vowels_index12 = #word\n  local vowels_index13 = #word\n  local\
    \ vowels_index14 = #word\n  local vowels_index15 = #word\n  local vowels_index16\
    \ = #word\n  local vowels_index17 = #word\n  local vowels_index18 = #word\n  local\
    \ vowels_index19 = #word\n  local vowels_index20 = #word\n  local vowels_index21\
    \ = #word\n  local vowels_index22 = #word\n  local vowels_index23 = #word\n  local\
    \ vowels_index24 = #word\n  local vowels_index25 = #word\n  local vowels_index26\
    \ = #word\n  local vowels_index27 = #word\n  local vowels_index28 = #word\n  local\
    \ vowels_index29 = #word\n  local vowels_index30 = #word\n  local vowels_index31\
    \ = #word\n  local vowels_index32 = #word\n  local vowels_index33 = #word\n  local\
    \ vowels_index34 = #word\n  local vowels_index35 = #word\n  local vowels_index36\
    \ = #word\n  local vowels_index37 = #word\n  local vowels_index38 = #word\n  local\
    \ vowels_index39 = #word\n  local vowels_index40 = #word\n  local vowels_index41\
    \ = #word\n  local vowels_index42 = #word\n  local vowels_index43 = #word\n  local\
    \ vowels_index44 = #word\n  local vowels_index45 = #word\n  local vowels_index46\
    \ = #word\n  local vowels_index47 = #word\n  local vowels_index48 = #word\n  local\
    \ vowels_index49 = #word\n  local vowels_index50 = #word\n  local vowels_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxay1cocp.lua:84: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"y\"] = \"y\",\n\t\
    \t[\"A\"] = \"a\",\n\t\t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] =\
    \ \"o\",\n\t\t[\"U\"] = \"u\",\n\t\t[\"Y\"] = \"y\",\n\t\t[\"B\"] = \"b\",\n\t\
    \t[\"C\"] = \"c\",\n\t\t[\"D\"] = \"d\",\n\t\t[\"F\"] = \"f\",\n\t\t[\"G\"] =\
    \ \"g\",\n\t\t[\"H\"] = \"h\",\n\t\t[\"J\"] = \"j\",\n\t\t[\"K\"] = \"k\",\n\t\
    \t[\"L\"] = \"l\",\n\t\t[\"M\"] = \"m\",\n\t\t[\"N\"] = \"n\",\n\t\t[\"P\"] =\
    \ \"p\",\n\t\t[\"Q\"] = \"q\",\n\t\t[\"R\"] = \"r\",\n\t\t[\"S\"] = \"s\",\n\t\
    \t[\"T\"] = \"t\",\n\t\t[\"V\"] = \"v\",\n\t\t[\"W\"] = \"w\",\n\t\t[\"X\"] =\
    \ \"x\",\n\t\t[\"Y\"] = \"y\",\n\t\t[\"Z\"] = \"z\"\n\t}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_temp\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\n\tlocal vowels_index_count_temp_max = 0\n\tlocal vowels_index_count_temp_min\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpwkt6uf4t.lua:96: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \   local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\", \"A\", \"E\", \"\
    I\", \"O\", \"U\"}\n   local vowels_count = #vowels\n   local vowels_index = 0\n\
    \   local vowels_index_count = 0\n   local vowels_index_count_max = #word\n  \
    \ local vowels_index_count_min = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_min = #word\n\
    \   local vowels_index_count_max = #word\n   local vowels_index_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpgr4edql8.lua:82: 'end' expected (to close 'function' at line\
    \ 11) near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {}\n    local vowels_count = 0\n    local vowel_found = false\n\
    \    for i = #word, 2, -1 do\n        if string.sub(word, i, i) == \"a\" then\n\
    \            vowels[#vowels+1] = \"a\"\n            vowels_count = #vowels\n \
    \       end\n        if string.sub(word, i, i) == \"e\" then\n            vowels[#vowels+1]\
    \ = \"e\"\n            vowels_count = #vowels\n        end\n        if string.sub(word,\
    \ i, i) == \"i\" then\n            vowels[#vowels+1] = \"i\"\n            vowels_count\
    \ = #vowels\n        end\n        if string.sub(word, i, i) == \"o\" then\n  \
    \          vowels[#vowels+1] = \"o\"\n            vowels_count = #vowels\n   \
    \     end\n        if string.sub(word, i, i) == \"u\" then\n            vowels[#vowels+1]\
    \ = \"u\"\n            vowels_count = #vowels\n        end\n    end\n    for i\
    \ = #word, 2, -1 do\n        if string.sub(word, i, i) == \"a\" then\n       \
    \     vowels[#vowels+1] = \"a\"\n            vowels_count = #vowels\n        end\n\
    \        if string.sub(word, i, i) == \"e\" then\n            vowels[#vowels+1]\
    \ = \"e\"\n            vowels_count = #vowels\n        end\n        if string.sub(word,\
    \ i, i) == \"i\" then\n            vowels[#vowels+1] = \"i\"\n            vowels_count\
    \ = #vowels\n        end\n        if string.sub(word, i, i) == \"o\" then\n  \
    \          vowels[#vowels+1] = \"o\"\n            vowels_count = #vowels\n   \
    \     end\n        if string.sub(word, i, i) == \"u\" then\n            vowels[#vowels+1]\
    \ = \"u\"\n            vowels_count = #vowels\n        end\n    end\n    if vowels_count\
    \ > 1 then\n        for i = #word, 2, -1 do\n            if string.sub(word, i,\
    \ i) == \"a\" then\n                vowels[#vowels+1] = \"a\"\n              \
    \  vowels_count = #vowels\n            end\n            if string.sub(word, i,\
    \ i) == \"e\" then\n                vowels[#vowels+1] = \"e\"\n              \
    \  vowels_count = #vowels\n            end\n            if string.sub(word, i,\
    \ i) == \"i\" then\n                vowels[#vowels+1] = \"i\"\n              \
    \  vowels_count = #vowels\n            end\n            if string.sub(word, i,\
    \ i) == \"o\" then\n                vowels[#vowels+1] = \"o\"\n              \
    \  vowels_count = #vowels\n            end\n            if string.sub(word, i,\
    \ i) == \"u\" then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmptrxb87ji.lua:98: 'end' expected (to close 'if' at line 77)\
    \ near '<eof>'\n"
  exit_code: 1
  status: SyntaxError
