language: lua
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n    return\
    \ m + prime_fib(n / 2)\n  end\n  -- recursive case\n  local m = prime_fib(n /\
    \ 2)\n  return prime_fib(n / 2) + m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpna08eg.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbpna08eg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzin6q3rf.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzin6q3rf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fib = fibs + fibs + 1\n  return fib\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60odpt0n.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp60odpt0n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n    return\
    \ m + prime_fib(n / 2)\n  end\n  -- recursive case\n  if n % 3 == 0 then\n   \
    \ local m = prime_fib(n / 3)\n    return m + prime_fib(n / 3)\n  end\n  -- recursive\
    \ case\n  if n % 5 == 0 then\n    local m = prime_fib(n / 5)\n    return m + prime_fib(n\
    \ / 5)\n  end\n  -- recursive case\n  return prime_fib(n / 2) + prime_fib(n /\
    \ 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzt7h5le8.lua:41:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzt7h5le8.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuzwrpnn.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphuzwrpnn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3lbmth8.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr3lbmth8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhddmfd7.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdhddmfd7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ prime_fib(i * i) + prime_fib(n - 1)\n    end\n    i = i + 2\n  end\n  return\
    \ prime_fib(n * 2) + prime_fib(n * 3)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxoagsl9.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxoagsl9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    i = i + 2\n    if n % i == 0 then return i end\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlnck81v.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvlnck81v.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib((n\
    \ / i) + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7le05k1y.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7le05k1y.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    local fibs = prime_fib(n - 1)\n    return\
    \ fibs + fibs + fibs + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5ct_nmq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg5ct_nmq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 2, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3ex_o01.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm3ex_o01.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 4)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp330gfpkt.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp330gfpkt.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 2 end\n  -- Recursive case\n  if n == 3 then return 3 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- Recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- Recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xpahrcu.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5xpahrcu.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive\
    \ case\n  return prime_fib(3 * n + 1) - prime_fib(n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt9dasib.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqt9dasib.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3lbmth8.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr3lbmth8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i]\n    fib[i] = fib[i - 1] + fib[i - 2]\n    fib[i - 2] = tmp\n \
    \ end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp518nq1tk.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp518nq1tk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  else\n \
    \   local fibs = prime_fib(n - 1)\n    return fibs + fibs + 1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpygh24wmd.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpygh24wmd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 or n == 2 then\n      return true\n\
    \    end\n    for i = 2, n do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_fib(n)\n    if\
    \ n == 1 or n == 2 then\n      return true\n    end\n    for i = 2, n do\n   \
    \   if n % i == 0 then\n        return false\n      end\n      if n % i == 1 then\n\
    \        return true\n      end\n    end\n    return false\n  end\n  local function\
    \ is_prime_fib(n)\n    if n == 1 or n == 2 then\n      return true\n    end\n\
    \    for i = 2, n do\n      if n % i == 0 then\n        return false\n      end\n\
    \      if n % i == 1 then\n        return true\n      end\n      if n % i == 2\
    \ then\n        return is_prime(i)\n      end\n    end\n    return false\n  end\n\
    \  local function is_fib_prime(n)\n    if n == 1 or n == 2 then\n      return\
    \ true\n    end\n    for i = 2, n do\n      if n % i == 0 then\n        return\
    \ false\n      end\n      if n % i == 1 then\n        return true\n      end\n\
    \      if n % i == 2 then\n        return is_fib(i)\n      end\n      if n % i\
    \ == 3 then\n        return is_prime(i)\n      end\n    end\n    return false\n\
    \  end\n  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 3\n\
    \  end\n  if n % 2 == 0 then\n    return prime_fib(n - 1)\n  end\n  if n % 3 ==\
    \ 0 then\n    return prime_fib(n - 3)\n  end\n  if n % 5 == 0 then\n    return\
    \ prime_fib(n - 5)\n  end\n  if n % 7 == 0 then\n    return prime_fib(n - 7)\n\
    \  end\n  if n % 11 == 0 then\n    return prime_fib(n - 11)\n  end\n  if n % 13\
    \ == 0 then\n    return prime_fib(n - 13)\n  end\n  if n % 17 == 0 then\n    return\
    \ prime_fib(n - 17)\n  end\n  if n % 19 == 0 then\n    return prime_fib(n - 19)\n\
    \  end\n  if n % 23 == 0 then\n    return prime_fib(n - 23)\n  end\n  if n % 29\
    \ == 0 then\n    return prime_fib(n - 29)\n  end\n  if n % 31 == 0 then\n    return\
    \ prime_fib(n - 31)\n  end\n  if n % 37 == 0 then\n    return prime_fib(n - 37)\n\
    \  end\n  if n % 41 == 0 then\n    return prime_fib(n - 41)\n  end\n  if n % 43\
    \ == 0 then\n    return prime_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5q_uzk6.lua:122: ''end'' expected (to close ''if'' at line
    120) near ''lu''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local m = math.floor(math.sqrt(n))\n  local\
    \ a = prime_fib(m * 2)\n  local b = prime_fib(m * 2 + 1)\n  return b + a -- return\
    \ n-th number that is a Fibonacci number and it's also prime.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp941urned.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp941urned.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj_s1prd.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfj_s1prd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 4, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnzcmt2i.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnnzcmt2i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    local fibs = prime_fib(n - 1)\n    return\
    \ fibs + fibs + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjszqgmxt.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjszqgmxt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(n\
    \ / i) + prime_fib(n / i + 1) end\n    i = i + 2\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbowb89e.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwbowb89e.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i]\n    fib[i] = fib[i - 1] + fib[i - 2]\n    fib[i - 2] = tmp\n \
    \ end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp518nq1tk.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp518nq1tk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\n  -- recursive case\n \
    \ if n == 2 then\n    return 2\n  end\n  -- recursive case\n  if n == 3 then\n\
    \    return 5\n  end\n  -- recursive case\n  if n == 4 then\n    return 13\n \
    \ end\n  -- recursive case\n  if n == 5 then\n    return 89\n  end\n  -- recursive\
    \ case\n  return prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt86_dje.lua:40:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmt86_dje.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function fib(n)\n    if n < 2 then\n      return n\n    end\n    return\
    \ fib(n-1) + fib(n-2)\n  end\n  return fib(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jtzj2qh.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2jtzj2qh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n < 2 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n / 2, 2 do\n      if n % i == 0 then return false end\n    end\n    return\
    \ true\n  end\n  local function fib(n)\n    if n < 2 then return 0 end\n    if\
    \ n == 2 then return 1 end\n    return fib(n-1) + fib(n-2)\n  end\n  local function\
    \ prime_fib(n)\n    if n < 2 then return 0 end\n    if n == 2 then return 1 end\n\
    \    return prime_fib(n-1) + prime_fib(n-2)\n  end\n  return is_prime(n) and fib(n)\
    \ or prime_fib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvl0r1tsl.lua:38:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpvl0r1tsl.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzin6q3rf.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzin6q3rf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i + 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbaocdpb.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzbaocdpb.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n == 1 or n == 2 then\n      return n\n    else\n\
    \      return f(n-1) + f(n-2)\n    end\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpioriejvb.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpioriejvb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbmw9ij9.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptbmw9ij9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return n\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0czhuph.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv0czhuph.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  local i = 3\n  while i <= n do\n\
    \    fib[i] = fib[i - 1] + fib[i - 2]\n    i = i + 1\n  end\n  return fib[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6elru02a.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6elru02a.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzin6q3rf.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzin6q3rf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {n}\n  fib[1] = fib[2] = fib[n]\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplslpj_y3.lua:14: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 or n == 2 then\n      return true\n\
    \    end\n    for i = 2, n do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_fibonacci(n)\n\
    \    if n == 1 or n == 2 then\n      return true\n    end\n    for i = 2, n do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_prime_fibonacci(n)\n    if n == 1 or n == 2\
    \ then\n      return true\n    end\n    for i = 2, n do\n      if n % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local function\
    \ is_fibonacci_prime(n)\n    if n == 1 or n == 2 then\n      return true\n   \
    \ end\n    for i = 2, n do\n      if n % i == 0 then\n        return false\n \
    \     end\n    end\n    return true\n  end\n  local function is_prime_fibonacci_prime(n)\n\
    \    if n == 1 or n == 2 then\n      return true\n    end\n    for i = 2, n do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_fibonacci_prime_fibonacci(n)\n    if n == 1\
    \ or n == 2 then\n      return true\n    end\n    for i = 2, n do\n      if n\
    \ % i == 0 then\n        return false\n      end\n    end\n    return true\n \
    \ end\n  local function is_prime_fibonacci_prime_fibonacci(n)\n    if n == 1 or\
    \ n == 2 then\n      return true\n    end\n    for i = 2, n do\n      if n % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  local function is_fibonacci_prime_fibonacci_prime(n)\n    if n == 1 or n ==\
    \ 2 then\n      return true\n    end\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function is_prime_fibonacci_prime_fibonacci_prime(n)\n    if n == 1 or n ==\
    \ 2 then\n      return true\n    end\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        return false\n      end\n    end\n    return true\n  end\n  local\
    \ function is_fibonacci_prime_fibonacci_prime_fibonacci(n)\n    if n == 1 or n\
    \ == 2 then\n      return true\n    end\n    for i = 2, n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0fjuvphw.lua:122: ''end'' expected (to close ''function''
    at line 112) near ''lu''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsoobel1g.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx2lsa5n.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqx2lsa5n.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then return true end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 5, n, 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function is_fibonacci(n)\n    if n == 1 then return true end\n\
    \    if n == 2 then return true end\n    if n % 2 == 0 then return false end\n\
    \    for i = 5, n, 2 do\n      if n % i == 0 then return false end\n    end\n\
    \    return true\n  end\n  local function is_prime_fibonacci(n)\n    if n == 1\
    \ then return true end\n    if n == 2 then return true end\n    if n % 2 == 0\
    \ then return false end\n    for i = 5, n, 2 do\n      if n % i == 0 then return\
    \ false end\n    end\n    return true\n  end\n  if n == 1 then return 1 end\n\
    \  if n == 2 then return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) end\n  if is_fibonacci(n) then return prime_fib(n - 1) + prime_fib(n\
    \ - 2) end\n  if is_prime(n) then return prime_fib(n - 1) + prime_fib(n - 2) end\n\
    \  if is_prime_fibonacci(n) then return prime_fib(n - 1) + prime_fib(n - 2) end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpee424vxs.lua:51:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpee424vxs.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 17 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb0kq0ss.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsb0kq0ss.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 or n == 2 then\n      return true\n\
    \    end\n    for i = 2, n do\n      if n % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  local function is_fibonacci(n)\n\
    \    if n == 1 or n == 2 then\n      return true\n    end\n    for i = 2, n do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local function is_prime_fibonacci(n)\n    if n == 1 or n == 2\
    \ then\n      return true\n    end\n    for i = 2, n do\n      if n % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  if n < 2\
    \ then\n    return nil\n  end\n  if is_prime(n) then\n    return n\n  end\n  if\
    \ is_fibonacci(n) then\n    return n\n  end\n  if is_prime_fibonacci(n) then\n\
    \    return n\n  end\n  local function is_fibonacci_prime(n)\n    if n == 1 or\
    \ n == 2 then\n      return true\n    end\n    for i = 2, n do\n      if n % i\
    \ == 0 then\n        return false\n      end\n    end\n    return true\n  end\n\
    \  if is_fibonacci_prime(n) then\n    return n\n  end\n  return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfwe_6n85.lua:78:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpfwe_6n85.lua:78: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local a = {}\n  local b = {}\n  local c = 0\n  local i = 1\n  while i <= n\
    \ do\n    table.insert(a, i)\n    table.insert(b, i)\n    i = i + 2\n  end\n \
    \ while c < n do\n    local m = math.random(#a)\n    local n = math.random(#b)\n\
    \    if a[m] > b[n] then\n      a[m], b[n] = b[n], a[m]\n    end\n    c = c +\
    \ 1\n  end\n  return b[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2v9eyw1.lua:36:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq2v9eyw1.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n < 2 then\n      return n\n    end\n    return\
    \ f(n - 1) + f(n - 2)\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputvi5w5_.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmputvi5w5_.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ prime_fib(i * i) + prime_fib(i + 1)\n    end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3g54tzh.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_3g54tzh.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  if fibs_2 == 1 then\
    \ return fibs end\n  local fibs_3 = prime_fib(n / 2)\n  if fibs_3 == 1 then return\
    \ fibs + fibs_2 end\n  local fibs_4 = prime_fib(n / 2)\n  if fibs_4 == 1 then\
    \ return fibs + fibs_2 + fibs_3 end\n  local fibs_5 = prime_fib(n / 2)\n  if fibs_5\
    \ == 1 then return fibs + fibs_2 + fibs_3 + fibs_4 end\n  local fibs_6 = prime_fib(n\
    \ / 2)\n  if fibs_6 == 1 then return fibs + fibs_2 + fibs_3 + fibs_4 + fibs_5\
    \ end\n  local fibs_7 = prime_fib(n / 2)\n  if fibs_7 == 1 then return fibs +\
    \ fibs_2 + fibs_3 + fibs_4 + fibs_5 + fibs_6 end\n  local fibs_8 = prime_fib(n\
    \ / 2)\n  if fibs_8 == 1 then return fibs + fibs_2 + fibs_3 + fibs_4 + fibs_5\
    \ + fibs_6 + fibs_7 end\n  local fibs_9 = prime_fib(n / 2)\n  if fibs_9 == 1 then\
    \ return fibs + fibs_2 + fibs_3 + fibs_4 + fibs_5 + fibs_6 + fibs_7 + fibs_8 end\n\
    \  local fibs_10 = prime_fib(n / 2)\n  if fibs_10 == 1 then return fibs + fibs_2\
    \ + fibs_3 + fibs_4 + fibs_5 + fibs_6 + fibs_7 + fibs_8 + fibs_9 end\n  local\
    \ fibs_11 = prime_fib(n / 2)\n  if fibs_11 == 1 then return fibs + fibs_2 + fibs_3\
    \ + fibs_4 + fibs_5 + fibs_6 + fibs_7 + fibs_8 + fibs_9 + fibs_10 end\n  local\
    \ fibs_12 = prime_fib(n / 2)\n  if fibs_12 == 1 then return fibs + fibs_2 + fibs_3\
    \ + fibs_4 + fibs_5 + fibs_6 + fibs_7 + fibs_8 + fibs_9 + fibs_10 + fibs_11 end\n\
    \  local fibs_13 = prime_fib(n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx7xb7cxz.lua:41: '')'' expected (to close ''('' at line 40)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrtz885_.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzrtz885_.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsoobel1g.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  local a = prime_fib(m / 2)\n  local b = prime_fib(m\
    \ / 2)\n  while b < n do\n    local c = a + b\n    a = b\n    b = c\n  end\n \
    \ return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq_2xzwf.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpcq_2xzwf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- Recursive case\n  if n == 3 then return 2 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- Recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l0gahdp.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5l0gahdp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7e_i08nf.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    local fibs = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return fibs % n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui6btt5v.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpui6btt5v.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i <= n do\n    if n % i == 0 then return prime_fib(n\
    \ - 1) + prime_fib(n - i) end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq3fruzy.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpoq3fruzy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    local m = prime_fib(n - 1)\n    local a\
    \ = prime_fib(n - 2)\n    return m * a + m\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gc6w6ei.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9gc6w6ei.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive\
    \ case\n  return prime_fib(3 * n + 1) - prime_fib(n / 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyutta9hv.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyutta9hv.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  end\n  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujmua9qu.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujmua9qu.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ prime_fib(i * i) + prime_fib(n - i)\n    end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_15xzic.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpt_15xzic.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2vq14em.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv2vq14em.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i <= n do\n    i = i + 2\n    if i % 2 == 0 then\
    \ return i end\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx930831.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphx930831.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- Recursive case\n  if n == 3 then return 2 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- Recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l0gahdp.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5l0gahdp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if m == n then return n end\n \
    \ return prime_fib(m) + prime_fib(n - m)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprthwi57a.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprthwi57a.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpida63_gc.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhddmfd7.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdhddmfd7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib(i *\
    \ i) + prime_fib(i + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7qg2mf6.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd7qg2mf6.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpida63_gc.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- Recursive case\n  if n == 2 then return 3 end\n  --\
    \ Recursive case\n  if n == 3 then return 5 end\n  -- Recursive case\n  if n ==\
    \ 4 then return 13 end\n  -- Recursive case\n  if n == 5 then return 89 end\n\
    \  -- Recursive case\n  return prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngv7bj36.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpngv7bj36.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i + 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbaocdpb.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzbaocdpb.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {[1]=1, [2]=1}\n  local i = 2\n  while i <= n do\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n    i = i + 2\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6ocai9c.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu6ocai9c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d < n do\n    local t = a + b + c + d\n\
    \    if t > n then break end\n    a = t\n    b = c\n    c = d\n    d = t\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82i50675.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp82i50675.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return n end\n  -- recursive case\n  if n ==\
    \ 1 then return 1 end\n  -- recursive case\n  if n == 2 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n    return\
    \ m + prime_fib(n / 2)\n  end\n  -- recursive case\n  local m = prime_fib(n /\
    \ 2)\n  return prime_fib(n / 2) + m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabjk1bss.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpabjk1bss.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n * i) + prime_fib(n - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn85p_zmx.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn85p_zmx.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrlx74pv.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfrlx74pv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfa8h1xdc.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfa8h1xdc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6p2ezfa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj6p2ezfa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {\n    [1] = 1,\n    [2] = 1,\n  }\n  for i = 2, n do\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx799qp0.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsx799qp0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6p2ezfa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj6p2ezfa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vifxvav.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6vifxvav.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpida63_gc.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n / 2, 2 do\n      if n % i == 0 then return false end\n    end\n    return\
    \ true\n  end\n  local function fib(n)\n    if n == 0 then return 0 end\n    if\
    \ n == 1 then return 1 end\n    return fib(n-1) + fib(n-2)\n  end\n  local function\
    \ prime(n)\n    if n == 1 then return true end\n    if n == 2 then return false\
    \ end\n    if n % 2 == 0 then return false end\n    for i = 4, n / 2, 2 do\n \
    \     if n % i == 0 then return false end\n    end\n    return true\n  end\n \
    \ local function prime_fib(n)\n    if n == 1 then return 2 end\n    if n == 2\
    \ then return 3 end\n    if n % 2 == 0 then return prime_fib(n - 1) end\n    if\
    \ prime(n) then return prime_fib(n - 1) + prime_fib(n - 2) end\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  return prime_fib(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2yvxhyd.lua:52:\
    \ expected: 13, actual: 5\nstack traceback:\n\t/tmp/tmpi2yvxhyd.lua:52: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    local tmp\
    \ = fib[i - 1] + fib[i - 2]\n    fib[i] = tmp\n  end\n  return fib[n]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ztz7ijv.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4ztz7ijv.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return n end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt1g82tc.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjt1g82tc.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  while c < n do\n    local d = prime_fib(n / 2)\n    a = a + b\n    b = c +\
    \ d\n    c = a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzwr6qp5.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmzwr6qp5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n * 2) + prime_fib(n - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtg67_oy.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjtg67_oy.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  local a = prime_fib(m)\n  local b = prime_fib(m\
    \ - 1)\n  return a + b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwcgbsg2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmwcgbsg2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpztydo049.lua:31: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i + 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3511duyo.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3511duyo.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i - 1] + fib[i - 2]\n    fib[i] = tmp\n  end\n  return fib[n]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs3pg1wi.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphs3pg1wi.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    local p = prime_fib(i - 1)\n    if p * p > i then\
    \ return p end\n    i = i + 2\n  end\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkobiqmdg.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkobiqmdg.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  local a = prime_fib(m * 2)\n  local b = prime_fib(m\
    \ * 2 + 1)\n  return a * b % n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9ahpbgy.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx9ahpbgy.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local m = a\n  while m <= b do\n    if m % 2\
    \ == 0 then\n      local t = m\n      m = c + t\n      c = t\n    end\n    local\
    \ t = m\n    m = d + t\n    d = t\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnasf660.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplnasf660.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqowhzyi.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprqowhzyi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return n\n  else\n    -- recursive case\n\
    \    if n % 2 == 0 then\n      return prime_fib(n - 1) + prime_fib(n - 2)\n  \
    \  else\n      return prime_fib(n - 1)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgktl27a0.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgktl27a0.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3lbmth8.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr3lbmth8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local e = 1\n  local f = 1\n  while f < n do\n\
    \    e = a + b + c + d\n    f = e + f\n    d = c\n    c = b\n    b = a\n    a\
    \ = e\n  end\n  return e\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu9qpmuu.lua:37:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptu9qpmuu.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    return n % 2 == 0 and n > 1 and\n         \
    \  all(n % i for i in range(3, n, 2))\n  end\n  local function is_fib(n)\n   \
    \ return n % 2 == 0 and n > 1 and\n           all(n % i for i in range(3, n, 2))\n\
    \  end\n  local function is_prime_fib(n)\n    return n % 2 == 0 and n > 1 and\n\
    \           all(n % i for i in range(3, n, 2))\n           and is_fib(n)\n  end\n\
    \  if n < 2 then\n    return nil\n  end\n  if is_prime(n) then\n    return n\n\
    \  end\n  if is_fib(n) then\n    return prime_fib(n-1)\n  end\n  if is_prime_fib(n)\
    \ then\n    return n\n  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo96k5pcn.lua:15: '')'' expected near ''for''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    \  local m = math.ceil(math.sqrt(n))\n  local a = prime_fib(m)\n  local b = prime_fib(m\
    \ - 1)\n  return b + a -- return n-th number that is a Fibonacci number and it's\
    \ also prime.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2u25lng.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd2u25lng.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  local fibs = prime_fib(n - 1)\n  local fib = fibs + fibs + 1\n\
    \  return fib\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplg_qixxx.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplg_qixxx.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  end\n  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujmua9qu.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujmua9qu.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2vq14em.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv2vq14em.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fib\n  for fib = 1, fibs do\n    if n % fib == 0\
    \ then return fib end\n  end\n  return fib\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddzwd3r0.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpddzwd3r0.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 17 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb0kq0ss.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsb0kq0ss.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 4, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnzcmt2i.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnnzcmt2i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- Recursive case\n\
    \  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n\
    \    return prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z35bl_6.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_z35bl_6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if n % m == 0 then return prime_fib(n\
    \ - m) + prime_fib(n - m) end\n  return prime_fib(n - m)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gkhk4tw.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0gkhk4tw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzin6q3rf.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzin6q3rf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 2 end\n  -- recursive case\n  if n == 3 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive\
    \ case\n  if n % 3 == 0 then return prime_fib(n / 3) end\n  -- recursive case\n\
    \  return prime_fib(3 * n + 1) + prime_fib(3 * n + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpusom2mmw.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpusom2mmw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  else\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_4yraih.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq_4yraih.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 4, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnzcmt2i.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnnzcmt2i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * i) + prime_fib(i\
    \ * i + 1) end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv20vk5q.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiv20vk5q.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if n % m == 0 then return prime_fib(n\
    \ - m) + prime_fib(n - m) end\n  return prime_fib(n - m)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gkhk4tw.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0gkhk4tw.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6p2ezfa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj6p2ezfa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr3lbmth8.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpr3lbmth8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrlx74pv.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfrlx74pv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7cjgka.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprm7cjgka.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzov1k_7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptzov1k_7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib(i *\
    \ i) + prime_fib(i * i + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzeepmchn.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzeepmchn.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphe940gwf.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphe940gwf.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  if n % 5 == 0 then return prime_fib(n\
    \ / 5) end\n  return prime_fib(3 * n + 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5kxcc4o.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn5kxcc4o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzov1k_7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptzov1k_7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\n  -- recursive case\n  local m = math.floor(math.sqrt(n))\n  return\
    \ prime_fib(m) + prime_fib(m - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvw25abw.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvvw25abw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb6nmtaa.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvb6nmtaa.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx2lsa5n.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqx2lsa5n.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return n\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n / 2)\n  else\n    return prime_fib(3 *\
    \ n + 1) - prime_fib(n / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljmrwpia.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpljmrwpia.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbmw9ij9.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptbmw9ij9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  while b < c do\n    local t = b\n    b = a\n    a = t\n  end\n  return a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34b0p9j8.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp34b0p9j8.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local a = 1\n  local b = 1\n  local c = 0\n  while c < n do\n    local d =\
    \ a + b\n    a = b\n    b = d\n    c = c + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9mf7tlq.lua:31:\
    \ expected: 13, actual: 8\nstack traceback:\n\t/tmp/tmpo9mf7tlq.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuzwrpnn.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphuzwrpnn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\n  -- recursive case\n \
    \ if n == 2 then\n    return 2\n  end\n  -- recursive case\n  if n == 3 then\n\
    \    return 5\n  end\n  -- recursive case\n  if n == 4 then\n    return 13\n \
    \ end\n  -- recursive case\n  if n == 5 then\n    return 89\n  end\n  -- recursive\
    \ case\n  return prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt86_dje.lua:40:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmt86_dje.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\n  -- recursive case\n \
    \ if prime_fib(n-1) == 1 then\n    return n\n  end\n  -- base case\n  if prime_fib(n-2)\
    \ == 1 then\n    return n-1\n  end\n  -- recursive case\n  return prime_fib(n-1)\
    \ + prime_fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_4a3egg.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz_4a3egg.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzin6q3rf.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzin6q3rf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d < n do\n    local t = a + b\n    a =\
    \ b\n    b = t\n    d = d + c\n    c = d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ojg0qx8.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_ojg0qx8.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i + 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqqf0amj1.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqqf0amj1.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function fib(n)\n    if n < 2 then\n      return n\n    else\n      return\
    \ fib(n-1) + fib(n-2)\n    end\n  end\n  return fib(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg5ke6gz.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpmg5ke6gz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    local m = n % i\n    if m == 0 then return i end\n\
    \    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclnjxw55.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpclnjxw55.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx2lsa5n.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqx2lsa5n.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqowhzyi.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprqowhzyi.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  else\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ntof45c.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3ntof45c.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 1 end\n  -- recursive case\n  if n == 2 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n    return\
    \ m + prime_fib(n / 2)\n  end\n  -- recursive case\n  local m = prime_fib(n /\
    \ 2)\n  return prime_fib(n / 2) + m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczs3lqa_.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpczs3lqa_.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  return prime_fib(n - 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvz5417w.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbvz5417w.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n == 1 then\n      return 1\n    end\n    if n\
    \ == 2 then\n      return 2\n    end\n    local m = n % 2\n    local a = f(n-1)\n\
    \    local b = f(n-2)\n    return b + m * (a + b)\n  end\n  return f(n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5709eflw.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5709eflw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w42ix1t.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9w42ix1t.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n == 2 then\n    return 2\n  else\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkirf8nl7.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkirf8nl7.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n < 2 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n, 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function fib(n)\n    if n < 2 then return n end\n    return fib(n-1)\
    \ + fib(n-2)\n  end\n  return fib(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmb448zw1.lua:32:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpmb448zw1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local p = a\n  local q = b\n  while p <= n do\n\
    \    if p % 2 == 0 then\n      q = p\n      while q <= n do\n        if q % 2\
    \ == 0 then\n          break\n        end\n        q = q + c\n      end\n    end\n\
    \    p = p + d\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck02aypy.lua:41:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpck02aypy.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {\n    [1] = 1,\n    [2] = 1,\n  }\n  for i = 2, n do\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx799qp0.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsx799qp0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i) + prime_fib(n - i)\n    end\n   \
    \ i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e29_wi8.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7e29_wi8.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 10 then\n    return 3\n  elseif n < 15 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhrj_s1b.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuhrj_s1b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return true\n    end\n\
    \    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n    \
    \  return false\n    end\n    local i = 3\n    while i * i <= n do\n      if n\
    \ % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n \
    \   return true\n  end\n  local function is_fibonacci(n)\n    if n == 1 then\n\
    \      return true\n    end\n    if n == 2 then\n      return true\n    end\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  local function is_prime_fibonacci(n)\n\
    \    if n == 1 then\n      return true\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  local function\
    \ is_prime_fibonacci_prime(n)\n    if n == 1 then\n      return true\n    end\n\
    \    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n    \
    \  return false\n    end\n    local i = 3\n    while i * i <= n do\n      if n\
    \ % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n \
    \   return true\n  end\n  local function is_prime_fibonacci_prime_prime(n)\n \
    \   if n == 1 then\n      return true\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  local function\
    \ is_prime_fibonacci_prime_prime_prime(n)\n    if n == 1 then\n      return true\n\
    \    end\n    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  local function is_prime_fibonacci_prime_prime_prime_prime(n)\n\
    \    if n == 1 then\n      return true\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl4piqner.lua:135: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659798970
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zi4f76i.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7zi4f76i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuzwrpnn.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphuzwrpnn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6fyfsrp9.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwrqaovd6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
