language: lua
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local list = {}\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if word:sub(1, n) == string.upper(word:sub(1, n)) then\n       \
    \     table.insert(list, word)\n        end\n    end\n    return list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_1m7whp.lua:26:\
    \ expected: {\"little\"}\nactual: {\"M\", \" \", \" \", \" \", \" \"}\nstack traceback:\n\
    \t/tmp/tmpv_1m7whp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n            table.insert(words,\
    \ string.sub(s, 1, n))\n        end\n        i = i + 1\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthiixt8d.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpthiixt8d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == #s then\n                table.insert(words, \"\")\n       \
    \     else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"s\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"t\" or c == \"h\" or c == \"r\" or\
    \ c == \"d\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"w\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"b\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"c\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"m\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"g\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"f\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"v\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9w023s3f.lua:110: ''end'' expected (to close ''if'' at line
    92) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) == \" \" then\n      table.insert(words, string.sub(s,1,i))\n\
    \      table.insert(words, string.sub(s,i+1,#s))\n    else\n      table.insert(words,\
    \ string.sub(s,i,#s))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tk_yd_y.lua:29:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary had a little lamb\",\n   \
    \ \"ary had a little lamb\",\n    \"ry had a little lamb\",\n    \"y had a little\
    \ lamb\",\n    \"Mary \",\n    \"had a little lamb\",\n    \"had a little lamb\"\
    ,\n    \"ad a little lamb\",\n    \"d a little lamb\",\n    \"Mary had \",\n \
    \   \"a little lamb\",\n    \"a little lamb\",\n    \"Mary had a \",\n    \"little\
    \ lamb\",\n    \"little lamb\",\n    \"ittle lamb\",\n    \"ttle lamb\",\n   \
    \ \"tle lamb\",\n    \"le lamb\",\n    \"e lamb\",\n    \"Mary had a little \"\
    ,\n    \"lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmp_tk_yd_y.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    local j = i + 1\n    while j <= #s and s[j] == c do\n      j = j + 1\n  \
    \  end\n    if j - i == n then\n      table.insert(words, string.sub(s, i, j))\n\
    \      i = j\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      words[#words + 1] = \"\"\n    else\n      if string.sub(s,i,i)\
    \ == \" \" then\n        words[#words + 1] = \"\"\n      else\n        if string.sub(s,i,i)\
    \ == \" \" then\n          words[#words + 1] = \"\"\n        else\n          if\
    \ string.sub(s,i,i) == \" \" then\n            words[#words + 1] = \"\"\n    \
    \      else\n            if string.sub(s,i,i) == \" \" then\n              words[#words\
    \ + 1] = \"\"\n            else\n              if string.sub(s,i,i) == \" \" then\n\
    \                words[#words + 1] = \"\"\n              else\n              \
    \  if string.sub(s,i,i) == \" \" then\n                  words[#words + 1] = \"\
    \"\n                else\n                  if string.sub(s,i,i) == \" \" then\n\
    \                    words[#words + 1] = \"\"\n                  else\n      \
    \              if string.sub(s,i,i) == \" \" then\n                      words[#words\
    \ + 1] = \"\"\n                    else\n                      if string.sub(s,i,i)\
    \ == \" \" then\n                        words[#words + 1] = \"\"\n          \
    \            else\n                        if string.sub(s,i,i) == \" \" then\n\
    \                          words[#words + 1] = \"\"\n                        else\n\
    \                          if string.sub(s,i,i) == \" \" then\n              \
    \              words[#words + 1] = \"\"\n                          else\n    \
    \                        if string.sub(s,i,i) == \" \" then\n                \
    \              words[#words + 1] = \"\"\n                            else\n  \
    \                            if string.sub(s,i,i) == \" \" then\n            \
    \                    words[#words + 1] = \"\"\n                              else\n\
    \                                if string.sub(s,i,i) == \" \" then\n        \
    \                          words[#words + 1] = \"\"\n                        \
    \        else\n                                  if string.sub(s,i,i) == \" \"\
    \ then\n                                    words[#words + 1] = \"\"\n       \
    \                           else\n                                    if string.sub(s,i,i)\
    \ == \" \" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \" \" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \" \" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \" \" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \" \" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpph5jyb5z.lua:80: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmcntpy0.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_yyfbc_.lua:28:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpl_yyfbc_.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ == \" \" then\n            table.insert(result, string.sub(s,1,i))\n       \
    \ end\n    end\n    if #result == 0 then\n        return {}\n    end\n    local\
    \ index = 1\n    while index <= #result do\n        if string.sub(s,index,index)\
    \ == \" \" then\n            index = index + 1\n        else\n            local\
    \ count = 0\n            for i = 1, #result do\n                if string.sub(s,index,index)\
    \ == string.sub(result, i, i) then\n                    count = count + 1\n  \
    \              end\n            end\n            if count == n then\n        \
    \        table.insert(result, string.sub(s,index,index))\n            end\n  \
    \      end\n        index = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9mn_ttw.lua:29:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmph9mn_ttw.lua:29: in local 'candidate'\n\t/tmp/tmph9mn_ttw.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      words[#words + 1] = \"\"\n    else\n      if string.sub(s,i,i)\
    \ == \" \" then\n        words[#words + 1] = \"\"\n      else\n        if string.sub(s,i,i)\
    \ == \" \" then\n          words[#words + 1] = \"\"\n        else\n          if\
    \ string.sub(s,i,i) == \" \" then\n            words[#words + 1] = \"\"\n    \
    \      else\n            if string.sub(s,i,i) == \" \" then\n              words[#words\
    \ + 1] = \"\"\n            else\n              if string.sub(s,i,i) == \" \" then\n\
    \                words[#words + 1] = \"\"\n              else\n              \
    \  if string.sub(s,i,i) == \" \" then\n                  words[#words + 1] = \"\
    \"\n                else\n                  if string.sub(s,i,i) == \" \" then\n\
    \                    words[#words + 1] = \"\"\n                  else\n      \
    \              if string.sub(s,i,i) == \" \" then\n                      words[#words\
    \ + 1] = \"\"\n                    else\n                      if string.sub(s,i,i)\
    \ == \" \" then\n                        words[#words + 1] = \"\"\n          \
    \            else\n                        if string.sub(s,i,i) == \" \" then\n\
    \                          words[#words + 1] = \"\"\n                        else\n\
    \                          if string.sub(s,i,i) == \" \" then\n              \
    \              words[#words + 1] = \"\"\n                          else\n    \
    \                        if string.sub(s,i,i) == \" \" then\n                \
    \              words[#words + 1] = \"\"\n                            else\n  \
    \                            if string.sub(s,i,i) == \" \" then\n            \
    \                    words[#words + 1] = \"\"\n                              else\n\
    \                                if string.sub(s,i,i) == \" \" then\n        \
    \                          words[#words + 1] = \"\"\n                        \
    \        else\n                                  if string.sub(s,i,i) == \" \"\
    \ then\n                                    words[#words + 1] = \"\"\n       \
    \                           else\n                                    if string.sub(s,i,i)\
    \ == \" \" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \" \" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \" \" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \" \" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \" \" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpph5jyb5z.lua:80: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[aeiou]\") then\n \
    \           table.insert(words, word)\n        end\n        i = i + 1\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfodz4ucq.lua:28:\
    \ expected: {\"little\"}\nactual: {\"a\", \"a\", \"a\", \"i\", \"e\", \"a\"}\n\
    stack traceback:\n\t/tmp/tmpfodz4ucq.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptu1iju37.lua:155: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    local c = s[i]\n\
    \    if c == \"a\" then\n      if #words == n then\n        return words\n   \
    \   end\n      words[#words + 1] = s[i]\n      i = i + 1\n    elseif c == \"e\"\
    \ then\n      if #words == n then\n        return words\n      end\n      words[#words\
    \ + 1] = s[i]\n      i = i + 1\n    elseif c == \"i\" then\n      if #words ==\
    \ n then\n        return words\n      end\n      words[#words + 1] = s[i]\n  \
    \    i = i + 1\n    elseif c == \"o\" then\n      if #words == n then\n      \
    \  return words\n      end\n      words[#words + 1] = s[i]\n      i = i + 1\n\
    \    elseif c == \"u\" then\n      if #words == n then\n        return words\n\
    \      end\n      words[#words + 1] = s[i]\n      i = i + 1\n    elseif c == \"\
    y\" then\n      if #words == n then\n        return words\n      end\n      words[#words\
    \ + 1] = s[i]\n      i = i + 1\n    elseif c == \"s\" then\n      if #words ==\
    \ n then\n        return words\n      end\n      words[#words + 1] = s[i]\n  \
    \    i = i + 1\n    elseif c == \"d\" then\n      if #words == n then\n      \
    \  return words\n      end\n      words[#words + 1] = s[i]\n      i = i + 1\n\
    \    elseif c == \"h\" then\n      if #words == n then\n        return words\n\
    \      end\n      words[#words + 1] = s[i]\n      i = i + 1\n    elseif c == \"\
    l\" then\n      if #words == n then\n        return words\n      end\n      words[#words\
    \ + 1] = s[i]\n      i = i + 1\n    elseif c == \"m\" then\n      if #words ==\
    \ n then\n        return words\n      end\n      words[#words + 1] = s[i]\n  \
    \    i = i + 1\n    elseif c == \"t\" then\n      if #words == n then\n      \
    \  return words\n      end\n      words[#words + 1] = s[i]\n      i = i + 1\n\
    \    elseif c == \"w\" then\n      if #words == n then\n        return words\n\
    \      end\n      words[#words + 1] = s[i]\n      i = i + 1\n    elseif c == \"\
    b\" then\n      if #words == n then\n        return words\n      end\n      words[#words\
    \ + 1] = s[i]\n      i = i + 1\n    elseif c == \"v\" then\n      if #words ==\
    \ n then\n        return words\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplt9bkr_i.lua:104: ''end'' expected (to close ''if'' at line
    102) near ''lu''

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      if string.sub(s,index,index+n) == \"\" then\n            index = index\
    \ + 1\n        else\n            table.insert(words, string.sub(s,index,index+n))\n\
    \            index = index + 1\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ws0mnnv.lua:29:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary \",\n    \"ary h\",\n    \"\
    ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n    \"ad a \",\n   \
    \ \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n    \"littl\",\n\
    \    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\",\n    \"e lam\"\
    ,\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmp2ws0mnnv.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+n)\
    \ == string.sub(s,i,i+n) then\n      table.insert(words, string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v7g0d_d.lua:27:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmp6v7g0d_d.lua:27: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_yyfbc_.lua:28:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpl_yyfbc_.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    local c\
    \ = s[i]\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c ==\
    \ \"u\" then\n      words[#words + 1] = s[i]\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr08h84xy.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpr08h84xy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        local\
    \ c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n            i = i + 1\n        elseif c == 'y' then\n            i = i\
    \ + 1\n        elseif c == 's' then\n            i = i + 1\n        elseif c ==\
    \ 't' then\n            i = i + 1\n        elseif c == 'h' then\n            i\
    \ = i + 1\n        elseif c == 'l' then\n            i = i + 1\n        elseif\
    \ c == 'd' then\n            i = i + 1\n        elseif c == 'n' then\n       \
    \     i = i + 1\n        elseif c == 'w' then\n            i = i + 1\n       \
    \ elseif c == 'r' then\n            i = i + 1\n        elseif c == 'f' then\n\
    \            i = i + 1\n        elseif c == 'v' then\n            i = i + 1\n\
    \        elseif c == 'b' then\n            i = i + 1\n        elseif c == 'c'\
    \ then\n            i = i + 1\n        elseif c == 'm' then\n            i = i\
    \ + 1\n        elseif c == 'p' then\n            i = i + 1\n        elseif c ==\
    \ 'y' then\n            i = i + 1\n        elseif c == 'k' then\n            i\
    \ = i + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif\
    \ c == 'j' then\n            i = i + 1\n        elseif c == 'q' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'x' then\n            i = i + 1\n        elseif c == 'z' then\n\
    \            i = i + 1\n        elseif c == 'q' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'q'\
    \ then\n            i = i + 1\n        elseif c == 'z' then\n            i = i\
    \ + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif c ==\
    \ 'z' then\n            i = i + 1\n        elseif c == 'q' then\n            i\
    \ = i + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif\
    \ c == 'q' then\n            i = i + 1\n        elseif c == 'z' then\n       \
    \     i = i + 1\n        elseif c == 'q' then\n            i = i + 1\n       \
    \ elseif c == 'z' then\n            i = i + 1\n        elseif c == 'q' then\n\
    \            i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n\
    \        elseif c == 'q' then\n            i = i + 1\n        elseif c == 'z'\
    \ then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphr3k4hsc.lua:97: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = { }\n    local index = 0\n    while index <= #s do\n \
    \       local char = string.sub(s,index,index)\n        if string.find(char, \"\
    [aeiou]\") then\n            index = index + 1\n        else\n            if string.find(char,\
    \ \"bcdfghjklmnpqrstvwxyz\") then\n                index = index + 1\n       \
    \     else\n                if string.find(char, \"aeiou\") then\n           \
    \         index = index + 1\n                else\n                    if string.find(char,\
    \ \"bcdfghjklmnpqrstvwxyz\") then\n                        index = index + 1\n\
    \                    else\n                        if string.find(char, \"aeiou\"\
    ) then\n                            index = index + 1\n                      \
    \  else\n                            if string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n                                index = index + 1\n                  \
    \          else\n                                if string.find(char, \"aeiou\"\
    ) then\n                                    index = index + 1\n              \
    \                  else\n                                    if string.find(char,\
    \ \"bcdfghjklmnpqrstvwxyz\") then\n                                        index\
    \ = index + 1\n                                    else\n                    \
    \                    if string.find(char, \"aeiou\") then\n                  \
    \                          index = index + 1\n                               \
    \         else\n                                            if string.find(char,\
    \ \"bcdfghjklmnpqrstvwxyz\") then\n                                          \
    \      index = index + 1\n                                            else\n \
    \                                               if string.find(char, \"aeiou\"\
    ) then\n                                                    index = index + 1\n\
    \                                                else\n                      \
    \                              if string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n                                                        index = index\
    \ + 1\n                                                    else\n            \
    \                                            if string.find(char, \"aeiou\") then\n\
    \                                                            index = index + 1\n\
    \                                                        else\n              \
    \                                              if string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n                                                                index\
    \ = index + 1\n                                                            else\n\
    \                                                                if string.find(char,\
    \ \"aeiou\") then\n                                                          \
    \          index = index + 1\n                                               \
    \                 else\n                                                     \
    \               if string.find(char, \"bcdfghjklmnpqrstvwxyz\") then\n       \
    \                                                                 index = index\
    \ + 1\n                                                                    else\n\
    \                                                                        if string.find(char,\
    \ \"aeiou\") then\n                                                          \
    \                  index = index + 1\n                                       \
    \                                 else\n                                     \
    \                                       if string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n                                                                     \
    \           index = index + 1\n                                              \
    \                              else\n                                        \
    \                                        if string.find(char, \"aeiou\") then\n\
    \                                                                            \
    \        index = index + 1\n                                                 \
    \                               else\n                                       \
    \                                             if string.find(char, \"bcdfghjklmnpqrstvwxyz\"\
    ) then\n                                                                     \
    \                   index = index + 1\n                                      \
    \                                              else\n                        \
    \                                                                if string.find(char,\
    \ \"aeiou\") then\n                                                          \
    \                                  index = index + 1\n                       \
    \                                         \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppa19cpjt.lua:93: ''end'' expected (to close ''if'' at line
    77) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words, word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_mvt9a9.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpp_mvt9a9.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local result = {}\n  local index = 1\n  while true do\n    local word\
    \ = string.sub(s,index,index+n)\n    if word == \"\" then\n      break\n    end\n\
    \    index = index+n\n    table.insert(result, word)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn88h2tpb.lua:29:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpn88h2tpb.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local result = {}\n  local index = 0\n  while index\
    \ <= #s do\n    local char = string.sub(s,index,index)\n    if string.find(char,string.letters)\
    \ == nil then\n      index = index + 1\n    else\n      if string.find(char,string.letters)\
    \ then\n        if string.find(char,string.letters) == nil then\n          index\
    \ = index + 1\n        else\n          local count = 0\n          for i = string.len(string.sub(char,1,string.len(char)))\
    \ do\n            if string.sub(char,i,i) == string.sub(char,i,i) then\n     \
    \         count = count + 1\n            end\n          end\n          if count\
    \ == n then\n            table.insert(result,string.sub(char,1,string.len(char)))\n\
    \          end\n        end\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4k7a0_oa.lua:26: '','' expected near ''do''

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local vowels = \"aeiou\"\n    local consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    local i = 0\n    while i <= #s do\n       \
    \ local c = s[i]\n        if c == \"a\" then\n            i = i + 1\n        elseif\
    \ c == \"e\" then\n            i = i + 1\n        elseif c == \"i\" then\n   \
    \         i = i + 1\n        elseif c == \"o\" then\n            i = i + 1\n \
    \       elseif c == \"u\" then\n            i = i + 1\n        elseif c == \"\
    y\" then\n            i = i + 1\n        elseif c == \"A\" then\n            i\
    \ = i + 1\n        elseif c == \"E\" then\n            i = i + 1\n        elseif\
    \ c == \"I\" then\n            i = i + 1\n        elseif c == \"O\" then\n   \
    \         i = i + 1\n        elseif c == \"U\" then\n            i = i + 1\n \
    \       elseif c == \"Y\" then\n            i = i + 1\n        elseif c == \"\
    b\" then\n            i = i + 1\n        elseif c == \"c\" then\n            i\
    \ = i + 1\n        elseif c == \"d\" then\n            i = i + 1\n        elseif\
    \ c == \"f\" then\n            i = i + 1\n        elseif c == \"g\" then\n   \
    \         i = i + 1\n        elseif c == \"h\" then\n            i = i + 1\n \
    \       elseif c == \"j\" then\n            i = i + 1\n        elseif c == \"\
    k\" then\n            i = i + 1\n        elseif c == \"l\" then\n            i\
    \ = i + 1\n        elseif c == \"m\" then\n            i = i + 1\n        elseif\
    \ c == \"n\" then\n            i = i + 1\n        elseif c == \"p\" then\n   \
    \         i = i + 1\n        elseif c == \"q\" then\n            i = i + 1\n \
    \       elseif c == \"r\" then\n            i = i + 1\n        elseif c == \"\
    s\" then\n            i = i + 1\n        elseif c == \"t\" then\n            i\
    \ = i + 1\n        elseif c == \"v\" then\n            i = i + 1\n        elseif\
    \ c == \"w\" then\n            i = i + 1\n        elseif c == \"x\" then\n   \
    \         i = i + 1\n        elseif c == \"z\" then\n            i = i + 1\n \
    \       elseif c == \"A\" then\n            i = i + 1\n        elseif c == \"\
    E\" then\n            i = i + 1\n        elseif c == \"I\" then\n            i\
    \ = i + 1\n        elseif c == \"O\" then\n            i = i + 1\n        elseif\
    \ c == \"U\" then\n            i = i + 1\n        elseif c == \"Y\" then\n   \
    \         i = i + 1\n        elseif c == \"b\" then\n            i = i + 1\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfh6im775.lua:111: ''end'' expected (to close ''if'' at line
    19) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n)\
    \ == \"\" then\n      i = i + 1\n    else\n      table.insert(words, string.sub(s,i,i+n))\n\
    \      i = i + n\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmrkmtsh.lua:29:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmplmrkmtsh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local index = 0\n  while\
    \ index <= #s do\n    if string.sub(s,index,index+n) == string.sub(s,index+1,index+n-1)\
    \ then\n      table.insert(words, string.sub(s,index+1,index+n))\n    end\n  \
    \  index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlp1pv7o.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpxlp1pv7o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n            table.insert(words,\
    \ string.sub(s,i,i+n))\n        end\n        i = i + n\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj735ssq.lua:27:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmptj735ssq.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) == \" \" then\n      table.insert(words, string.sub(s,1,i))\n\
    \      table.insert(words, string.sub(s,i+1))\n    elseif string.sub(s,i,i) ==\
    \ \" \" then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n \
    \ local count = 0\n  for i = 1, #words do\n    if string.sub(words[i],1,n) ==\
    \ string.sub(words[i],2,n) then\n      count = count + 1\n    end\n  end\n  if\
    \ count == n then\n    return words\n  else\n    return nil\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4co3wws.lua:39:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpz4co3wws.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\n  \n  -- Recursive\
    \ case\n  local words = select_words(s, n - 1)\n  for i = 1, #words do\n    if\
    \ string.sub(words, i, i + 1) ~= \"\" then\n      table.insert(words, string.sub(words,\
    \ i, i + 1))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp982ma1gh.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\
    \t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\t/tmp/tmp982ma1gh.lua:19:\
    \ in upvalue 'select_words'\n\t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\
    \t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\t/tmp/tmp982ma1gh.lua:19:\
    \ in upvalue 'select_words'\n\t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\
    \t/tmp/tmp982ma1gh.lua:19: in upvalue 'select_words'\n\t/tmp/tmp982ma1gh.lua:19:\
    \ in upvalue 'select_words'\n\t...\t(skipping 333297 levels)\n\t/tmp/tmp982ma1gh.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp982ma1gh.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.210 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words,word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddpc_yy.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpjddpc_yy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      words[#words + 1] = \"\"\n    else\n      if string.sub(s,i,i)\
    \ == \".\" then\n        words[#words + 1] = \"\"\n      else\n        if string.sub(s,i,i)\
    \ == \",\" then\n          words[#words + 1] = \"\"\n        else\n          if\
    \ string.sub(s,i,i) == \";\" then\n            words[#words + 1] = \"\"\n    \
    \      else\n            if string.sub(s,i,i) == \":\" then\n              words[#words\
    \ + 1] = \"\"\n            else\n              if string.sub(s,i,i) == \";\" then\n\
    \                words[#words + 1] = \"\"\n              else\n              \
    \  if string.sub(s,i,i) == \":\" then\n                  words[#words + 1] = \"\
    \"\n                else\n                  if string.sub(s,i,i) == \".\" then\n\
    \                    words[#words + 1] = \"\"\n                  else\n      \
    \              if string.sub(s,i,i) == \",\" then\n                      words[#words\
    \ + 1] = \"\"\n                    else\n                      if string.sub(s,i,i)\
    \ == \".\" then\n                        words[#words + 1] = \"\"\n          \
    \            else\n                        if string.sub(s,i,i) == \",\" then\n\
    \                          words[#words + 1] = \"\"\n                        else\n\
    \                          if string.sub(s,i,i) == \".\" then\n              \
    \              words[#words + 1] = \"\"\n                          else\n    \
    \                        if string.sub(s,i,i) == \".\" then\n                \
    \              words[#words + 1] = \"\"\n                            else\n  \
    \                            if string.sub(s,i,i) == \",\" then\n            \
    \                    words[#words + 1] = \"\"\n                              else\n\
    \                                if string.sub(s,i,i) == \".\" then\n        \
    \                          words[#words + 1] = \"\"\n                        \
    \        else\n                                  if string.sub(s,i,i) == \".\"\
    \ then\n                                    words[#words + 1] = \"\"\n       \
    \                           else\n                                    if string.sub(s,i,i)\
    \ == \".\" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \",\" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \".\" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \".\" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \".\" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy3ycynwg.lua:80: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        if string.sub(s,i,i+n)\
    \ == string.sub(s,i,i+n) then\n            table.insert(words, string.sub(s,i,i+n))\n\
    \        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqy_wiab.lua:27:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpoqy_wiab.lua:27: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local word =\
    \ s:sub(i,i)\n    if word ~= \"\" then\n      if word:sub(1,n) == \"\" then\n\
    \        table.insert(words, word)\n      end\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6blw41qx.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6blw41qx.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptu1iju37.lua:155: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if string.sub(s,index,index+n) == \"\" then\n      table.insert(words,string.sub(s,1,index-1))\n\
    \      index = index + 1\n    else\n      index = index + 1\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnexfk6j0.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnexfk6j0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    local letter\
    \ = string.sub(s,i,i)\n    if letter == \"a\" or letter == \"e\" or letter ==\
    \ \"i\" or letter == \"o\" or letter == \"u\" then\n      words[#words + 1]=letter\n\
    \    end\n  end\n  local count = 0\n  for i = 1, #words do\n    if string.sub(words,i,i)\
    \ == n then\n      count = count + 1\n    end\n  end\n  if count > n then\n  \
    \  return words\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw01i6lzj.lua:23:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpw01i6lzj.lua:23: in local 'candidate'\n\t/tmp/tmpw01i6lzj.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Solution below\n  \n  -- Solution above\n\
    \  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n \
    \ \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n\
    \  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n \
    \ -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  --\
    \ Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution\
    \ above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n\
    \  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n \
    \ \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n\
    \  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n \
    \ -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  --\
    \ Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution\
    \ below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n\
    \  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n \
    \ \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n\
    \  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n \
    \ -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  --\
    \ Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution\
    \ above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n\
    \  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n \
    \ \n  -- Solution below\n  \n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkgzm1m_p.lua:155: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n)\
    \ == \"\" then\n      break\n    end\n    table.insert(words, string.sub(s,i,i+n))\n\
    \    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjbtoxii.lua:28:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpnjbtoxii.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = s[i]\n        if string.find(word, \"[aeiou]\") then\n            i =\
    \ i + 1\n        else\n            local count = 0\n            for j = 1, #word\
    \ do\n                if string.find(word, string.sub(word, 1, j)) then\n    \
    \                count = count + 1\n                end\n            end\n   \
    \         if count == n then\n                table.insert(words, word)\n    \
    \        end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk2nn291.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpwk2nn291.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpwk2nn291.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      if string.sub(s,index,index+n) == string.sub(s,1,index) then\n        \
    \    table.insert(words, string.sub(s,1,index))\n        end\n        index =\
    \ index + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxbtv2f9.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxbtv2f9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    local letter = s[i]\n    if letter:sub(1, n) == letter then\n      table.insert(words,\
    \ letter)\n    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgb7_9mf3.lua:18:\
    \ attempt to index a nil value (local 'letter')\nstack traceback:\n\t/tmp/tmpgb7_9mf3.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgb7_9mf3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if string.sub(s,i,i+n) == \"\" then\n      table.insert(words,\
    \ string.sub(s,i,i))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwng7_4zj.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwng7_4zj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local result = {}\n  for i = 1, #s do\n   \
    \ local char = s[i]\n    if string.find(string.gsub(string.lower(char), \" \"\
    , \"\"), \"[bcdfghjklmnpqrstvwxyz]\") then\n      table.insert(result, char)\n\
    \    end\n  end\n  if #result == n then\n    return result\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggy487_r.lua:17:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpggy487_r.lua:17: in local 'candidate'\n\t/tmp/tmpggy487_r.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index)\n    if word == \"\" then\n      break\n    end\n    index =\
    \ index + 1\n    if word:sub(1, 1) == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805147
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if string.find(c, \"[bcdfghjklmnpqrstvwxyz]\") then\n\
    \      table.insert(words, c)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf_yh_gb.lua:27:\
    \ expected: {\"little\"}\nactual: {\"r\", \"y\", \"h\", \"d\", \"l\", \"t\", \"\
    t\", \"l\", \"l\", \"m\", \"b\"}\nstack traceback:\n\t/tmp/tmpcf_yh_gb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ letter = string.sub(s,index,index)\n    if letter:sub(1,1) == \"a\" then\n \
    \     if letter:sub(2,2) == \"e\" then\n        if letter:sub(3, 3) == \"l\" then\n\
    \          if letter:sub(4, 4) == \"l\" then\n            if letter:sub(5,5) ==\
    \ \"o\" then\n              if letter:sub(6,6) == \"u\" then\n               \
    \ if letter:sub(7,7) == \"c\" then\n                  if letter:sub(8,8) == \"\
    e\" then\n                    if letter:sub(9,9) == \"s\" then\n             \
    \         if letter:sub(1,1) == \"s\" then\n                        if letter:sub(2,2)\
    \ == \"m\" then\n                          if letter:sub(3, 3) == \"a\" then\n\
    \                            if letter:sub(4, 4) == \"d\" then\n             \
    \                 return words\n                            end\n            \
    \              end\n                        end\n                      end\n \
    \                   end\n                  end\n                end\n        \
    \      end\n            end\n          end\n        end\n      end\n    end\n\
    \    index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkybrextp.lua:52:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpkybrextp.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i+n) == string.sub(s,1,n) then\n      table.insert(words, string.sub(s,i+1,i+n))\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxsmh99n.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppxsmh99n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    if word == \"\" then\n      break\n    end\n    index\
    \ = index + 1\n    if word:sub(1, 1) == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl3t8vw6.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl3t8vw6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluhf8ho1.lua:112: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local count = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      count = count +\
    \ 1\n      if count == n then\n        table.insert(words, string.sub(s,1,i))\n\
    \      end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg6vtdg0.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little \"}\nstack traceback:\n\
    \t/tmp/tmpxg6vtdg0.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if string.sub(s,index,index+n) == string.sub(s,index-1,index)\
    \ then\n      table.insert(words,string.sub(s,index,index+n))\n    end\n    index\
    \ = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjx71oia.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptjx71oia.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[^aeiou]\") then\n\
    \            table.insert(words, word)\n        end\n        i = i + 1\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9bjm6yv.lua:28:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"r\",\n    \"y\",\n\
    \    \" \",\n    \"h\",\n    \"d\",\n    \" \",\n    \" \",\n    \"l\",\n    \"\
    t\",\n    \"t\",\n    \"l\",\n    \" \",\n    \"l\",\n    \"m\",\n    \"b\"\n\
    }\nstack traceback:\n\t/tmp/tmpi9bjm6yv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ < #s do\n    if string.sub(s,i,i) == \" \" then\n      i = i + 1\n    elseif\
    \ string.sub(s,i,i) == \"a\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"e\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"i\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"o\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"u\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"y\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"h\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"l\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"m\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"n\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"s\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"w\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"t\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"r\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"d\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"b\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"f\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"v\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"k\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"j\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"x\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"z\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"p\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"q\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"z\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"c\" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"v\" then\n\
    \      i = i + 1\n    elseif string.sub(s,i,i) == \"b\" then\n      i = i + 1\n\
    \    elseif string.sub(s,i,i) == \"n\" then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == \"m\" then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpne3ob9b7.lua:92: ''end'' expected (to close ''if'' at line
    17) near <eof>

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n)\
    \ == \"\" then\n      break\n    end\n    table.insert(words, string.sub(s,i,i+n))\n\
    \    i = i+n\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeubp9lhg.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpeubp9lhg.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == #s then\n                table.insert(words, \"\")\n       \
    \     else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ word)\n            end\n            i = i + 1\n        elseif c == \"s\" then\n\
    \            if i == #s then\n                table.insert(words, \"\")\n    \
    \        else\n                local word = select_words(s, i)\n             \
    \   table.insert(words, word)\n            end\n            i = i + 1\n      \
    \  elseif c == \"t\" or c == \"h\" or c == \"r\" or c == \"l\" then\n        \
    \    if i == #s then\n                table.insert(words, \"\")\n            else\n\
    \                local word = select_words(s, i)\n                table.insert(words,\
    \ word)\n            end\n            i = i + 1\n        elseif c == \"d\" then\n\
    \            if i == #s then\n                table.insert(words, \"\")\n    \
    \        else\n                local word = select_words(s, i)\n             \
    \   table.insert(words, word)\n            end\n            i = i + 1\n      \
    \  elseif c == \"w\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, word)\n            end\n            i = i\
    \ + 1\n        elseif c == \"b\" then\n            if i == #s then\n         \
    \       table.insert(words, \"\")\n            else\n                local word\
    \ = select_words(s, i)\n                table.insert(words, word)\n          \
    \  end\n            i = i + 1\n        elseif c == \"c\" then\n            if\
    \ i == #s then\n                table.insert(words, \"\")\n            else\n\
    \                local word = select_words(s, i)\n                table.insert(words,\
    \ word)\n            end\n            i = i + 1\n        elseif c == \"m\" then\n\
    \            if i == #s then\n                table.insert(words, \"\")\n    \
    \        else\n                local word = select_words(s, i)\n             \
    \   table.insert(words, word)\n            end\n            i = i + 1\n      \
    \  elseif c == \"f\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, word)\n            end\n            i = i\
    \ + 1\n        elseif c == \"v\" then\n            if i == #s then\n         \
    \       table.insert(words, \"\")\n            else\n                local word\
    \ = select_words(s, i)\n                table.insert(words, word)\n          \
    \  end\n            i = i + 1\n        elseif c == \"g\" then\n            if\
    \ i == #s then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp93qpsh73.lua:115: ''end'' expected (to close ''if'' at line
    100) near <eof>

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 0\n    while index <= #s do\n  \
    \      local letter = string.sub(s,index,index+1)\n        if letter:sub(1,1)\
    \ == \"a\" or letter:sub(1,1) == \"e\" or letter:sub(1,1) == \"i\" or letter:sub(1,1)\
    \ == \"o\" or letter:sub(1,1) == \"u\" then\n            index = index + 1\n \
    \       else\n            if #words == n then\n                table.insert(words,letter)\n\
    \            else\n                table.insert(words,letter)\n              \
    \  table.insert(words,string.sub(s,index,index+1))\n            end\n        end\n\
    \        index = index + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqceivxk.lua:35:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"M\",\n    \"Ma\",\n\
    \    \"Ma\",\n    \"y \",\n    \" h\",\n    \" h\",\n    \"ha\",\n    \"ha\",\n\
    \    \" a\",\n    \" a\",\n    \"li\",\n    \"li\",\n    \"tl\",\n    \"tl\",\n\
    \    \"le\",\n    \"le\",\n    \"la\",\n    \"la\",\n    \"b\",\n    \"b\"\n}\n\
    stack traceback:\n\t/tmp/tmpjqceivxk.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n\
    \  local count = 0\n  for i = 1, #words do\n    if string.sub(words[i],1,1) ==\
    \ n then\n      count = count + 1\n    end\n  end\n  if count == n then\n    return\
    \ words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya_x38b_.lua:34:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpya_x38b_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local vowels = \"aeiou\"\n    local consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\"\n    local vowel_count = 0\n    local consonant_count\
    \ = 0\n    local vowel_found = false\n    local consonant_found = false\n    local\
    \ i = 0\n    local j = 0\n    local word = \"\"\n    while i < #s and j < n do\n\
    \        word = word .. consonants[consonant_count]\n        i = i + 1\n     \
    \   consonant_count = consonant_count + 1\n        if consonant_count == #consonants\
    \ then\n            words[#words + 1] = word\n            word = \"\"\n      \
    \      consonant_count = 0\n        end\n    end\n    if word ~= \"\" then\n \
    \       words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcjz0cc9.lua:24:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpkcjz0cc9.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpkcjz0cc9.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      if string.sub(s,index,index+n) == \"\" then\n            index = index\
    \ + 1\n        else\n            table.insert(words, string.sub(s,index,index+n))\n\
    \            index = index + 1\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ws0mnnv.lua:29:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary \",\n    \"ary h\",\n    \"\
    ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n    \"ad a \",\n   \
    \ \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n    \"littl\",\n\
    \    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\",\n    \"e lam\"\
    ,\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmp2ws0mnnv.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsko_7kw.lua:20:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmplsko_7kw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for w in string.gmatch(s, \"%S+\") do\n    local count\
    \ = 0\n    for c in string.gmatch(w, \"[%S]+\") do\n      if string.sub(c, 1,\
    \ 1) == c then\n        count = count + 1\n      end\n    end\n    if count ==\
    \ n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaujuiw6v.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpaujuiw6v.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, \"^\", i) then\n      table.insert(words,\
    \ string.sub(s, \"^\", i))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsen3wbxy.lua:16:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpsen3wbxy.lua:16: in local 'candidate'\n\t/tmp/tmpsen3wbxy.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    if string.sub(s,i,i+1)\
    \ == \" \" then\n      i = i + 1\n    elseif string.sub(s,i,i+1) ~= \"\" then\n\
    \      if string.sub(s,i,i+1) == \" \" then\n        i = i + 1\n      else\n \
    \       table.insert(words, string.sub(s,i,i+1))\n        i = i + 1\n      end\n\
    \    end\n  end\n  if #words == n then\n    return words\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmg_j6vj5.lua:37:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpmg_j6vj5.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i < #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i >= n then\n                words[#words + 1] = \"\"\n         \
    \   end\n        elseif c == \"s\" then\n            if i >= n then\n        \
    \        words[#words + 1] = \"\"\n            elseif s[i] ~= \" \" then\n   \
    \             words[#words + 1] = s[i]\n            end\n        elseif c == \"\
    t\" or c == \"h\" or c == \"r\" or c == \"l\" then\n            i = i + 1\n  \
    \      elseif c == \"d\" then\n            if i >= n then\n                words[#words\
    \ + 1] = \"\"\n            elseif s[i] ~= \" \" then\n                words[#words\
    \ + 1] = s[i]\n            end\n        elseif c == \"w\" then\n            if\
    \ i >= n then\n                words[#words + 1] = \"\"\n            elseif s[i]\
    \ ~= \" \" then\n                words[#words + 1] = s[i]\n            end\n \
    \       elseif c == \"b\" then\n            if i >= n then\n                words[#words\
    \ + 1] = \"\"\n            elseif s[i] ~= \" \" then\n                words[#words\
    \ + 1] = s[i]\n            end\n        elseif c == \"c\" then\n            if\
    \ i >= n then\n                words[#words + 1] = \"\"\n            elseif s[i]\
    \ ~= \" \" then\n                words[#words + 1] = s[i]\n            end\n \
    \       elseif c == \"m\" then\n            if i >= n then\n                words[#words\
    \ + 1] = \"\"\n            elseif s[i] ~= \" \" then\n                words[#words\
    \ + 1] = s[i]\n            end\n        elseif c == \"f\" then\n            if\
    \ i >= n then\n                words[#words + 1] = \"\"\n            elseif s[i]\
    \ ~= \" \" then\n                words[#words + 1] = s[i]\n            end\n \
    \       elseif c == \"v\" then\n            if i >= n then\n                words[#words\
    \ + 1] = \"\"\n            elseif s[i] ~= \" \" then\n                words[#words\
    \ + 1] = s[i]\n            end\n        elseif c == \"g\" then\n            if\
    \ i >= n then\n                words[#words + 1] = \"\"\n            elseif s[i]\
    \ ~= \" \" then\n                words[#words + 1] = s[i]\n            end\n \
    \       elseif c == \"k\" then\n            if i >= n then\n                words[#words\
    \ + 1] = \"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0bsvi3gs.lua:95: ''end'' expected (to close ''if'' at line
    80) near <eof>

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local letter = string.sub(s,i,i)\n\
    \        if letter:sub(1,1) == letter then\n            if letter:sub(1,1) ==\
    \ letter then\n                table.insert(words, letter)\n            else\n\
    \                table.insert(words, letter:sub(1,1))\n            end\n     \
    \   end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26vnncbx.lua:30:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \" \",\n    \"h\",\n    \"a\",\n    \"d\",\n    \" \",\n    \"\
    a\",\n    \" \",\n    \"l\",\n    \"i\",\n    \"t\",\n    \"t\",\n    \"l\",\n\
    \    \"e\",\n    \" \",\n    \"l\",\n    \"a\",\n    \"m\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmp26vnncbx.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words,word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddpc_yy.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpjddpc_yy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n    local c = s[i]\n\
    \    if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!' and c ~=\
    \ '?' then\n      local words = select_words(s, n)\n      if #words == n then\n\
    \        table.insert(words, c)\n      else\n        table.insert(words, c)\n\
    \      end\n    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3t2prfaa.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\
    \t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\t/tmp/tmp3t2prfaa.lua:18:\
    \ in upvalue 'select_words'\n\t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\
    \t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\t/tmp/tmp3t2prfaa.lua:18:\
    \ in upvalue 'select_words'\n\t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\
    \t/tmp/tmp3t2prfaa.lua:18: in upvalue 'select_words'\n\t/tmp/tmp3t2prfaa.lua:18:\
    \ in upvalue 'select_words'\n\t...\t(skipping 166644 levels)\n\t/tmp/tmp3t2prfaa.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp3t2prfaa.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i) == \"\" then\n            i = i + 1\n        else\n      \
    \      local consonants = string.sub(s,i,i)\n            if consonants == \"\"\
    \ then\n                i = i + 1\n            else\n                local count\
    \ = #consonants\n                if count == n then\n                    table.insert(words,\
    \ consonants)\n                else\n                    i = i + 1\n         \
    \       end\n            end\n        end\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82hzmg_h.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp82hzmg_h.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 0\n    while true do\n        if\
    \ index == #s then\n            break\n        end\n        local char = string.sub(s,index,index+1)\n\
    \        if string.find(char, \"[bcdfghjklmnpqrstvwxyz]\") then\n            index\
    \ = index + 1\n        else\n            index = index + 1\n            table.insert(words,\
    \ char)\n        end\n    end\n    if #words == n then\n        return words\n\
    \    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpted5ags0.lua:36:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpted5ags0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 0\n    while index <= #s do\n  \
    \      if string.sub(s,index,index+n) == string.sub(s,1,index) then\n        \
    \    table.insert(words, string.sub(s,1,index))\n        end\n        index =\
    \ index + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyigs8zu1.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpyigs8zu1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i) == \" \" then\n            i = i + 1\n        else\n     \
    \       local consonants = string.sub(s,i,i)\n            i = i + 1\n        \
    \    while i <= #s do\n                if string.sub(s,i,i) == \" \" then\n  \
    \                  i = i + 1\n                else\n                    if string.sub(s,i,i)\
    \ == consonants then\n                        i = i + 1\n                    else\n\
    \                        i = i + 1\n                    end\n                end\n\
    \            end\n            if i == #s then\n                table.insert(words,\
    \ string.sub(s,1,i))\n            end\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksv8arzp.lua:43:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpksv8arzp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while index <= #s do\n  \
    \      local word = string.sub(s,index,index+n)\n        if word ~= \"\" then\n\
    \            table.insert(words,word)\n        end\n        index = index+n\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddpc_yy.lua:28:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpjddpc_yy.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsko_7kw.lua:20:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmplsko_7kw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805142
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index)\n    if word == \"\" then\n      break\n    end\n    index =\
    \ index + 1\n    if word:sub(1, 1) == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805147
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if string.find(string.gsub(string.gsub(char, \"[aeiou]\", \"\"), \"[^aeiou]\"\
    , \"\"), char) then\n      table.insert(words, char)\n    end\n  end\n  return\
    \ table.sort(words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubcpa2eg.lua:26:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpubcpa2eg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    if string.sub(s,\
    \ index, index+n) == string.sub(s,1,n) then\n      table.insert(words, string.sub(s,index+1,index+n))\n\
    \    end\n    index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqt4vecg9.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqt4vecg9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if word:sub(1, 1) == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4arh6yc.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpa4arh6yc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" then\n\
    \      i = i + 1\n    elseif c == \"n\" then\n      if #words == n then\n    \
    \    break\n      else\n        table.insert(words, s[i])\n      end\n    else\n\
    \      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8f3ernv.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpm8f3ernv.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = { }\n    local i = 0\n    while i < #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         i = i + 1\n        elseif c == \"s\" then\n            i = i + 1\n \
    \       elseif c == \"t\" then\n            i = i + 1\n        elseif c == \"\
    h\" then\n            i = i + 1\n        elseif c == \"l\" then\n            i\
    \ = i + 1\n        elseif c == \"w\" then\n            i = i + 1\n        elseif\
    \ c == \"d\" then\n            i = i + 1\n        elseif c == \"r\" then\n   \
    \         i = i + 1\n        elseif c == \"c\" then\n            i = i + 1\n \
    \       elseif c == \"m\" then\n            i = i + 1\n        elseif c == \"\
    p\" then\n            i = i + 1\n        elseif c == \"f\" then\n            i\
    \ = i + 1\n        elseif c == \"v\" then\n            i = i + 1\n        elseif\
    \ c == \"b\" then\n            i = i + 1\n        elseif c == \"k\" then\n   \
    \         i = i + 1\n        elseif c == \"j\" then\n            i = i + 1\n \
    \       elseif c == \"q\" then\n            i = i + 1\n        elseif c == \"\
    z\" then\n            i = i + 1\n        elseif c == \"x\" then\n            i\
    \ = i + 1\n        elseif c == \"z\" then\n            i = i + 1\n        elseif\
    \ c == \"y\" then\n            i = i + 1\n        elseif c == \"k\" then\n   \
    \         i = i + 1\n        elseif c == \"q\" then\n            i = i + 1\n \
    \       elseif c == \"p\" then\n            i = i + 1\n        elseif c == \"\
    m\" then\n            i = i + 1\n        elseif c == \"l\" then\n            i\
    \ = i + 1\n        elseif c == \"h\" then\n            i = i + 1\n        elseif\
    \ c == \"r\" then\n            i = i + 1\n        elseif c == \"d\" then\n   \
    \         i = i + 1\n        elseif c == \"c\" then\n            i = i + 1\n \
    \       elseif c == \"b\" then\n            i = i + 1\n        elseif c == \"\
    v\" then\n            i = i + 1\n        elseif c == \"f\" then\n            i\
    \ = i + 1\n        elseif c == \"s\" then\n            i = i + 1\n        elseif\
    \ c == \"n\" then\n            i = i + 1\n        elseif c == \"a\" then\n   \
    \         i = i + 1\n        elseif c == \"e\" then\n            i = i + 1\n \
    \       elseif c == \"i\" then\n            i = i + 1\n        elseif c == \"\
    o\" then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr0qsvcu5.lua:97: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local ret = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      ret[#ret+1] = string.sub(s,1,i)\n      i = i + 1\n    end\n\
    \  end\n  if #ret == n then\n    return ret\n  else\n    return {}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunnzlvdh.lua:31:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpunnzlvdh.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local ret = {}\n  if s == \"\" then return\
    \ ret end\n  local vowels = {'a','e','i','o','u'}\n  for i = 1, #s do\n    if\
    \ vowels[string.sub(s,i,i)] ~= nil then\n      table.insert(ret, string.sub(s,i,i))\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7841ejt1.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7841ejt1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n    if string.sub(s,i,i)\
    \ ~= \" \" then\n      words[#words + 1] = string.sub(s,i,i)\n    end\n    i =\
    \ i + 1\n  end\n  if #words == n then\n    return words\n  else\n    return {}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v2e3dd2.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8v2e3dd2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n    local word =\
    \ s:sub(i,i)\n    if word:sub(1,1) == n then\n      table.insert(words, word)\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnt6herk.lua:28:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfnt6herk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    local c = s[i]\n\
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      i\
    \ = i + 1\n      continue\n    end\n    if c == 'y' then\n      i = i + 1\n  \
    \    continue\n    end\n    if c == 's' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 't' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'h' then\n      i = i + 1\n      continue\n    end\n    if c == 'l'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'd' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'n' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'g' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'f' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'p' then\n      i = i + 1\n      continue\n    end\n    if c == 'v'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'b' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'm' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'j' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'q' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'z' then\n      i = i + 1\n      continue\n    end\n    if c == 'x'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'c' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'v' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'w' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'r' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'u' then\n      i = i + 1\n      continue\n    end\n    if c == 'p'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'j' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'q' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'z' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'x' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'c' then\n      i = i + 1\n      continue\n    end\n    if c == 'v'\
    \ then\n      i = i + 1\n      \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6a9384s2.lua:20: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ixbmabf.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ixbmabf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ word = string.sub(s,index,index+1)\n    if string.find(word, \"[aeiou]\") then\n\
    \      index = index + 1\n      continue\n    end\n    if string.find(word, \"\
    [^aeiou]\") then\n      index = index + 1\n      continue\n    end\n    if string.find(word,\
    \ \"[aeiouAEIOU]\") then\n      index = index + 1\n      continue\n    end\n \
    \   table.insert(words, word)\n    index = index + 1\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp769b0p6o.lua:20: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         i = i + 1\n        elseif c == \"s\" then\n            i = i + 1\n \
    \       elseif c == \"t\" then\n            i = i + 1\n        elseif c == \"\
    h\" then\n            i = i + 1\n        elseif c == \"l\" then\n            i\
    \ = i + 1\n        elseif c == \"w\" then\n            i = i + 1\n        elseif\
    \ c == \"d\" then\n            i = i + 1\n        elseif c == \"r\" then\n   \
    \         i = i + 1\n        elseif c == \"c\" then\n            i = i + 1\n \
    \       elseif c == \"m\" then\n            i = i + 1\n        elseif c == \"\
    v\" then\n            i = i + 1\n        elseif c == \"b\" then\n            i\
    \ = i + 1\n        elseif c == \"f\" then\n            i = i + 1\n        elseif\
    \ c == \"g\" then\n            i = i + 1\n        elseif c == \"p\" then\n   \
    \         i = i + 1\n        elseif c == \"y\" then\n            i = i + 1\n \
    \       elseif c == \"k\" then\n            i = i + 1\n        elseif c == \"\
    j\" then\n            i = i + 1\n        elseif c == \"q\" then\n            i\
    \ = i + 1\n        elseif c == \"z\" then\n            i = i + 1\n        elseif\
    \ c == \"x\" then\n            i = i + 1\n        elseif c == \"q\" then\n   \
    \         i = i + 1\n        elseif c == \"z\" then\n            i = i + 1\n \
    \       elseif c == \"y\" then\n            i = i + 1\n        elseif c == \"\
    k\" then\n            i = i + 1\n        elseif c == \"j\" then\n            i\
    \ = i + 1\n        elseif c == \"q\" then\n            i = i + 1\n        elseif\
    \ c == \"z\" then\n            i = i + 1\n        elseif c == \"x\" then\n   \
    \         i = i + 1\n        elseif c == \"q\" then\n            i = i + 1\n \
    \       elseif c == \"z\" then\n            i = i + 1\n        elseif c == \"\
    y\" then\n            i = i + 1\n        elseif c == \"k\" then\n            i\
    \ = i + 1\n        elseif c == \"j\" then\n            i = i + 1\n        elseif\
    \ c == \"q\" then\n            i = i + 1\n        elseif c == \"z\" then\n   \
    \         i = i + 1\n        elseif c == \"x\" then\n            i = i + 1\n \
    \       elseif c == \"q\" then\n            i = i + 1\n        elseif c == \"\
    z\" then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6u70gbsl.lua:97: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Solution below\n  local words = {}\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n     \
    \ table.insert(words, string.sub(s,i+1,i+n))\n    end\n  end\n  \n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvt9idtpc.lua:29:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvt9idtpc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local vowels = \"aeiou\"\n  local consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n  local vowel_count = 0\n  local consonant_count = 0\n\
    \  local vowel_found = false\n  local consonant_found = false\n  local word =\
    \ \"\"\n  local word_index = 1\n  local vowel_position = 1\n  local consonant_position\
    \ = 1\n  while true do\n    if word_index > #s then\n      break\n    end\n  \
    \  word = word .. s[word_index]\n    if vowel_found then\n      if word == vowels\
    \ then\n        vowel_count = vowel_count + 1\n      else\n        vowel_count\
    \ = vowel_count - 1\n      end\n      if vowel_count == n then\n        words[#words\
    \ + 1] = word\n        vowel_found = false\n        vowel_count = 0\n      end\n\
    \    end\n    if consonant_found then\n      if word == consonants then\n    \
    \    consonant_count = consonant_count + 1\n      else\n        consonant_count\
    \ = consonant_count - 1\n      end\n      if consonant_count == n then\n     \
    \   words[#words + 1] = word\n        consonant_found = false\n        consonant_count\
    \ = 0\n      end\n    end\n    if s[word_index] == \" \" then\n      if word ~=\
    \ \"\" then\n        words[#words + 1] = word\n      end\n      word = \"\"\n\
    \      word_index = word_index + 1\n    end\n    if s[word_index] ~= \" \" then\n\
    \      if s[word_index] ~= \" \" then\n        if s[word_index] == vowels then\n\
    \          vowel_found = true\n          vowel_position = word_index\n       \
    \ elseif s[word_index] == consonants then\n          consonant_found = true\n\
    \          consonant_position = word_index\n        end\n      end\n    end\n\
    \    word_index = word_index + 1\n  end\n  if word ~= \"\" then\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmannnfv.lua:28:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpjmannnfv.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpjmannnfv.lua:82: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        local word = string.sub(s,i,i)\n\
    \        if string.find(word, \"[aeiou]\") then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqyie8o0o.lua:26:\
    \ expected: {\"little\"}\nactual: {\"a\", \"a\", \"a\", \"i\", \"e\", \"a\"}\n\
    stack traceback:\n\t/tmp/tmpqyie8o0o.lua:26: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    index = index + 1\n    if word == \"\" then\n      break\n\
    \    end\n    if word:sub(1, n) == \"\" then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fpluemf.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp0fpluemf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ char = s[i]\n        if char == \" \" then\n            i = i + 1\n        elseif\
    \ char == \"a\" then\n            i = i + 1\n        elseif char == \"e\" then\n\
    \            i = i + 1\n        elseif char == \"i\" then\n            i = i +\
    \ 1\n        elseif char == \"o\" then\n            i = i + 1\n        elseif\
    \ char == \"u\" then\n            i = i + 1\n        elseif char == \"y\" then\n\
    \            i = i + 1\n        elseif char == \"A\" then\n            i = i +\
    \ 1\n        elseif char == \"E\" then\n            i = i + 1\n        elseif\
    \ char == \"I\" then\n            i = i + 1\n        elseif char == \"O\" then\n\
    \            i = i + 1\n        elseif char == \"U\" then\n            i = i +\
    \ 1\n        elseif char == \"Y\" then\n            i = i + 1\n        elseif\
    \ char == \"a\" then\n            i = i + 1\n        elseif char == \"e\" then\n\
    \            i = i + 1\n        elseif char == \"i\" then\n            i = i +\
    \ 1\n        elseif char == \"o\" then\n            i = i + 1\n        elseif\
    \ char == \"u\" then\n            i = i + 1\n        elseif char == \"y\" then\n\
    \            i = i + 1\n        elseif char == \"A\" then\n            i = i +\
    \ 1\n        elseif char == \"E\" then\n            i = i + 1\n        elseif\
    \ char == \"I\" then\n            i = i + 1\n        elseif char == \"O\" then\n\
    \            i = i + 1\n        elseif char == \"U\" then\n            i = i +\
    \ 1\n        elseif char == \"Y\" then\n            i = i + 1\n        elseif\
    \ char == \"b\" then\n            i = i + 1\n        elseif char == \"c\" then\n\
    \            i = i + 1\n        elseif char == \"d\" then\n            i = i +\
    \ 1\n        elseif char == \"f\" then\n            i = i + 1\n        elseif\
    \ char == \"g\" then\n            i = i + 1\n        elseif char == \"h\" then\n\
    \            i = i + 1\n        elseif char == \"j\" then\n            i = i +\
    \ 1\n        elseif char == \"k\" then\n            i = i + 1\n        elseif\
    \ char == \"l\" then\n            i = i + 1\n        elseif char == \"m\" then\n\
    \            i = i + 1\n        elseif char == \"n\" then\n            i = i +\
    \ 1\n        elseif char == \"p\" then\n            i = i + 1\n        elseif\
    \ char == \"q\" then\n            i = i + 1\n        elseif char == \"r\" then\n\
    \            i = i + 1\n        elseif char == \"s\" then\n            i = i +\
    \ 1\n        elseif char == \"t\" then\n            i = i + 1\n        elseif\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaz4l8loq.lua:100: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Solution below\n  \n  -- Solution above\n\
    \  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n \
    \ \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n\
    \  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n \
    \ -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  --\
    \ Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution\
    \ above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n\
    \  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n \
    \ \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n\
    \  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n \
    \ -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  --\
    \ Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution\
    \ below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n\
    \  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n \
    \ \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n\
    \  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n \
    \ -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  --\
    \ Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution\
    \ above\n  \n  -- Solution below\n  \n  -- Solution above\n  \n  -- Solution below\n\
    \  \n  -- Solution above\n  \n  -- Solution below\n  \n  -- Solution above\n \
    \ \n  -- Solution below\n  \n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkgzm1m_p.lua:155: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your code\
    \ here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n  -- Your\
    \ code here\n  -- Your code here\n  -- Your code here\n  -- Your code here\n \
    \ -- Your code here\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluhf8ho1.lua:112: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmcntpy0.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_counter = 0\n  local\
    \ consonant_counter = 0\n  local word_counter = 0\n  local word_length = 0\n \
    \ local word_start = nil\n  local word_end = nil\n  local word_string = nil\n\
    \  local word_index = nil\n  local word_char = nil\n  local word_vowel = nil\n\
    \  local word_consonant = nil\n  local word_vowel_counter = nil\n  local word_consonant_counter\
    \ = nil\n  local word_vowel_length = nil\n  local word_consonant_length = nil\n\
    \  local word_vowel_start = nil\n  local word_vowel_end = nil\n  local word_consonant_start\
    \ = nil\n  local word_consonant_end = nil\n  local word_vowel_char = nil\n  local\
    \ word_consonant_char = nil\n  local word_vowel_index = nil\n  local word_consonant_index\
    \ = nil\n  local word_vowel_char = nil\n  local word_consonant_char = nil\n  local\
    \ word_vowel_length = nil\n  local word_consonant_length = nil\n  local word_vowel_start\
    \ = nil\n  local word_vowel_end = nil\n  local word_consonant_start = nil\n  local\
    \ word_consonant_end = nil\n  local word_vowel_char = nil\n  local word_consonant_char\
    \ = nil\n  local word_vowel_index = nil\n  local word_consonant_index = nil\n\
    \  local word_vowel_char = nil\n  local word_consonant_char = nil\n  local word_vowel_length\
    \ = nil\n  local word_consonant_length = nil\n  local word_vowel_start = nil\n\
    \  local word_vowel_end = nil\n  local word_consonant_start = nil\n  local word_consonant_end\
    \ = nil\n  local word_vowel_char = nil\n  local word_consonant_char = nil\n  local\
    \ word_vowel_index = nil\n  local word_consonant_index = nil\n  local word_vowel_char\
    \ = nil\n  local word_consonant_char = nil\n  local word_vowel_length = nil\n\
    \  local word_consonant_length = nil\n  local word_vowel_start = nil\n  local\
    \ word_vowel_end = nil\n  local word_consonant_start = nil\n  local word_consonant_end\
    \ = nil\n  local word_vowel_char = nil\n  local word_consonant_char = nil\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfqholx05.lua:86: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    if string.sub(s,i,i+n) == \"\" then\n      words[#words + 1] = \"\"\n\
    \    else\n      words[#words + 1] = string.sub(s,i,i+n)\n    end\n    i = i +\
    \ n\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptggmwdt_.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmptggmwdt_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ixbmabf.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5ixbmabf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+1) == \" \" then\n      i = i + 1\n      while i < #s\
    \ and string.sub(s,i,i+1) ~= \" \" do\n        i = i + 1\n      end\n      i =\
    \ i + 1\n    end\n    if string.sub(s,i,i+1) ~= \" \" then\n      table.insert(words,\
    \ string.sub(s,i,i+1))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tq7lrpz.lua:35:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"Ma\",\n    \"ar\",\n\
    \    \"ry\",\n    \"y \",\n    \" h\",\n    \"ha\",\n    \"ad\",\n    \"d \",\n\
    \    \" a\",\n    \"a \",\n    \" l\",\n    \"li\",\n    \"it\",\n    \"tt\",\n\
    \    \"tl\",\n    \"le\",\n    \"e \",\n    \" l\",\n    \"la\",\n    \"am\",\n\
    \    \"mb\"\n}\nstack traceback:\n\t/tmp/tmp9tq7lrpz.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i < #s do\n    if string.sub(s,i,i+n)\
    \ == string.sub(s,i,i+n) then\n      table.insert(words, string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6v7g0d_d.lua:27:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmp6v7g0d_d.lua:27: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805142
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    if word == \"\" then\n      break\n    end\n    index\
    \ = index + 1\n    if word:sub(1, 1) == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl3t8vw6.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl3t8vw6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code\
    \ here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n\
    \  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n \
    \ \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n\
    \  -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n \
    \ -- Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  --\
    \ Your code here\n  \n  -- Your code here\n  \n  -- Your code here\n  \n  -- Your\
    \ code here\n  \n  -- Your code here\n  \n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptu1iju37.lua:155: ''end'' expected (to close ''function''
    at line 12) near <eof>

    '
  stdout: ''
  timestamp: 1659805142
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if string.sub(s,i,i) == \" \" then\n      i = i + 1\n      while\
    \ i <= #s do\n        if string.sub(s,i,i) == \" \" then\n          i = i + 1\n\
    \        else\n          table.insert(words,string.sub(s,i,i))\n        end\n\
    \      end\n    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659805148
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i <= #s\
    \ do\n    local c = s[i]\n    if c == \"a\" or c == \"e\" or c == \"i\" or c ==\
    \ \"o\" or c == \"u\" then\n      i = i + 1\n    elseif c == \"n\" then\n    \
    \  if #words == n then\n        break\n      else\n        table.insert(words,\
    \ s[i])\n      end\n    else\n      i = i + 1\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jjcmi3w.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4jjcmi3w.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        if\
    \ string.sub(s,i,i) == \"\" then\n            i = i + 1\n        else\n      \
    \      local consonants = string.gsub(string.sub(s,i,i), \"[^aeiou]\", \"\")\n\
    \            if consonants == n then\n                table.insert(words, string.sub(s,i,i))\n\
    \            end\n            i = i + 1\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca9rxgnd.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpca9rxgnd.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local index = 1\n    while true do\n        local\
    \ word = s:sub(1, index-1)\n        if word == \"\" then\n            break\n\
    \        end\n        local count = 0\n        for i = 1, #word do\n         \
    \   if word:sub(i, i) == \" \" then\n                count = count + 1\n     \
    \       end\n        end\n        if count == n then\n            table.insert(words,\
    \ word)\n        end\n        index = index + 1\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8yptcqx.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpi8yptcqx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = { }\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if word:sub(1, 1) == n then\n            table.insert(words, word)\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6a8354wh.lua:26:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6a8354wh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) ~= \" \" then\n      if string.sub(s,i,i) ~= \" \" and string.sub(s,i,i)\
    \ ~= \" .\" and string.sub(s,i,i) ~= \" ,\" then\n        if string.sub(s,i,i)\
    \ ~= \" .\" and string.sub(s,i,i) ~= \" !\" and string.sub(s,i,i) ~= \" ?\" then\n\
    \          if string.sub(s,i,i) ~= \" !\" and string.sub(s,i,i) ~= \" ?\" and\
    \ string.sub(s,i,i) ~= \" !.\" then\n            if string.sub(s,i,i) ~= \" !.\"\
    \ and string.sub(s,i,i) ~= \" ?!\" then\n              if string.sub(s,i,i) ~=\
    \ \" ?!\" and string.sub(s,i,i) ~= \" ?!.\" then\n                if string.sub(s,i,i)\
    \ ~= \" ?!.\" and string.sub(s,i,i) ~= \" ?!?\" then\n                  if string.sub(s,i,i)\
    \ ~= \" ?!?\" and string.sub(s,i,i) ~= \" ?!?.\" then\n                    if\
    \ string.sub(s,i,i) ~= \" ?!?.\" and string.sub(s,i,i) ~= \" ?!?!\" then\n   \
    \                   if string.sub(s,i,i) ~= \" ?!?!.\" then\n                \
    \        table.insert(words, string.sub(s,i,i))\n                      end\n \
    \                   end\n                  end\n                end\n        \
    \      end\n            end\n          end\n        end\n      end\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59ftl5vx.lua:44:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \"h\",\n    \"a\",\n    \"d\",\n    \"a\",\n    \"l\",\n    \"\
    i\",\n    \"t\",\n    \"t\",\n    \"l\",\n    \"e\",\n    \"l\",\n    \"a\",\n\
    \    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmp59ftl5vx.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for w in string.gmatch(s, \"[^ ]+\") do\n    \
    \    table.insert(words, w)\n    end\n    table.sort(words)\n    local count =\
    \ 0\n    for _, w in pairs(words) do\n        if string.find(w, string.char(97\
    \ + count)) then\n            count = count + 1\n        end\n        if count\
    \ == n then\n            return words\n        end\n    end\n    return {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkp_ob7s.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwkp_ob7s.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      words[#words + 1] = \"\"\n    else\n      if string.sub(s,i,i)\
    \ == \".\" then\n        words[#words + 1] = \"\"\n      else\n        if string.sub(s,i,i)\
    \ == \",\" then\n          words[#words + 1] = \"\"\n        else\n          if\
    \ string.sub(s,i,i) == \":\" then\n            words[#words + 1] = \"\"\n    \
    \      else\n            if string.sub(s,i,i) == \";\" then\n              words[#words\
    \ + 1] = \"\"\n            else\n              if string.sub(s,i,i) == \":\" then\n\
    \                words[#words + 1] = \"\"\n              else\n              \
    \  if string.sub(s,i,i) == \".\" then\n                  words[#words + 1] = \"\
    \"\n                else\n                  if string.sub(s,i,i) == \",\" then\n\
    \                    words[#words + 1] = \"\"\n                  else\n      \
    \              if string.sub(s,i,i) == \";\" then\n                      words[#words\
    \ + 1] = \"\"\n                    else\n                      if string.sub(s,i,i)\
    \ == \".\" then\n                        words[#words + 1] = \"\"\n          \
    \            else\n                        if string.sub(s,i,i) == \",\" then\n\
    \                          words[#words + 1] = \"\"\n                        else\n\
    \                          if string.sub(s,i,i) == \";\" then\n              \
    \              words[#words + 1] = \"\"\n                          else\n    \
    \                        if string.sub(s,i,i) == \":\" then\n                \
    \              words[#words + 1] = \"\"\n                            else\n  \
    \                            if string.sub(s,i,i) == \".\" then\n            \
    \                    words[#words + 1] = \"\"\n                              else\n\
    \                                if string.sub(s,i,i) == \",\" then\n        \
    \                          words[#words + 1] = \"\"\n                        \
    \        else\n                                  if string.sub(s,i,i) == \";\"\
    \ then\n                                    words[#words + 1] = \"\"\n       \
    \                           else\n                                    if string.sub(s,i,i)\
    \ == \".\" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \",\" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \";\" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \".\" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \",\" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2_ljmt8u.lua:80: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ == \" \" then\n            table.insert(words, string.sub(s,1,i))\n        \
    \    table.insert(words, string.sub(s,i+1,#s))\n        end\n    end\n    if #words\
    \ == 0 then\n        words = {}\n    end\n    if n == 1 then\n        return words\n\
    \    end\n    local result = {}\n    for i = 1, #words do\n        local count\
    \ = 0\n        for j = 1, #words do\n            if string.sub(words[j],i,i) ==\
    \ string.sub(words[j],i,i) then\n                count = count + 1\n         \
    \   end\n        end\n        if count == n then\n            table.insert(result,\
    \ words[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2iqf8gtg.lua:44:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp2iqf8gtg.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    local count = s:sub(index+1, index+n)\n    if count ==\
    \ \"\" then\n      table.insert(words, word)\n      index = index+n\n      break\n\
    \    end\n    index = index+count\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9oie2khe.lua:23:\
    \ attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp9oie2khe.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp9oie2khe.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      i = i + 1\n    elseif string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n    else\n      local consonants = string.gsub(string.sub(s,i,i),\"\
    [bcdfghjklmnpqrstvwxyz]\",\"\")\n      if consonants == n then\n        table.insert(words,string.sub(s,i,i))\n\
    \      end\n      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8fkj8gid.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8fkj8gid.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if string.sub(s,i,i+n) == \"\" then\n      i = i + 1\n    else\n\
    \      table.insert(words, string.sub(s,i,i+n))\n      i = i + n\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzbkcsnd.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpbzbkcsnd.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local index = 1\n  while true do\n    local word =\
    \ s:sub(1, index-1)\n    if word == \"\" then\n      break\n    end\n    index\
    \ = index + 1\n    if word:sub(1, 1) == n then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl3t8vw6.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl3t8vw6.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, \"[^aeiou]\") then\n\
    \            i = i + 1\n        else\n            table.insert(words, word)\n\
    \        end\n        i = i + 1\n    end\n    if #words == 0 then\n        return\
    \ nil\n    end\n    table.sort(words)\n    local count = 0\n    for _, word in\
    \ pairs(words) do\n        if string.find(word, string.sub(s, 1, n)) then\n  \
    \          count = count + 1\n        end\n    end\n    if count > n then\n  \
    \      return words\n    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphiuyynoo.lua:44:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphiuyynoo.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659805143
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\n  -- Base case\n  if n ==\
    \ 0 then return end\n  -- Base case\n  if n == 1 then return s:gsub(\"[^\" ..\
    \ string.char(97) .. \"]\", \"\") end\n  -- Recursive case\n  local words = select_words(s,\
    \ n - 1)\n  for i = 1, #words do\n    if string.sub(words, i, i + 1) ~= \"\" then\n\
    \      table.insert(words, string.sub(words, i, i + 1))\n    end\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0v41xv1j.lua:23:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp0v41xv1j.lua:23: in upvalue 'select_words'\n\t/tmp/tmp0v41xv1j.lua:20:\
    \ in upvalue 'select_words'\n\t/tmp/tmp0v41xv1j.lua:20: in local 'candidate'\n\
    \t/tmp/tmp0v41xv1j.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659805143
