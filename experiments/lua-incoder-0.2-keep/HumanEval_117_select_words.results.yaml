language: lua
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local list = {}\n    for i = 1, #s do\n        local word = s:sub(i,\
    \ i)\n        if word:sub(1, n) == string.upper(word:sub(1, n)) then\n       \
    \     table.insert(list, word)\n        end\n    end\n    return list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_1m7whp.lua:26:\
    \ expected: {\"little\"}\nactual: {\"M\", \" \", \" \", \" \", \" \"}\nstack traceback:\n\
    \t/tmp/tmpv_1m7whp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n            table.insert(words,\
    \ string.sub(s, 1, n))\n        end\n        i = i + 1\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthiixt8d.lua:27:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpthiixt8d.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local words = {}\n    local i = 0\n    while i <= #s do\n        local\
    \ c = s[i]\n        if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or\
    \ c == \"u\" then\n            i = i + 1\n        elseif c == \"n\" then\n   \
    \         if i == #s then\n                table.insert(words, \"\")\n       \
    \     else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"s\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"t\" or c == \"h\" or c == \"r\" or\
    \ c == \"d\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"w\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"b\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"c\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"m\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n                table.insert(words, table.concat(word))\n\
    \            end\n            i = i + 1\n        elseif c == \"g\" then\n    \
    \        if i == #s then\n                table.insert(words, \"\")\n        \
    \    else\n                local word = select_words(s, i)\n                table.insert(words,\
    \ table.concat(word))\n            end\n            i = i + 1\n        elseif\
    \ c == \"f\" then\n            if i == #s then\n                table.insert(words,\
    \ \"\")\n            else\n                local word = select_words(s, i)\n \
    \               table.insert(words, table.concat(word))\n            end\n   \
    \         i = i + 1\n        elseif c == \"v\" then\n            if i == #s then\n\
    \                table.insert(words, \"\")\n            else\n               \
    \ local word = select_words(s, i)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9w023s3f.lua:110: ''end'' expected (to close ''if'' at line
    92) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Write your code here\n  local words = {}\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) == \" \" then\n      table.insert(words, string.sub(s,1,i))\n\
    \      table.insert(words, string.sub(s,i+1,#s))\n    else\n      table.insert(words,\
    \ string.sub(s,i,#s))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tk_yd_y.lua:29:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary had a little lamb\",\n   \
    \ \"ary had a little lamb\",\n    \"ry had a little lamb\",\n    \"y had a little\
    \ lamb\",\n    \"Mary \",\n    \"had a little lamb\",\n    \"had a little lamb\"\
    ,\n    \"ad a little lamb\",\n    \"d a little lamb\",\n    \"Mary had \",\n \
    \   \"a little lamb\",\n    \"a little lamb\",\n    \"Mary had a \",\n    \"little\
    \ lamb\",\n    \"little lamb\",\n    \"ittle lamb\",\n    \"ttle lamb\",\n   \
    \ \"tle lamb\",\n    \"le lamb\",\n    \"e lamb\",\n    \"Mary had a little \"\
    ,\n    \"lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmp_tk_yd_y.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n    local c = s[i]\n\
    \    local j = i + 1\n    while j <= #s and s[j] == c do\n      j = j + 1\n  \
    \  end\n    if j - i == n then\n      table.insert(words, string.sub(s, i, j))\n\
    \      i = j\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == \" \" then\n      words[#words + 1] = \"\"\n    else\n      if string.sub(s,i,i)\
    \ == \" \" then\n        words[#words + 1] = \"\"\n      else\n        if string.sub(s,i,i)\
    \ == \" \" then\n          words[#words + 1] = \"\"\n        else\n          if\
    \ string.sub(s,i,i) == \" \" then\n            words[#words + 1] = \"\"\n    \
    \      else\n            if string.sub(s,i,i) == \" \" then\n              words[#words\
    \ + 1] = \"\"\n            else\n              if string.sub(s,i,i) == \" \" then\n\
    \                words[#words + 1] = \"\"\n              else\n              \
    \  if string.sub(s,i,i) == \" \" then\n                  words[#words + 1] = \"\
    \"\n                else\n                  if string.sub(s,i,i) == \" \" then\n\
    \                    words[#words + 1] = \"\"\n                  else\n      \
    \              if string.sub(s,i,i) == \" \" then\n                      words[#words\
    \ + 1] = \"\"\n                    else\n                      if string.sub(s,i,i)\
    \ == \" \" then\n                        words[#words + 1] = \"\"\n          \
    \            else\n                        if string.sub(s,i,i) == \" \" then\n\
    \                          words[#words + 1] = \"\"\n                        else\n\
    \                          if string.sub(s,i,i) == \" \" then\n              \
    \              words[#words + 1] = \"\"\n                          else\n    \
    \                        if string.sub(s,i,i) == \" \" then\n                \
    \              words[#words + 1] = \"\"\n                            else\n  \
    \                            if string.sub(s,i,i) == \" \" then\n            \
    \                    words[#words + 1] = \"\"\n                              else\n\
    \                                if string.sub(s,i,i) == \" \" then\n        \
    \                          words[#words + 1] = \"\"\n                        \
    \        else\n                                  if string.sub(s,i,i) == \" \"\
    \ then\n                                    words[#words + 1] = \"\"\n       \
    \                           else\n                                    if string.sub(s,i,i)\
    \ == \" \" then\n                                      words[#words + 1] = \"\"\
    \n                                    else\n                                 \
    \     if string.sub(s,i,i) == \" \" then\n                                   \
    \     words[#words + 1] = \"\"\n                                      else\n \
    \                                       if string.sub(s,i,i) == \" \" then\n \
    \                                         words[#words + 1] = \"\"\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == \" \" then\n                                     \
    \       words[#words + 1] = \"\"\n                                          else\n\
    \                                            if string.sub(s,i,i) == \" \" then\n\
    \                                              words[#words + 1] = \"\"\n    \
    \                                        else\n                              \
    \                if \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpph5jyb5z.lua:80: ''then'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfmcntpy0.lua:28: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\n  local words = {}\n  local i = 0\n  while i < #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_yyfbc_.lua:28:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpl_yyfbc_.lua:28: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmj5t97j7.lua:30: ''end'' expected (to close ''function'' at
    line 12) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfty85mzs.lua:19:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpfty85mzs.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    -- select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n-- select_words(\"\
    simple white space\", 2) ==> []\n-- select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n-- select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\nlocal function select_words(s,\
    \ n)\n    local result = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ == \" \" then\n            table.insert(result, string.sub(s,1,i))\n       \
    \ end\n    end\n    if #result == 0 then\n        return {}\n    end\n    local\
    \ index = 1\n    while index <= #result do\n        if string.sub(s,index,index)\
    \ == \" \" then\n            index = index + 1\n        else\n            local\
    \ count = 0\n            for i = 1, #result do\n                if string.sub(s,index,index)\
    \ == string.sub(result, i, i) then\n                    count = count + 1\n  \
    \              end\n            end\n            if count == n then\n        \
    \        table.insert(result, string.sub(s,index,index))\n            end\n  \
    \      end\n        index = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9mn_ttw.lua:29:\
    \ bad argument #1 to 'sub' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmph9mn_ttw.lua:29: in local 'candidate'\n\t/tmp/tmph9mn_ttw.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
