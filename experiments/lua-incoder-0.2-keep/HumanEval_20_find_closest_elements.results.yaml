language: lua
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    distance = math.abs(number - largest_number)\n    if\
    \ distance > largest_distance then\n      largest_distance = distance\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmporvr92mc.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmporvr92mc.lua:13: in local 'candidate'\n\t/tmp/tmporvr92mc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ new_smallest, new_largest = numbers[i], numbers[i]\n    if smallest > new_smallest\
    \ then\n      largest, smallest = new_largest, new_smallest\n    elseif largest\
    \ < new_largest then\n      largest, smallest = new_smallest, new_largest\n  \
    \  end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8dg9j25.lua:23:\
    \ expected: {3.9, 4}\nactual: 2.2\nstack traceback:\n\t/tmp/tmpc8dg9j25.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local second_smallest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n    end\n \
    \ end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2_bded8.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpn2_bded8.lua:12: in local 'candidate'\n\t/tmp/tmpn2_bded8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - smallest)\n    if dist < smallest then\n      smallest\
    \ = dist\n    end\n    dist = math.abs(numbers[i] - largest)\n    if dist < largest\
    \ then\n      largest = dist\n    end\n  end\n  return smallest, largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7utglze.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpe7utglze.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_distance\n\
    \  local second_smallest_index\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - numbers[1])\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = number\n  \
    \  end\n    if distance < second_smallest_distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_index = number\n    end\n  end\n  return smallest_index,\
    \ second_smallest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnz385far.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnz385far.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpnz385far.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - smallest)\n    if distance < smallest\
    \ then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrtkixdi.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpfrtkixdi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy6mpvrj.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpuy6mpvrj.lua:12: in local 'candidate'\n\t/tmp/tmpuy6mpvrj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_element\n  local second_smallest_distance\n\
    \  local second_smallest_element\n  for _, element in ipairs(numbers) do\n   \
    \ local distance = math.abs(element - smallest_element)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_element = element\n\
    \    end\n    if smallest_distance > second_smallest_distance then\n      second_smallest_distance\
    \ = smallest_distance\n      second_smallest_element = smallest_element\n    end\n\
    \  end\n  return smallest_element, second_smallest_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplz_wp4y8.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_element')\nstack\
    \ traceback:\n\t/tmp/tmplz_wp4y8.lua:13: in local 'candidate'\n\t/tmp/tmplz_wp4y8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1\n  for i = 2, #numbers\
    \ do\n    if numbers[i] < smallest_number then\n      smallest_number = numbers[i]\n\
    \      smallest_index = i\n    elseif numbers[i] < second_smallest_number then\n\
    \      second_smallest_number = numbers[i]\n      second_smallest_index = i\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5hfoodm.lua:27:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpc5hfoodm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local d = math.abs(numbers[i] - largest)\n    if d < smallest then\n    \
    \  smallest, largest = d, numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ug9lhbi.lua:21:\
    \ expected: {3.9, 4}\nactual: 0.2\nstack traceback:\n\t/tmp/tmp1ug9lhbi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo911j7c.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppo911j7c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v33g9dc.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp1v33g9dc.lua:12: in local 'candidate'\n\t/tmp/tmp1v33g9dc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6e12yu0.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    diff = numbers[i] - largest\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzltn9oz0.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpzltn9oz0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local largest_distance\
    \ = math.inf\n  local largest_index\n  for index, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - numbers[1])\n    if smallest_distance\
    \ > distance then\n      smallest_distance = distance\n      smallest_index =\
    \ index\n    end\n    if largest_distance < distance then\n      largest_distance\
    \ = distance\n      largest_index = index\n    end\n  end\n  return numbers[smallest_index],\
    \ numbers[largest_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2j1h1ya4.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2j1h1ya4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2j1h1ya4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptzyixp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp9ptzyixp.lua:12: in local 'candidate'\n\t/tmp/tmp9ptzyixp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] < smallest then\n      smallest = numbers[i]\n    end\n   \
    \ if numbers[i] > largest then\n      largest = numbers[i]\n    end\n  end\n \
    \ return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_s3gfs6x.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp_s3gfs6x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - smallest)\n    if distance < smallest then\n\
    \      smallest = distance\n    elseif distance > largest then\n      largest\
    \ = distance\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiedt_f_.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpuiedt_f_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6e12yu0.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy16_ixwt.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo911j7c.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppo911j7c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj84wa77.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmptj84wa77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_distance\n\
    \  local second_smallest_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5q7ipa5s.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ new_smallest, new_largest = numbers[i], numbers[i]\n    if smallest > new_smallest\
    \ then\n      smallest, largest = new_smallest, new_largest\n    elseif largest\
    \ < new_largest then\n      smallest, largest = new_largest, new_smallest\n  \
    \  end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1e9fttja.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 2.2\nstack traceback:\n\t/tmp/tmp1e9fttja.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv9kzjt8.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpcv9kzjt8.lua:13: in local 'candidate'\n\t/tmp/tmpcv9kzjt8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local second_smallest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n    end\n \
    \ end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2_bded8.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpn2_bded8.lua:12: in local 'candidate'\n\t/tmp/tmpn2_bded8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy16_ixwt.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        smallest_distance = distance\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp965hdn18.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp965hdn18.lua:12: in local 'candidate'\n\t/tmp/tmp965hdn18.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8bcssgw.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpj8bcssgw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrsuxbv5.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpjrsuxbv5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        smallest_distance = distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_r9hp7k.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpp_r9hp7k.lua:12: in local 'candidate'\n\t/tmp/tmpp_r9hp7k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b692wvr.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp0b692wvr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n      smallest,\
    \ largest = dist, numbers[i]\n    end\n  end\n  return smallest, largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpga0y06ey.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpga0y06ey.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - smallest)\n    if distance < smallest\
    \ then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrtkixdi.lua:26:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpfrtkixdi.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n    end\n \
    \ end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8o4d_55.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpd8o4d_55.lua:12: in local 'candidate'\n\t/tmp/tmpd8o4d_55.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      smallest_distance = second_distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxh814_tg.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpxh814_tg.lua:12: in local 'candidate'\n\t/tmp/tmpxh814_tg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_distance = nil\n  local min_number = nil\n  local max_number = nil\n  for\
    \ _, number in ipairs(numbers) do\n    if min_distance == nil then\n      min_distance\
    \ = number\n      min_number = number\n      max_number = number\n    else\n \
    \     local distance = math.abs(number - min_number)\n      if distance < min_distance\
    \ then\n        min_distance = distance\n        min_number = number\n      elseif\
    \ distance > max_distance then\n        max_distance = distance\n        max_number\
    \ = number\n      end\n    end\n  end\n  return min_number, max_number\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41lplhqr.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp41lplhqr.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp41lplhqr.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local second_smallest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if number < smallest_number then\n\
    \      second_smallest_number = smallest_number\n      smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp32ixgpc_.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp32ixgpc_.lua:12: in local 'candidate'\n\t/tmp/tmp32ixgpc_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n\
    \      smallest, largest = dist, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tu68_c.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpm4tu68_c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n    end\n    if numbers[i] < second_smallest_number then\n   \
    \   second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprbw7x_h.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpprbw7x_h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv9kzjt8.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpcv9kzjt8.lua:13: in local 'candidate'\n\t/tmp/tmpcv9kzjt8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zzw6wa.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpf5zzw6wa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    diff = numbers[i] - largest\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzltn9oz0.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpzltn9oz0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - smallest)\n    if dist < smallest then\n\
    \      smallest = dist\n    end\n    dist = math.abs(numbers[i] - largest)\n \
    \   if dist < largest then\n      largest = dist\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeu7i61e8.lua:26:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpeu7i61e8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - smallest)\n    if dist < smallest then\n\
    \      smallest = dist\n    end\n    dist = math.abs(numbers[i] - largest)\n \
    \   if dist < largest then\n      largest = dist\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwibliqo.lua:25:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpjwibliqo.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n    end\n    if numbers[i] < second_smallest_number then\n   \
    \   second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprbw7x_h.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpprbw7x_h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] < smallest then\n      smallest = numbers[i]\n    end\n   \
    \ if numbers[i] > largest then\n      largest = numbers[i]\n    end\n  end\n \
    \ return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_s3gfs6x.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp_s3gfs6x.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  local second_smallest_index\n  local second_smallest_number\n  for index, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = index\n      smallest_number = number\n    end\n    if\
    \ smallest_distance == math.inf then\n      break\n    end\n  end\n  if smallest_distance\
    \ == math.inf then\n    return nil\n  end\n  local second_smallest_distance =\
    \ math.inf\n  local second_smallest_index\n  local second_smallest_number\n  for\
    \ index, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ second_smallest_number)\n    if distance < second_smallest_distance then\n \
    \     second_smallest_distance = distance\n      second_smallest_index = index\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpel48ey3_.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpel48ey3_.lua:14: in local 'candidate'\n\t/tmp/tmpel48ey3_.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9e8n31gp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp9e8n31gp.lua:12: in local 'candidate'\n\t/tmp/tmp9e8n31gp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] < smallest then\n      smallest = numbers[i]\n    elseif numbers[i]\
    \ > largest then\n      largest = numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0nrl7ql.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpc0nrl7ql.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuy6mpvrj.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpuy6mpvrj.lua:12: in local 'candidate'\n\t/tmp/tmpuy6mpvrj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6e12yu0.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] < smallest_number then\n      smallest_number\
    \ = numbers[i]\n    end\n    if numbers[i] < second_smallest_number then\n   \
    \   second_smallest_number = numbers[i]\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprbw7x_h.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpprbw7x_h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_element\n  local second_smallest_distance\n\
    \  local second_smallest_element\n  for _, element in ipairs(numbers) do\n   \
    \ local distance = math.abs(element - smallest_element)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_element = element\n\
    \    end\n    if distance < second_smallest_distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_element = element\n    end\n  end\n  return\
    \ smallest_element, second_smallest_element\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbjyhexg.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_element')\nstack\
    \ traceback:\n\t/tmp/tmprbjyhexg.lua:13: in local 'candidate'\n\t/tmp/tmprbjyhexg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptzyixp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp9ptzyixp.lua:12: in local 'candidate'\n\t/tmp/tmp9ptzyixp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zzw6wa.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpf5zzw6wa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj84wa77.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmptj84wa77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo911j7c.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppo911j7c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - smallest)\n    if dist < smallest then\n      smallest\
    \ = dist\n      largest = numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb22s2a25.lua:22:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpb22s2a25.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrsuxbv5.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpjrsuxbv5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zzw6wa.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpf5zzw6wa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_distance = math.inf\n  local min_number = nil\n  local max_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ min_number)\n    if distance < min_distance then\n      min_distance = distance\n\
    \      min_number = number\n    end\n    distance = math.abs(number - max_number)\n\
    \    if distance < min_distance then\n      min_distance = distance\n      max_number\
    \ = number\n    end\n  end\n  return min_number, max_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfvk668ce.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'min_number')\nstack traceback:\n\
    \t/tmp/tmpfvk668ce.lua:12: in local 'candidate'\n\t/tmp/tmpfvk668ce.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      break\n    end\n  end\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - second_smallest_number)\n    if distance\
    \ < smallest_distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvtranbxj.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpvtranbxj.lua:12: in local 'candidate'\n\t/tmp/tmpvtranbxj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_number ~= nil then\n      local second_distance = math.abs(number\
    \ - second_smallest_number)\n      if second_distance < smallest_distance then\n\
    \        smallest_distance = second_distance\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkimd5fe.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmphkimd5fe.lua:12: in local 'candidate'\n\t/tmp/tmphkimd5fe.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n      smallest_distance\
    \ = math.inf\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzyur6t1.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpwzyur6t1.lua:12: in local 'candidate'\n\t/tmp/tmpwzyur6t1.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    if diff > largest then\n      largest = diff\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv_e4aea.lua:25:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpbv_e4aea.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  local largest_index\n  local largest_number\n  for i, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_index\
    \ = i\n      smallest_number = number\n    end\n    if distance > largest_distance\
    \ then\n      largest_distance = distance\n      largest_index = i\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt265414.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpkt265414.lua:14: in local 'candidate'\n\t/tmp/tmpkt265414.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_5me9302.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp_5me9302.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_distance\n\
    \  local second_smallest_index\n  for i, v in ipairs(numbers) do\n    local distance\
    \ = math.abs(v)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = i\n    end\n    if distance < second_smallest_distance\
    \ then\n      second_smallest_distance = distance\n      second_smallest_index\
    \ = i\n    end\n  end\n  return smallest_index, second_smallest_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9e0wn0qk.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9e0wn0qk.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9e0wn0qk.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if number > largest_number\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0zr_4e0.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpf0zr_4e0.lua:12: in local 'candidate'\n\t/tmp/tmpf0zr_4e0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - smallest)\n    if smallest == largest\
    \ then\n      largest = numbers[i]\n    elseif distance < smallest then\n    \
    \  largest = numbers[i]\n    end\n    smallest = numbers[i]\n  end\n  return largest,\
    \ smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsifsah69.lua:25:\
    \ expected: {3.9, 4.0}\nactual: 2.2\nstack traceback:\n\t/tmp/tmpsifsah69.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 1\n  local second_smallest_index = 1\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n      second_smallest_number =\
    \ smallest_number\n      smallest_index = i\n      second_smallest_index = i\n\
    \    elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n      smallest_index = i\n      second_smallest_index = i\n\
    \    end\n  end\n  return numbers[smallest_index], numbers[second_smallest_index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0ecoudp.lua:31:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpy0ecoudp.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local this_smallest, this_largest = numbers[i], numbers[i - 1]\n    if this_smallest\
    \ < smallest then\n      smallest = this_smallest\n    end\n    if this_largest\
    \ > largest then\n      largest = this_largest\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hmtjrzp.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp4hmtjrzp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - smallest)\n    if distance < smallest then\n\
    \      smallest = distance\n    elseif distance > largest then\n      largest\
    \ = distance\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuiedt_f_.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpuiedt_f_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zzw6wa.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpf5zzw6wa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif distance > largest_distance\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4709efxx.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp4709efxx.lua:12: in local 'candidate'\n\t/tmp/tmp4709efxx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrsuxbv5.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpjrsuxbv5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v33g9dc.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp1v33g9dc.lua:12: in local 'candidate'\n\t/tmp/tmp1v33g9dc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  local largest_distance = math.inf\n  local largest_index\n  local largest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi8sjn47t.lua:25: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n      smallest,\
    \ largest = dist, numbers[i]\n    end\n  end\n  return smallest, largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpga0y06ey.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpga0y06ey.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  local second_smallest_distance = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil or distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    local second_distance = math.abs(number\
    \ - second_smallest_number)\n    if second_distance < smallest_distance then\n\
    \      second_smallest_distance = second_distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0dfd917.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpa0dfd917.lua:13: in local 'candidate'\n\t/tmp/tmpa0dfd917.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n      smallest,\
    \ largest = diff, numbers[i]\n    end\n  end\n  return smallest, largest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl74s_iad.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpl74s_iad.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj84wa77.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmptj84wa77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n\
    \      smallest, largest = dist, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tu68_c.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpm4tu68_c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    elseif number > second_smallest_number then\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwk2ehfc.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpqwk2ehfc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local d = math.abs(numbers[i] - largest)\n    if d < smallest then\n    \
    \  smallest, largest = d, numbers[i]\n    end\n  end\n  return smallest, largest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ug9lhbi.lua:21:\
    \ expected: {3.9, 4}\nactual: 0.2\nstack traceback:\n\t/tmp/tmp1ug9lhbi.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55adj9xn.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp55adj9xn.lua:12: in local 'candidate'\n\t/tmp/tmp55adj9xn.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxr_o5zt4.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpxr_o5zt4.lua:12: in local 'candidate'\n\t/tmp/tmpxr_o5zt4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkno1c0ak.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpkno1c0ak.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy16_ixwt.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local new_smallest, new_largest = numbers[i], numbers[i - 1]\n    if new_smallest\
    \ < smallest then\n      smallest = new_smallest\n    end\n    if new_largest\
    \ > largest then\n      largest = new_largest\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dspjgqn.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp5dspjgqn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  local second_smallest_distance\n  local second_smallest_index\n  local second_smallest_number\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n    if smallest_distance > second_smallest_distance then\n      second_smallest_distance\
    \ = smallest_distance\n      second_smallest_index = smallest_index\n      second_smallest_number\
    \ = smallest_number\n    end\n  end\n  return second_smallest_index, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc4viamw.lua:15:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpfc4viamw.lua:15: in local 'candidate'\n\t/tmp/tmpfc4viamw.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    distance = math.abs(number\
    \ - largest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1v33g9dc.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp1v33g9dc.lua:12: in local 'candidate'\n\t/tmp/tmp1v33g9dc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcv9kzjt8.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpcv9kzjt8.lua:13: in local 'candidate'\n\t/tmp/tmpcv9kzjt8.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl46f2fqe.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpl46f2fqe.lua:12: in local 'candidate'\n\t/tmp/tmpl46f2fqe.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index = nil\n  local smallest_number\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = i\n      smallest_number = numbers[i]\n \
    \   end\n  end\n  return smallest_index, smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd_tix0i.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxd_tix0i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpxd_tix0i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumi__7h2.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpumi__7h2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_element\n  local second_smallest_element\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_element)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_element = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance > math.inf\
    \ then\n      break\n    end\n    local second_distance = math.abs(number - second_smallest_element)\n\
    \    if second_distance < smallest_distance then\n      second_smallest_element\
    \ = number\n    end\n  end\n  return smallest_element, second_smallest_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx5r9c5gg.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_element')\nstack\
    \ traceback:\n\t/tmp/tmpx5r9c5gg.lua:12: in local 'candidate'\n\t/tmp/tmpx5r9c5gg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  for index, number in pairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n  end\n  return smallest_index, smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw92xt7r7.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpw92xt7r7.lua:12: in local 'candidate'\n\t/tmp/tmpw92xt7r7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        smallest_distance = distance\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp965hdn18.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp965hdn18.lua:12: in local 'candidate'\n\t/tmp/tmp965hdn18.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6e12yu0.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n\
    \      smallest, largest = dist, numbers[i]\n    end\n  end\n  return smallest,\
    \ largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}),\
    \ {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tu68_c.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpm4tu68_c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    local second_distance = math.abs(number\
    \ - second_smallest_number)\n    if second_smallest_distance == nil then\n   \
    \   second_smallest_distance = distance\n      second_smallest_number = number\n\
    \    elseif second_smallest_distance > distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_number = number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptm13crg7.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmptm13crg7.lua:13: in local 'candidate'\n\t/tmp/tmptm13crg7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        smallest_distance\
    \ = second_distance\n        second_smallest_number = number\n      end\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjpfc0e4.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpmjpfc0e4.lua:12: in local 'candidate'\n\t/tmp/tmpmjpfc0e4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ min_distance = math.inf\n  local min_number = nil\n  local max_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    if number < min_number then\n    \
    \  min_number = number\n      min_distance = math.abs(min_number)\n    elseif\
    \ number > max_number then\n      max_number = number\n    end\n  end\n  if min_number\
    \ == nil then\n    return nil\n  end\n  return min_number, max_number\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsz8lkmv.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplsz8lkmv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmplsz8lkmv.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_number = number\n      end\n    end\n  end\n\
    \  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3dihawq.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpr3dihawq.lua:12: in local 'candidate'\n\t/tmp/tmpr3dihawq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index = nil\n  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  local second_smallest_index\
    \ = nil\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i] -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = i\n      smallest_number = numbers[i]\n \
    \   end\n    if distance < smallest_distance then\n      second_smallest_distance\
    \ = distance\n      second_smallest_index = i\n      second_smallest_number =\
    \ numbers[i]\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvziw0r3.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbvziw0r3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbvziw0r3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1banxdd7.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp1banxdd7.lua:12: in local 'candidate'\n\t/tmp/tmp1banxdd7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_index\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - numbers[1])\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if distance < smallest_distance\
    \ then\n      second_smallest_index = index\n    end\n  end\n  return numbers[smallest_index],\
    \ numbers[second_smallest_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2lcpqlp.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpl2lcpqlp.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpl2lcpqlp.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl46f2fqe.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpl46f2fqe.lua:12: in local 'candidate'\n\t/tmp/tmpl46f2fqe.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  for index, number in pairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n      smallest_number = number\n \
    \   end\n  end\n  return smallest_index, smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw92xt7r7.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpw92xt7r7.lua:12: in local 'candidate'\n\t/tmp/tmpw92xt7r7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo911j7c.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppo911j7c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9e8n31gp.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp9e8n31gp.lua:12: in local 'candidate'\n\t/tmp/tmp9e8n31gp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8bcssgw.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpj8bcssgw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ff7snv9.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp1ff7snv9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_number = number\n      end\n    end\n  end\n\
    \  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3dihawq.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpr3dihawq.lua:12: in local 'candidate'\n\t/tmp/tmpr3dihawq.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_index\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - numbers[1])\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_index = index\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance > math.inf\
    \ then\n      break\n    end\n  end\n  if smallest_distance == math.inf then\n\
    \    return nil\n  end\n  local second_smallest_distance = math.inf\n  local second_smallest_number\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - numbers[smallest_index])\n    if distance < second_smallest_distance then\n\
    \      second_smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n    if second_smallest_distance == math.inf then\n      break\n    end\n\
    \    if second_smallest_distance > math.inf then\n      break\n    end\n  end\n\
    \  return smallest_index, second_smallest_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvptbylk.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgvptbylk.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpgvptbylk.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    \  local second_smallest_index\n  local second_smallest_number\n  for index, number\
    \ in pairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = index\n      smallest_number = number\n    end\n    if\
    \ smallest_distance == math.inf then\n      break\n    end\n    if number > smallest_number\
    \ then\n      second_smallest_index = smallest_index\n      second_smallest_number\
    \ = smallest_number\n      smallest_distance = math.inf\n      smallest_index\
    \ = index\n      smallest_number = number\n    end\n  end\n  if smallest_distance\
    \ == math.inf then\n    return nil, nil\n  end\n  return smallest_number, numbers[smallest_index]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0hizznfw.lua:14:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp0hizznfw.lua:14: in local 'candidate'\n\t/tmp/tmp0hizznfw.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local smallest_number\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv6e12yu0.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      largest = current\n\
    \    elseif current > largest then\n      smallest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zzw6wa.lua:23:\
    \ expected: {3.9, 4.0}\nactual: 5.0\nstack traceback:\n\t/tmp/tmpf5zzw6wa.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd50l8jsf.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpd50l8jsf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkno1c0ak.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpkno1c0ak.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8bcssgw.lua:21:\
    \ expected: {3.9, 4.0}\nactual: 0.2\nstack traceback:\n\t/tmp/tmpj8bcssgw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_distance\
    \ = math.inf\n  local largest_number\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsy25fti9.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil and smallest_distance < distance then\n\
    \      second_smallest_number = smallest_number\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3pzy0kc.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpu3pzy0kc.lua:12: in local 'candidate'\n\t/tmp/tmpu3pzy0kc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      largest\
    \ = current\n    elseif current > largest then\n      smallest = current\n   \
    \ end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv12ackxh.lua:24:\
    \ expected: {3.9, 4}\nactual: 5\nstack traceback:\n\t/tmp/tmpv12ackxh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    diff = numbers[i] - largest\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzltn9oz0.lua:25:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpzltn9oz0.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_distance\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmts_qoyb.lua:13:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpmts_qoyb.lua:13: in local 'candidate'\n\t/tmp/tmpmts_qoyb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b692wvr.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmp0b692wvr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if number > largest_number\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0zr_4e0.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpf0zr_4e0.lua:12: in local 'candidate'\n\t/tmp/tmpf0zr_4e0.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsec4f49.lua:24:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpdsec4f49.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    diff = largest - numbers[i]\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr9zx40g.lua:25:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpnr9zx40g.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo911j7c.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmppo911j7c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance < math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3728kk_.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpy3728kk_.lua:12: in local 'candidate'\n\t/tmp/tmpy3728kk_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index = nil\n  local largest_distance\
    \ = math.inf\n  local largest_index = nil\n  for i, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - numbers[1])\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_index = i\n    end\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_index = i\n    end\n  end\n  return smallest_index, largest_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_55s75c3.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_55s75c3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_55s75c3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1banxdd7.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmp1banxdd7.lua:12: in local 'candidate'\n\t/tmp/tmp1banxdd7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local second_smallest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ > math.inf then\n      second_smallest_number = smallest_number\n    end\n \
    \ end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2_bded8.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'smallest_number')\nstack\
    \ traceback:\n\t/tmp/tmpn2_bded8.lua:12: in local 'candidate'\n\t/tmp/tmpn2_bded8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_distance = math.inf\n  local smallest_index\n  local second_smallest_index\n\
    \  for i = 1, #numbers do\n    local distance = math.abs(numbers[i] - numbers[smallest_index])\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_index = i\n    end\n    if smallest_index and smallest_index ==\
    \ i then\n      break\n    end\n  end\n  if smallest_index then\n    local second_smallest_distance\
    \ = math.inf\n    local second_smallest_index\n    for i = 1, #numbers do\n  \
    \    local distance = math.abs(numbers[i] - numbers[second_smallest_index])\n\
    \      if distance < second_smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_index = i\n      end\n      if second_smallest_index\
    \ and second_smallest_index == i then\n        break\n      end\n    end\n   \
    \ if second_smallest_index then\n      return numbers[smallest_index], numbers[second_smallest_index]\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp48o68b1n.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp48o68b1n.lua:12: in local 'candidate'\n\t/tmp/tmp48o68b1n.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpburmxkk4.lua:23:\
    \ expected: {3.9, 4}\nactual: 1\nstack traceback:\n\t/tmp/tmpburmxkk4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    elseif diff > largest then\n      largest = diff\n    end\n  end\n\
    \  return smallest, largest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrsuxbv5.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpjrsuxbv5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
- exit_code: 1
  program: "-- From a supplied list of numbers (of length at least two) select and\
    \ return two that are the closest to each\n-- other and return them in order (smaller\
    \ number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2,\
    \ 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj84wa77.lua:24:\
    \ expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmptj84wa77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799019
