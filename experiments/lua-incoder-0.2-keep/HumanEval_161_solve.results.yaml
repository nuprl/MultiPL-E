language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%a]\") then\n      c = string.upper(c)\n    elseif string.match(c, \"^[%A]\"\
    ) then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_7tx4_a.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpj_7tx4_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60sn2olv.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp60sn2olv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = result .. string.sub(s,i,i)\n            else\n                result = result\
    \ .. string.upper(string.sub(s,i,i))\n            end\n        else\n        \
    \    result = result .. string.sub(s,i,i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeafrbs18.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpeafrbs18.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(s,i,i) ~= nil then\n\
    \        if string.sub(s,i,i) ~= nil then\n          if string.sub(s,i,i) ~= nil\
    \ then\n            if string.sub(s,i,i) ~= nil then\n              if string.sub(s,i,i)\
    \ ~= nil then\n                if string.sub(s,i,i) ~= nil then\n            \
    \      if string.sub(s,i,i) ~= nil then\n                    if string.sub(s,i,i)\
    \ ~= nil then\n                      if string.sub(s,i,i) ~= nil then\n      \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \  if string.sub(s,i,i) ~= nil then\n                            if string.sub(s,i,i)\
    \ ~= nil then\n                              if string.sub(s,i,i) ~= nil then\n\
    \                                if string.sub(s,i,i) ~= nil then\n          \
    \                        if string.sub(s,i,i) ~= nil then\n                  \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \              if string.sub(s,i,i) ~= nil then\n                            \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \              if string.sub(s,i,i) ~= nil then\n                            \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \                        if string.sub(s,i,i) ~= nil then\n                  \
    \                                if string.sub(s,i,i) ~= nil then\n          \
    \                                          if string.sub(s,i,i) ~= nil then\n\
    \                                                      if string.sub(s,i,i) ~=\
    \ nil then\n                                                        if string.sub(s,i,i)\
    \ ~= nil then\n                                                          if string.sub(s,i,i)\
    \ ~= nil then\n                                                            if\
    \ string.sub(s,i,i) ~= nil then\n                                            \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \                                        if string.sub(s,i,i) ~= nil then\n  \
    \                                                                if string.sub(s,i,i)\
    \ ~= nil then\n                                                              \
    \      if string.sub(s,i,i) ~= nil then\n                                    \
    \                                  if string.sub(s,i,i) ~= nil then\n        \
    \                                                                 if string.sub(s,i,i)\
    \ ~= nil then\n                                                              \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \                                              if string.sub(s,i,i) ~= nil then\n\
    \                                                                            \
    \  if string.sub(s,i,i) ~= nil then\n                                        \
    \                                        if string.sub(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1gatyva.lua:53: '')'' expected (to close ''('' at line 52)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= \"\" then\n                local upper = string.upper(char)\n           \
    \     local lower = string.lower(char)\n                if upper ~= \"\" then\n\
    \                    char = upper\n                elseif lower ~= \"\" then\n\
    \                    char = lower\n                end\n            end\n    \
    \    end\n        result = result .. char\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwoil6j4.lua:25:\
    \ attempt to concatenate a nil value (global 'char')\nstack traceback:\n\t/tmp/tmpkwoil6j4.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpkwoil6j4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.upper(string.sub(s,i,i))\
    \ + result\n            end\n        else\n            result = string.upper(string.sub(s,i,i))\
    \ + result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49cdqzob.lua:17:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp49cdqzob.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp49cdqzob.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            else\n         \
    \       c = string.lower(c)\n            end\n            result = result .. c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0k28lwx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpg0k28lwx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                local\
    \ temp = string.sub(s,i,i)\n                string.sub(s,i,i) = string.sub(s,i,i)\n\
    \                string.sub(s,i,i) = temp\n            end\n        end\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpct0o28xf.lua:16: syntax error near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                local lower = string.lower(char)\n            \
    \    local upper = string.upper(char)\n                if lower ~= nil then\n\
    \                    char = lower\n                elseif upper ~= nil then\n\
    \                    char = upper\n                end\n            end\n    \
    \    end\n        result = result .. char\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgryadufl.lua:25:\
    \ attempt to concatenate a nil value (global 'char')\nstack traceback:\n\t/tmp/tmpgryadufl.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpgryadufl.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= \"\" then\n                if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then\n                    result = string.sub(s,i,i)..result\n\
    \                else\n                    result = string.upper(string.sub(s,i,i))..result\n\
    \                end\n            else\n                result = string.upper(string.sub(s,i,i))..result\n\
    \            end\n        else\n            result = string.upper(string.sub(s,i,i))..result\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkqwky1y.lua:33:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmpmkqwky1y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\
    \" then\n            local c = string.sub(s,i,i)\n            local t = string.sub(s,1,i)\n\
    \            local u = string.sub(s,i+1,#s)\n            local r = string.sub(t,1,1)\n\
    \            local f = string.sub(t,1,2)\n            local g = string.sub(t,1,3)\n\
    \            local h = string.sub(t,1,4)\n            local j = string.sub(t,1,5)\n\
    \            local k = string.sub(t,1,6)\n            local l = string.sub(t,1,7)\n\
    \            local m = string.sub(t,1,8)\n            local n = string.sub(t,1,9)\n\
    \            local o = string.sub(t,1,10)\n            local p = string.sub(t,1,11)\n\
    \            local q = string.sub(t,1,12)\n            local r = string.sub(t,1,13)\n\
    \            local s = string.sub(t,1,14)\n            local t = string.sub(t,1,15)\n\
    \            local u = string.sub(t,1,16)\n            local v = string.sub(t,1,17)\n\
    \            local w = string.sub(t,1,18)\n            local x = string.sub(t,1,19)\n\
    \            local y = string.sub(t,1,20)\n            local z = string.sub(t,1,21)\n\
    \            local A = string.sub(t,1,22)\n            local B = string.sub(t,1,23)\n\
    \            local C = string.sub(t,1,24)\n            local D = string.sub(t,1,25)\n\
    \            local E = string.sub(t,1,26)\n            local F = string.sub(t,1,27)\n\
    \            local G = string.sub(t,1,28)\n            local H = string.sub(t,1,29)\n\
    \            local I = string.sub(t,1,30)\n            local J = string.sub(t,1,31)\n\
    \            local K = string.sub(t,1,32)\n            local L = string.sub(t,1,33)\n\
    \            local M = string.sub(t,1,34)\n            local N = string.sub(t,1,35)\n\
    \            local O = string.sub(t,1,36)\n            local P = string.sub(t,1,37)\n\
    \            local Q = string.sub(t,1,38)\n            local R = string.sub(t,1,39)\n\
    \            local S = string.sub(t,1,40)\n            local T = string.sub(t,1,41)\n\
    \            local U = string.sub(t,1,42)\n            local V = string.sub(t,1,43)\n\
    \            local W = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_uzie1iq.lua:61: unexpected symbol near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n            i = i - 1\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    if result ~= \"\" then\n        result = result ..\
    \ string.sub(s,1,#s)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwdla60g.lua:28:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgwdla60g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local c = string.sub(s,i,i)\n      if string.sub(c,1,1) ~= nil then\n   \
    \     c = string.upper(c)\n      else\n        c = string.lower(c)\n      end\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ztveljx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp7ztveljx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= \"\" then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0gtu9xt.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpt0gtu9xt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local char = string.sub(s,i,i)\n\
    \        if string.find(char, \"[a-z]\") then\n            char = string.upper(char)\n\
    \        elseif string.find(char, \"[A-Z]\") then\n            char = string.lower(char)\n\
    \        end\n        result = result .. char\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h8a0w8h.lua:28:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp_h8a0w8h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60sn2olv.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp60sn2olv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(char, \"[A-Za-z]\") then\n      char = string.upper(char)\n    elseif\
    \ string.find(char, \"[a-z]\") then\n      char = string.lower(char)\n    end\n\
    \    result = result .. char\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98l6jto1.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp98l6jto1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                char = string.upper(char)\n            else\n \
    \               char = string.lower(char)\n            end\n            result\
    \ = result .. char\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvuoqmgc.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmphvuoqmgc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.gsub(s, \"[%a]\", function(c) return string.upper(c) end)\n  s =\
    \ string.gsub(s, \"[%A]\", function(c) return string.upper(c) end)\n  return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8mew6tz.lua:19:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpt8mew6tz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]\", c) then\n      result = string.gsub(string.upper(c), string.upper, \"\
    %w\")\n    else\n      result = string.gsub(string.lower(c), string.upper, \"\
    %w\")\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4tip8ie.lua:17:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmpg4tip8ie.lua:17: in local 'candidate'\n\t/tmp/tmpg4tip8ie.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  if string.sub(s,i,i) ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)\n\
    \      else\n        result = string.upper(string.sub(s,i,i)) + result\n     \
    \ end\n    else\n      result = string.upper(string.sub(s,i,i)) + result\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7oqqlnfx.lua:17:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp7oqqlnfx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp7oqqlnfx.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n \
    \       if string.find(string.chars(),c) then\n            local upper = string.upper(c)\n\
    \            local lower = string.lower(c)\n            if upper ~= lower then\n\
    \                result = result .. upper\n            else\n                result\
    \ = result .. c\n            end\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpacu9i7lq.lua:14:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpacu9i7lq.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpacu9i7lq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = string.sub(s,i,i)\n        else\n            str = string.sub(s,i,#s)\n\
    \        end\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8yyj6p3.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpo8yyj6p3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = s:gsub(\"%l\", string.upper)\n    local s = s:gsub(\"%U\", string.lower)\n\
    \    return s:gsub(\"%a\", \"a\")\nend\nprint(solve(\"1234\"))\nprint(solve(\"\
    ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    a\"))\nprint(solve(\"\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjbg_cf8i.lua:93: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ string.lower(s)\n  local t = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= nil then\n      table.insert(t,string.upper(string.sub(s,i,i)))\n    else\n\
    \      table.insert(t,string.lower(string.sub(s,i,i)))\n    end\n  end\n  return\
    \ table.concat(t, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoll53jmo.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpoll53jmo.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                local upper = string.upper(c)\n                local\
    \ lower = string.lower(c)\n                if upper ~= nil then\n            \
    \        result = result .. upper\n                elseif lower ~= nil then\n\
    \                    result = result .. lower\n                else\n        \
    \            result = result .. c\n                end\n            else\n   \
    \             result = result .. c\n            end\n        else\n          \
    \  result = result .. string.sub(s,i,i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyirdty94.lua:38:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpyirdty94.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  if string.sub(s,i,i) ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)\n\
    \      else\n        result = string.upper(string.sub(s,i,i))\n      end\n   \
    \ else\n      result = string.sub(s,i,i)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcl5aojc.lua:29:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpmcl5aojc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ t = {}\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.chars(c),\"\
    a\") then\n      table.insert(t,string.upper(c))\n    elseif string.find(string.chars(c),\"\
    A\") then\n      table.insert(t,string.lower(c))\n    else\n      table.insert(t,c)\n\
    \    end\n  end\n  return table.concat(t, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsoeqd53y.lua:14:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpsoeqd53y.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsoeqd53y.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(string.chars(char), string.chars(\"a\")) ~= nil then\n      result\
    \ = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3igrxwea.lua:16: '')'' expected (to close ''('' at line 15)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,#s)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgeuklkh.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpdgeuklkh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local n = #s\n    local i = 0\n    local res = \"\"\
    \n    while i < n do\n        if s[i] ~= nil then\n            local c = string.upper(s[i])\n\
    \            s[i] = c\n            res = res .. c\n        else\n            res\
    \ = res .. s[i]\n        end\n        i = i + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8poyumf.lua:21:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpz8poyumf.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpz8poyumf.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.upper(char),string.upper(char))\
    \ then\n                result = string.upper(string.sub(string.upper(char),1,1))\
    \ + string.upper(string.sub(string.upper(char),2,#string.upper(char)))\n     \
    \       else\n                result = string.upper(char) + string.upper(string.sub(string.upper(char),1,#string.upper(char)))\n\
    \            end\n        else\n            result = string.upper(string.sub(s,1,#s))\
    \ + string.upper(string.sub(s,#s,#s))\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnw7m0yaw.lua:16:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpnw7m0yaw.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpnw7m0yaw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local t = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ ~= nil then\n            local c = string.sub(s,i,i)\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.upper(c)\n            else\n       \
    \         c = string.lower(c)\n            end\n            t = t .. c\n     \
    \   else\n            t = t .. string.sub(s,i,i)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedcg88oi.lua:32:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpedcg88oi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n      \
    \      end\n            if string.sub(c,1,1) ~= nil then\n                c =\
    \ string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n   \
    \         end\n            if string.sub(c,1,1) ~= nil then\n                c\
    \ = string.sub(c,1,1)..string.sub(c,2,#c)\n            end\n            if string.sub(c,1,1)\
    \ ~= nil then\n                c = string.sub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbuu9_x7e.lua:73: ''end'' expected (to close ''if'' at line
    57) near <eof>

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = s:gsub(\"%l\", string.upper)\n  s = s:gsub(\"%U\", string.lower)\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplw0zbaer.lua:19:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmplw0zbaer.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    if string.sub(s,i,i) ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)..string.sub(s,i,i)\n\
    \      else\n        result = string.sub(s,i,i)\n      end\n    else\n      result\
    \ = string.sub(s,i,i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy_y_znj.lua:29:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmphy_y_znj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.lower(char),string.upper(char))\
    \ then\n                char = string.upper(char)\n            else\n        \
    \        char = string.lower(char)\n            end\n            result = result\
    \ .. char\n        else\n            result = result .. string.sub(s,i,i)\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprehd4k2b.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmprehd4k2b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%a%A]$\") then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf11rrox1.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpf11rrox1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newString = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil\
    \ then\n            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n         \
    \       newString = newString .. string.sub(s,i,i)\n            else\n       \
    \         newString = newString .. string.upper(string.sub(s,i,i))\n         \
    \   end\n        else\n            newString = newString .. string.sub(s,i,i)\n\
    \        end\n    end\n    return newString\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k5l57sb.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp1k5l57sb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= \"\" then\n                char = string.upper(char)\n            else\n\
    \                char = string.lower(char)\n            end\n            result\
    \ = result .. char\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr3d8im_.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpbr3d8im_.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = result .. string.sub(s,i,i)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgedbn6ez.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpgedbn6ez.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if char >= 'a' and char <= 'z' then\n\
    \        char = string.upper(char) .. string.lower(char)\n      else\n       \
    \ char = string.lower(char)\n      end\n      result = result .. char\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr92x6x39.lua:29:\
    \ expected: \"aSdF\"\nactual: \"aSsdFf\"\nstack traceback:\n\t/tmp/tmpr92x6x39.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     if string.sub(s,i,i) ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)..result\n\
    \      else\n        result = string.sub(s,i,i)..result\n      end\n    else\n\
    \      result = string.sub(s,i,i)..result\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ksgbkj7.lua:29:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmp4ksgbkj7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.match(char, \"^[%w]$\") then\n      result = string.gsub(string.lower(char),\
    \ string.upper, string.lower)\n    else\n      result = char\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc6bp9xa.lua:15:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmphc6bp9xa.lua:15: in local 'candidate'\n\t/tmp/tmphc6bp9xa.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local new_s = \"\"\n    for i = 1, #s do\n        if\
    \ string.sub(s,i,i) ~= \"\" then\n            if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n                new_s = string.sub(s,i,i)\n            else\n        \
    \        new_s = string.upper(string.sub(s,i,i))\n            end\n        else\n\
    \            new_s = string.upper(string.sub(s,i,i))\n        end\n    end\n \
    \   return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvt993k2.lua:30:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmplvt993k2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result\n  local index\n  local letter\n  local upper\n  local lower\n  local\
    \ len\n  local i\n  \n  -- Check for empty string\n  if s == \"\" then\n    return\
    \ s\n  end\n  \n  -- Check for only letters\n  if string.match(s, \"^[a-z]+$\"\
    ) then\n    return s\n  end\n  \n  -- Check for only numbers\n  if string.match(s,\
    \ \"^[0-9]+$\") then\n    return s\n  end\n  \n  -- Check for only special characters\n\
    \  if string.match(s, \"^[#@$%^&*]+$\") then\n    return s\n  end\n  \n  -- Check\
    \ for only uppercase letters\n  if string.match(s, \"^[A-Z]+$\") then\n    upper\
    \ = true\n  else\n    upper = false\n  end\n  \n  -- Check for only lowercase\
    \ letters\n  if string.match(s, \"^[a-z]+$\") then\n    lower = true\n  else\n\
    \    lower = false\n  end\n  \n  -- Check for only numbers\n  if string.match(s,\
    \ \"^[0-9]+$\") then\n    return s\n  end\n  \n  -- Check for only special characters\n\
    \  if string.match(s, \"^[#@$%^&*]+$\") then\n    return s\n  end\n  \n  -- Check\
    \ for only uppercase letters\n  if string.match(s, \"^[A-Z]+$\") then\n    upper\
    \ = true\n  else\n    upper = false\n  end\n  \n  -- Check for only lowercase\
    \ letters\n  if string.match(s, \"^[a-z]+$\") then\n    lower = true\n  else\n\
    \    lower = false\n  end\n  \n  -- Check for only numbers\n  if string.match(s,\
    \ \"^[0-9]+$\") then\n    return s\n  end\n  \n  -- Check for only special characters\n\
    \  if string.match(s, \"^[#@$%^&*]+$\") then\n    return s\n  end\n  \n  -- Check\
    \ for only uppercase letters\n  if string.match(s, \"^[A-Z]+$\") then\n    upper\
    \ = true\n  else\n    upper = false\n  end\n  \n  -- Check for only lowercase\
    \ letters\n  if string.match(s, \"^[a-z]+$\") then\n    lower = true\n  else\n\
    \    lower = false\n  end\n  \n  -- Check for only numbers\n  if string.match(s,\
    \ \"^[0-9]+$\") then\n    return s\n  end\n  \n  -- Check for only special characters\n\
    \  if string.match(s, \"^[#@$%^&*]+$\") then\n    return s\n  end\n  \n  -- Check\
    \ for only uppercase letters\n  if string.\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvz6la2bg.lua:113: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.match(char, \"^[%aA]$\") then\n      result = string.gsub(string.upper(char),\
    \ char, function(c)\n        return string.lower(c)\n      end)\n    else\n  \
    \    result = string.gsub(string.lower(char), char, function(c)\n        return\
    \ string.upper(c)\n      end)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5gjsyei.lua:30:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpu5gjsyei.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,i) +\
    \ result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1587sln2.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp1587sln2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                local upper = string.upper(char)\n            \
    \    local lower = string.lower(char)\n                if upper ~= nil then\n\
    \                    result = result .. upper\n                elseif lower ~=\
    \ nil then\n                    result = result .. lower\n                else\n\
    \                    result = result .. char\n                end\n          \
    \  else\n                result = result .. char\n            end\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_caljypo.lua:36:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_caljypo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskhqjyph.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpskhqjyph.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    if string.sub(s,i,i) ~= string.sub(s,i,i) then\n        local c = string.sub(s,i,i)\n\
    \        string.gsub(string.sub(s,i,i),\"([a-z])\",function(x)\n          x =\
    \ string.upper(x)\n          result = result .. x\n        end)\n      else\n\
    \        result = result .. string.sub(s,i,i)\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqokharhv.lua:31:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpqokharhv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%a]$\",c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23wabf5_.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp23wabf5_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ string.lower(s)\n  local t = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= nil then\n      t = string.sub(s,i,i) + t\n    else\n      t = string.sub(s,i,i)\
    \ + t\n    end\n  end\n  return string.lower(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkh26yfsd.lua:15:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpkh26yfsd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpkh26yfsd.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local i, j = 1, #s\n  while i < j do\n    if s[i] ~=\
    \ nil then\n      if s[i] ~= s[i] then\n        s[i] = string.upper(s[i])\n  \
    \    else\n        s[i] = string.lower(s[i])\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tq9fwq6.lua:29:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp_tq9fwq6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                local lower = string.sub(char,1,1)\n          \
    \      local upper = string.sub(char,2,2)\n                local upper = string.sub(upper,1,1)\n\
    \                local upper = string.sub(upper,2,2)\n                local upper\
    \ = string.sub(upper,3,3)\n                local upper = string.sub(upper,1,1)\n\
    \                local upper = string.sub(upper,2,2)\n                local upper\
    \ = string.sub(upper,3,3)\n                local upper = string.sub(upper,4,4)\n\
    \                local upper = string.sub(upper,1,1)\n                local upper\
    \ = string.sub(upper,2,2)\n                local upper = string.sub(upper,3,3)\n\
    \                local upper = string.sub(upper,4,4)\n                local upper\
    \ = string.sub(upper,5,5)\n                local upper = string.sub(upper,1,1)\n\
    \                local upper = string.sub(upper,2,2)\n                local upper\
    \ = string.sub(upper,3,3)\n                local upper = string.sub(upper,4,4)\n\
    \                local upper = string.sub(upper,5,5)\n                local upper\
    \ = string.sub(upper,6,6)\n                local upper = string.sub(upper,1,1)\n\
    \                local upper = string.sub(upper,2,2)\n                local upper\
    \ = string.sub(upper,3,3)\n                local upper = string.sub(upper,4,4)\n\
    \                local upper = string.sub(upper,5,5)\n                local upper\
    \ = string.sub(upper,6,6)\n                local upper = string.sub(upper,7,7)\n\
    \                local upper = string.sub(upper,1,1)\n                local upper\
    \ = string.sub(upper,2,2)\n                local upper = string.sub(upper,3,3)\n\
    \                local upper = string.sub(upper,4,4)\n                local upper\
    \ = string.sub(upper,5,5)\n                local upper = string.sub(upper,6,6)\n\
    \                local upper = string.sub(upper,7,7)\n                local upper\
    \ = string.sub(upper,8,8)\n                local upper = string.sub(upper,1,1)\n\
    \                local upper = string.sub(upper,2,2)\n                local upper\
    \ = string.sub(upper,3,3)\n                local upper = string.sub(upper,4,4)\n\
    \                local upper = string.sub(upper,5,5)\n                local upper\
    \ = string.sub(upper,6,6)\n                local upper = string.sub(upper,7,7)\n\
    \                local upper = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvq4g4j7f.lua:59: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.lower(char),\
    \ string.upper(char)) then\n                char = string.upper(char)\n      \
    \      else\n                char = string.lower(char)\n            end\n    \
    \        result = result .. char\n        else\n            result = result ..\
    \ string.sub(s,i,i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqzna6wf.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpgqzna6wf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9yek6o6w.lua:15: '')'' expected (to close ''('' at line 14)
    near ''=''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n \
    \       if string.find(string.char(c),\"a\") then\n            local temp = string.upper(c)\n\
    \            temp = string.sub(temp,2,#temp)\n            result = result .. temp\n\
    \        elseif string.find(string.char(c),\"A\") then\n            local temp\
    \ = string.lower(c)\n            temp = string.sub(temp,2,#temp)\n           \
    \ result = result .. temp\n        else\n            result = result .. c\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe26g_wp5.lua:14:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpe26g_wp5.lua:14: in local 'candidate'\n\t/tmp/tmpe26g_wp5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result\n  local index\n  local char\n  local count\n  local upper\n  local lower\n\
    \  local temp\n  local len\n  local i\n  \n  -- check empty string\n  if s ==\
    \ \"\" then\n    return s\n  end\n  \n  -- check string contains only letters\n\
    \  if #s ~= 1 then\n    return s\n  end\n  \n  -- check string contains only letters\n\
    \  if string.match(s, \"^%l\") then\n    return s\n  end\n  \n  -- check string\
    \ contains only letters\n  if string.match(s, \"^%u\") then\n    return s\n  end\n\
    \  \n  -- check string contains only letters\n  if string.match(s, \"^%L\") then\n\
    \    return s\n  end\n  \n  -- check string contains only letters\n  if string.match(s,\
    \ \"^%U\") then\n    return s\n  end\n  \n  -- check string contains only letters\n\
    \  if string.match(s, \"^%l$\") then\n    return s\n  end\n  \n  -- check string\
    \ contains only letters\n  if string.match(s, \"^%u$\") then\n    return s\n \
    \ end\n  \n  -- check string contains only letters\n  if string.match(s, \"^%L$\"\
    ) then\n    return s\n  end\n  \n  -- check string contains only letters\n  if\
    \ string.match(s, \"^%U$\") then\n    return s\n  end\n  \n  -- check string contains\
    \ only letters\n  if string.match(s, \"^%l%\") then\n    return s\n  end\n  \n\
    \  -- check string contains only letters\n  if string.match(s, \"^%u%\") then\n\
    \    return s\n  end\n  \n  -- check string contains only letters\n  if string.match(s,\
    \ \"^%L%\") then\n    return s\n  end\n  \n  -- check string contains only letters\n\
    \  if string.match(s, \"^%U%\") then\n    return s\n  end\n  \n  -- check string\
    \ contains only letters\n  if string.match(s, \"^%l%$\") then\n    return s\n\
    \  end\n  \n  -- check string contains only letters\n  if string.match(s, \"^%u%$\"\
    ) then\n    return s\n  end\n  \n  -- check string contains only letters\n  if\
    \ string.match(s, \"^%L%$\") then\n    return s\n  end\n  \n  -- check string\
    \ contains only letters\n  if string.match(s, \"^%U%$\") then\n    return s\n\
    \  end\n  \n  -- check string contains only letters\n  if string.match(s, \"^%l%%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptgy2ae0t.lua:112: unfinished string near ''"^%l%%''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if char >= \"a\" and char <= \"z\"\
    \ then\n        char = string.upper(char)\n      elseif char >= \"A\" and char\
    \ <= \"Z\" then\n        char = string.lower(char)\n      else\n        char =\
    \ char\n      end\n      result = result .. char\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwe7f5cj.lua:32:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpmwe7f5cj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(char, \"[A-Z]\") then\n      result = string.gsub(string.upper(char),\
    \ char, \"%1\")\n    elseif string.find(char, \"[a-z]\") then\n      result =\
    \ string.gsub(string.lower(char), char, \"%1\")\n    else\n      result = char\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjffq2meg.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpjffq2meg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%w]$\") then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr906fl2.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpkr906fl2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local n = #s\n  if n <= 0 then\n    return s\n  end\n\
    \  local t = {}\n  local i = 0\n  while i < n do\n    if s[i] ~= nil then\n  \
    \    if s[i] ~= s[i] then\n        table.insert(t, string.upper(s[i]))\n     \
    \ else\n        table.insert(t, string.lower(s[i]))\n      end\n    else\n   \
    \   table.insert(t, s[i])\n    end\n    i = i + 1\n  end\n  local s = table.concat(t,\
    \ \"\")\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbiv52zjj.lua:37:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpbiv52zjj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local c = string.sub(s,i,i)\n      if string.sub(c,1,1) ~= nil then\n   \
    \     c = string.sub(c,1,1)..string.sub(c,2,#c)\n      end\n      result = string.sub(s,i,i)..c\n\
    \    else\n      result = string.sub(s,i,i)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvl5mwwx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ff\"\nstack traceback:\n\t/tmp/tmpuvl5mwwx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if char >= \"a\" and\
    \ char <= \"z\" then\n                char = string.upper(char)\n            elseif\
    \ char >= \"A\" and char <= \"Z\" then\n                char = string.lower(char)\n\
    \            end\n            result = result .. char\n        else\n        \
    \    result = result .. string.sub(s,i,i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i4nt7k4.lua:32:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmp1i4nt7k4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local letter = string.sub(s,i,i)\n            if letter:sub(1,1)\
    \ ~= 'a' then\n                letter = string.upper(letter)\n            else\n\
    \                letter = string.lower(letter)\n            end\n            result\
    \ = result .. letter\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgo07_qz.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmprgo07_qz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local t = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ ~= nil then\n            table.insert(t,string.upper(string.sub(s,i,i)))\n \
    \       else\n            table.insert(t,string.lower(string.sub(s,i,i)))\n  \
    \      end\n    end\n    return table.concat(t, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaclb97dc.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpaclb97dc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      result = string.gsub(string.upper(c),\"[%w]\",string.upper)\n\
    \    else\n      result = string.gsub(string.lower(c),\"[%w]\",string.lower)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfz7n7anj.lua:26:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpfz7n7anj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n \
    \       if string.match(\"[%a]\", c) then\n            local upper = string.upper(c)\n\
    \            local lower = string.lower(c)\n            if upper ~= lower then\n\
    \                result = result .. upper\n            else\n                result\
    \ = result .. c\n            end\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjaifk7t.lua:32:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpzjaifk7t.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ newS = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  if string.sub(s,i,i) ~= \"\" then\n        local c = string.sub(s,i,i)\n  \
    \      if string.sub(c,1,1) ~= nil then\n          c = string.sub(c,1,1)..string.sub(c,2,#c)\n\
    \        end\n        newS = newS..c\n      else\n        newS = newS..string.sub(s,i,i)\n\
    \      end\n    end\n  end\n  return newS\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxzu14_p.lua:31:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpoxzu14_p.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.gsub(string.sub(s,i,i),\"[%a]\",function(x)\n        if string.sub(x,1,1)\
    \ ~= nil then\n          return string.upper(string.sub(x,1,1))\n        else\n\
    \          return string.lower(string.sub(x,1,1))\n        end\n      end)\n \
    \   else\n      result = string.gsub(string.sub(s,i,i),\"[%a]\",function(x)\n\
    \        return x\n      end)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99a2re6t.lua:33:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmp99a2re6t.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local t = {}\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ ~= nil then\n            table.insert(t,string.upper(string.sub(s,i,i)))\n \
    \       else\n            table.insert(t,string.lower(string.sub(s,i,i)))\n  \
    \      end\n    end\n    return table.concat(t, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaclb97dc.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpaclb97dc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    if string.sub(s,i,i) ~= \"\" then\n        if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n          result = string.sub(s,i,i)..result\n        else\n         \
    \ result = string.upper(string.sub(s,i,i))..result\n        end\n      else\n\
    \        result = string.upper(string.sub(s,i,i))..result\n      end\n    else\n\
    \      result = string.upper(string.sub(s,i,i))..result\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphl4oxegb.lua:33:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmphl4oxegb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i) + result\n    else\n      result = string.sub(s,i,i)\
    \ + result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sornn69.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp5sornn69.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp5sornn69.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%w]$\") then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr906fl2.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpkr906fl2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(char, \"[A-Za-z]\") then\n      result = string.gsub(string.upper(char),\
    \ char, function(c) return string.lower(c) end)\n    else\n      result = string.gsub(string.lower(char),\
    \ char, function(c) return string.upper(c) end)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe9ry7cf.lua:26:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpbe9ry7cf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.lower(char),\
    \ string.upper(char)) then\n                char = string.upper(char)\n      \
    \      else\n                char = string.lower(char)\n            end\n    \
    \        result = result .. char\n        else\n            result = result ..\
    \ string.sub(s,i,i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqzna6wf.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpgqzna6wf.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local i, j = 1, #s\n    while i <= j do\n        if\
    \ s[i] ~= nil then\n            if s[i] ~= s[i] then\n                s[i] = string.upper(s[i])\n\
    \            else\n                s[i] = string.lower(s[i])\n            end\n\
    \        end\n        i = i + 1\n    end\n    return s\nend\nprint(solve(\"1234\"\
    ))\nprint(solve(\"ab\"))\nprint(solve(\"#a@C\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    b\"))\nprint(solve(\"c\"))\nprint(solve(\"d\"))\nprint(solve(\"e\"))\nprint(solve(\"\
    f\"))\nprint(solve(\"g\"))\nprint(solve(\"h\"))\nprint(solve(\"i\"))\nprint(solve(\"\
    j\"))\nprint(solve(\"k\"))\nprint(solve(\"l\"))\nprint(solve(\"m\"))\nprint(solve(\"\
    n\"))\nprint(solve(\"o\"))\nprint(solve(\"p\"))\nprint(solve(\"q\"))\nprint(solve(\"\
    r\"))\nprint(solve(\"s\"))\nprint(solve(\"t\"))\nprint(solve(\"u\"))\nprint(solve(\"\
    v\"))\nprint(solve(\"w\"))\nprint(solve(\"x\"))\nprint(solve(\"y\"))\nprint(solve(\"\
    z\"))\nprint(solve(\"A\"))\nprint(solve(\"B\"))\nprint(solve(\"C\"))\nprint(solve(\"\
    D\"))\nprint(solve(\"E\"))\nprint(solve(\"F\"))\nprint(solve(\"G\"))\nprint(solve(\"\
    H\"))\nprint(solve(\"I\"))\nprint(solve(\"J\"))\nprint(solve(\"K\"))\nprint(solve(\"\
    L\"))\nprint(solve(\"M\"))\nprint(solve(\"N\"))\nprint(solve(\"O\"))\nprint(solve(\"\
    P\"))\nprint(solve(\"Q\"))\nprint(solve(\"R\"))\nprint(solve(\"S\"))\nprint(solve(\"\
    T\"))\nprint(solve(\"U\"))\nprint(solve(\"V\"))\nprint(solve(\"W\"))\nprint(solve(\"\
    X\"))\nprint(solve(\"Y\"))\nprint(solve(\"Z\"))\nprint(solve(\"a\"))\nprint(solve(\"\
    b\"))\nprint(solve(\"c\"))\nprint(solve(\"d\"))\nprint(solve(\"e\"))\nprint(solve(\"\
    f\"))\nprint(solve(\"g\"))\nprint(solve(\"h\"))\nprint(solve(\"i\"))\nprint(solve(\"\
    j\"))\nprint(solve(\"k\"))\nprint(solve(\"l\"))\nprint(solve(\"m\"))\nprint(solve(\"\
    n\"))\nprint(solve(\"o\"))\nprint(solve(\"p\"))\nprint(solve(\"q\"))\nprint(solve(\"\
    r\"))\nprint(solve(\"s\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "1234\nab\n#a@c\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\n\
    s\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\n\
    s\nt\nu\nv\nw\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\n\
    s\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyd8dxgd.lua:104:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpyyd8dxgd.lua:104:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ string.gsub(s, \"([a-z])\", function (c) \n    if string.find(string.upper(c),\
    \ string.upper(c)) then\n      return string.upper(c)\n    else\n      return\
    \ string.lower(c)\n    end\n  end)\n  s = string.gsub(s, \"([A-Z])\", function\
    \ (c) \n    if string.find(string.lower(c), string.lower(c)) then\n      return\
    \ string.lower(c)\n    else\n      return string.upper(c)\n    end\n  end)\n \
    \ return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdyq25z2.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpsdyq25z2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= \"\" then\n                local upper = string.upper(char)\n           \
    \     local lower = string.lower(char)\n                if upper ~= char then\n\
    \                    result = result .. upper\n                elseif lower ~=\
    \ char then\n                    result = result .. lower\n                else\n\
    \                    result = result .. char\n                end\n          \
    \  else\n                result = result .. char\n            end\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx71azwwm.lua:37:\
    \ expected: \"4321\"\nactual: \"1234\"\nstack traceback:\n\t/tmp/tmpx71azwwm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s,i,i)==\"\
    a\" then\n            s = string.upper(string.sub(s,i,i))\n        else\n    \
    \        s = string.sub(s,i,i)\n        end\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizt6v3kb.lua:25:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpizt6v3kb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%a]$\") then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19po7tl4.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp19po7tl4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n     \
    \ str = str .. string.sub(s,i,i)\n    else\n      str = str .. string.sub(s,i,i)\n\
    \    end\n  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt69p38z.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpyt69p38z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str=s:gsub(\"%l\",function(x)\n    if x~=nil then\n      if x~=string.upper(x)\
    \ then\n        return string.upper(x)\n      else\n        return string.lower(x)\n\
    \      end\n    end\n  end)\n  if str:match(\"^[%a%#]$\") then\n    return str\n\
    \  else\n    return str:reverse()\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfovgxmnt.lua:30:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmpfovgxmnt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%w]$\") then\n      c = string.upper(c)\n    elseif string.match(c, \"^[%W]$\"\
    ) then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnixv634b.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpnixv634b.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for _, v in ipairs(s) do\n        if v:match(\"^[%w]$\") then\n\
    \            table.insert(t, v:lower())\n        else\n            table.insert(t,\
    \ v)\n        end\n    end\n    table.sort(t)\n    local result = \"\"\n    for\
    \ _, v in ipairs(t) do\n        if v:match(\"^[%w]$\") then\n            result\
    \ = result .. v:upper()\n        else\n            result = result .. v\n    \
    \    end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphj_psl48.lua:34:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphj_psl48.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    if string.sub(s,i,i) ~= \"\" then\n        if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n          result = string.sub(s,i,i)\n        else\n          result =\
    \ string.upper(string.sub(s,i,i)) + result\n        end\n      else\n        result\
    \ = string.upper(string.sub(s,i,i)) + result\n      end\n    else\n      result\
    \ = string.upper(string.sub(s,i,i)) + result\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjwbtvetj.lua:18:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpjwbtvetj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpjwbtvetj.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i) + result\n    else\n      result = string.sub(s,i,i)\
    \ + result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sornn69.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp5sornn69.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp5sornn69.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,#s)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgeuklkh.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpdgeuklkh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            else\n         \
    \       c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6g39g1d.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpd6g39g1d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n   \
    \     if string.match(c,'^[%w]$') then\n            local upper = string.upper(c)\n\
    \            local lower = string.lower(c)\n            if upper ~= lower then\n\
    \                result = result .. upper\n            else\n                result\
    \ = result .. c\n            end\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6075a7w.lua:32:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpb6075a7w.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.upper(string.sub(s,i,i))\
    \ + result\n            end\n        else\n            result = string.upper(string.sub(s,i,i))\
    \ + result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9kdtwa_.lua:17:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpo9kdtwa_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpo9kdtwa_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            else\n         \
    \       c = string.lower(c)\n            end\n            result = result .. c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0k28lwx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpg0k28lwx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.char(c),\"\
    a\") then\n      c = string.upper(c)\n    elseif string.find(string.char(c),\"\
    A\") then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkr728t5b.lua:14:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpkr728t5b.lua:14: in local 'candidate'\n\t/tmp/tmpkr728t5b.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\",c) then\n      result = string.gsub(string.upper(c),\"[%w]\",string.lower)\n\
    \    else\n      result = string.gsub(c,\"[%w]\",string.upper)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp400fgfoc.lua:26:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmp400fgfoc.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s,i,i)==\"\
    a\" or string.sub(s,i,i)==\"b\" or string.sub(s,i,i)==\"c\" or string.sub(s,i,i)==\"\
    d\" or string.sub(s,i,i)==\"e\" or string.sub(s,i,i)==\"f\" or string.sub(s,i,i)==\"\
    g\" or string.sub(s,i,i)==\"h\" or string.sub(s,i,i)==\"i\" or string.sub(s,i,i)==\"\
    j\" or string.sub(s,i,i)==\"k\" or string.sub(s,i,i)==\"l\" or string.sub(s,i,i)==\"\
    m\" or string.sub(s,i,i)==\"n\" or string.sub(s,i,i)==\"o\" or string.sub(s,i,i)==\"\
    p\" or string.sub(s,i,i)==\"q\" or string.sub(s,i,i)==\"r\" or string.sub(s,i,i)==\"\
    s\" or string.sub(s,i,i)==\"t\" or string.sub(s,i,i)==\"u\" or string.sub(s,i,i)==\"\
    v\" or string.sub(s,i,i)==\"w\" or string.sub(s,i,i)==\"x\" or string.sub(s,i,i)==\"\
    y\" or string.sub(s,i,i)==\"z\" then\n            s=string.upper(string.sub(s,i,i))..string.lower(string.sub(s,i,i))\n\
    \        else\n            s=string.upper(string.sub(s,i,i))\n        end\n  \
    \  end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8oi6_z1.lua:25:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw8oi6_z1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.gsub(s, \"([a-z])\", function (c) \n    return string.upper(c) \n\
    \  end)\n  if #s == 0 then\n    return s\n  else\n    return string.gsub(s, \"\
    ([A-Z])\", function (c) \n      return string.lower(c) \n    end)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6monhqd.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpx6monhqd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n     \
    \ str = str .. string.sub(s,i,i)\n    else\n      str = str .. string.sub(s,i,i)\n\
    \    end\n  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt69p38z.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpyt69p38z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ s:gsub(\"%l\", string.upper)\n  s = s:gsub(\"%U\", string.lower)\n  return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnieuj7me.lua:19:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpnieuj7me.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     local c = string.sub(s,i,i)\n      if string.sub(c,1,1) ~= \"\" then\n \
    \       c = string.upper(c)\n      else\n        c = string.lower(c)\n      end\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsksn_db9.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpsksn_db9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i) + result\n    else\n      result = string.sub(s,i,i)\
    \ + result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ucehqgs.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp_ucehqgs.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_ucehqgs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n     \
    \ str = string.sub(s,i,i)\n    else\n      str = string.sub(s,i,#s)\n    end\n\
    \  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfd2ai5n.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpyfd2ai5n.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            else\n         \
    \       c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6g39g1d.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpd6g39g1d.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(string.lower(char), string.upper(char)) then\n      result = string.upper(result)..string.lower(char)\n\
    \    else\n      result = string.upper(result)..char\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd873p0tv.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDf\"\nstack traceback:\n\t/tmp/tmpd873p0tv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(s,i,i) ~= nil then\n\
    \        if string.sub(s,i,i) ~= nil then\n          result = string.sub(s,i,i)\
    \ + result\n        else\n          result = string.sub(s,i,i) + result\n    \
    \    end\n      else\n        result = char + result\n      end\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp45fvpqa8.lua:17:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp45fvpqa8.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp45fvpqa8.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newS = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= \"\" then\n                local upper =\
    \ string.upper(string.sub(s,i,i))\n                local lower = string.lower(string.sub(s,i,i))\n\
    \                if upper ~= nil then\n                    newS = newS..upper\n\
    \                elseif lower ~= nil then\n                    newS = newS..lower\n\
    \                else\n                    newS = newS..string.sub(s,i,i)\n  \
    \              end\n            end\n        end\n    end\n    return newS\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp219g32v7.lua:33:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp219g32v7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = result .. string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvq6vd6zy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpvq6vd6zy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \"\" then\n      result = result .. string.upper(string.sub(s,i,i))\n   \
    \ else\n      result = result .. string.sub(s,i,i)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp606etjpk.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp606etjpk.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldj1gpa6.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpldj1gpa6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local n = #s\n  local result = \"\"\n  for i = 1, n do\n\
    \    if string.sub(s,i,i) ~= \"\" then\n      result = string.sub(s,i,i) + result\n\
    \    end\n  end\n  if result ~= \"\" then\n    result = string.upper(result) +\
    \ result\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5q_wqll.lua:16:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp_5q_wqll.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp_5q_wqll.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.chars(),c)\
    \ then\n      result = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4y0vglo7.lua:16: '')'' expected (to close ''('' at line 15)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.sub(s,i,i):upper..string.sub(s,i,i):lower\n\
    \            end\n        else\n            result = string.sub(s,i,i):upper..string.sub(s,i,i):lower\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprxmw6ov0.lua:17: function arguments expected near ''..''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if char >= string.upper(char)\
    \ or char >= string.lower(char) then\n                char = string.upper(char)\n\
    \            else\n                char = string.lower(char)\n            end\n\
    \            result = result .. char\n        else\n            result = result\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptmdfm8t.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpptmdfm8t.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    if string.sub(s,i,i) ~= \"\" then\n        local c = string.sub(s,i,i)\n\
    \        local l = string.lower(c)\n        local u = string.upper(c)\n      \
    \  if l ~= nil then\n          result = result .. l\n        elseif u ~= nil then\n\
    \          result = result .. u\n        else\n          result = result .. c\n\
    \        end\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5fb9clm.lua:34:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmph5fb9clm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newS = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= \"\" then\n                local c = string.sub(s,i,i)\n\
    \                local upper = string.upper(c)\n                local lower =\
    \ string.lower(c)\n                if upper ~= nil then\n                    newS\
    \ = newS .. upper\n                elseif lower ~= nil then\n                \
    \    newS = newS .. lower\n                else\n                    newS = newS\
    \ .. c\n                end\n            end\n        end\n    end\n    return\
    \ newS\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfl60dud1.lua:34:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpfl60dud1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\
    \" then\n            local c = string.sub(s,i,i)\n            local t = string.sub(s,1,i)\n\
    \            local u = string.sub(s,i+1,i)\n            if string.sub(u,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            end\n          \
    \  s = string.sub(s, 1, i-1) .. t .. c .. string.sub(s, i+1, #s)\n        end\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyeydlnfa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"aaaaaaaaaaasdf\"\nstack traceback:\n\t/tmp/tmpyeydlnfa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i)\n    else\n      result = result .. string.sub(s,i,i)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29kjsask.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp29kjsask.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.match(char, \"^[%w]$\") then\n      result = string.gsub(string.upper(char),\
    \ char, function(c) return string.lower(c) end)\n    else\n      result = char\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gm68keg.lua:26:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmp7gm68keg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(char,\
    \ \"a\") then\n                char = string.upper(char)\n            elseif string.find(char,\
    \ \"A\") then\n                char = string.lower(char)\n            end\n  \
    \          result = result .. char\n        else\n            result = result\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk693r46.lua:31:\
    \ expected: \"aSdF\"\nactual: \"asDf\"\nstack traceback:\n\t/tmp/tmpzk693r46.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local result = \"\"\n    for i = 1, #s do\n       \
    \ if string.sub(s,i,i) ~= \"\" then\n            if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n                result = result .. string.sub(s,i,i)\n            else\n\
    \                result = result .. string.upper(string.sub(s,i,i))\n        \
    \    end\n        else\n            result = result .. string.sub(s,i,i)\n   \
    \     end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplr9zprqy.lua:30:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmplr9zprqy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local letter = string.sub(s,i,i)\n            if letter:lower() ==\
    \ letter then\n                letter = letter:upper()\n            end\n    \
    \        result = result .. letter\n        else\n            result = result\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihgpqng0.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpihgpqng0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newS = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n            newS = string.sub(s,i,i)\n        else\n            newS =\
    \ newS .. string.sub(s,i,i)\n        end\n    end\n    return newS\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zwsbd50.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp0zwsbd50.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                char = string.upper(char)\n            else\n \
    \               char = string.lower(char)\n            end\n            result\
    \ = result .. char\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvuoqmgc.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmphvuoqmgc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_coyn2s9.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp_coyn2s9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local t = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \"\" then\n      t = string.sub(s,i,i) + t\n    else\n      t = string.sub(s,i,i)\
    \ + t\n    end\n  end\n  return string.lower(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhgj8m88.lua:15:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpuhgj8m88.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpuhgj8m88.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      local upper = string.upper(char)\n\
    \      local lower = string.lower(char)\n      if upper ~= nil then\n        char\
    \ = upper\n      elseif lower ~= nil then\n        char = lower\n      end\n \
    \     result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw20s7tj.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpmw20s7tj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.match(char, \"^[%w]$\") then\n      result = string.gsub(string.upper(char),\
    \ char, function(c)\n        return string.lower(c)\n      end)\n    else\n  \
    \    result = char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta7m9x85.lua:28:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpta7m9x85.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(char, \"[A-Za-z]\") then\n      result = string.gsub(string.upper(char),\
    \ \"[A-Za-z]\", function(c) return string.lower(c) end)\n    else\n      result\
    \ = char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstwu0oo_.lua:26:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpstwu0oo_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ newS = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  if string.sub(s,i,i) ~= \"\" then\n        if string.sub(s,i,i) ~= string.sub(s,i,i)\
    \ then\n          newS = newS .. string.sub(s,i,i)\n        else\n          newS\
    \ = newS .. string.upper(string.sub(s,i,i))\n        end\n      else\n       \
    \ newS = newS .. string.upper(string.sub(s,i,i))\n      end\n    else\n      newS\
    \ = newS .. string.sub(s,i,i)\n    end\n  end\n  return newS\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv0og8v1.lua:33:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpjv0og8v1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.lower(char),string.upper(char))\
    \ then\n                result = string.sub(string.upper(char),1,1)..string.sub(string.lower(char),1,1)..result\n\
    \            else\n                result = char..result\n            end\n  \
    \      end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcm9w8kjk.lua:28:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmpcm9w8kjk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ t = {}\n    for _, v in ipairs(s) do\n        if v:match(\"^[%a%A]+$\") then\n\
    \            table.insert(t, v:lower())\n        else\n            table.insert(t,\
    \ v)\n        end\n    end\n    return table.concat(t, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp746m7sj_.lua:25:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp746m7sj_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local char = string.sub(s,i,i)\n            local lower = string.lower(char)\n\
    \            local upper = string.upper(char)\n            if lower ~= \"\" then\n\
    \                char = lower\n            elseif upper ~= \"\" then\n       \
    \         char = upper\n            end\n            result = result .. char\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom4r7bvv.lua:33:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpom4r7bvv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local c = string.sub(s,i,i)\n      if string.sub(c,1,1) ~= nil then\n   \
    \     c = string.upper(c)\n      else\n        c = string.lower(c)\n      end\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ztveljx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp7ztveljx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local result = \"\"\n    for i = 1, #s do\n       \
    \ if string.sub(s,i,i) ~= nil then\n            local c = string.sub(s,i,i)\n\
    \            if string.sub(c,1,1) ~= nil then\n                c = string.upper(c)\n\
    \            else\n                c = string.lower(c)\n            end\n    \
    \        result = result .. c\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpf24pk5.lua:32:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpdpf24pk5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newString = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil\
    \ then\n            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n         \
    \       newString = newString .. string.sub(s,i,i)\n            else\n       \
    \         newString = newString .. string.upper(string.sub(s,i,i))\n         \
    \   end\n        else\n            newString = newString .. string.sub(s,i,i)\n\
    \        end\n    end\n    return newString\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k5l57sb.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp1k5l57sb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskhqjyph.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpskhqjyph.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxm6v21kz.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpxm6v21kz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local t = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i)\
    \ ~= \"\" then\n            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n \
    \               t = string.sub(s,i,i)\n            else\n                t = string.upper(t)\n\
    \            end\n        else\n            t = string.upper(t)\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q6uku3y.lua:30:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4q6uku3y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.upper(string.sub(s,i,i))\n\
    \            end\n        else\n            result = string.upper(string.sub(s,i,i))\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp_jck8l.lua:29:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpjp_jck8l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i) + result\n    else\n      result = string.sub(s,i,i)\
    \ + result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5sornn69.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp5sornn69.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp5sornn69.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if\
    \ string.find(char, \"[A-Za-z]\") then\n      result = string.gsub(string.upper(char),\
    \ char, function(c) return string.lower(c) end)\n    else\n      result = string.gsub(string.lower(char),\
    \ char, function(c) return string.upper(c) end)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe9ry7cf.lua:26:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmpbe9ry7cf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.chars(),c)\
    \ then\n      result = string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.g\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4y0vglo7.lua:16: '')'' expected (to close ''('' at line 15)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.find(string.upper(char),\
    \ string.lower(char)) then\n                result = string.upper(char) .. result\n\
    \            else\n                result = string.lower(char) .. result\n   \
    \         end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40x_dbmf.lua:28:\
    \ expected: \"aSdF\"\nactual: \"fdsa\"\nstack traceback:\n\t/tmp/tmp40x_dbmf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.gsub(string.sub(s,i,i),\"[%a]\",function(x)\n        if\
    \ string.sub(x,1,1) ~= \"\" then\n          return string.upper(string.sub(x,1,1))..string.lower(string.sub(x,2,#x))\n\
    \        else\n          return x\n        end\n      end)\n    else\n      result\
    \ = string.gsub(string.sub(s,i,i),\"[%a]\",function(x)\n        return x\n   \
    \   end)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dkqzy_7.lua:33:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmp1dkqzy_7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ newS = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n   \
    \     if string.find(string.chars(c),\"a\") then\n            local newC = string.upper(c)\n\
    \            newS = newS..newC\n        elseif string.find(string.chars(c),\"\
    A\") then\n            local newC = string.lower(c)\n            newS = newS..newC\n\
    \        else\n            newS = newS..c\n        end\n    end\n    return newS\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd87s23af.lua:14:\
    \ attempt to call a nil value (field 'chars')\nstack traceback:\n\t/tmp/tmpd87s23af.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpd87s23af.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \"\" then\n      result = result .. string.sub(s,i,i)\n    else\n      result\
    \ = result .. string.sub(s,i,i)\n    end\n  end\n  return string.lower(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ypj9hj.lua:26:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpt5ypj9hj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i) + result\n    else\n      result = string.sub(s,i,i)\
    \ + result\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ucehqgs.lua:14:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmp_ucehqgs.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_ucehqgs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= \"\" then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0gtu9xt.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpt0gtu9xt.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                local upper = string.upper(char)\n            \
    \    local lower = string.lower(char)\n                if upper ~= nil then\n\
    \                    char = upper\n                elseif lower ~= nil then\n\
    \                    char = lower\n                end\n            end\n    \
    \    end\n        result = result .. char\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9mutnr0l.lua:25:\
    \ attempt to concatenate a nil value (global 'char')\nstack traceback:\n\t/tmp/tmp9mutnr0l.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp9mutnr0l.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.gsub(string.sub(s,i,i),\"([a-z])\",function(x)\n        if\
    \ x == \"a\" then\n          return \"A\"\n        elseif x == \"A\" then\n  \
    \        return \"a\"\n        else\n          return x\n        end\n      end)\n\
    \    else\n      result = string.gsub(string.sub(s,i,i),\"([a-z])\",function(x)\n\
    \        if x == \"a\" then\n          return \"A\"\n        elseif x == \"A\"\
    \ then\n          return \"a\"\n        else\n          return x\n        end\n\
    \      end)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl3yuc4dr.lua:41:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpl3yuc4dr.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      local upper = string.upper(char)\n\
    \      local lower = string.lower(char)\n      if upper ~= nil then\n        char\
    \ = upper\n      elseif lower ~= nil then\n        char = lower\n      end\n \
    \     result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmw20s7tj.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpmw20s7tj.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n \
    \     result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskhqjyph.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpskhqjyph.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.sub(c,1,1)..string.sub(c,2,#c)\n      \
    \      end\n            result = c..result\n        else\n            result =\
    \ string.sub(s,i,i)..result\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_kjd5wa4.lua:29:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmp_kjd5wa4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ s = string.lower(s)\n  local t = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= \"\" then\n      table.insert(t,string.upper(string.sub(s,i,i)))\n    else\n\
    \      table.insert(t,string.lower(string.sub(s,i,i)))\n    end\n  end\n  return\
    \ table.concat(t, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgxn3rn0.lua:26:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmprgxn3rn0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    local result = \"\"\n    for i = 1, #s do\n       \
    \ if string.sub(s,i,i) ~= \"\" then\n            local c = string.sub(s,i,i)\n\
    \            if string.sub(c,1,1) ~= \"\" then\n                c = string.upper(c)\n\
    \            else\n                c = string.lower(c)\n            end\n    \
    \        result = result .. c\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvgplny6.lua:32:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpqvgplny6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.find(string.char(string.lower(char)),\
    \ string.lower(char)) then\n        char = string.upper(char)\n      else\n  \
    \      char = string.lower(char)\n      end\n      result = result .. char\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpezj0s03a.lua:15:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpezj0s03a.lua:15: in local 'candidate'\n\t/tmp/tmpezj0s03a.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n \
    \       if string.match(\"^[%w]$\", c) then\n            local upper = string.upper(c)\n\
    \            local lower = string.lower(c)\n            if upper ~= lower then\n\
    \                result = result .. upper\n            else\n                result\
    \ = result .. c\n            end\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxgt0e4k.lua:32:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmprxgt0e4k.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%a]$\",c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23wabf5_.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmp23wabf5_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  s =\
    \ string.gsub(s, \"([a-z])\", function (c) return string.upper(c) end)\n  s =\
    \ string.gsub(s, \"([A-Z])\", function (c) return string.lower(c) end)\n  return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbm2m51v.lua:19:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpbbm2m51v.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldj1gpa6.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpldj1gpa6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= \"\" then\n                local c = string.sub(s,i,i)\n\
    \                local l = string.lower(c)\n                local u = string.upper(c)\n\
    \                if l ~= nil then\n                    result = result .. l\n\
    \                elseif u ~= nil then\n                    result = result ..\
    \ u\n                else\n                    result = result .. c\n        \
    \        end\n            end\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7teh076.lua:34:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpi7teh076.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.upper(string.sub(s,i,i))\
    \ + result\n            end\n        else\n            result = string.upper(string.sub(s,i,i))\
    \ + result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9kdtwa_.lua:17:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpo9kdtwa_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpo9kdtwa_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        local c = string.sub(s,i,i)\n \
    \       if string.find(c, \"[A-Z]\") then\n            local upper = string.upper(c)\n\
    \            local lower = string.lower(c)\n            if upper ~= lower then\n\
    \                result = result .. upper\n            else\n                result\
    \ = result .. c\n            end\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe80xq0p5.lua:32:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpe80xq0p5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ str=s:gsub(\"%l\",function(x)\n    if x:match(\"^[a-zA-Z]\") then\n      return\
    \ x:lower()\n    else\n      return x\n    end\n  end)\n  if str:match(\"^[a-zA-Z]\"\
    ) then\n    return str:upper()\n  else\n    return str\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxsm5dhc.lua:28:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpzxsm5dhc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793684
