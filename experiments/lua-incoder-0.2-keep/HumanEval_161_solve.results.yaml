language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(c,\
    \ \"^[%a]\") then\n      c = string.upper(c)\n    elseif string.match(c, \"^[%A]\"\
    ) then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_7tx4_a.lua:27:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpj_7tx4_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n    \
    \  result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60sn2olv.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp60sn2olv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = result .. string.sub(s,i,i)\n            else\n                result = result\
    \ .. string.upper(string.sub(s,i,i))\n            end\n        else\n        \
    \    result = result .. string.sub(s,i,i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeafrbs18.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpeafrbs18.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(s,i,i) ~= nil then\n\
    \        if string.sub(s,i,i) ~= nil then\n          if string.sub(s,i,i) ~= nil\
    \ then\n            if string.sub(s,i,i) ~= nil then\n              if string.sub(s,i,i)\
    \ ~= nil then\n                if string.sub(s,i,i) ~= nil then\n            \
    \      if string.sub(s,i,i) ~= nil then\n                    if string.sub(s,i,i)\
    \ ~= nil then\n                      if string.sub(s,i,i) ~= nil then\n      \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \  if string.sub(s,i,i) ~= nil then\n                            if string.sub(s,i,i)\
    \ ~= nil then\n                              if string.sub(s,i,i) ~= nil then\n\
    \                                if string.sub(s,i,i) ~= nil then\n          \
    \                        if string.sub(s,i,i) ~= nil then\n                  \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \              if string.sub(s,i,i) ~= nil then\n                            \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \              if string.sub(s,i,i) ~= nil then\n                            \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \                        if string.sub(s,i,i) ~= nil then\n                  \
    \                                if string.sub(s,i,i) ~= nil then\n          \
    \                                          if string.sub(s,i,i) ~= nil then\n\
    \                                                      if string.sub(s,i,i) ~=\
    \ nil then\n                                                        if string.sub(s,i,i)\
    \ ~= nil then\n                                                          if string.sub(s,i,i)\
    \ ~= nil then\n                                                            if\
    \ string.sub(s,i,i) ~= nil then\n                                            \
    \                  if string.sub(s,i,i) ~= nil then\n                        \
    \                                        if string.sub(s,i,i) ~= nil then\n  \
    \                                                                if string.sub(s,i,i)\
    \ ~= nil then\n                                                              \
    \      if string.sub(s,i,i) ~= nil then\n                                    \
    \                                  if string.sub(s,i,i) ~= nil then\n        \
    \                                                                 if string.sub(s,i,i)\
    \ ~= nil then\n                                                              \
    \            if string.sub(s,i,i) ~= nil then\n                              \
    \                                              if string.sub(s,i,i) ~= nil then\n\
    \                                                                            \
    \  if string.sub(s,i,i) ~= nil then\n                                        \
    \                                        if string.sub(\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw1gatyva.lua:53: '')'' expected (to close ''('' at line 52)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= \"\" then\n                local upper = string.upper(char)\n           \
    \     local lower = string.lower(char)\n                if upper ~= \"\" then\n\
    \                    char = upper\n                elseif lower ~= \"\" then\n\
    \                    char = lower\n                end\n            end\n    \
    \    end\n        result = result .. char\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwoil6j4.lua:25:\
    \ attempt to concatenate a nil value (global 'char')\nstack traceback:\n\t/tmp/tmpkwoil6j4.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpkwoil6j4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                result\
    \ = string.sub(s,i,i)\n            else\n                result = string.upper(string.sub(s,i,i))\
    \ + result\n            end\n        else\n            result = string.upper(string.sub(s,i,i))\
    \ + result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49cdqzob.lua:17:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp49cdqzob.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp49cdqzob.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ \"\" then\n                c = string.upper(c)\n            else\n         \
    \       c = string.lower(c)\n            end\n            result = result .. c\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0k28lwx.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpg0k28lwx.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                local\
    \ temp = string.sub(s,i,i)\n                string.sub(s,i,i) = string.sub(s,i,i)\n\
    \                string.sub(s,i,i) = temp\n            end\n        end\n    end\n\
    \    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpct0o28xf.lua:16: syntax error near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= nil then\n                local lower = string.lower(char)\n            \
    \    local upper = string.upper(char)\n                if lower ~= nil then\n\
    \                    char = lower\n                elseif upper ~= nil then\n\
    \                    char = upper\n                end\n            end\n    \
    \    end\n        result = result .. char\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgryadufl.lua:25:\
    \ attempt to concatenate a nil value (global 'char')\nstack traceback:\n\t/tmp/tmpgryadufl.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpgryadufl.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    local char = string.sub(s,i,i)\n      if string.sub(char,1,1) ~= nil then\n\
    \        char = string.upper(char)\n      else\n        char = string.lower(char)\n\
    \      end\n      result = result .. char\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc96gzgoa.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpc96gzgoa.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n  \
    \    result = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyr4mpzy.lua:25:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpsyr4mpzy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n  local\
    \ result = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.match(\"\
    ^[%w]$\", c) then\n      c = string.upper(c)\n    else\n      c = string.lower(c)\n\
    \    end\n    result = result .. c\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplttq73ki.lua:27:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmplttq73ki.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            if string.sub(s,i,i) ~= \"\" then\n                if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then\n                    result = string.sub(s,i,i)..result\n\
    \                else\n                    result = string.upper(string.sub(s,i,i))..result\n\
    \                end\n            else\n                result = string.upper(string.sub(s,i,i))..result\n\
    \            end\n        else\n            result = string.upper(string.sub(s,i,i))..result\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkqwky1y.lua:33:\
    \ expected: \"aSdF\"\nactual: \"FDSA\"\nstack traceback:\n\t/tmp/tmpmkqwky1y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ str = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            str = str .. string.sub(s,i,i)\n        else\n            str = str\
    \ .. string.sub(s,i,i)\n        end\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8b8dbps.lua:25:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpu8b8dbps.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ s = string.lower(s)\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\
    \" then\n            local c = string.sub(s,i,i)\n            local t = string.sub(s,1,i)\n\
    \            local u = string.sub(s,i+1,#s)\n            local r = string.sub(t,1,1)\n\
    \            local f = string.sub(t,1,2)\n            local g = string.sub(t,1,3)\n\
    \            local h = string.sub(t,1,4)\n            local j = string.sub(t,1,5)\n\
    \            local k = string.sub(t,1,6)\n            local l = string.sub(t,1,7)\n\
    \            local m = string.sub(t,1,8)\n            local n = string.sub(t,1,9)\n\
    \            local o = string.sub(t,1,10)\n            local p = string.sub(t,1,11)\n\
    \            local q = string.sub(t,1,12)\n            local r = string.sub(t,1,13)\n\
    \            local s = string.sub(t,1,14)\n            local t = string.sub(t,1,15)\n\
    \            local u = string.sub(t,1,16)\n            local v = string.sub(t,1,17)\n\
    \            local w = string.sub(t,1,18)\n            local x = string.sub(t,1,19)\n\
    \            local y = string.sub(t,1,20)\n            local z = string.sub(t,1,21)\n\
    \            local A = string.sub(t,1,22)\n            local B = string.sub(t,1,23)\n\
    \            local C = string.sub(t,1,24)\n            local D = string.sub(t,1,25)\n\
    \            local E = string.sub(t,1,26)\n            local F = string.sub(t,1,27)\n\
    \            local G = string.sub(t,1,28)\n            local H = string.sub(t,1,29)\n\
    \            local I = string.sub(t,1,30)\n            local J = string.sub(t,1,31)\n\
    \            local K = string.sub(t,1,32)\n            local L = string.sub(t,1,33)\n\
    \            local M = string.sub(t,1,34)\n            local N = string.sub(t,1,35)\n\
    \            local O = string.sub(t,1,36)\n            local P = string.sub(t,1,37)\n\
    \            local Q = string.sub(t,1,38)\n            local R = string.sub(t,1,39)\n\
    \            local S = string.sub(t,1,40)\n            local T = string.sub(t,1,41)\n\
    \            local U = string.sub(t,1,42)\n            local V = string.sub(t,1,43)\n\
    \            local W = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_uzie1iq.lua:61: unexpected symbol near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n            i = i - 1\n        else\n            result = result .. string.sub(s,i,i)\n\
    \        end\n    end\n    if result ~= \"\" then\n        result = result ..\
    \ string.sub(s,1,#s)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwdla60g.lua:28:\
    \ expected: \"aSdF\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgwdla60g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- solve(\"1234\") = \"4321\"\n-- solve(\"\
    ab\") = \"AB\"\n-- solve(\"#a@C\") = \"#A@c\"\nlocal function solve(s)\n    local\
    \ result = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n\
    \            local c = string.sub(s,i,i)\n            if string.sub(c,1,1) ~=\
    \ nil then\n                c = string.upper(c)\n            else\n          \
    \      c = string.lower(c)\n            end\n            result = result .. c\n\
    \        else\n            result = result .. string.sub(s,i,i)\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8smy926.lua:31:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp_8smy926.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
