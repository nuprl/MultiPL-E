language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h711ust.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9h711ust.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0rh7zb.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdw0rh7zb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybx75p6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpybx75p6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmz5yq0x.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqmz5yq0x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  return ab > 0 and bc > 0 and\
    \ cb > 0 and ab + bc + cb == ab * bc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaimraeo7.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaimraeo7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tj9uhqy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7tj9uhqy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq + bc_sq - cb_sq\n\
    \t\n\tif det < 0 then\n\t\treturn false\n\telse\n\t\tlocal inv_det = 1 / det\n\
    \t\tlocal inv_ab = ab * inv_det\n\t\tlocal inv_bc = bc * inv_det\n\t\tlocal inv_cb\
    \ = cb * inv_det\n\t\t\n\t\treturn (inv_ab + inv_bc + inv_cb) == 0 and\n\t\t\t\
    (inv_ab - inv_bc + inv_cb) == 0 and\n\t\t\t(inv_ab - inv_bc - inv_cb) == 0\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd9lg32a.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmd9lg32a.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7d33g25.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd7d33g25.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4fgbyqt.lua:108: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp42arsnle.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbom6jj_.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqbom6jj_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ a - b\n    local bc = b - c\n    local cb = c - b\n    local ab_sq = ab * ab\n\
    \    local bc_sq = bc * bc\n    local cb_sq = cb * cb\n    local det = ab_sq *\
    \ bc_sq - bc_sq * cb_sq\n    return det >= 0 and det <= ab_sq * cb_sq\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsea7asty.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsea7asty.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab*bc*ac > 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlt_bv5n.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzlt_bv5n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac\
    \ = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc =\
    \ ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\tlocal ab_ac = ab\
    \ * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc\
    \ * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab *\
    \ bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\
    \tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\t\
    local bc_ab = bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal\
    \ ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab\
    \ = bc * ab\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc =\
    \ bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab =\
    \ ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc\
    \ * ac\n\tlocal bc_ab = bc * ab\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab *\
    \ ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac = ac *\
    \ ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\
    \t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4c1p9fju.lua:81: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  local cd\
    \ = math.abs(d - c)\n  \n  return ab > bc and ab > ad and ab > cd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpohwyhsit.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpohwyhsit.lua:11: in local 'candidate'\n\t/tmp/tmpohwyhsit.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 then\n    return b == 0 and c == 0 or b\
    \ == 0 and c == 0 or b == 0 and c == 0 or b == 0 and c == 0\n  elseif b == 0 then\n\
    \    return a == 0 and c == 0 or a == 0 and c == 0 or a == 0 and c == 0 or a ==\
    \ 0 and c == 0\n  elseif c == 0 then\n    return a == 0 and b == 0 or a == 0 and\
    \ b == 0 or a == 0 and b == 0 or a == 0 and b == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpil9s7p3k.lua:34: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
